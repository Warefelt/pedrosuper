
./Debug/SuperPedro.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fd1f 	bl	20000a46 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#include "delays.h"

void delay_250ns(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL=0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD=1;//168/4-1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2201      	movs	r2, #1
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL=0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	*STK_CTRL=0;
20000058:	4b0c      	ldr	r3, [pc, #48]	; (2000008c <delay_500ns+0x38>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
    *STK_LOAD=1;//168/2-1;
2000005e:	4b0c      	ldr	r3, [pc, #48]	; (20000090 <delay_500ns+0x3c>)
20000060:	2201      	movs	r2, #1
20000062:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_500ns+0x40>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
2000006a:	4b08      	ldr	r3, [pc, #32]	; (2000008c <delay_500ns+0x38>)
2000006c:	2205      	movs	r2, #5
2000006e:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	4b06      	ldr	r3, [pc, #24]	; (2000008c <delay_500ns+0x38>)
20000074:	681a      	ldr	r2, [r3, #0]
20000076:	2380      	movs	r3, #128	; 0x80
20000078:	025b      	lsls	r3, r3, #9
2000007a:	4013      	ands	r3, r2
2000007c:	d0f9      	beq.n	20000072 <delay_500ns+0x1e>
    *STK_CTRL=0;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <delay_500ns+0x38>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	bd80      	pop	{r7, pc}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	e000e010 	and	lr, r0, r0, lsl r0
20000090:	e000e014 	and	lr, r0, r4, lsl r0
20000094:	e000e018 	and	lr, r0, r8, lsl r0

20000098 <delaymicros>:

void delaymicros(int micros){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
    #ifdef NONSIMULATOR
		//micros *= 1000;
	#endif
    for(int i = 0; i < micros * 2; i++){
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delaymicros+0x18>
        delay_500ns();
200000a6:	f7ff ffd5 	bl	20000054 <delay_500ns>
    for(int i = 0; i < micros * 2; i++){
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	005b      	lsls	r3, r3, #1
200000b4:	68fa      	ldr	r2, [r7, #12]
200000b6:	429a      	cmp	r2, r3
200000b8:	dbf5      	blt.n	200000a6 <delaymicros+0xe>
    }
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b004      	add	sp, #16
200000c0:	bd80      	pop	{r7, pc}

200000c2 <delaymillis>:


void delaymillis(int millis){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	6078      	str	r0, [r7, #4]
	delaymicros(millis);// * 1000);
200000ca:	687b      	ldr	r3, [r7, #4]
200000cc:	0018      	movs	r0, r3
200000ce:	f7ff ffe3 	bl	20000098 <delaymicros>
}
200000d2:	46c0      	nop			; (mov r8, r8)
200000d4:	46bd      	mov	sp, r7
200000d6:	b002      	add	sp, #8
200000d8:	bd80      	pop	{r7, pc}
200000da:	46c0      	nop			; (mov r8, r8)

200000dc <move>:
	0, 
    /*komplettera?*/
};


void move(){								//Kollar knapptryck och uppdaterar alla Pedros värden
200000dc:	b580      	push	{r7, lr}
200000de:	af00      	add	r7, sp, #0
    
    checkKeys();
200000e0:	f000 f83a 	bl	20000158 <checkKeys>

    applyPhysics();
200000e4:	f000 f898 	bl	20000218 <applyPhysics>
    
    if(Pedro.velx > 0){
200000e8:	4b1a      	ldr	r3, [pc, #104]	; (20000154 <move+0x78>)
200000ea:	691b      	ldr	r3, [r3, #16]
200000ec:	2b00      	cmp	r3, #0
200000ee:	dd11      	ble.n	20000114 <move+0x38>
        shiftLeft();
200000f0:	f000 ffde 	bl	200010b0 <shiftLeft>
        delaymillis(200/Pedro.velx);
200000f4:	4b17      	ldr	r3, [pc, #92]	; (20000154 <move+0x78>)
200000f6:	691b      	ldr	r3, [r3, #16]
200000f8:	0019      	movs	r1, r3
200000fa:	20c8      	movs	r0, #200	; 0xc8
200000fc:	f001 f89e 	bl	2000123c <__divsi3>
20000100:	0003      	movs	r3, r0
20000102:	0018      	movs	r0, r3
20000104:	f7ff ffdd 	bl	200000c2 <delaymillis>
        Pedro.distance++;
20000108:	4b12      	ldr	r3, [pc, #72]	; (20000154 <move+0x78>)
2000010a:	6a1b      	ldr	r3, [r3, #32]
2000010c:	1c5a      	adds	r2, r3, #1
2000010e:	4b11      	ldr	r3, [pc, #68]	; (20000154 <move+0x78>)
20000110:	621a      	str	r2, [r3, #32]
20000112:	e015      	b.n	20000140 <move+0x64>
    }
    else if(Pedro.velx < 0){
20000114:	4b0f      	ldr	r3, [pc, #60]	; (20000154 <move+0x78>)
20000116:	691b      	ldr	r3, [r3, #16]
20000118:	2b00      	cmp	r3, #0
2000011a:	da11      	bge.n	20000140 <move+0x64>
        shiftRight();
2000011c:	f000 ff8e 	bl	2000103c <shiftRight>
        delaymillis(200/(-Pedro.velx));
20000120:	4b0c      	ldr	r3, [pc, #48]	; (20000154 <move+0x78>)
20000122:	691b      	ldr	r3, [r3, #16]
20000124:	425b      	negs	r3, r3
20000126:	0019      	movs	r1, r3
20000128:	20c8      	movs	r0, #200	; 0xc8
2000012a:	f001 f887 	bl	2000123c <__divsi3>
2000012e:	0003      	movs	r3, r0
20000130:	0018      	movs	r0, r3
20000132:	f7ff ffc6 	bl	200000c2 <delaymillis>
        Pedro.distance++;
20000136:	4b07      	ldr	r3, [pc, #28]	; (20000154 <move+0x78>)
20000138:	6a1b      	ldr	r3, [r3, #32]
2000013a:	1c5a      	adds	r2, r3, #1
2000013c:	4b05      	ldr	r3, [pc, #20]	; (20000154 <move+0x78>)
2000013e:	621a      	str	r2, [r3, #32]

    }
    graphic_draw_screen();
20000140:	f000 ff0c 	bl	20000f5c <graphic_draw_screen>
    draw(&Pedro);  //extra args? FLYTTA? han kan ritas ut med resten av skärmen_________________________________________________________________________________* 
20000144:	4b03      	ldr	r3, [pc, #12]	; (20000154 <move+0x78>)
20000146:	0018      	movs	r0, r3
20000148:	f000 f88e 	bl	20000268 <draw>

}
2000014c:	46c0      	nop			; (mov r8, r8)
2000014e:	46bd      	mov	sp, r7
20000150:	bd80      	pop	{r7, pc}
20000152:	46c0      	nop			; (mov r8, r8)
20000154:	20001d6c 	andcs	r1, r0, ip, ror #26

20000158 <checkKeys>:

//check keypresses and change pedros properties (acceleration for <- ^ -> and velocity for ^) accordingly
void checkKeys(){
20000158:	b580      	push	{r7, lr}
2000015a:	af00      	add	r7, sp, #0
    if(isRightKey() && !isLeftKey()){     //Kräver importerad keyb
2000015c:	f000 fb37 	bl	200007ce <isRightKey>
20000160:	1e03      	subs	r3, r0, #0
20000162:	d00f      	beq.n	20000184 <checkKeys+0x2c>
20000164:	f000 fb49 	bl	200007fa <isLeftKey>
20000168:	1e03      	subs	r3, r0, #0
2000016a:	d10b      	bne.n	20000184 <checkKeys+0x2c>
		if(Pedro.velx < MAX_VELX){
2000016c:	4b28      	ldr	r3, [pc, #160]	; (20000210 <checkKeys+0xb8>)
2000016e:	691b      	ldr	r3, [r3, #16]
20000170:	2b03      	cmp	r3, #3
20000172:	dc03      	bgt.n	2000017c <checkKeys+0x24>
			Pedro.accx = ACCX;     //accelerate right
20000174:	4b26      	ldr	r3, [pc, #152]	; (20000210 <checkKeys+0xb8>)
20000176:	2201      	movs	r2, #1
20000178:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
2000017a:	e02d      	b.n	200001d8 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
2000017c:	4b24      	ldr	r3, [pc, #144]	; (20000210 <checkKeys+0xb8>)
2000017e:	2200      	movs	r2, #0
20000180:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
20000182:	e029      	b.n	200001d8 <checkKeys+0x80>
		}
	}
	else if(!isRightKey() && isLeftKey())
20000184:	f000 fb23 	bl	200007ce <isRightKey>
20000188:	1e03      	subs	r3, r0, #0
2000018a:	d110      	bne.n	200001ae <checkKeys+0x56>
2000018c:	f000 fb35 	bl	200007fa <isLeftKey>
20000190:	1e03      	subs	r3, r0, #0
20000192:	d00c      	beq.n	200001ae <checkKeys+0x56>
	{
		if(Pedro.velx > -MAX_VELX){
20000194:	4b1e      	ldr	r3, [pc, #120]	; (20000210 <checkKeys+0xb8>)
20000196:	691b      	ldr	r3, [r3, #16]
20000198:	3303      	adds	r3, #3
2000019a:	db04      	blt.n	200001a6 <checkKeys+0x4e>
			Pedro.accx = -ACCX;    //accelerate left
2000019c:	4b1c      	ldr	r3, [pc, #112]	; (20000210 <checkKeys+0xb8>)
2000019e:	2201      	movs	r2, #1
200001a0:	4252      	negs	r2, r2
200001a2:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200001a4:	e018      	b.n	200001d8 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
200001a6:	4b1a      	ldr	r3, [pc, #104]	; (20000210 <checkKeys+0xb8>)
200001a8:	2200      	movs	r2, #0
200001aa:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200001ac:	e014      	b.n	200001d8 <checkKeys+0x80>
		}
	}
	else                            //decrease velocity
	{
		Pedro.accx = 0;
200001ae:	4b18      	ldr	r3, [pc, #96]	; (20000210 <checkKeys+0xb8>)
200001b0:	2200      	movs	r2, #0
200001b2:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > 0){
200001b4:	4b16      	ldr	r3, [pc, #88]	; (20000210 <checkKeys+0xb8>)
200001b6:	691b      	ldr	r3, [r3, #16]
200001b8:	2b00      	cmp	r3, #0
200001ba:	dd04      	ble.n	200001c6 <checkKeys+0x6e>
			Pedro.velx -= ACCX;
200001bc:	4b14      	ldr	r3, [pc, #80]	; (20000210 <checkKeys+0xb8>)
200001be:	691b      	ldr	r3, [r3, #16]
200001c0:	1e5a      	subs	r2, r3, #1
200001c2:	4b13      	ldr	r3, [pc, #76]	; (20000210 <checkKeys+0xb8>)
200001c4:	611a      	str	r2, [r3, #16]
		}
		if(Pedro.velx < 0){
200001c6:	4b12      	ldr	r3, [pc, #72]	; (20000210 <checkKeys+0xb8>)
200001c8:	691b      	ldr	r3, [r3, #16]
200001ca:	2b00      	cmp	r3, #0
200001cc:	da04      	bge.n	200001d8 <checkKeys+0x80>
			Pedro.velx += ACCX;
200001ce:	4b10      	ldr	r3, [pc, #64]	; (20000210 <checkKeys+0xb8>)
200001d0:	691b      	ldr	r3, [r3, #16]
200001d2:	1c5a      	adds	r2, r3, #1
200001d4:	4b0e      	ldr	r3, [pc, #56]	; (20000210 <checkKeys+0xb8>)
200001d6:	611a      	str	r2, [r3, #16]
		}
	}
    
    if(isJumping()){
200001d8:	f000 f83a 	bl	20000250 <isJumping>
200001dc:	1e03      	subs	r3, r0, #0
200001de:	d003      	beq.n	200001e8 <checkKeys+0x90>
        Pedro.accy = 1;
200001e0:	4b0b      	ldr	r3, [pc, #44]	; (20000210 <checkKeys+0xb8>)
200001e2:	2201      	movs	r2, #1
200001e4:	61da      	str	r2, [r3, #28]
            Pedro.accy = 1;
            Pedro.sprite = pedro_jump;
		}
	}
    
}
200001e6:	e00f      	b.n	20000208 <checkKeys+0xb0>
        Pedro.accy = 0;
200001e8:	4b09      	ldr	r3, [pc, #36]	; (20000210 <checkKeys+0xb8>)
200001ea:	2200      	movs	r2, #0
200001ec:	61da      	str	r2, [r3, #28]
        if(isUpKey()){
200001ee:	f000 fad5 	bl	2000079c <isUpKey>
200001f2:	1e03      	subs	r3, r0, #0
200001f4:	d008      	beq.n	20000208 <checkKeys+0xb0>
			Pedro.vely = VELY;    //jump
200001f6:	4b06      	ldr	r3, [pc, #24]	; (20000210 <checkKeys+0xb8>)
200001f8:	2205      	movs	r2, #5
200001fa:	615a      	str	r2, [r3, #20]
            Pedro.accy = 1;
200001fc:	4b04      	ldr	r3, [pc, #16]	; (20000210 <checkKeys+0xb8>)
200001fe:	2201      	movs	r2, #1
20000200:	61da      	str	r2, [r3, #28]
            Pedro.sprite = pedro_jump;
20000202:	4b03      	ldr	r3, [pc, #12]	; (20000210 <checkKeys+0xb8>)
20000204:	4a03      	ldr	r2, [pc, #12]	; (20000214 <checkKeys+0xbc>)
20000206:	625a      	str	r2, [r3, #36]	; 0x24
}
20000208:	46c0      	nop			; (mov r8, r8)
2000020a:	46bd      	mov	sp, r7
2000020c:	bd80      	pop	{r7, pc}
2000020e:	46c0      	nop			; (mov r8, r8)
20000210:	20001d6c 	andcs	r1, r0, ip, ror #26
20000214:	20001c7c 	andcs	r1, r0, ip, ror ip

20000218 <applyPhysics>:

void applyPhysics(){
20000218:	b580      	push	{r7, lr}
2000021a:	af00      	add	r7, sp, #0
    //physics
    Pedro.velx += Pedro.accx;
2000021c:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <applyPhysics+0x34>)
2000021e:	691a      	ldr	r2, [r3, #16]
20000220:	4b0a      	ldr	r3, [pc, #40]	; (2000024c <applyPhysics+0x34>)
20000222:	699b      	ldr	r3, [r3, #24]
20000224:	18d2      	adds	r2, r2, r3
20000226:	4b09      	ldr	r3, [pc, #36]	; (2000024c <applyPhysics+0x34>)
20000228:	611a      	str	r2, [r3, #16]
    
    Pedro.vely += Pedro.accy;
2000022a:	4b08      	ldr	r3, [pc, #32]	; (2000024c <applyPhysics+0x34>)
2000022c:	695a      	ldr	r2, [r3, #20]
2000022e:	4b07      	ldr	r3, [pc, #28]	; (2000024c <applyPhysics+0x34>)
20000230:	69db      	ldr	r3, [r3, #28]
20000232:	18d2      	adds	r2, r2, r3
20000234:	4b05      	ldr	r3, [pc, #20]	; (2000024c <applyPhysics+0x34>)
20000236:	615a      	str	r2, [r3, #20]
	Pedro.posy += Pedro.vely;
20000238:	4b04      	ldr	r3, [pc, #16]	; (2000024c <applyPhysics+0x34>)
2000023a:	68da      	ldr	r2, [r3, #12]
2000023c:	4b03      	ldr	r3, [pc, #12]	; (2000024c <applyPhysics+0x34>)
2000023e:	695b      	ldr	r3, [r3, #20]
20000240:	18d2      	adds	r2, r2, r3
20000242:	4b02      	ldr	r3, [pc, #8]	; (2000024c <applyPhysics+0x34>)
20000244:	60da      	str	r2, [r3, #12]
    
}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	46bd      	mov	sp, r7
2000024a:	bd80      	pop	{r7, pc}
2000024c:	20001d6c 	andcs	r1, r0, ip, ror #26

20000250 <isJumping>:

char isJumping(){
20000250:	b580      	push	{r7, lr}
20000252:	af00      	add	r7, sp, #0
    return Pedro.posy < 0;       //groundlvl+pedroheight
20000254:	4b03      	ldr	r3, [pc, #12]	; (20000264 <isJumping+0x14>)
20000256:	68db      	ldr	r3, [r3, #12]
20000258:	0fdb      	lsrs	r3, r3, #31
2000025a:	b2db      	uxtb	r3, r3
}
2000025c:	0018      	movs	r0, r3
2000025e:	46bd      	mov	sp, r7
20000260:	bd80      	pop	{r7, pc}
20000262:	46c0      	nop			; (mov r8, r8)
20000264:	20001d6c 	andcs	r1, r0, ip, ror #26

20000268 <draw>:


void draw(POBJECT object){
20000268:	b580      	push	{r7, lr}
2000026a:	b08a      	sub	sp, #40	; 0x28
2000026c:	af00      	add	r7, sp, #0
2000026e:	6078      	str	r0, [r7, #4]
	 unsigned char i, j;
	 unsigned char* man = object->sprite;
20000270:	687b      	ldr	r3, [r7, #4]
20000272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000274:	623b      	str	r3, [r7, #32]
	 int shift = object->posy%8;
20000276:	687b      	ldr	r3, [r7, #4]
20000278:	68db      	ldr	r3, [r3, #12]
2000027a:	4a88      	ldr	r2, [pc, #544]	; (2000049c <draw+0x234>)
2000027c:	4013      	ands	r3, r2
2000027e:	d504      	bpl.n	2000028a <draw+0x22>
20000280:	3b01      	subs	r3, #1
20000282:	2208      	movs	r2, #8
20000284:	4252      	negs	r2, r2
20000286:	4313      	orrs	r3, r2
20000288:	3301      	adds	r3, #1
2000028a:	61fb      	str	r3, [r7, #28]
        for(j = 0; j < ((object->height)/8)+1; j++) {
2000028c:	2326      	movs	r3, #38	; 0x26
2000028e:	18fb      	adds	r3, r7, r3
20000290:	2200      	movs	r2, #0
20000292:	701a      	strb	r2, [r3, #0]
20000294:	e0f0      	b.n	20000478 <draw+0x210>
			if(!(object->posy+object->height > 64 && j < ((64-object->posy)/8))){						//If page is over his bottom position
20000296:	687b      	ldr	r3, [r7, #4]
20000298:	68da      	ldr	r2, [r3, #12]
2000029a:	687b      	ldr	r3, [r7, #4]
2000029c:	681b      	ldr	r3, [r3, #0]
2000029e:	18d3      	adds	r3, r2, r3
200002a0:	2b40      	cmp	r3, #64	; 0x40
200002a2:	dd0c      	ble.n	200002be <draw+0x56>
200002a4:	2326      	movs	r3, #38	; 0x26
200002a6:	18fb      	adds	r3, r7, r3
200002a8:	781a      	ldrb	r2, [r3, #0]
200002aa:	687b      	ldr	r3, [r7, #4]
200002ac:	68db      	ldr	r3, [r3, #12]
200002ae:	2140      	movs	r1, #64	; 0x40
200002b0:	1acb      	subs	r3, r1, r3
200002b2:	d500      	bpl.n	200002b6 <draw+0x4e>
200002b4:	3307      	adds	r3, #7
200002b6:	10db      	asrs	r3, r3, #3
200002b8:	429a      	cmp	r2, r3
200002ba:	da00      	bge.n	200002be <draw+0x56>
200002bc:	e0d6      	b.n	2000046c <draw+0x204>
				graphic_write_command(LCD_SET_PAGE | (((63-object->posy-object->height)/8)+j), B_CS1);
200002be:	687b      	ldr	r3, [r7, #4]
200002c0:	68db      	ldr	r3, [r3, #12]
200002c2:	223f      	movs	r2, #63	; 0x3f
200002c4:	1ad2      	subs	r2, r2, r3
200002c6:	687b      	ldr	r3, [r7, #4]
200002c8:	681b      	ldr	r3, [r3, #0]
200002ca:	1ad3      	subs	r3, r2, r3
200002cc:	d500      	bpl.n	200002d0 <draw+0x68>
200002ce:	3307      	adds	r3, #7
200002d0:	10db      	asrs	r3, r3, #3
200002d2:	b2da      	uxtb	r2, r3
200002d4:	2326      	movs	r3, #38	; 0x26
200002d6:	18fb      	adds	r3, r7, r3
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	18d3      	adds	r3, r2, r3
200002dc:	b2db      	uxtb	r3, r3
200002de:	b25b      	sxtb	r3, r3
200002e0:	2248      	movs	r2, #72	; 0x48
200002e2:	4252      	negs	r2, r2
200002e4:	4313      	orrs	r3, r2
200002e6:	b25b      	sxtb	r3, r3
200002e8:	b2db      	uxtb	r3, r3
200002ea:	2108      	movs	r1, #8
200002ec:	0018      	movs	r0, r3
200002ee:	f000 fd27 	bl	20000d40 <graphic_write_command>
				graphic_write_command(LCD_SET_ADD | object->posx, B_CS1);
200002f2:	687b      	ldr	r3, [r7, #4]
200002f4:	689b      	ldr	r3, [r3, #8]
200002f6:	b25b      	sxtb	r3, r3
200002f8:	2240      	movs	r2, #64	; 0x40
200002fa:	4313      	orrs	r3, r2
200002fc:	b25b      	sxtb	r3, r3
200002fe:	b2db      	uxtb	r3, r3
20000300:	2108      	movs	r1, #8
20000302:	0018      	movs	r0, r3
20000304:	f000 fd1c 	bl	20000d40 <graphic_write_command>
				for(i = 0; i < object->width; i++) {
20000308:	2327      	movs	r3, #39	; 0x27
2000030a:	18fb      	adds	r3, r7, r3
2000030c:	2200      	movs	r2, #0
2000030e:	701a      	strb	r2, [r3, #0]
20000310:	e0a4      	b.n	2000045c <draw+0x1f4>
					if(j == 0){
20000312:	2326      	movs	r3, #38	; 0x26
20000314:	18fb      	adds	r3, r7, r3
20000316:	781b      	ldrb	r3, [r3, #0]
20000318:	2b00      	cmp	r3, #0
2000031a:	d121      	bne.n	20000360 <draw+0xf8>
						unsigned char* adress = (man+(j*object->width)+i);
2000031c:	2326      	movs	r3, #38	; 0x26
2000031e:	18fb      	adds	r3, r7, r3
20000320:	781a      	ldrb	r2, [r3, #0]
20000322:	687b      	ldr	r3, [r7, #4]
20000324:	685b      	ldr	r3, [r3, #4]
20000326:	4353      	muls	r3, r2
20000328:	001a      	movs	r2, r3
2000032a:	2327      	movs	r3, #39	; 0x27
2000032c:	18fb      	adds	r3, r7, r3
2000032e:	781b      	ldrb	r3, [r3, #0]
20000330:	18d3      	adds	r3, r2, r3
20000332:	6a3a      	ldr	r2, [r7, #32]
20000334:	18d3      	adds	r3, r2, r3
20000336:	613b      	str	r3, [r7, #16]
						unsigned char byte = *adress;
20000338:	200f      	movs	r0, #15
2000033a:	183b      	adds	r3, r7, r0
2000033c:	693a      	ldr	r2, [r7, #16]
2000033e:	7812      	ldrb	r2, [r2, #0]
20000340:	701a      	strb	r2, [r3, #0]
						byte = byte<<(8-shift);
20000342:	183b      	adds	r3, r7, r0
20000344:	781a      	ldrb	r2, [r3, #0]
20000346:	69fb      	ldr	r3, [r7, #28]
20000348:	2108      	movs	r1, #8
2000034a:	1acb      	subs	r3, r1, r3
2000034c:	409a      	lsls	r2, r3
2000034e:	183b      	adds	r3, r7, r0
20000350:	701a      	strb	r2, [r3, #0]
						graphic_write_data(byte, B_CS1);
20000352:	183b      	adds	r3, r7, r0
20000354:	781b      	ldrb	r3, [r3, #0]
20000356:	2108      	movs	r1, #8
20000358:	0018      	movs	r0, r3
2000035a:	f000 fd11 	bl	20000d80 <graphic_write_data>
2000035e:	e077      	b.n	20000450 <draw+0x1e8>
					}
					else{
						unsigned char* adress = (man+((j-1)*object->width)+i);
20000360:	2026      	movs	r0, #38	; 0x26
20000362:	183b      	adds	r3, r7, r0
20000364:	781b      	ldrb	r3, [r3, #0]
20000366:	1e5a      	subs	r2, r3, #1
20000368:	687b      	ldr	r3, [r7, #4]
2000036a:	685b      	ldr	r3, [r3, #4]
2000036c:	4353      	muls	r3, r2
2000036e:	001a      	movs	r2, r3
20000370:	2327      	movs	r3, #39	; 0x27
20000372:	18fb      	adds	r3, r7, r3
20000374:	781b      	ldrb	r3, [r3, #0]
20000376:	18d3      	adds	r3, r2, r3
20000378:	6a3a      	ldr	r2, [r7, #32]
2000037a:	18d3      	adds	r3, r2, r3
2000037c:	61bb      	str	r3, [r7, #24]
						unsigned char byte = *adress;
2000037e:	2125      	movs	r1, #37	; 0x25
20000380:	187b      	adds	r3, r7, r1
20000382:	69ba      	ldr	r2, [r7, #24]
20000384:	7812      	ldrb	r2, [r2, #0]
20000386:	701a      	strb	r2, [r3, #0]
						byte = byte>>(shift);
20000388:	187b      	adds	r3, r7, r1
2000038a:	781a      	ldrb	r2, [r3, #0]
2000038c:	69fb      	ldr	r3, [r7, #28]
2000038e:	411a      	asrs	r2, r3
20000390:	187b      	adds	r3, r7, r1
20000392:	701a      	strb	r2, [r3, #0]
						if(j < (object->height)/8){
20000394:	183b      	adds	r3, r7, r0
20000396:	781a      	ldrb	r2, [r3, #0]
20000398:	687b      	ldr	r3, [r7, #4]
2000039a:	681b      	ldr	r3, [r3, #0]
2000039c:	2b00      	cmp	r3, #0
2000039e:	da00      	bge.n	200003a2 <draw+0x13a>
200003a0:	3307      	adds	r3, #7
200003a2:	10db      	asrs	r3, r3, #3
200003a4:	429a      	cmp	r2, r3
200003a6:	da27      	bge.n	200003f8 <draw+0x190>
							unsigned char tillagg = *(adress+object->width);
200003a8:	687b      	ldr	r3, [r7, #4]
200003aa:	685b      	ldr	r3, [r3, #4]
200003ac:	001a      	movs	r2, r3
200003ae:	69bb      	ldr	r3, [r7, #24]
200003b0:	189a      	adds	r2, r3, r2
200003b2:	2117      	movs	r1, #23
200003b4:	187b      	adds	r3, r7, r1
200003b6:	7812      	ldrb	r2, [r2, #0]
200003b8:	701a      	strb	r2, [r3, #0]
							tillagg &= (0xFF>>(8-shift));		//nollställer överblivna bitar som ej ingår i bildförskjutningen
200003ba:	69fb      	ldr	r3, [r7, #28]
200003bc:	2208      	movs	r2, #8
200003be:	1ad3      	subs	r3, r2, r3
200003c0:	22ff      	movs	r2, #255	; 0xff
200003c2:	411a      	asrs	r2, r3
200003c4:	0013      	movs	r3, r2
200003c6:	b25b      	sxtb	r3, r3
200003c8:	0008      	movs	r0, r1
200003ca:	183a      	adds	r2, r7, r0
200003cc:	7812      	ldrb	r2, [r2, #0]
200003ce:	b252      	sxtb	r2, r2
200003d0:	4013      	ands	r3, r2
200003d2:	b25a      	sxtb	r2, r3
200003d4:	183b      	adds	r3, r7, r0
200003d6:	701a      	strb	r2, [r3, #0]
							tillagg = tillagg<<(8-shift);
200003d8:	183b      	adds	r3, r7, r0
200003da:	781a      	ldrb	r2, [r3, #0]
200003dc:	69fb      	ldr	r3, [r7, #28]
200003de:	2108      	movs	r1, #8
200003e0:	1acb      	subs	r3, r1, r3
200003e2:	409a      	lsls	r2, r3
200003e4:	183b      	adds	r3, r7, r0
200003e6:	701a      	strb	r2, [r3, #0]
							byte |= tillagg;
200003e8:	2225      	movs	r2, #37	; 0x25
200003ea:	18bb      	adds	r3, r7, r2
200003ec:	18b9      	adds	r1, r7, r2
200003ee:	183a      	adds	r2, r7, r0
200003f0:	7809      	ldrb	r1, [r1, #0]
200003f2:	7812      	ldrb	r2, [r2, #0]
200003f4:	430a      	orrs	r2, r1
200003f6:	701a      	strb	r2, [r3, #0]
						}
                        if(j == (object->height)/8){
200003f8:	2326      	movs	r3, #38	; 0x26
200003fa:	18fb      	adds	r3, r7, r3
200003fc:	781a      	ldrb	r2, [r3, #0]
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	681b      	ldr	r3, [r3, #0]
20000402:	2b00      	cmp	r3, #0
20000404:	da00      	bge.n	20000408 <draw+0x1a0>
20000406:	3307      	adds	r3, #7
20000408:	10db      	asrs	r3, r3, #3
2000040a:	429a      	cmp	r2, r3
2000040c:	d119      	bne.n	20000442 <draw+0x1da>
                            byte |= backBuffer[64+(object->posx)+i][7-(object->posy)/8];
2000040e:	687b      	ldr	r3, [r7, #4]
20000410:	689b      	ldr	r3, [r3, #8]
20000412:	3340      	adds	r3, #64	; 0x40
20000414:	001a      	movs	r2, r3
20000416:	2327      	movs	r3, #39	; 0x27
20000418:	18fb      	adds	r3, r7, r3
2000041a:	781b      	ldrb	r3, [r3, #0]
2000041c:	18d2      	adds	r2, r2, r3
2000041e:	687b      	ldr	r3, [r7, #4]
20000420:	68db      	ldr	r3, [r3, #12]
20000422:	2b00      	cmp	r3, #0
20000424:	da00      	bge.n	20000428 <draw+0x1c0>
20000426:	3307      	adds	r3, #7
20000428:	10db      	asrs	r3, r3, #3
2000042a:	425b      	negs	r3, r3
2000042c:	3307      	adds	r3, #7
2000042e:	491c      	ldr	r1, [pc, #112]	; (200004a0 <draw+0x238>)
20000430:	00d2      	lsls	r2, r2, #3
20000432:	188a      	adds	r2, r1, r2
20000434:	5cd1      	ldrb	r1, [r2, r3]
20000436:	2225      	movs	r2, #37	; 0x25
20000438:	18bb      	adds	r3, r7, r2
2000043a:	18ba      	adds	r2, r7, r2
2000043c:	7812      	ldrb	r2, [r2, #0]
2000043e:	430a      	orrs	r2, r1
20000440:	701a      	strb	r2, [r3, #0]
                        }
                            graphic_write_data(byte, B_CS1);
20000442:	2325      	movs	r3, #37	; 0x25
20000444:	18fb      	adds	r3, r7, r3
20000446:	781b      	ldrb	r3, [r3, #0]
20000448:	2108      	movs	r1, #8
2000044a:	0018      	movs	r0, r3
2000044c:	f000 fc98 	bl	20000d80 <graphic_write_data>
				for(i = 0; i < object->width; i++) {
20000450:	2127      	movs	r1, #39	; 0x27
20000452:	187b      	adds	r3, r7, r1
20000454:	781a      	ldrb	r2, [r3, #0]
20000456:	187b      	adds	r3, r7, r1
20000458:	3201      	adds	r2, #1
2000045a:	701a      	strb	r2, [r3, #0]
2000045c:	2327      	movs	r3, #39	; 0x27
2000045e:	18fb      	adds	r3, r7, r3
20000460:	781a      	ldrb	r2, [r3, #0]
20000462:	687b      	ldr	r3, [r7, #4]
20000464:	685b      	ldr	r3, [r3, #4]
20000466:	429a      	cmp	r2, r3
20000468:	da00      	bge.n	2000046c <draw+0x204>
2000046a:	e752      	b.n	20000312 <draw+0xaa>
        for(j = 0; j < ((object->height)/8)+1; j++) {
2000046c:	2126      	movs	r1, #38	; 0x26
2000046e:	187b      	adds	r3, r7, r1
20000470:	781a      	ldrb	r2, [r3, #0]
20000472:	187b      	adds	r3, r7, r1
20000474:	3201      	adds	r2, #1
20000476:	701a      	strb	r2, [r3, #0]
20000478:	2326      	movs	r3, #38	; 0x26
2000047a:	18fb      	adds	r3, r7, r3
2000047c:	781a      	ldrb	r2, [r3, #0]
2000047e:	687b      	ldr	r3, [r7, #4]
20000480:	681b      	ldr	r3, [r3, #0]
20000482:	2b00      	cmp	r3, #0
20000484:	da00      	bge.n	20000488 <draw+0x220>
20000486:	3307      	adds	r3, #7
20000488:	10db      	asrs	r3, r3, #3
2000048a:	3301      	adds	r3, #1
2000048c:	429a      	cmp	r2, r3
2000048e:	da00      	bge.n	20000492 <draw+0x22a>
20000490:	e701      	b.n	20000296 <draw+0x2e>
					}
				}
			}
        }
}
20000492:	46c0      	nop			; (mov r8, r8)
20000494:	46bd      	mov	sp, r7
20000496:	b00a      	add	sp, #40	; 0x28
20000498:	bd80      	pop	{r7, pc}
2000049a:	46c0      	nop			; (mov r8, r8)
2000049c:	80000007 	andhi	r0, r0, r7
200004a0:	2000142c 	andcs	r1, r0, ip, lsr #8

200004a4 <touchesPepper>:

char touchesPepper(){
200004a4:	b580      	push	{r7, lr}
200004a6:	b084      	sub	sp, #16
200004a8:	af00      	add	r7, sp, #0
    //kolla nedre hörnen (om Pedro bredare än 16px även i mitten) först, om pixeln är 1 -> Pedro.touches = 1 innan
    //jfr pedrobyte & backbufferbyte
	
	unsigned int pepperStripe = 0;
200004aa:	2300      	movs	r3, #0
200004ac:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
200004ae:	2300      	movs	r3, #0
200004b0:	60bb      	str	r3, [r7, #8]
200004b2:	e044      	b.n	2000053e <touchesPepper+0x9a>
		char part = backBuffer[64+(Pedro.posx)+i][7-(Pedro.posy)/8];
200004b4:	4b2b      	ldr	r3, [pc, #172]	; (20000564 <touchesPepper+0xc0>)
200004b6:	689b      	ldr	r3, [r3, #8]
200004b8:	3340      	adds	r3, #64	; 0x40
200004ba:	001a      	movs	r2, r3
200004bc:	68bb      	ldr	r3, [r7, #8]
200004be:	18d1      	adds	r1, r2, r3
200004c0:	4b28      	ldr	r3, [pc, #160]	; (20000564 <touchesPepper+0xc0>)
200004c2:	68db      	ldr	r3, [r3, #12]
200004c4:	2b00      	cmp	r3, #0
200004c6:	da00      	bge.n	200004ca <touchesPepper+0x26>
200004c8:	3307      	adds	r3, #7
200004ca:	10db      	asrs	r3, r3, #3
200004cc:	425b      	negs	r3, r3
200004ce:	1dda      	adds	r2, r3, #7
200004d0:	1cfb      	adds	r3, r7, #3
200004d2:	4825      	ldr	r0, [pc, #148]	; (20000568 <touchesPepper+0xc4>)
200004d4:	00c9      	lsls	r1, r1, #3
200004d6:	1841      	adds	r1, r0, r1
200004d8:	5c8a      	ldrb	r2, [r1, r2]
200004da:	701a      	strb	r2, [r3, #0]
		char mask = 1<<(7-(Pedro.posy%8));
200004dc:	4b21      	ldr	r3, [pc, #132]	; (20000564 <touchesPepper+0xc0>)
200004de:	68db      	ldr	r3, [r3, #12]
200004e0:	4a22      	ldr	r2, [pc, #136]	; (2000056c <touchesPepper+0xc8>)
200004e2:	4013      	ands	r3, r2
200004e4:	d504      	bpl.n	200004f0 <touchesPepper+0x4c>
200004e6:	3b01      	subs	r3, #1
200004e8:	2208      	movs	r2, #8
200004ea:	4252      	negs	r2, r2
200004ec:	4313      	orrs	r3, r2
200004ee:	3301      	adds	r3, #1
200004f0:	001a      	movs	r2, r3
200004f2:	2307      	movs	r3, #7
200004f4:	1a9b      	subs	r3, r3, r2
200004f6:	2201      	movs	r2, #1
200004f8:	409a      	lsls	r2, r3
200004fa:	1cbb      	adds	r3, r7, #2
200004fc:	701a      	strb	r2, [r3, #0]
		part &= mask;
200004fe:	1cfb      	adds	r3, r7, #3
20000500:	1cfa      	adds	r2, r7, #3
20000502:	1cb9      	adds	r1, r7, #2
20000504:	7812      	ldrb	r2, [r2, #0]
20000506:	7809      	ldrb	r1, [r1, #0]
20000508:	400a      	ands	r2, r1
2000050a:	701a      	strb	r2, [r3, #0]
		pepperStripe |= (part<<(24-i+(Pedro.posy%8)));
2000050c:	1cfb      	adds	r3, r7, #3
2000050e:	781a      	ldrb	r2, [r3, #0]
20000510:	68bb      	ldr	r3, [r7, #8]
20000512:	2118      	movs	r1, #24
20000514:	1ac9      	subs	r1, r1, r3
20000516:	4b13      	ldr	r3, [pc, #76]	; (20000564 <touchesPepper+0xc0>)
20000518:	68db      	ldr	r3, [r3, #12]
2000051a:	4814      	ldr	r0, [pc, #80]	; (2000056c <touchesPepper+0xc8>)
2000051c:	4003      	ands	r3, r0
2000051e:	d504      	bpl.n	2000052a <touchesPepper+0x86>
20000520:	3b01      	subs	r3, #1
20000522:	2008      	movs	r0, #8
20000524:	4240      	negs	r0, r0
20000526:	4303      	orrs	r3, r0
20000528:	3301      	adds	r3, #1
2000052a:	18cb      	adds	r3, r1, r3
2000052c:	409a      	lsls	r2, r3
2000052e:	0013      	movs	r3, r2
20000530:	001a      	movs	r2, r3
20000532:	68fb      	ldr	r3, [r7, #12]
20000534:	4313      	orrs	r3, r2
20000536:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
20000538:	68bb      	ldr	r3, [r7, #8]
2000053a:	3301      	adds	r3, #1
2000053c:	60bb      	str	r3, [r7, #8]
2000053e:	68bb      	ldr	r3, [r7, #8]
20000540:	2b13      	cmp	r3, #19
20000542:	ddb7      	ble.n	200004b4 <touchesPepper+0x10>
	}	
	int bottomRow = getBottomRow(0);
20000544:	2000      	movs	r0, #0
20000546:	f000 f813 	bl	20000570 <getBottomRow>
2000054a:	0003      	movs	r3, r0
2000054c:	607b      	str	r3, [r7, #4]
	if(bottomRow & pepperStripe){
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	68fa      	ldr	r2, [r7, #12]
20000552:	4013      	ands	r3, r2
20000554:	d001      	beq.n	2000055a <touchesPepper+0xb6>
		return 1;
20000556:	2301      	movs	r3, #1
20000558:	e000      	b.n	2000055c <touchesPepper+0xb8>
	}
	return 0;
2000055a:	2300      	movs	r3, #0
	
}
2000055c:	0018      	movs	r0, r3
2000055e:	46bd      	mov	sp, r7
20000560:	b004      	add	sp, #16
20000562:	bd80      	pop	{r7, pc}
20000564:	20001d6c 	andcs	r1, r0, ip, ror #26
20000568:	2000142c 	andcs	r1, r0, ip, lsr #8
2000056c:	80000007 	andhi	r0, r0, r7

20000570 <getBottomRow>:

int getBottomRow(int posyposy){
20000570:	b580      	push	{r7, lr}
20000572:	b088      	sub	sp, #32
20000574:	af00      	add	r7, sp, #0
20000576:	6078      	str	r0, [r7, #4]
	unsigned char* man = Pedro.sprite;
20000578:	4b28      	ldr	r3, [pc, #160]	; (2000061c <getBottomRow+0xac>)
2000057a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000057c:	617b      	str	r3, [r7, #20]
	unsigned char i;
	int s = 0;
2000057e:	2300      	movs	r3, #0
20000580:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
20000582:	231f      	movs	r3, #31
20000584:	18fb      	adds	r3, r7, r3
20000586:	2200      	movs	r2, #0
20000588:	701a      	strb	r2, [r3, #0]
2000058a:	e030      	b.n	200005ee <getBottomRow+0x7e>
		unsigned char take = *(man+(((Pedro.height)/8)-1)*(Pedro.width)+i);
2000058c:	4b23      	ldr	r3, [pc, #140]	; (2000061c <getBottomRow+0xac>)
2000058e:	681b      	ldr	r3, [r3, #0]
20000590:	2b00      	cmp	r3, #0
20000592:	da00      	bge.n	20000596 <getBottomRow+0x26>
20000594:	3307      	adds	r3, #7
20000596:	10db      	asrs	r3, r3, #3
20000598:	1e5a      	subs	r2, r3, #1
2000059a:	4b20      	ldr	r3, [pc, #128]	; (2000061c <getBottomRow+0xac>)
2000059c:	685b      	ldr	r3, [r3, #4]
2000059e:	4353      	muls	r3, r2
200005a0:	001a      	movs	r2, r3
200005a2:	211f      	movs	r1, #31
200005a4:	187b      	adds	r3, r7, r1
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	18d3      	adds	r3, r2, r3
200005aa:	697a      	ldr	r2, [r7, #20]
200005ac:	18d2      	adds	r2, r2, r3
200005ae:	2013      	movs	r0, #19
200005b0:	183b      	adds	r3, r7, r0
200005b2:	7812      	ldrb	r2, [r2, #0]
200005b4:	701a      	strb	r2, [r3, #0]
		int part = (int)take;
200005b6:	183b      	adds	r3, r7, r0
200005b8:	781b      	ldrb	r3, [r3, #0]
200005ba:	60fb      	str	r3, [r7, #12]
		part &= (1<<(7-posyposy));
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	2207      	movs	r2, #7
200005c0:	1ad3      	subs	r3, r2, r3
200005c2:	2201      	movs	r2, #1
200005c4:	409a      	lsls	r2, r3
200005c6:	68fb      	ldr	r3, [r7, #12]
200005c8:	4013      	ands	r3, r2
200005ca:	60fb      	str	r3, [r7, #12]
		s |= part<<(24-i+posyposy);
200005cc:	187b      	adds	r3, r7, r1
200005ce:	781b      	ldrb	r3, [r3, #0]
200005d0:	2218      	movs	r2, #24
200005d2:	1ad2      	subs	r2, r2, r3
200005d4:	687b      	ldr	r3, [r7, #4]
200005d6:	18d3      	adds	r3, r2, r3
200005d8:	68fa      	ldr	r2, [r7, #12]
200005da:	409a      	lsls	r2, r3
200005dc:	0013      	movs	r3, r2
200005de:	69ba      	ldr	r2, [r7, #24]
200005e0:	4313      	orrs	r3, r2
200005e2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
200005e4:	187b      	adds	r3, r7, r1
200005e6:	781a      	ldrb	r2, [r3, #0]
200005e8:	187b      	adds	r3, r7, r1
200005ea:	3201      	adds	r2, #1
200005ec:	701a      	strb	r2, [r3, #0]
200005ee:	231f      	movs	r3, #31
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	781a      	ldrb	r2, [r3, #0]
200005f4:	4b09      	ldr	r3, [pc, #36]	; (2000061c <getBottomRow+0xac>)
200005f6:	685b      	ldr	r3, [r3, #4]
200005f8:	429a      	cmp	r2, r3
200005fa:	dbc7      	blt.n	2000058c <getBottomRow+0x1c>
	}
	if((s & 0x03FFFFFF) == 0){
200005fc:	69bb      	ldr	r3, [r7, #24]
200005fe:	019b      	lsls	r3, r3, #6
20000600:	099b      	lsrs	r3, r3, #6
20000602:	d106      	bne.n	20000612 <getBottomRow+0xa2>
		return getBottomRow((posyposy+1));
20000604:	687b      	ldr	r3, [r7, #4]
20000606:	3301      	adds	r3, #1
20000608:	0018      	movs	r0, r3
2000060a:	f7ff ffb1 	bl	20000570 <getBottomRow>
2000060e:	0003      	movs	r3, r0
20000610:	e000      	b.n	20000614 <getBottomRow+0xa4>
	}
	return s;
20000612:	69bb      	ldr	r3, [r7, #24]
}
20000614:	0018      	movs	r0, r3
20000616:	46bd      	mov	sp, r7
20000618:	b008      	add	sp, #32
2000061a:	bd80      	pop	{r7, pc}
2000061c:	20001d6c 	andcs	r1, r0, ip, ror #26

20000620 <getDistance>:

int getDistance(){
20000620:	b580      	push	{r7, lr}
20000622:	af00      	add	r7, sp, #0
    return Pedro.distance;
20000624:	4b02      	ldr	r3, [pc, #8]	; (20000630 <getDistance+0x10>)
20000626:	6a1b      	ldr	r3, [r3, #32]
}
20000628:	0018      	movs	r0, r3
2000062a:	46bd      	mov	sp, r7
2000062c:	bd80      	pop	{r7, pc}
2000062e:	46c0      	nop			; (mov r8, r8)
20000630:	20001d6c 	andcs	r1, r0, ip, ror #26

20000634 <getVelx>:
int getVelx(){
20000634:	b580      	push	{r7, lr}
20000636:	af00      	add	r7, sp, #0
    return Pedro.velx;
20000638:	4b02      	ldr	r3, [pc, #8]	; (20000644 <getVelx+0x10>)
2000063a:	691b      	ldr	r3, [r3, #16]
}
2000063c:	0018      	movs	r0, r3
2000063e:	46bd      	mov	sp, r7
20000640:	bd80      	pop	{r7, pc}
20000642:	46c0      	nop			; (mov r8, r8)
20000644:	20001d6c 	andcs	r1, r0, ip, ror #26

20000648 <seedRng>:
#include "randomNum.h"

//typedef uint32_t rngword_t;

void seedRng(rngword_t* state, uint32_t seed) {
20000648:	b580      	push	{r7, lr}
2000064a:	b084      	sub	sp, #16
2000064c:	af00      	add	r7, sp, #0
2000064e:	6078      	str	r0, [r7, #4]
20000650:	6039      	str	r1, [r7, #0]
	*state = seed;
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	683a      	ldr	r2, [r7, #0]
20000656:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
20000658:	2300      	movs	r3, #0
2000065a:	60fb      	str	r3, [r7, #12]
2000065c:	e006      	b.n	2000066c <seedRng+0x24>
		nextRnd(state);
2000065e:	687b      	ldr	r3, [r7, #4]
20000660:	0018      	movs	r0, r3
20000662:	f000 f80a 	bl	2000067a <nextRnd>
	for(int i = 0; i < 10; i++) {
20000666:	68fb      	ldr	r3, [r7, #12]
20000668:	3301      	adds	r3, #1
2000066a:	60fb      	str	r3, [r7, #12]
2000066c:	68fb      	ldr	r3, [r7, #12]
2000066e:	2b09      	cmp	r3, #9
20000670:	ddf5      	ble.n	2000065e <seedRng+0x16>
	}
}
20000672:	46c0      	nop			; (mov r8, r8)
20000674:	46bd      	mov	sp, r7
20000676:	b004      	add	sp, #16
20000678:	bd80      	pop	{r7, pc}

2000067a <nextRnd>:

rngword_t nextRnd(rngword_t* state) {
2000067a:	b580      	push	{r7, lr}
2000067c:	b084      	sub	sp, #16
2000067e:	af00      	add	r7, sp, #0
20000680:	6078      	str	r0, [r7, #4]
	*state = *state * 0xDEADBEAD + 0x1;
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	6819      	ldr	r1, [r3, #0]
20000686:	000b      	movs	r3, r1
20000688:	00db      	lsls	r3, r3, #3
2000068a:	1a5b      	subs	r3, r3, r1
2000068c:	011a      	lsls	r2, r3, #4
2000068e:	1ad2      	subs	r2, r2, r3
20000690:	0092      	lsls	r2, r2, #2
20000692:	1a52      	subs	r2, r2, r1
20000694:	0113      	lsls	r3, r2, #4
20000696:	1a9b      	subs	r3, r3, r2
20000698:	00db      	lsls	r3, r3, #3
2000069a:	1a5b      	subs	r3, r3, r1
2000069c:	015b      	lsls	r3, r3, #5
2000069e:	1a5b      	subs	r3, r3, r1
200006a0:	00da      	lsls	r2, r3, #3
200006a2:	189b      	adds	r3, r3, r2
200006a4:	01da      	lsls	r2, r3, #7
200006a6:	189b      	adds	r3, r3, r2
200006a8:	005b      	lsls	r3, r3, #1
200006aa:	1a5b      	subs	r3, r3, r1
200006ac:	1c5a      	adds	r2, r3, #1
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	601a      	str	r2, [r3, #0]
	rngword_t x = *state;
200006b2:	687b      	ldr	r3, [r7, #4]
200006b4:	681b      	ldr	r3, [r3, #0]
200006b6:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
200006b8:	2300      	movs	r3, #0
200006ba:	60bb      	str	r3, [r7, #8]
200006bc:	e00e      	b.n	200006dc <nextRnd+0x62>
		x ^= (x >> 9) ^ (x >> 17);
200006be:	68fb      	ldr	r3, [r7, #12]
200006c0:	0a5a      	lsrs	r2, r3, #9
200006c2:	68fb      	ldr	r3, [r7, #12]
200006c4:	0c5b      	lsrs	r3, r3, #17
200006c6:	4053      	eors	r3, r2
200006c8:	68fa      	ldr	r2, [r7, #12]
200006ca:	4053      	eors	r3, r2
200006cc:	60fb      	str	r3, [r7, #12]
		x *= 23456789;
200006ce:	68fb      	ldr	r3, [r7, #12]
200006d0:	4a06      	ldr	r2, [pc, #24]	; (200006ec <nextRnd+0x72>)
200006d2:	4353      	muls	r3, r2
200006d4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
200006d6:	68bb      	ldr	r3, [r7, #8]
200006d8:	3301      	adds	r3, #1
200006da:	60bb      	str	r3, [r7, #8]
200006dc:	68bb      	ldr	r3, [r7, #8]
200006de:	2b02      	cmp	r3, #2
200006e0:	dded      	ble.n	200006be <nextRnd+0x44>
	}
	return x;
200006e2:	68fb      	ldr	r3, [r7, #12]
200006e4:	0018      	movs	r0, r3
200006e6:	46bd      	mov	sp, r7
200006e8:	b004      	add	sp, #16
200006ea:	bd80      	pop	{r7, pc}
200006ec:	0165ec15 	cmneq	r5, r5, lsl ip

200006f0 <kbdActivate>:
#include "keyfuncs.h"
#include "gpio.h"

void kbdActivate(unsigned int row){
200006f0:	b580      	push	{r7, lr}
200006f2:	b082      	sub	sp, #8
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
    switch(row){
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	2b02      	cmp	r3, #2
200006fc:	d00c      	beq.n	20000718 <kbdActivate+0x28>
200006fe:	d802      	bhi.n	20000706 <kbdActivate+0x16>
20000700:	2b01      	cmp	r3, #1
20000702:	d005      	beq.n	20000710 <kbdActivate+0x20>
20000704:	e014      	b.n	20000730 <kbdActivate+0x40>
20000706:	2b03      	cmp	r3, #3
20000708:	d00a      	beq.n	20000720 <kbdActivate+0x30>
2000070a:	2b04      	cmp	r3, #4
2000070c:	d00c      	beq.n	20000728 <kbdActivate+0x38>
2000070e:	e00f      	b.n	20000730 <kbdActivate+0x40>
        case 1: 
            GPIO_D->odrHigh = 0x10;
20000710:	4b0b      	ldr	r3, [pc, #44]	; (20000740 <kbdActivate+0x50>)
20000712:	2210      	movs	r2, #16
20000714:	755a      	strb	r2, [r3, #21]
            break;
20000716:	e00e      	b.n	20000736 <kbdActivate+0x46>
        case 2: 
            GPIO_D->odrHigh = 0x20;
20000718:	4b09      	ldr	r3, [pc, #36]	; (20000740 <kbdActivate+0x50>)
2000071a:	2220      	movs	r2, #32
2000071c:	755a      	strb	r2, [r3, #21]
            break;
2000071e:	e00a      	b.n	20000736 <kbdActivate+0x46>
        case 3: 
            GPIO_D->odrHigh = 0x40;
20000720:	4b07      	ldr	r3, [pc, #28]	; (20000740 <kbdActivate+0x50>)
20000722:	2240      	movs	r2, #64	; 0x40
20000724:	755a      	strb	r2, [r3, #21]
            break;
20000726:	e006      	b.n	20000736 <kbdActivate+0x46>
        case 4: 
            GPIO_D->odrHigh = 0x80;
20000728:	4b05      	ldr	r3, [pc, #20]	; (20000740 <kbdActivate+0x50>)
2000072a:	2280      	movs	r2, #128	; 0x80
2000072c:	755a      	strb	r2, [r3, #21]
            break;
2000072e:	e002      	b.n	20000736 <kbdActivate+0x46>
        default: 
            GPIO_D->odrHigh = 0;
20000730:	4b03      	ldr	r3, [pc, #12]	; (20000740 <kbdActivate+0x50>)
20000732:	2200      	movs	r2, #0
20000734:	755a      	strb	r2, [r3, #21]
    }
}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	46bd      	mov	sp, r7
2000073a:	b002      	add	sp, #8
2000073c:	bd80      	pop	{r7, pc}
2000073e:	46c0      	nop			; (mov r8, r8)
20000740:	40020c00 	andmi	r0, r2, r0, lsl #24

20000744 <kbdGetCol>:

int kbdGetCol(){                    
20000744:	b580      	push	{r7, lr}
20000746:	af00      	add	r7, sp, #0
    if(GPIO_D->idrHigh & 8) 
20000748:	4b13      	ldr	r3, [pc, #76]	; (20000798 <kbdGetCol+0x54>)
2000074a:	7c5b      	ldrb	r3, [r3, #17]
2000074c:	b2db      	uxtb	r3, r3
2000074e:	001a      	movs	r2, r3
20000750:	2308      	movs	r3, #8
20000752:	4013      	ands	r3, r2
20000754:	d001      	beq.n	2000075a <kbdGetCol+0x16>
        return 4;
20000756:	2304      	movs	r3, #4
20000758:	e01b      	b.n	20000792 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 4) 
2000075a:	4b0f      	ldr	r3, [pc, #60]	; (20000798 <kbdGetCol+0x54>)
2000075c:	7c5b      	ldrb	r3, [r3, #17]
2000075e:	b2db      	uxtb	r3, r3
20000760:	001a      	movs	r2, r3
20000762:	2304      	movs	r3, #4
20000764:	4013      	ands	r3, r2
20000766:	d001      	beq.n	2000076c <kbdGetCol+0x28>
        return 3;
20000768:	2303      	movs	r3, #3
2000076a:	e012      	b.n	20000792 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 2) 
2000076c:	4b0a      	ldr	r3, [pc, #40]	; (20000798 <kbdGetCol+0x54>)
2000076e:	7c5b      	ldrb	r3, [r3, #17]
20000770:	b2db      	uxtb	r3, r3
20000772:	001a      	movs	r2, r3
20000774:	2302      	movs	r3, #2
20000776:	4013      	ands	r3, r2
20000778:	d001      	beq.n	2000077e <kbdGetCol+0x3a>
        return 2;
2000077a:	2302      	movs	r3, #2
2000077c:	e009      	b.n	20000792 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 1) 
2000077e:	4b06      	ldr	r3, [pc, #24]	; (20000798 <kbdGetCol+0x54>)
20000780:	7c5b      	ldrb	r3, [r3, #17]
20000782:	b2db      	uxtb	r3, r3
20000784:	001a      	movs	r2, r3
20000786:	2301      	movs	r3, #1
20000788:	4013      	ands	r3, r2
2000078a:	d001      	beq.n	20000790 <kbdGetCol+0x4c>
        return 1;
2000078c:	2301      	movs	r3, #1
2000078e:	e000      	b.n	20000792 <kbdGetCol+0x4e>
    return 0;
20000790:	2300      	movs	r3, #0
}
20000792:	0018      	movs	r0, r3
20000794:	46bd      	mov	sp, r7
20000796:	bd80      	pop	{r7, pc}
20000798:	40020c00 	andmi	r0, r2, r0, lsl #24

2000079c <isUpKey>:


char isUpKey(){
2000079c:	b580      	push	{r7, lr}
2000079e:	af00      	add	r7, sp, #0
	kbdActivate(3);	//row3
200007a0:	2003      	movs	r0, #3
200007a2:	f7ff ffa5 	bl	200006f0 <kbdActivate>
	kbdActivate(4);         //power off kbd-rows
200007a6:	2004      	movs	r0, #4
200007a8:	f7ff ffa2 	bl	200006f0 <kbdActivate>
	if(kbdGetCol() == 3){
200007ac:	f7ff ffca 	bl	20000744 <kbdGetCol>
200007b0:	0003      	movs	r3, r0
200007b2:	2b03      	cmp	r3, #3
200007b4:	d104      	bne.n	200007c0 <isUpKey+0x24>
		kbdActivate(0);         //power off kbd-rows
200007b6:	2000      	movs	r0, #0
200007b8:	f7ff ff9a 	bl	200006f0 <kbdActivate>
		return 1;
200007bc:	2301      	movs	r3, #1
200007be:	e003      	b.n	200007c8 <isUpKey+0x2c>
	}
    kbdActivate(0);         //power off kbd-rows
200007c0:	2000      	movs	r0, #0
200007c2:	f7ff ff95 	bl	200006f0 <kbdActivate>
	return 0;
200007c6:	2300      	movs	r3, #0
}
200007c8:	0018      	movs	r0, r3
200007ca:	46bd      	mov	sp, r7
200007cc:	bd80      	pop	{r7, pc}

200007ce <isRightKey>:
char isRightKey(){
200007ce:	b580      	push	{r7, lr}
200007d0:	af00      	add	r7, sp, #0
	kbdActivate(4);
200007d2:	2004      	movs	r0, #4
200007d4:	f7ff ff8c 	bl	200006f0 <kbdActivate>
	if(kbdGetCol() == 4){
200007d8:	f7ff ffb4 	bl	20000744 <kbdGetCol>
200007dc:	0003      	movs	r3, r0
200007de:	2b04      	cmp	r3, #4
200007e0:	d104      	bne.n	200007ec <isRightKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
200007e2:	2000      	movs	r0, #0
200007e4:	f7ff ff84 	bl	200006f0 <kbdActivate>
		return 1;
200007e8:	2301      	movs	r3, #1
200007ea:	e003      	b.n	200007f4 <isRightKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
200007ec:	2000      	movs	r0, #0
200007ee:	f7ff ff7f 	bl	200006f0 <kbdActivate>
    return 0;
200007f2:	2300      	movs	r3, #0
	
}
200007f4:	0018      	movs	r0, r3
200007f6:	46bd      	mov	sp, r7
200007f8:	bd80      	pop	{r7, pc}

200007fa <isLeftKey>:
char isLeftKey(){
200007fa:	b580      	push	{r7, lr}
200007fc:	af00      	add	r7, sp, #0
	kbdActivate(4);
200007fe:	2004      	movs	r0, #4
20000800:	f7ff ff76 	bl	200006f0 <kbdActivate>
	if(kbdGetCol() == 2){
20000804:	f7ff ff9e 	bl	20000744 <kbdGetCol>
20000808:	0003      	movs	r3, r0
2000080a:	2b02      	cmp	r3, #2
2000080c:	d104      	bne.n	20000818 <isLeftKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
2000080e:	2000      	movs	r0, #0
20000810:	f7ff ff6e 	bl	200006f0 <kbdActivate>
		return 1;
20000814:	2301      	movs	r3, #1
20000816:	e003      	b.n	20000820 <isLeftKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000818:	2000      	movs	r0, #0
2000081a:	f7ff ff69 	bl	200006f0 <kbdActivate>
	return 0;
2000081e:	2300      	movs	r3, #0
	
}
20000820:	0018      	movs	r0, r3
20000822:	46bd      	mov	sp, r7
20000824:	bd80      	pop	{r7, pc}
20000826:	46c0      	nop			; (mov r8, r8)

20000828 <gpioInit>:
uint32_t seed;

//#define USBDM
#define NONSIMULATOR

void gpioInit(){
20000828:	b580      	push	{r7, lr}
2000082a:	af00      	add	r7, sp, #0
	
    GPIO_E->moder=0x55555555;		//------------------------------------------------------------------------------------------------
2000082c:	4b10      	ldr	r3, [pc, #64]	; (20000870 <gpioInit+0x48>)
2000082e:	4a11      	ldr	r2, [pc, #68]	; (20000874 <gpioInit+0x4c>)
20000830:	601a      	str	r2, [r3, #0]
    GPIO_D->moder = 0x55005555;
20000832:	4b11      	ldr	r3, [pc, #68]	; (20000878 <gpioInit+0x50>)
20000834:	4a11      	ldr	r2, [pc, #68]	; (2000087c <gpioInit+0x54>)
20000836:	601a      	str	r2, [r3, #0]
    
	GPIO_D->otyper &= 0xFFFF00FF;
20000838:	4b0f      	ldr	r3, [pc, #60]	; (20000878 <gpioInit+0x50>)
2000083a:	685a      	ldr	r2, [r3, #4]
2000083c:	4b0e      	ldr	r3, [pc, #56]	; (20000878 <gpioInit+0x50>)
2000083e:	4910      	ldr	r1, [pc, #64]	; (20000880 <gpioInit+0x58>)
20000840:	400a      	ands	r2, r1
20000842:	605a      	str	r2, [r3, #4]
	GPIO_D->otyper |= 0x00000F00;
20000844:	4b0c      	ldr	r3, [pc, #48]	; (20000878 <gpioInit+0x50>)
20000846:	685a      	ldr	r2, [r3, #4]
20000848:	4b0b      	ldr	r3, [pc, #44]	; (20000878 <gpioInit+0x50>)
2000084a:	21f0      	movs	r1, #240	; 0xf0
2000084c:	0109      	lsls	r1, r1, #4
2000084e:	430a      	orrs	r2, r1
20000850:	605a      	str	r2, [r3, #4]
	// Sätter pinnar 4-0 till "pull-down"
	GPIO_D->pupdr &= 0x0000FFFF;
20000852:	4b09      	ldr	r3, [pc, #36]	; (20000878 <gpioInit+0x50>)
20000854:	68da      	ldr	r2, [r3, #12]
20000856:	4b08      	ldr	r3, [pc, #32]	; (20000878 <gpioInit+0x50>)
20000858:	0412      	lsls	r2, r2, #16
2000085a:	0c12      	lsrs	r2, r2, #16
2000085c:	60da      	str	r2, [r3, #12]
	GPIO_D->pupdr |= 0xFFAA0000;
2000085e:	4b06      	ldr	r3, [pc, #24]	; (20000878 <gpioInit+0x50>)
20000860:	68da      	ldr	r2, [r3, #12]
20000862:	4b05      	ldr	r3, [pc, #20]	; (20000878 <gpioInit+0x50>)
20000864:	4907      	ldr	r1, [pc, #28]	; (20000884 <gpioInit+0x5c>)
20000866:	430a      	orrs	r2, r1
20000868:	60da      	str	r2, [r3, #12]

}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	46bd      	mov	sp, r7
2000086e:	bd80      	pop	{r7, pc}
20000870:	40021000 	andmi	r1, r2, r0
20000874:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000878:	40020c00 	andmi	r0, r2, r0, lsl #24
2000087c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000880:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000884:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

20000888 <init>:



void init(){
20000888:	b580      	push	{r7, lr}
2000088a:	af00      	add	r7, sp, #0
    #ifdef USBDM
		*((unsigned long*)0x40023830)=0x18;
    #endif
	
    gpioInit();
2000088c:	f7ff ffcc 	bl	20000828 <gpioInit>
    
    graphic_initialize();
20000890:	f000 f957 	bl	20000b42 <graphic_initialize>
    //ascii_init();     //todo?
    
    seed = 1337;
20000894:	4b08      	ldr	r3, [pc, #32]	; (200008b8 <init+0x30>)
20000896:	4a09      	ldr	r2, [pc, #36]	; (200008bc <init+0x34>)
20000898:	601a      	str	r2, [r3, #0]
    seedRng(&seed, seed);
2000089a:	4b07      	ldr	r3, [pc, #28]	; (200008b8 <init+0x30>)
2000089c:	681a      	ldr	r2, [r3, #0]
2000089e:	4b06      	ldr	r3, [pc, #24]	; (200008b8 <init+0x30>)
200008a0:	0011      	movs	r1, r2
200008a2:	0018      	movs	r0, r3
200008a4:	f7ff fed0 	bl	20000648 <seedRng>

	clear_backBuffer();
200008a8:	f000 faac 	bl	20000e04 <clear_backBuffer>
	graphic_draw_screen();
200008ac:	f000 fb56 	bl	20000f5c <graphic_draw_screen>

}
200008b0:	46c0      	nop			; (mov r8, r8)
200008b2:	46bd      	mov	sp, r7
200008b4:	bd80      	pop	{r7, pc}
200008b6:	46c0      	nop			; (mov r8, r8)
200008b8:	20001428 	andcs	r1, r0, r8, lsr #8
200008bc:	00000539 	andeq	r0, r0, r9, lsr r5

200008c0 <loop>:





void loop(){
200008c0:	b580      	push	{r7, lr}
200008c2:	af00      	add	r7, sp, #0
    //drawGround(64, 191);
	
	while(1){
		//
		//ändra Pedros properties
		if(getDistance() % 32 == 0 && getVelx < 0){
200008c4:	f7ff feac 	bl	20000620 <getDistance>
			loadNewLevelSegmentLeft();
		}
		if(getDistance() % 32 == 0 && getVelx >= 0){
200008c8:	f7ff feaa 	bl	20000620 <getDistance>
200008cc:	0003      	movs	r3, r0
200008ce:	001a      	movs	r2, r3
200008d0:	231f      	movs	r3, #31
200008d2:	4013      	ands	r3, r2
200008d4:	d101      	bne.n	200008da <loop+0x1a>
			loadNewLevelSegmentRight();
200008d6:	f000 f814 	bl	20000902 <loadNewLevelSegmentRight>
		}
		
		move();			//flyttar hela skärmen så det ser ut som att Pedro rör sig
200008da:	f7ff fbff 	bl	200000dc <move>
//        char* buffer;
//        itoa(getDistance(), buffer, 10);
//        stringToAscii();
			
		//win/loss
		if(touchesPepper() == 1){
200008de:	f7ff fde1 	bl	200004a4 <touchesPepper>
200008e2:	0003      	movs	r3, r0
200008e4:	2b01      	cmp	r3, #1
200008e6:	d000      	beq.n	200008ea <loop+0x2a>
		if(getDistance() % 32 == 0 && getVelx < 0){
200008e8:	e7ec      	b.n	200008c4 <loop+0x4>
			break;		//startar om spelet från början
200008ea:	46c0      	nop			; (mov r8, r8)
		/*if(Pedro.distance == ){
			onWin();
		}*/
	}
	
}
200008ec:	46c0      	nop			; (mov r8, r8)
200008ee:	46bd      	mov	sp, r7
200008f0:	bd80      	pop	{r7, pc}

200008f2 <loadNewLevelSegmentLeft>:



void loadNewLevelSegmentLeft(){
200008f2:	b580      	push	{r7, lr}
200008f4:	af00      	add	r7, sp, #0
    loadLvl(0);  //64px wide
200008f6:	2000      	movs	r0, #0
200008f8:	f000 f868 	bl	200009cc <loadLvl>
}
200008fc:	46c0      	nop			; (mov r8, r8)
200008fe:	46bd      	mov	sp, r7
20000900:	bd80      	pop	{r7, pc}

20000902 <loadNewLevelSegmentRight>:

void loadNewLevelSegmentRight(){
20000902:	b580      	push	{r7, lr}
20000904:	af00      	add	r7, sp, #0
    loadLvl(192);
20000906:	20c0      	movs	r0, #192	; 0xc0
20000908:	f000 f860 	bl	200009cc <loadLvl>
}
2000090c:	46c0      	nop			; (mov r8, r8)
2000090e:	46bd      	mov	sp, r7
20000910:	bd80      	pop	{r7, pc}

20000912 <loadPepperAt>:


//bör fungera
void loadPepperAt(int addr, int page){
20000912:	b590      	push	{r4, r7, lr}
20000914:	b08d      	sub	sp, #52	; 0x34
20000916:	af00      	add	r7, sp, #0
20000918:	6078      	str	r0, [r7, #4]
2000091a:	6039      	str	r1, [r7, #0]
		char b[][2]= 
2000091c:	2308      	movs	r3, #8
2000091e:	18fb      	adds	r3, r7, r3
20000920:	4a16      	ldr	r2, [pc, #88]	; (2000097c <loadPepperAt+0x6a>)
20000922:	ca13      	ldmia	r2!, {r0, r1, r4}
20000924:	c313      	stmia	r3!, {r0, r1, r4}
20000926:	ca13      	ldmia	r2!, {r0, r1, r4}
20000928:	c313      	stmia	r3!, {r0, r1, r4}
2000092a:	ca03      	ldmia	r2!, {r0, r1}
2000092c:	c303      	stmia	r3!, {r0, r1}
				{0b00000100, 0b01100000},
				{0b00001100, 0b00110000},
				{0b11111000, 0b00011111}
				};
     
		for(int j = 0; j < 2; j++){
2000092e:	2300      	movs	r3, #0
20000930:	62fb      	str	r3, [r7, #44]	; 0x2c
20000932:	e01c      	b.n	2000096e <loadPepperAt+0x5c>
			for(int i = 0; i < 16; i++){
20000934:	2300      	movs	r3, #0
20000936:	62bb      	str	r3, [r7, #40]	; 0x28
20000938:	e013      	b.n	20000962 <loadPepperAt+0x50>
				byteToBuffer(addr + i, page + j, b[i][j]);
2000093a:	687a      	ldr	r2, [r7, #4]
2000093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000093e:	18d0      	adds	r0, r2, r3
20000940:	683a      	ldr	r2, [r7, #0]
20000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000944:	18d1      	adds	r1, r2, r3
20000946:	2308      	movs	r3, #8
20000948:	18fa      	adds	r2, r7, r3
2000094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000094c:	005b      	lsls	r3, r3, #1
2000094e:	18d2      	adds	r2, r2, r3
20000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000952:	18d3      	adds	r3, r2, r3
20000954:	781b      	ldrb	r3, [r3, #0]
20000956:	001a      	movs	r2, r3
20000958:	f000 fad2 	bl	20000f00 <byteToBuffer>
			for(int i = 0; i < 16; i++){
2000095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000095e:	3301      	adds	r3, #1
20000960:	62bb      	str	r3, [r7, #40]	; 0x28
20000962:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000964:	2b0f      	cmp	r3, #15
20000966:	dde8      	ble.n	2000093a <loadPepperAt+0x28>
		for(int j = 0; j < 2; j++){
20000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000096a:	3301      	adds	r3, #1
2000096c:	62fb      	str	r3, [r7, #44]	; 0x2c
2000096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000970:	2b01      	cmp	r3, #1
20000972:	dddf      	ble.n	20000934 <loadPepperAt+0x22>
			}
		}
}
20000974:	46c0      	nop			; (mov r8, r8)
20000976:	46bd      	mov	sp, r7
20000978:	b00d      	add	sp, #52	; 0x34
2000097a:	bd90      	pop	{r4, r7, pc}
2000097c:	20001d9c 	mulcs	r0, ip, sp

20000980 <loadPepperStrip>:


//bör fungera
void loadPepperStrip(int start, char type){
20000980:	b580      	push	{r7, lr}
20000982:	b082      	sub	sp, #8
20000984:	af00      	add	r7, sp, #0
20000986:	6078      	str	r0, [r7, #4]
20000988:	000a      	movs	r2, r1
2000098a:	1cfb      	adds	r3, r7, #3
2000098c:	701a      	strb	r2, [r3, #0]
	
	switch(type){
2000098e:	1cfb      	adds	r3, r7, #3
20000990:	781b      	ldrb	r3, [r3, #0]
20000992:	2b5f      	cmp	r3, #95	; 0x5f
20000994:	d015      	beq.n	200009c2 <loadPepperStrip+0x42>
20000996:	2b6f      	cmp	r3, #111	; 0x6f
20000998:	d002      	beq.n	200009a0 <loadPepperStrip+0x20>
2000099a:	2b38      	cmp	r3, #56	; 0x38
2000099c:	d006      	beq.n	200009ac <loadPepperStrip+0x2c>
			loadPepperAt(start, 6);
			loadPepperAt(start, 4);
			break;
			
	}
}
2000099e:	e011      	b.n	200009c4 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	2106      	movs	r1, #6
200009a4:	0018      	movs	r0, r3
200009a6:	f7ff ffb4 	bl	20000912 <loadPepperAt>
			break;
200009aa:	e00b      	b.n	200009c4 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
200009ac:	687b      	ldr	r3, [r7, #4]
200009ae:	2106      	movs	r1, #6
200009b0:	0018      	movs	r0, r3
200009b2:	f7ff ffae 	bl	20000912 <loadPepperAt>
			loadPepperAt(start, 4);
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	2104      	movs	r1, #4
200009ba:	0018      	movs	r0, r3
200009bc:	f7ff ffa9 	bl	20000912 <loadPepperAt>
			break;
200009c0:	e000      	b.n	200009c4 <loadPepperStrip+0x44>
			break;
200009c2:	46c0      	nop			; (mov r8, r8)
}
200009c4:	46c0      	nop			; (mov r8, r8)
200009c6:	46bd      	mov	sp, r7
200009c8:	b002      	add	sp, #8
200009ca:	bd80      	pop	{r7, pc}

200009cc <loadLvl>:


void loadLvl(int start){        //loads a 64px wide levelstrip of new peppers into the backBuffer (starting at start, moving right)
200009cc:	b580      	push	{r7, lr}
200009ce:	b098      	sub	sp, #96	; 0x60
200009d0:	af00      	add	r7, sp, #0
200009d2:	6078      	str	r0, [r7, #4]
	//int seed = getDistance();
    int rand = (nextRnd(&seed) % 19);
200009d4:	4b17      	ldr	r3, [pc, #92]	; (20000a34 <loadLvl+0x68>)
200009d6:	0018      	movs	r0, r3
200009d8:	f7ff fe4f 	bl	2000067a <nextRnd>
200009dc:	0003      	movs	r3, r0
200009de:	2113      	movs	r1, #19
200009e0:	0018      	movs	r0, r3
200009e2:	f000 fc27 	bl	20001234 <__aeabi_uidivmod>
200009e6:	000b      	movs	r3, r1
200009e8:	65bb      	str	r3, [r7, #88]	; 0x58
	//int type = nextRnd() % 20;      // Returns a pseudo-random integer between 0 and 10, några olika varianter 1=____, 2=_oo_, 3=_8__, 4=_o_o mm.
    char PepperStrips[][4] = { "____", "_oo_", "_8__", "_o_o", "o__o", "_o__", "__8_", "_o8_", "__o_", "____", "____", "o___", "___o", "o_o_", "_8o_","_o__","__o_","o___", "___o","____"};
200009ea:	2308      	movs	r3, #8
200009ec:	18fa      	adds	r2, r7, r3
200009ee:	4b12      	ldr	r3, [pc, #72]	; (20000a38 <loadLvl+0x6c>)
200009f0:	0010      	movs	r0, r2
200009f2:	0019      	movs	r1, r3
200009f4:	2350      	movs	r3, #80	; 0x50
200009f6:	001a      	movs	r2, r3
200009f8:	f000 fd0c 	bl	20001414 <memcpy>
	
	
	for(int i = 0; i < 4; i++){
200009fc:	2300      	movs	r3, #0
200009fe:	65fb      	str	r3, [r7, #92]	; 0x5c
20000a00:	e011      	b.n	20000a26 <loadLvl+0x5a>
		loadPepperStrip(start + i*16, PepperStrips[rand][i]);
20000a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000a04:	011a      	lsls	r2, r3, #4
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	18d0      	adds	r0, r2, r3
20000a0a:	2308      	movs	r3, #8
20000a0c:	18fa      	adds	r2, r7, r3
20000a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
20000a10:	009b      	lsls	r3, r3, #2
20000a12:	18d2      	adds	r2, r2, r3
20000a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000a16:	18d3      	adds	r3, r2, r3
20000a18:	781b      	ldrb	r3, [r3, #0]
20000a1a:	0019      	movs	r1, r3
20000a1c:	f7ff ffb0 	bl	20000980 <loadPepperStrip>
	for(int i = 0; i < 4; i++){
20000a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000a22:	3301      	adds	r3, #1
20000a24:	65fb      	str	r3, [r7, #92]	; 0x5c
20000a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000a28:	2b03      	cmp	r3, #3
20000a2a:	ddea      	ble.n	20000a02 <loadLvl+0x36>
	}
	//drawGround(start, start+63);
    
}
20000a2c:	46c0      	nop			; (mov r8, r8)
20000a2e:	46bd      	mov	sp, r7
20000a30:	b018      	add	sp, #96	; 0x60
20000a32:	bd80      	pop	{r7, pc}
20000a34:	20001428 	andcs	r1, r0, r8, lsr #8
20000a38:	20001dbc 			; <UNDEFINED> instruction: 0x20001dbc

20000a3c <onWin>:
    }
}
*/


void onWin(){
20000a3c:	b580      	push	{r7, lr}
20000a3e:	af00      	add	r7, sp, #0
	//ska vi ha med denna?
}
20000a40:	46c0      	nop			; (mov r8, r8)
20000a42:	46bd      	mov	sp, r7
20000a44:	bd80      	pop	{r7, pc}

20000a46 <main>:





void main(void){
20000a46:	b580      	push	{r7, lr}
20000a48:	af00      	add	r7, sp, #0
    init();
20000a4a:	f7ff ff1d 	bl	20000888 <init>
	while(1){
		loop();
20000a4e:	f7ff ff37 	bl	200008c0 <loop>
20000a52:	e7fc      	b.n	20000a4e <main+0x8>

20000a54 <graphic_ctrl_bit_set>:


uint8_t backBuffer[256][8]; // 256 * 64 / 8


void graphic_ctrl_bit_set(unsigned char x){
20000a54:	b580      	push	{r7, lr}
20000a56:	b084      	sub	sp, #16
20000a58:	af00      	add	r7, sp, #0
20000a5a:	0002      	movs	r2, r0
20000a5c:	1dfb      	adds	r3, r7, #7
20000a5e:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000a60:	4a0c      	ldr	r2, [pc, #48]	; (20000a94 <graphic_ctrl_bit_set+0x40>)
20000a62:	200f      	movs	r0, #15
20000a64:	183b      	adds	r3, r7, r0
20000a66:	7d12      	ldrb	r2, [r2, #20]
20000a68:	701a      	strb	r2, [r3, #0]
    c |= x;
20000a6a:	183b      	adds	r3, r7, r0
20000a6c:	1839      	adds	r1, r7, r0
20000a6e:	1dfa      	adds	r2, r7, #7
20000a70:	7809      	ldrb	r1, [r1, #0]
20000a72:	7812      	ldrb	r2, [r2, #0]
20000a74:	430a      	orrs	r2, r1
20000a76:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000a78:	183b      	adds	r3, r7, r0
20000a7a:	183a      	adds	r2, r7, r0
20000a7c:	7812      	ldrb	r2, [r2, #0]
20000a7e:	2104      	movs	r1, #4
20000a80:	438a      	bics	r2, r1
20000a82:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000a84:	4a03      	ldr	r2, [pc, #12]	; (20000a94 <graphic_ctrl_bit_set+0x40>)
20000a86:	183b      	adds	r3, r7, r0
20000a88:	781b      	ldrb	r3, [r3, #0]
20000a8a:	7513      	strb	r3, [r2, #20]
}
20000a8c:	46c0      	nop			; (mov r8, r8)
20000a8e:	46bd      	mov	sp, r7
20000a90:	b004      	add	sp, #16
20000a92:	bd80      	pop	{r7, pc}
20000a94:	40021000 	andmi	r1, r2, r0

20000a98 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x){
20000a98:	b580      	push	{r7, lr}
20000a9a:	b084      	sub	sp, #16
20000a9c:	af00      	add	r7, sp, #0
20000a9e:	0002      	movs	r2, r0
20000aa0:	1dfb      	adds	r3, r7, #7
20000aa2:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000aa4:	4a0f      	ldr	r2, [pc, #60]	; (20000ae4 <graphic_ctrl_bit_clear+0x4c>)
20000aa6:	210f      	movs	r1, #15
20000aa8:	187b      	adds	r3, r7, r1
20000aaa:	7d12      	ldrb	r2, [r2, #20]
20000aac:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000aae:	1dfb      	adds	r3, r7, #7
20000ab0:	781b      	ldrb	r3, [r3, #0]
20000ab2:	b25b      	sxtb	r3, r3
20000ab4:	43db      	mvns	r3, r3
20000ab6:	b25b      	sxtb	r3, r3
20000ab8:	187a      	adds	r2, r7, r1
20000aba:	7812      	ldrb	r2, [r2, #0]
20000abc:	b252      	sxtb	r2, r2
20000abe:	4013      	ands	r3, r2
20000ac0:	b25a      	sxtb	r2, r3
20000ac2:	187b      	adds	r3, r7, r1
20000ac4:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000ac6:	187b      	adds	r3, r7, r1
20000ac8:	0008      	movs	r0, r1
20000aca:	187a      	adds	r2, r7, r1
20000acc:	7812      	ldrb	r2, [r2, #0]
20000ace:	2104      	movs	r1, #4
20000ad0:	438a      	bics	r2, r1
20000ad2:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000ad4:	4a03      	ldr	r2, [pc, #12]	; (20000ae4 <graphic_ctrl_bit_clear+0x4c>)
20000ad6:	183b      	adds	r3, r7, r0
20000ad8:	781b      	ldrb	r3, [r3, #0]
20000ada:	7513      	strb	r3, [r2, #20]
}
20000adc:	46c0      	nop			; (mov r8, r8)
20000ade:	46bd      	mov	sp, r7
20000ae0:	b004      	add	sp, #16
20000ae2:	bd80      	pop	{r7, pc}
20000ae4:	40021000 	andmi	r1, r2, r0

20000ae8 <select_controller>:

static void select_controller(uint8_t controller){  //@param controller - 0/B_CS1/B_CS2/both
20000ae8:	b580      	push	{r7, lr}
20000aea:	b082      	sub	sp, #8
20000aec:	af00      	add	r7, sp, #0
20000aee:	0002      	movs	r2, r0
20000af0:	1dfb      	adds	r3, r7, #7
20000af2:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000af4:	1dfb      	adds	r3, r7, #7
20000af6:	781b      	ldrb	r3, [r3, #0]
20000af8:	2b08      	cmp	r3, #8
20000afa:	d00c      	beq.n	20000b16 <select_controller+0x2e>
20000afc:	dc02      	bgt.n	20000b04 <select_controller+0x1c>
20000afe:	2b00      	cmp	r3, #0
20000b00:	d005      	beq.n	20000b0e <select_controller+0x26>
            break;
        case B_CS1|B_CS2 :  //both
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000b02:	e01a      	b.n	20000b3a <select_controller+0x52>
    switch(controller){
20000b04:	2b10      	cmp	r3, #16
20000b06:	d00d      	beq.n	20000b24 <select_controller+0x3c>
20000b08:	2b18      	cmp	r3, #24
20000b0a:	d012      	beq.n	20000b32 <select_controller+0x4a>
}
20000b0c:	e015      	b.n	20000b3a <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000b0e:	2018      	movs	r0, #24
20000b10:	f7ff ffc2 	bl	20000a98 <graphic_ctrl_bit_clear>
            break;
20000b14:	e011      	b.n	20000b3a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000b16:	2008      	movs	r0, #8
20000b18:	f7ff ff9c 	bl	20000a54 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000b1c:	2010      	movs	r0, #16
20000b1e:	f7ff ffbb 	bl	20000a98 <graphic_ctrl_bit_clear>
            break;
20000b22:	e00a      	b.n	20000b3a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS2);
20000b24:	2010      	movs	r0, #16
20000b26:	f7ff ff95 	bl	20000a54 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS1);
20000b2a:	2008      	movs	r0, #8
20000b2c:	f7ff ffb4 	bl	20000a98 <graphic_ctrl_bit_clear>
            break;
20000b30:	e003      	b.n	20000b3a <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000b32:	2018      	movs	r0, #24
20000b34:	f7ff ff8e 	bl	20000a54 <graphic_ctrl_bit_set>
            break;
20000b38:	46c0      	nop			; (mov r8, r8)
}
20000b3a:	46c0      	nop			; (mov r8, r8)
20000b3c:	46bd      	mov	sp, r7
20000b3e:	b002      	add	sp, #8
20000b40:	bd80      	pop	{r7, pc}

20000b42 <graphic_initialize>:

void graphic_initialize(void) {
20000b42:	b580      	push	{r7, lr}
20000b44:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000b46:	2040      	movs	r0, #64	; 0x40
20000b48:	f7ff ff84 	bl	20000a54 <graphic_ctrl_bit_set>
    delaymicros(10);
20000b4c:	200a      	movs	r0, #10
20000b4e:	f7ff faa3 	bl	20000098 <delaymicros>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000b52:	2078      	movs	r0, #120	; 0x78
20000b54:	f7ff ffa0 	bl	20000a98 <graphic_ctrl_bit_clear>
    delaymillis(30);
20000b58:	201e      	movs	r0, #30
20000b5a:	f7ff fab2 	bl	200000c2 <delaymillis>
    graphic_ctrl_bit_set(B_RST);
20000b5e:	2020      	movs	r0, #32
20000b60:	f7ff ff78 	bl	20000a54 <graphic_ctrl_bit_set>
    delaymillis(100);
20000b64:	2064      	movs	r0, #100	; 0x64
20000b66:	f7ff faac 	bl	200000c2 <delaymillis>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20000b6a:	2118      	movs	r1, #24
20000b6c:	203e      	movs	r0, #62	; 0x3e
20000b6e:	f000 f8e7 	bl	20000d40 <graphic_write_command>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20000b72:	2118      	movs	r1, #24
20000b74:	203e      	movs	r0, #62	; 0x3e
20000b76:	f000 f8e3 	bl	20000d40 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);     //...
20000b7a:	2118      	movs	r1, #24
20000b7c:	203f      	movs	r0, #63	; 0x3f
20000b7e:	f000 f8df 	bl	20000d40 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000b82:	2118      	movs	r1, #24
20000b84:	20c0      	movs	r0, #192	; 0xc0
20000b86:	f000 f8db 	bl	20000d40 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000b8a:	2118      	movs	r1, #24
20000b8c:	2040      	movs	r0, #64	; 0x40
20000b8e:	f000 f8d7 	bl	20000d40 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000b92:	2118      	movs	r1, #24
20000b94:	20b8      	movs	r0, #184	; 0xb8
20000b96:	f000 f8d3 	bl	20000d40 <graphic_write_command>
    select_controller(0);       //choose neither CS1/CS2
20000b9a:	2000      	movs	r0, #0
20000b9c:	f7ff ffa4 	bl	20000ae8 <select_controller>
}
20000ba0:	46c0      	nop			; (mov r8, r8)
20000ba2:	46bd      	mov	sp, r7
20000ba4:	bd80      	pop	{r7, pc}

20000ba6 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
20000ba6:	b580      	push	{r7, lr}
20000ba8:	b082      	sub	sp, #8
20000baa:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000bac:	2040      	movs	r0, #64	; 0x40
20000bae:	f7ff ff73 	bl	20000a98 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000bb2:	4b14      	ldr	r3, [pc, #80]	; (20000c04 <graphic_wait_ready+0x5e>)
20000bb4:	4a14      	ldr	r2, [pc, #80]	; (20000c08 <graphic_wait_ready+0x62>)
20000bb6:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000bb8:	2001      	movs	r0, #1
20000bba:	f7ff ff6d 	bl	20000a98 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000bbe:	2002      	movs	r0, #2
20000bc0:	f7ff ff48 	bl	20000a54 <graphic_ctrl_bit_set>
    delay_500ns();
20000bc4:	f7ff fa46 	bl	20000054 <delay_500ns>
    while(1) {
        graphic_ctrl_bit_set(B_E);
20000bc8:	2040      	movs	r0, #64	; 0x40
20000bca:	f7ff ff43 	bl	20000a54 <graphic_ctrl_bit_set>
        delay_500ns();
20000bce:	f7ff fa41 	bl	20000054 <delay_500ns>
        c = GPIO_E->idrHigh & LCD_BUSY;
20000bd2:	4b0c      	ldr	r3, [pc, #48]	; (20000c04 <graphic_wait_ready+0x5e>)
20000bd4:	7c5b      	ldrb	r3, [r3, #17]
20000bd6:	b2da      	uxtb	r2, r3
20000bd8:	1dfb      	adds	r3, r7, #7
20000bda:	217f      	movs	r1, #127	; 0x7f
20000bdc:	438a      	bics	r2, r1
20000bde:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000be0:	2040      	movs	r0, #64	; 0x40
20000be2:	f7ff ff59 	bl	20000a98 <graphic_ctrl_bit_clear>
        delay_500ns();
20000be6:	f7ff fa35 	bl	20000054 <delay_500ns>
        if( c == 0 ) break;
20000bea:	1dfb      	adds	r3, r7, #7
20000bec:	781b      	ldrb	r3, [r3, #0]
20000bee:	2b00      	cmp	r3, #0
20000bf0:	d000      	beq.n	20000bf4 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
20000bf2:	e7e9      	b.n	20000bc8 <graphic_wait_ready+0x22>
        if( c == 0 ) break;
20000bf4:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000bf6:	4b03      	ldr	r3, [pc, #12]	; (20000c04 <graphic_wait_ready+0x5e>)
20000bf8:	4a04      	ldr	r2, [pc, #16]	; (20000c0c <graphic_wait_ready+0x66>)
20000bfa:	601a      	str	r2, [r3, #0]
}
20000bfc:	46c0      	nop			; (mov r8, r8)
20000bfe:	46bd      	mov	sp, r7
20000c00:	b002      	add	sp, #8
20000c02:	bd80      	pop	{r7, pc}
20000c04:	40021000 	andmi	r1, r2, r0
20000c08:	00005555 	andeq	r5, r0, r5, asr r5
20000c0c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000c10 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000c10:	b580      	push	{r7, lr}
20000c12:	b084      	sub	sp, #16
20000c14:	af00      	add	r7, sp, #0
20000c16:	0002      	movs	r2, r0
20000c18:	1dfb      	adds	r3, r7, #7
20000c1a:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000c1c:	2040      	movs	r0, #64	; 0x40
20000c1e:	f7ff ff3b 	bl	20000a98 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000c22:	4b1c      	ldr	r3, [pc, #112]	; (20000c94 <graphic_read+0x84>)
20000c24:	4a1c      	ldr	r2, [pc, #112]	; (20000c98 <graphic_read+0x88>)
20000c26:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000c28:	2003      	movs	r0, #3
20000c2a:	f7ff ff13 	bl	20000a54 <graphic_ctrl_bit_set>
    select_controller(controller);
20000c2e:	1dfb      	adds	r3, r7, #7
20000c30:	781b      	ldrb	r3, [r3, #0]
20000c32:	0018      	movs	r0, r3
20000c34:	f7ff ff58 	bl	20000ae8 <select_controller>
    delay_500ns();
20000c38:	f7ff fa0c 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000c3c:	2040      	movs	r0, #64	; 0x40
20000c3e:	f7ff ff09 	bl	20000a54 <graphic_ctrl_bit_set>
    delay_500ns();
20000c42:	f7ff fa07 	bl	20000054 <delay_500ns>
    c = GPIO_E->idrHigh;
20000c46:	4a13      	ldr	r2, [pc, #76]	; (20000c94 <graphic_read+0x84>)
20000c48:	230f      	movs	r3, #15
20000c4a:	18fb      	adds	r3, r7, r3
20000c4c:	7c52      	ldrb	r2, [r2, #17]
20000c4e:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000c50:	2040      	movs	r0, #64	; 0x40
20000c52:	f7ff ff21 	bl	20000a98 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000c56:	4b0f      	ldr	r3, [pc, #60]	; (20000c94 <graphic_read+0x84>)
20000c58:	4a10      	ldr	r2, [pc, #64]	; (20000c9c <graphic_read+0x8c>)
20000c5a:	601a      	str	r2, [r3, #0]

    if( controller & B_CS1 ) {
20000c5c:	1dfb      	adds	r3, r7, #7
20000c5e:	781b      	ldrb	r3, [r3, #0]
20000c60:	2208      	movs	r2, #8
20000c62:	4013      	ands	r3, r2
20000c64:	d004      	beq.n	20000c70 <graphic_read+0x60>
        select_controller(B_CS1);
20000c66:	2008      	movs	r0, #8
20000c68:	f7ff ff3e 	bl	20000ae8 <select_controller>
        graphic_wait_ready();
20000c6c:	f7ff ff9b 	bl	20000ba6 <graphic_wait_ready>
    }
    if( controller & B_CS2 ) {
20000c70:	1dfb      	adds	r3, r7, #7
20000c72:	781b      	ldrb	r3, [r3, #0]
20000c74:	2210      	movs	r2, #16
20000c76:	4013      	ands	r3, r2
20000c78:	d004      	beq.n	20000c84 <graphic_read+0x74>
        select_controller(B_CS2);
20000c7a:	2010      	movs	r0, #16
20000c7c:	f7ff ff34 	bl	20000ae8 <select_controller>
        graphic_wait_ready();
20000c80:	f7ff ff91 	bl	20000ba6 <graphic_wait_ready>
    }
    return c;
20000c84:	230f      	movs	r3, #15
20000c86:	18fb      	adds	r3, r7, r3
20000c88:	781b      	ldrb	r3, [r3, #0]
}
20000c8a:	0018      	movs	r0, r3
20000c8c:	46bd      	mov	sp, r7
20000c8e:	b004      	add	sp, #16
20000c90:	bd80      	pop	{r7, pc}
20000c92:	46c0      	nop			; (mov r8, r8)
20000c94:	40021000 	andmi	r1, r2, r0
20000c98:	00005555 	andeq	r5, r0, r5, asr r5
20000c9c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000ca0 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b082      	sub	sp, #8
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	0002      	movs	r2, r0
20000ca8:	1dfb      	adds	r3, r7, #7
20000caa:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000cac:	1dfb      	adds	r3, r7, #7
20000cae:	781b      	ldrb	r3, [r3, #0]
20000cb0:	0018      	movs	r0, r3
20000cb2:	f7ff ffad 	bl	20000c10 <graphic_read>
    return graphic_read(controller);
20000cb6:	1dfb      	adds	r3, r7, #7
20000cb8:	781b      	ldrb	r3, [r3, #0]
20000cba:	0018      	movs	r0, r3
20000cbc:	f7ff ffa8 	bl	20000c10 <graphic_read>
20000cc0:	0003      	movs	r3, r0
}
20000cc2:	0018      	movs	r0, r3
20000cc4:	46bd      	mov	sp, r7
20000cc6:	b002      	add	sp, #8
20000cc8:	bd80      	pop	{r7, pc}

20000cca <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000cca:	b580      	push	{r7, lr}
20000ccc:	b082      	sub	sp, #8
20000cce:	af00      	add	r7, sp, #0
20000cd0:	0002      	movs	r2, r0
20000cd2:	1dfb      	adds	r3, r7, #7
20000cd4:	701a      	strb	r2, [r3, #0]
20000cd6:	1dbb      	adds	r3, r7, #6
20000cd8:	1c0a      	adds	r2, r1, #0
20000cda:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
20000cdc:	4a17      	ldr	r2, [pc, #92]	; (20000d3c <graphic_write+0x72>)
20000cde:	1dfb      	adds	r3, r7, #7
20000ce0:	781b      	ldrb	r3, [r3, #0]
20000ce2:	7553      	strb	r3, [r2, #21]
    delay_500ns();
20000ce4:	f7ff f9b6 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000ce8:	2040      	movs	r0, #64	; 0x40
20000cea:	f7ff feb3 	bl	20000a54 <graphic_ctrl_bit_set>
    delay_500ns();
20000cee:	f7ff f9b1 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000cf2:	2040      	movs	r0, #64	; 0x40
20000cf4:	f7ff fed0 	bl	20000a98 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000cf8:	1dbb      	adds	r3, r7, #6
20000cfa:	781b      	ldrb	r3, [r3, #0]
20000cfc:	2208      	movs	r2, #8
20000cfe:	4013      	ands	r3, r2
20000d00:	d004      	beq.n	20000d0c <graphic_write+0x42>
        select_controller(B_CS1);
20000d02:	2008      	movs	r0, #8
20000d04:	f7ff fef0 	bl	20000ae8 <select_controller>
        graphic_wait_ready();
20000d08:	f7ff ff4d 	bl	20000ba6 <graphic_wait_ready>
    }
    if(controller & B_CS2){
20000d0c:	1dbb      	adds	r3, r7, #6
20000d0e:	781b      	ldrb	r3, [r3, #0]
20000d10:	2210      	movs	r2, #16
20000d12:	4013      	ands	r3, r2
20000d14:	d004      	beq.n	20000d20 <graphic_write+0x56>
        select_controller(B_CS2);
20000d16:	2010      	movs	r0, #16
20000d18:	f7ff fee6 	bl	20000ae8 <select_controller>
        graphic_wait_ready();
20000d1c:	f7ff ff43 	bl	20000ba6 <graphic_wait_ready>
    }
        
    GPIO_E->odrHigh = 0;
20000d20:	4b06      	ldr	r3, [pc, #24]	; (20000d3c <graphic_write+0x72>)
20000d22:	2200      	movs	r2, #0
20000d24:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(B_E);
20000d26:	2040      	movs	r0, #64	; 0x40
20000d28:	f7ff fe94 	bl	20000a54 <graphic_ctrl_bit_set>
    select_controller(0);    
20000d2c:	2000      	movs	r0, #0
20000d2e:	f7ff fedb 	bl	20000ae8 <select_controller>
    
}
20000d32:	46c0      	nop			; (mov r8, r8)
20000d34:	46bd      	mov	sp, r7
20000d36:	b002      	add	sp, #8
20000d38:	bd80      	pop	{r7, pc}
20000d3a:	46c0      	nop			; (mov r8, r8)
20000d3c:	40021000 	andmi	r1, r2, r0

20000d40 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20000d40:	b580      	push	{r7, lr}
20000d42:	b082      	sub	sp, #8
20000d44:	af00      	add	r7, sp, #0
20000d46:	0002      	movs	r2, r0
20000d48:	1dfb      	adds	r3, r7, #7
20000d4a:	701a      	strb	r2, [r3, #0]
20000d4c:	1dbb      	adds	r3, r7, #6
20000d4e:	1c0a      	adds	r2, r1, #0
20000d50:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d52:	2040      	movs	r0, #64	; 0x40
20000d54:	f7ff fea0 	bl	20000a98 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d58:	1dbb      	adds	r3, r7, #6
20000d5a:	781b      	ldrb	r3, [r3, #0]
20000d5c:	0018      	movs	r0, r3
20000d5e:	f7ff fec3 	bl	20000ae8 <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
20000d62:	2003      	movs	r0, #3
20000d64:	f7ff fe98 	bl	20000a98 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000d68:	1dbb      	adds	r3, r7, #6
20000d6a:	781a      	ldrb	r2, [r3, #0]
20000d6c:	1dfb      	adds	r3, r7, #7
20000d6e:	781b      	ldrb	r3, [r3, #0]
20000d70:	0011      	movs	r1, r2
20000d72:	0018      	movs	r0, r3
20000d74:	f7ff ffa9 	bl	20000cca <graphic_write>
}
20000d78:	46c0      	nop			; (mov r8, r8)
20000d7a:	46bd      	mov	sp, r7
20000d7c:	b002      	add	sp, #8
20000d7e:	bd80      	pop	{r7, pc}

20000d80 <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller){
20000d80:	b580      	push	{r7, lr}
20000d82:	b082      	sub	sp, #8
20000d84:	af00      	add	r7, sp, #0
20000d86:	0002      	movs	r2, r0
20000d88:	1dfb      	adds	r3, r7, #7
20000d8a:	701a      	strb	r2, [r3, #0]
20000d8c:	1dbb      	adds	r3, r7, #6
20000d8e:	1c0a      	adds	r2, r1, #0
20000d90:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000d92:	2040      	movs	r0, #64	; 0x40
20000d94:	f7ff fe80 	bl	20000a98 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000d98:	1dbb      	adds	r3, r7, #6
20000d9a:	781b      	ldrb	r3, [r3, #0]
20000d9c:	0018      	movs	r0, r3
20000d9e:	f7ff fea3 	bl	20000ae8 <select_controller>
    graphic_ctrl_bit_clear(B_RW);
20000da2:	2002      	movs	r0, #2
20000da4:	f7ff fe78 	bl	20000a98 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RS);
20000da8:	2001      	movs	r0, #1
20000daa:	f7ff fe53 	bl	20000a54 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
20000dae:	1dbb      	adds	r3, r7, #6
20000db0:	781a      	ldrb	r2, [r3, #0]
20000db2:	1dfb      	adds	r3, r7, #7
20000db4:	781b      	ldrb	r3, [r3, #0]
20000db6:	0011      	movs	r1, r2
20000db8:	0018      	movs	r0, r3
20000dba:	f7ff ff86 	bl	20000cca <graphic_write>
}
20000dbe:	46c0      	nop			; (mov r8, r8)
20000dc0:	46bd      	mov	sp, r7
20000dc2:	b002      	add	sp, #8
20000dc4:	bd80      	pop	{r7, pc}

20000dc6 <graphic_clear_screen>:
void graphic_clear_screen(void){
20000dc6:	b580      	push	{r7, lr}
20000dc8:	b082      	sub	sp, #8
20000dca:	af00      	add	r7, sp, #0
    for(int i = 1; i <= 128; i++){
20000dcc:	2301      	movs	r3, #1
20000dce:	607b      	str	r3, [r7, #4]
20000dd0:	e011      	b.n	20000df6 <graphic_clear_screen+0x30>
		for(int j = 1; j <= 64; j++){
20000dd2:	2301      	movs	r3, #1
20000dd4:	603b      	str	r3, [r7, #0]
20000dd6:	e008      	b.n	20000dea <graphic_clear_screen+0x24>
			pixel(i, j, 0);
20000dd8:	6839      	ldr	r1, [r7, #0]
20000dda:	687b      	ldr	r3, [r7, #4]
20000ddc:	2200      	movs	r2, #0
20000dde:	0018      	movs	r0, r3
20000de0:	f000 f834 	bl	20000e4c <pixel>
		for(int j = 1; j <= 64; j++){
20000de4:	683b      	ldr	r3, [r7, #0]
20000de6:	3301      	adds	r3, #1
20000de8:	603b      	str	r3, [r7, #0]
20000dea:	683b      	ldr	r3, [r7, #0]
20000dec:	2b40      	cmp	r3, #64	; 0x40
20000dee:	ddf3      	ble.n	20000dd8 <graphic_clear_screen+0x12>
    for(int i = 1; i <= 128; i++){
20000df0:	687b      	ldr	r3, [r7, #4]
20000df2:	3301      	adds	r3, #1
20000df4:	607b      	str	r3, [r7, #4]
20000df6:	687b      	ldr	r3, [r7, #4]
20000df8:	2b80      	cmp	r3, #128	; 0x80
20000dfa:	ddea      	ble.n	20000dd2 <graphic_clear_screen+0xc>
		}
	}
}
20000dfc:	46c0      	nop			; (mov r8, r8)
20000dfe:	46bd      	mov	sp, r7
20000e00:	b002      	add	sp, #8
20000e02:	bd80      	pop	{r7, pc}

20000e04 <clear_backBuffer>:


void clear_backBuffer() {
20000e04:	b580      	push	{r7, lr}
20000e06:	b082      	sub	sp, #8
20000e08:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++){
20000e0a:	2300      	movs	r3, #0
20000e0c:	607b      	str	r3, [r7, #4]
20000e0e:	e013      	b.n	20000e38 <clear_backBuffer+0x34>
        for(int j = 0; j < 8; j++)
20000e10:	2300      	movs	r3, #0
20000e12:	603b      	str	r3, [r7, #0]
20000e14:	e00a      	b.n	20000e2c <clear_backBuffer+0x28>
			 backBuffer[i][j] = 0;
20000e16:	4a0c      	ldr	r2, [pc, #48]	; (20000e48 <clear_backBuffer+0x44>)
20000e18:	687b      	ldr	r3, [r7, #4]
20000e1a:	00db      	lsls	r3, r3, #3
20000e1c:	18d2      	adds	r2, r2, r3
20000e1e:	683b      	ldr	r3, [r7, #0]
20000e20:	18d3      	adds	r3, r2, r3
20000e22:	2200      	movs	r2, #0
20000e24:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++)
20000e26:	683b      	ldr	r3, [r7, #0]
20000e28:	3301      	adds	r3, #1
20000e2a:	603b      	str	r3, [r7, #0]
20000e2c:	683b      	ldr	r3, [r7, #0]
20000e2e:	2b07      	cmp	r3, #7
20000e30:	ddf1      	ble.n	20000e16 <clear_backBuffer+0x12>
    for (int i = 0; i < 256; i++){
20000e32:	687b      	ldr	r3, [r7, #4]
20000e34:	3301      	adds	r3, #1
20000e36:	607b      	str	r3, [r7, #4]
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	2bff      	cmp	r3, #255	; 0xff
20000e3c:	dde8      	ble.n	20000e10 <clear_backBuffer+0xc>
	}
}
20000e3e:	46c0      	nop			; (mov r8, r8)
20000e40:	46bd      	mov	sp, r7
20000e42:	b002      	add	sp, #8
20000e44:	bd80      	pop	{r7, pc}
20000e46:	46c0      	nop			; (mov r8, r8)
20000e48:	2000142c 	andcs	r1, r0, ip, lsr #8

20000e4c <pixel>:

void pixel(int x, int y, int set) {
20000e4c:	b580      	push	{r7, lr}
20000e4e:	b086      	sub	sp, #24
20000e50:	af00      	add	r7, sp, #0
20000e52:	60f8      	str	r0, [r7, #12]
20000e54:	60b9      	str	r1, [r7, #8]
20000e56:	607a      	str	r2, [r7, #4]
    
    uint8_t mask = 1 << ((y-1)%8);
20000e58:	68bb      	ldr	r3, [r7, #8]
20000e5a:	3b01      	subs	r3, #1
20000e5c:	4a26      	ldr	r2, [pc, #152]	; (20000ef8 <pixel+0xac>)
20000e5e:	4013      	ands	r3, r2
20000e60:	d504      	bpl.n	20000e6c <pixel+0x20>
20000e62:	3b01      	subs	r3, #1
20000e64:	2208      	movs	r2, #8
20000e66:	4252      	negs	r2, r2
20000e68:	4313      	orrs	r3, r2
20000e6a:	3301      	adds	r3, #1
20000e6c:	001a      	movs	r2, r3
20000e6e:	2301      	movs	r3, #1
20000e70:	4093      	lsls	r3, r2
20000e72:	001a      	movs	r2, r3
20000e74:	2317      	movs	r3, #23
20000e76:	18fb      	adds	r3, r7, r3
20000e78:	701a      	strb	r2, [r3, #0]
    
    if(set){
20000e7a:	687b      	ldr	r3, [r7, #4]
20000e7c:	2b00      	cmp	r3, #0
20000e7e:	d019      	beq.n	20000eb4 <pixel+0x68>
        backBuffer[64+(y-1)][(x-1)/8] |= mask;
20000e80:	68bb      	ldr	r3, [r7, #8]
20000e82:	333f      	adds	r3, #63	; 0x3f
20000e84:	001a      	movs	r2, r3
20000e86:	68fb      	ldr	r3, [r7, #12]
20000e88:	3b01      	subs	r3, #1
20000e8a:	2b00      	cmp	r3, #0
20000e8c:	da00      	bge.n	20000e90 <pixel+0x44>
20000e8e:	3307      	adds	r3, #7
20000e90:	10db      	asrs	r3, r3, #3
20000e92:	491a      	ldr	r1, [pc, #104]	; (20000efc <pixel+0xb0>)
20000e94:	00d2      	lsls	r2, r2, #3
20000e96:	188a      	adds	r2, r1, r2
20000e98:	5cd0      	ldrb	r0, [r2, r3]
20000e9a:	68ba      	ldr	r2, [r7, #8]
20000e9c:	323f      	adds	r2, #63	; 0x3f
20000e9e:	2117      	movs	r1, #23
20000ea0:	1879      	adds	r1, r7, r1
20000ea2:	7809      	ldrb	r1, [r1, #0]
20000ea4:	4301      	orrs	r1, r0
20000ea6:	b2c8      	uxtb	r0, r1
20000ea8:	4914      	ldr	r1, [pc, #80]	; (20000efc <pixel+0xb0>)
20000eaa:	00d2      	lsls	r2, r2, #3
20000eac:	188a      	adds	r2, r1, r2
20000eae:	1c01      	adds	r1, r0, #0
20000eb0:	54d1      	strb	r1, [r2, r3]
    }
    else{
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
    }
}
20000eb2:	e01d      	b.n	20000ef0 <pixel+0xa4>
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
20000eb4:	68bb      	ldr	r3, [r7, #8]
20000eb6:	333f      	adds	r3, #63	; 0x3f
20000eb8:	001a      	movs	r2, r3
20000eba:	68fb      	ldr	r3, [r7, #12]
20000ebc:	3b01      	subs	r3, #1
20000ebe:	2b00      	cmp	r3, #0
20000ec0:	da00      	bge.n	20000ec4 <pixel+0x78>
20000ec2:	3307      	adds	r3, #7
20000ec4:	10db      	asrs	r3, r3, #3
20000ec6:	490d      	ldr	r1, [pc, #52]	; (20000efc <pixel+0xb0>)
20000ec8:	00d2      	lsls	r2, r2, #3
20000eca:	188a      	adds	r2, r1, r2
20000ecc:	5cd2      	ldrb	r2, [r2, r3]
20000ece:	b252      	sxtb	r2, r2
20000ed0:	2117      	movs	r1, #23
20000ed2:	1879      	adds	r1, r7, r1
20000ed4:	7809      	ldrb	r1, [r1, #0]
20000ed6:	b249      	sxtb	r1, r1
20000ed8:	43c9      	mvns	r1, r1
20000eda:	b249      	sxtb	r1, r1
20000edc:	400a      	ands	r2, r1
20000ede:	b251      	sxtb	r1, r2
20000ee0:	68ba      	ldr	r2, [r7, #8]
20000ee2:	323f      	adds	r2, #63	; 0x3f
20000ee4:	b2c8      	uxtb	r0, r1
20000ee6:	4905      	ldr	r1, [pc, #20]	; (20000efc <pixel+0xb0>)
20000ee8:	00d2      	lsls	r2, r2, #3
20000eea:	188a      	adds	r2, r1, r2
20000eec:	1c01      	adds	r1, r0, #0
20000eee:	54d1      	strb	r1, [r2, r3]
}
20000ef0:	46c0      	nop			; (mov r8, r8)
20000ef2:	46bd      	mov	sp, r7
20000ef4:	b006      	add	sp, #24
20000ef6:	bd80      	pop	{r7, pc}
20000ef8:	80000007 	andhi	r0, r0, r7
20000efc:	2000142c 	andcs	r1, r0, ip, lsr #8

20000f00 <byteToBuffer>:

void byteToBuffer(int addr, int page, char c){
20000f00:	b580      	push	{r7, lr}
20000f02:	b084      	sub	sp, #16
20000f04:	af00      	add	r7, sp, #0
20000f06:	60f8      	str	r0, [r7, #12]
20000f08:	60b9      	str	r1, [r7, #8]
20000f0a:	1dfb      	adds	r3, r7, #7
20000f0c:	701a      	strb	r2, [r3, #0]
	backBuffer[addr][page] = c;
20000f0e:	4a06      	ldr	r2, [pc, #24]	; (20000f28 <byteToBuffer+0x28>)
20000f10:	68fb      	ldr	r3, [r7, #12]
20000f12:	00db      	lsls	r3, r3, #3
20000f14:	18d2      	adds	r2, r2, r3
20000f16:	68bb      	ldr	r3, [r7, #8]
20000f18:	18d3      	adds	r3, r2, r3
20000f1a:	1dfa      	adds	r2, r7, #7
20000f1c:	7812      	ldrb	r2, [r2, #0]
20000f1e:	701a      	strb	r2, [r3, #0]
}
20000f20:	46c0      	nop			; (mov r8, r8)
20000f22:	46bd      	mov	sp, r7
20000f24:	b004      	add	sp, #16
20000f26:	bd80      	pop	{r7, pc}
20000f28:	2000142c 	andcs	r1, r0, ip, lsr #8

20000f2c <byteToScreenBuffer>:
void byteToScreenBuffer(int addr, int page, char c){
20000f2c:	b580      	push	{r7, lr}
20000f2e:	b084      	sub	sp, #16
20000f30:	af00      	add	r7, sp, #0
20000f32:	60f8      	str	r0, [r7, #12]
20000f34:	60b9      	str	r1, [r7, #8]
20000f36:	1dfb      	adds	r3, r7, #7
20000f38:	701a      	strb	r2, [r3, #0]
	backBuffer[64+addr][page] = c;
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	3340      	adds	r3, #64	; 0x40
20000f3e:	4a06      	ldr	r2, [pc, #24]	; (20000f58 <byteToScreenBuffer+0x2c>)
20000f40:	00db      	lsls	r3, r3, #3
20000f42:	18d2      	adds	r2, r2, r3
20000f44:	68bb      	ldr	r3, [r7, #8]
20000f46:	18d3      	adds	r3, r2, r3
20000f48:	1dfa      	adds	r2, r7, #7
20000f4a:	7812      	ldrb	r2, [r2, #0]
20000f4c:	701a      	strb	r2, [r3, #0]
}
20000f4e:	46c0      	nop			; (mov r8, r8)
20000f50:	46bd      	mov	sp, r7
20000f52:	b004      	add	sp, #16
20000f54:	bd80      	pop	{r7, pc}
20000f56:	46c0      	nop			; (mov r8, r8)
20000f58:	2000142c 	andcs	r1, r0, ip, lsr #8

20000f5c <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000f5c:	b590      	push	{r4, r7, lr}
20000f5e:	b085      	sub	sp, #20
20000f60:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20000f62:	2300      	movs	r3, #0
20000f64:	60bb      	str	r3, [r7, #8]
    for(c = 0; c < 2; c++) {
20000f66:	230d      	movs	r3, #13
20000f68:	18fb      	adds	r3, r7, r3
20000f6a:	2200      	movs	r2, #0
20000f6c:	701a      	strb	r2, [r3, #0]
20000f6e:	e05a      	b.n	20001026 <graphic_draw_screen+0xca>
        controller = (c == 0) ? B_CS1 : B_CS2;
20000f70:	230d      	movs	r3, #13
20000f72:	18fb      	adds	r3, r7, r3
20000f74:	781b      	ldrb	r3, [r3, #0]
20000f76:	2b00      	cmp	r3, #0
20000f78:	d101      	bne.n	20000f7e <graphic_draw_screen+0x22>
20000f7a:	2208      	movs	r2, #8
20000f7c:	e000      	b.n	20000f80 <graphic_draw_screen+0x24>
20000f7e:	2210      	movs	r2, #16
20000f80:	1dfb      	adds	r3, r7, #7
20000f82:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 8; j++) {
20000f84:	230e      	movs	r3, #14
20000f86:	18fb      	adds	r3, r7, r3
20000f88:	2200      	movs	r2, #0
20000f8a:	701a      	strb	r2, [r3, #0]
20000f8c:	e040      	b.n	20001010 <graphic_draw_screen+0xb4>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000f8e:	230e      	movs	r3, #14
20000f90:	18fb      	adds	r3, r7, r3
20000f92:	781b      	ldrb	r3, [r3, #0]
20000f94:	2248      	movs	r2, #72	; 0x48
20000f96:	4252      	negs	r2, r2
20000f98:	4313      	orrs	r3, r2
20000f9a:	b2da      	uxtb	r2, r3
20000f9c:	1dfb      	adds	r3, r7, #7
20000f9e:	781b      	ldrb	r3, [r3, #0]
20000fa0:	0019      	movs	r1, r3
20000fa2:	0010      	movs	r0, r2
20000fa4:	f7ff fecc 	bl	20000d40 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000fa8:	1dfb      	adds	r3, r7, #7
20000faa:	781b      	ldrb	r3, [r3, #0]
20000fac:	0019      	movs	r1, r3
20000fae:	2040      	movs	r0, #64	; 0x40
20000fb0:	f7ff fec6 	bl	20000d40 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++) {
20000fb4:	230f      	movs	r3, #15
20000fb6:	18fb      	adds	r3, r7, r3
20000fb8:	2200      	movs	r2, #0
20000fba:	701a      	strb	r2, [r3, #0]
20000fbc:	e01d      	b.n	20000ffa <graphic_draw_screen+0x9e>
                graphic_write_data(backBuffer[64+c*64 + i][j], controller);
20000fbe:	230d      	movs	r3, #13
20000fc0:	18fb      	adds	r3, r7, r3
20000fc2:	781b      	ldrb	r3, [r3, #0]
20000fc4:	3301      	adds	r3, #1
20000fc6:	019a      	lsls	r2, r3, #6
20000fc8:	240f      	movs	r4, #15
20000fca:	193b      	adds	r3, r7, r4
20000fcc:	781b      	ldrb	r3, [r3, #0]
20000fce:	18d2      	adds	r2, r2, r3
20000fd0:	230e      	movs	r3, #14
20000fd2:	18fb      	adds	r3, r7, r3
20000fd4:	781b      	ldrb	r3, [r3, #0]
20000fd6:	4918      	ldr	r1, [pc, #96]	; (20001038 <graphic_draw_screen+0xdc>)
20000fd8:	00d2      	lsls	r2, r2, #3
20000fda:	188a      	adds	r2, r1, r2
20000fdc:	5cd2      	ldrb	r2, [r2, r3]
20000fde:	1dfb      	adds	r3, r7, #7
20000fe0:	781b      	ldrb	r3, [r3, #0]
20000fe2:	0019      	movs	r1, r3
20000fe4:	0010      	movs	r0, r2
20000fe6:	f7ff fecb 	bl	20000d80 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++) {
20000fea:	193b      	adds	r3, r7, r4
20000fec:	781a      	ldrb	r2, [r3, #0]
20000fee:	193b      	adds	r3, r7, r4
20000ff0:	3201      	adds	r2, #1
20000ff2:	701a      	strb	r2, [r3, #0]
20000ff4:	68bb      	ldr	r3, [r7, #8]
20000ff6:	3301      	adds	r3, #1
20000ff8:	60bb      	str	r3, [r7, #8]
20000ffa:	230f      	movs	r3, #15
20000ffc:	18fb      	adds	r3, r7, r3
20000ffe:	781b      	ldrb	r3, [r3, #0]
20001000:	2b3f      	cmp	r3, #63	; 0x3f
20001002:	d9dc      	bls.n	20000fbe <graphic_draw_screen+0x62>
        for(j = 0; j < 8; j++) {
20001004:	210e      	movs	r1, #14
20001006:	187b      	adds	r3, r7, r1
20001008:	781a      	ldrb	r2, [r3, #0]
2000100a:	187b      	adds	r3, r7, r1
2000100c:	3201      	adds	r2, #1
2000100e:	701a      	strb	r2, [r3, #0]
20001010:	230e      	movs	r3, #14
20001012:	18fb      	adds	r3, r7, r3
20001014:	781b      	ldrb	r3, [r3, #0]
20001016:	2b07      	cmp	r3, #7
20001018:	d9b9      	bls.n	20000f8e <graphic_draw_screen+0x32>
    for(c = 0; c < 2; c++) {
2000101a:	210d      	movs	r1, #13
2000101c:	187b      	adds	r3, r7, r1
2000101e:	781a      	ldrb	r2, [r3, #0]
20001020:	187b      	adds	r3, r7, r1
20001022:	3201      	adds	r2, #1
20001024:	701a      	strb	r2, [r3, #0]
20001026:	230d      	movs	r3, #13
20001028:	18fb      	adds	r3, r7, r3
2000102a:	781b      	ldrb	r3, [r3, #0]
2000102c:	2b01      	cmp	r3, #1
2000102e:	d99f      	bls.n	20000f70 <graphic_draw_screen+0x14>
            }
        }
    }
}
20001030:	46c0      	nop			; (mov r8, r8)
20001032:	46bd      	mov	sp, r7
20001034:	b005      	add	sp, #20
20001036:	bd90      	pop	{r4, r7, pc}
20001038:	2000142c 	andcs	r1, r0, ip, lsr #8

2000103c <shiftRight>:


*/


void shiftRight(){
2000103c:	b580      	push	{r7, lr}
2000103e:	b084      	sub	sp, #16
20001040:	af00      	add	r7, sp, #0
	for(int i = 255; i > 0; i--){
20001042:	23ff      	movs	r3, #255	; 0xff
20001044:	60fb      	str	r3, [r7, #12]
20001046:	e01b      	b.n	20001080 <shiftRight+0x44>
		for(int j = 0; j < 8; j++){
20001048:	2300      	movs	r3, #0
2000104a:	60bb      	str	r3, [r7, #8]
2000104c:	e012      	b.n	20001074 <shiftRight+0x38>
			backBuffer[i][j] = backBuffer[i-1][j];
2000104e:	68fb      	ldr	r3, [r7, #12]
20001050:	3b01      	subs	r3, #1
20001052:	4a16      	ldr	r2, [pc, #88]	; (200010ac <shiftRight+0x70>)
20001054:	00db      	lsls	r3, r3, #3
20001056:	18d2      	adds	r2, r2, r3
20001058:	68bb      	ldr	r3, [r7, #8]
2000105a:	18d3      	adds	r3, r2, r3
2000105c:	7819      	ldrb	r1, [r3, #0]
2000105e:	4a13      	ldr	r2, [pc, #76]	; (200010ac <shiftRight+0x70>)
20001060:	68fb      	ldr	r3, [r7, #12]
20001062:	00db      	lsls	r3, r3, #3
20001064:	18d2      	adds	r2, r2, r3
20001066:	68bb      	ldr	r3, [r7, #8]
20001068:	18d3      	adds	r3, r2, r3
2000106a:	1c0a      	adds	r2, r1, #0
2000106c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
2000106e:	68bb      	ldr	r3, [r7, #8]
20001070:	3301      	adds	r3, #1
20001072:	60bb      	str	r3, [r7, #8]
20001074:	68bb      	ldr	r3, [r7, #8]
20001076:	2b07      	cmp	r3, #7
20001078:	dde9      	ble.n	2000104e <shiftRight+0x12>
	for(int i = 255; i > 0; i--){
2000107a:	68fb      	ldr	r3, [r7, #12]
2000107c:	3b01      	subs	r3, #1
2000107e:	60fb      	str	r3, [r7, #12]
20001080:	68fb      	ldr	r3, [r7, #12]
20001082:	2b00      	cmp	r3, #0
20001084:	dce0      	bgt.n	20001048 <shiftRight+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
20001086:	2300      	movs	r3, #0
20001088:	607b      	str	r3, [r7, #4]
2000108a:	e007      	b.n	2000109c <shiftRight+0x60>
        backBuffer[0][j] = 0; 
2000108c:	4a07      	ldr	r2, [pc, #28]	; (200010ac <shiftRight+0x70>)
2000108e:	687b      	ldr	r3, [r7, #4]
20001090:	18d3      	adds	r3, r2, r3
20001092:	2200      	movs	r2, #0
20001094:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20001096:	687b      	ldr	r3, [r7, #4]
20001098:	3301      	adds	r3, #1
2000109a:	607b      	str	r3, [r7, #4]
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	2b07      	cmp	r3, #7
200010a0:	ddf4      	ble.n	2000108c <shiftRight+0x50>
    }
}
200010a2:	46c0      	nop			; (mov r8, r8)
200010a4:	46bd      	mov	sp, r7
200010a6:	b004      	add	sp, #16
200010a8:	bd80      	pop	{r7, pc}
200010aa:	46c0      	nop			; (mov r8, r8)
200010ac:	2000142c 	andcs	r1, r0, ip, lsr #8

200010b0 <shiftLeft>:
void shiftLeft(){
200010b0:	b580      	push	{r7, lr}
200010b2:	b084      	sub	sp, #16
200010b4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 255; i++){
200010b6:	2300      	movs	r3, #0
200010b8:	60fb      	str	r3, [r7, #12]
200010ba:	e01b      	b.n	200010f4 <shiftLeft+0x44>
		for(int j = 0; j < 8; j++){
200010bc:	2300      	movs	r3, #0
200010be:	60bb      	str	r3, [r7, #8]
200010c0:	e012      	b.n	200010e8 <shiftLeft+0x38>
			backBuffer[i][j] = backBuffer[i+1][j];
200010c2:	68fb      	ldr	r3, [r7, #12]
200010c4:	3301      	adds	r3, #1
200010c6:	4a17      	ldr	r2, [pc, #92]	; (20001124 <shiftLeft+0x74>)
200010c8:	00db      	lsls	r3, r3, #3
200010ca:	18d2      	adds	r2, r2, r3
200010cc:	68bb      	ldr	r3, [r7, #8]
200010ce:	18d3      	adds	r3, r2, r3
200010d0:	7819      	ldrb	r1, [r3, #0]
200010d2:	4a14      	ldr	r2, [pc, #80]	; (20001124 <shiftLeft+0x74>)
200010d4:	68fb      	ldr	r3, [r7, #12]
200010d6:	00db      	lsls	r3, r3, #3
200010d8:	18d2      	adds	r2, r2, r3
200010da:	68bb      	ldr	r3, [r7, #8]
200010dc:	18d3      	adds	r3, r2, r3
200010de:	1c0a      	adds	r2, r1, #0
200010e0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
200010e2:	68bb      	ldr	r3, [r7, #8]
200010e4:	3301      	adds	r3, #1
200010e6:	60bb      	str	r3, [r7, #8]
200010e8:	68bb      	ldr	r3, [r7, #8]
200010ea:	2b07      	cmp	r3, #7
200010ec:	dde9      	ble.n	200010c2 <shiftLeft+0x12>
	for(int i = 0; i < 255; i++){
200010ee:	68fb      	ldr	r3, [r7, #12]
200010f0:	3301      	adds	r3, #1
200010f2:	60fb      	str	r3, [r7, #12]
200010f4:	68fb      	ldr	r3, [r7, #12]
200010f6:	2bfe      	cmp	r3, #254	; 0xfe
200010f8:	dde0      	ble.n	200010bc <shiftLeft+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
200010fa:	2300      	movs	r3, #0
200010fc:	607b      	str	r3, [r7, #4]
200010fe:	e00a      	b.n	20001116 <shiftLeft+0x66>
        backBuffer[255][j] = 0; 
20001100:	4908      	ldr	r1, [pc, #32]	; (20001124 <shiftLeft+0x74>)
20001102:	23ff      	movs	r3, #255	; 0xff
20001104:	00db      	lsls	r3, r3, #3
20001106:	687a      	ldr	r2, [r7, #4]
20001108:	188a      	adds	r2, r1, r2
2000110a:	18d3      	adds	r3, r2, r3
2000110c:	2200      	movs	r2, #0
2000110e:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20001110:	687b      	ldr	r3, [r7, #4]
20001112:	3301      	adds	r3, #1
20001114:	607b      	str	r3, [r7, #4]
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	2b07      	cmp	r3, #7
2000111a:	ddf1      	ble.n	20001100 <shiftLeft+0x50>
    }
2000111c:	46c0      	nop			; (mov r8, r8)
2000111e:	46bd      	mov	sp, r7
20001120:	b004      	add	sp, #16
20001122:	bd80      	pop	{r7, pc}
20001124:	2000142c 	andcs	r1, r0, ip, lsr #8

20001128 <__udivsi3>:
20001128:	2200      	movs	r2, #0
2000112a:	0843      	lsrs	r3, r0, #1
2000112c:	428b      	cmp	r3, r1
2000112e:	d374      	bcc.n	2000121a <__udivsi3+0xf2>
20001130:	0903      	lsrs	r3, r0, #4
20001132:	428b      	cmp	r3, r1
20001134:	d35f      	bcc.n	200011f6 <__udivsi3+0xce>
20001136:	0a03      	lsrs	r3, r0, #8
20001138:	428b      	cmp	r3, r1
2000113a:	d344      	bcc.n	200011c6 <__udivsi3+0x9e>
2000113c:	0b03      	lsrs	r3, r0, #12
2000113e:	428b      	cmp	r3, r1
20001140:	d328      	bcc.n	20001194 <__udivsi3+0x6c>
20001142:	0c03      	lsrs	r3, r0, #16
20001144:	428b      	cmp	r3, r1
20001146:	d30d      	bcc.n	20001164 <__udivsi3+0x3c>
20001148:	22ff      	movs	r2, #255	; 0xff
2000114a:	0209      	lsls	r1, r1, #8
2000114c:	ba12      	rev	r2, r2
2000114e:	0c03      	lsrs	r3, r0, #16
20001150:	428b      	cmp	r3, r1
20001152:	d302      	bcc.n	2000115a <__udivsi3+0x32>
20001154:	1212      	asrs	r2, r2, #8
20001156:	0209      	lsls	r1, r1, #8
20001158:	d065      	beq.n	20001226 <__udivsi3+0xfe>
2000115a:	0b03      	lsrs	r3, r0, #12
2000115c:	428b      	cmp	r3, r1
2000115e:	d319      	bcc.n	20001194 <__udivsi3+0x6c>
20001160:	e000      	b.n	20001164 <__udivsi3+0x3c>
20001162:	0a09      	lsrs	r1, r1, #8
20001164:	0bc3      	lsrs	r3, r0, #15
20001166:	428b      	cmp	r3, r1
20001168:	d301      	bcc.n	2000116e <__udivsi3+0x46>
2000116a:	03cb      	lsls	r3, r1, #15
2000116c:	1ac0      	subs	r0, r0, r3
2000116e:	4152      	adcs	r2, r2
20001170:	0b83      	lsrs	r3, r0, #14
20001172:	428b      	cmp	r3, r1
20001174:	d301      	bcc.n	2000117a <__udivsi3+0x52>
20001176:	038b      	lsls	r3, r1, #14
20001178:	1ac0      	subs	r0, r0, r3
2000117a:	4152      	adcs	r2, r2
2000117c:	0b43      	lsrs	r3, r0, #13
2000117e:	428b      	cmp	r3, r1
20001180:	d301      	bcc.n	20001186 <__udivsi3+0x5e>
20001182:	034b      	lsls	r3, r1, #13
20001184:	1ac0      	subs	r0, r0, r3
20001186:	4152      	adcs	r2, r2
20001188:	0b03      	lsrs	r3, r0, #12
2000118a:	428b      	cmp	r3, r1
2000118c:	d301      	bcc.n	20001192 <__udivsi3+0x6a>
2000118e:	030b      	lsls	r3, r1, #12
20001190:	1ac0      	subs	r0, r0, r3
20001192:	4152      	adcs	r2, r2
20001194:	0ac3      	lsrs	r3, r0, #11
20001196:	428b      	cmp	r3, r1
20001198:	d301      	bcc.n	2000119e <__udivsi3+0x76>
2000119a:	02cb      	lsls	r3, r1, #11
2000119c:	1ac0      	subs	r0, r0, r3
2000119e:	4152      	adcs	r2, r2
200011a0:	0a83      	lsrs	r3, r0, #10
200011a2:	428b      	cmp	r3, r1
200011a4:	d301      	bcc.n	200011aa <__udivsi3+0x82>
200011a6:	028b      	lsls	r3, r1, #10
200011a8:	1ac0      	subs	r0, r0, r3
200011aa:	4152      	adcs	r2, r2
200011ac:	0a43      	lsrs	r3, r0, #9
200011ae:	428b      	cmp	r3, r1
200011b0:	d301      	bcc.n	200011b6 <__udivsi3+0x8e>
200011b2:	024b      	lsls	r3, r1, #9
200011b4:	1ac0      	subs	r0, r0, r3
200011b6:	4152      	adcs	r2, r2
200011b8:	0a03      	lsrs	r3, r0, #8
200011ba:	428b      	cmp	r3, r1
200011bc:	d301      	bcc.n	200011c2 <__udivsi3+0x9a>
200011be:	020b      	lsls	r3, r1, #8
200011c0:	1ac0      	subs	r0, r0, r3
200011c2:	4152      	adcs	r2, r2
200011c4:	d2cd      	bcs.n	20001162 <__udivsi3+0x3a>
200011c6:	09c3      	lsrs	r3, r0, #7
200011c8:	428b      	cmp	r3, r1
200011ca:	d301      	bcc.n	200011d0 <__udivsi3+0xa8>
200011cc:	01cb      	lsls	r3, r1, #7
200011ce:	1ac0      	subs	r0, r0, r3
200011d0:	4152      	adcs	r2, r2
200011d2:	0983      	lsrs	r3, r0, #6
200011d4:	428b      	cmp	r3, r1
200011d6:	d301      	bcc.n	200011dc <__udivsi3+0xb4>
200011d8:	018b      	lsls	r3, r1, #6
200011da:	1ac0      	subs	r0, r0, r3
200011dc:	4152      	adcs	r2, r2
200011de:	0943      	lsrs	r3, r0, #5
200011e0:	428b      	cmp	r3, r1
200011e2:	d301      	bcc.n	200011e8 <__udivsi3+0xc0>
200011e4:	014b      	lsls	r3, r1, #5
200011e6:	1ac0      	subs	r0, r0, r3
200011e8:	4152      	adcs	r2, r2
200011ea:	0903      	lsrs	r3, r0, #4
200011ec:	428b      	cmp	r3, r1
200011ee:	d301      	bcc.n	200011f4 <__udivsi3+0xcc>
200011f0:	010b      	lsls	r3, r1, #4
200011f2:	1ac0      	subs	r0, r0, r3
200011f4:	4152      	adcs	r2, r2
200011f6:	08c3      	lsrs	r3, r0, #3
200011f8:	428b      	cmp	r3, r1
200011fa:	d301      	bcc.n	20001200 <__udivsi3+0xd8>
200011fc:	00cb      	lsls	r3, r1, #3
200011fe:	1ac0      	subs	r0, r0, r3
20001200:	4152      	adcs	r2, r2
20001202:	0883      	lsrs	r3, r0, #2
20001204:	428b      	cmp	r3, r1
20001206:	d301      	bcc.n	2000120c <__udivsi3+0xe4>
20001208:	008b      	lsls	r3, r1, #2
2000120a:	1ac0      	subs	r0, r0, r3
2000120c:	4152      	adcs	r2, r2
2000120e:	0843      	lsrs	r3, r0, #1
20001210:	428b      	cmp	r3, r1
20001212:	d301      	bcc.n	20001218 <__udivsi3+0xf0>
20001214:	004b      	lsls	r3, r1, #1
20001216:	1ac0      	subs	r0, r0, r3
20001218:	4152      	adcs	r2, r2
2000121a:	1a41      	subs	r1, r0, r1
2000121c:	d200      	bcs.n	20001220 <__udivsi3+0xf8>
2000121e:	4601      	mov	r1, r0
20001220:	4152      	adcs	r2, r2
20001222:	4610      	mov	r0, r2
20001224:	4770      	bx	lr
20001226:	e7ff      	b.n	20001228 <__udivsi3+0x100>
20001228:	b501      	push	{r0, lr}
2000122a:	2000      	movs	r0, #0
2000122c:	f000 f8f0 	bl	20001410 <__aeabi_idiv0>
20001230:	bd02      	pop	{r1, pc}
20001232:	46c0      	nop			; (mov r8, r8)

20001234 <__aeabi_uidivmod>:
20001234:	2900      	cmp	r1, #0
20001236:	d0f7      	beq.n	20001228 <__udivsi3+0x100>
20001238:	e776      	b.n	20001128 <__udivsi3>
2000123a:	4770      	bx	lr

2000123c <__divsi3>:
2000123c:	4603      	mov	r3, r0
2000123e:	430b      	orrs	r3, r1
20001240:	d47f      	bmi.n	20001342 <__divsi3+0x106>
20001242:	2200      	movs	r2, #0
20001244:	0843      	lsrs	r3, r0, #1
20001246:	428b      	cmp	r3, r1
20001248:	d374      	bcc.n	20001334 <__divsi3+0xf8>
2000124a:	0903      	lsrs	r3, r0, #4
2000124c:	428b      	cmp	r3, r1
2000124e:	d35f      	bcc.n	20001310 <__divsi3+0xd4>
20001250:	0a03      	lsrs	r3, r0, #8
20001252:	428b      	cmp	r3, r1
20001254:	d344      	bcc.n	200012e0 <__divsi3+0xa4>
20001256:	0b03      	lsrs	r3, r0, #12
20001258:	428b      	cmp	r3, r1
2000125a:	d328      	bcc.n	200012ae <__divsi3+0x72>
2000125c:	0c03      	lsrs	r3, r0, #16
2000125e:	428b      	cmp	r3, r1
20001260:	d30d      	bcc.n	2000127e <__divsi3+0x42>
20001262:	22ff      	movs	r2, #255	; 0xff
20001264:	0209      	lsls	r1, r1, #8
20001266:	ba12      	rev	r2, r2
20001268:	0c03      	lsrs	r3, r0, #16
2000126a:	428b      	cmp	r3, r1
2000126c:	d302      	bcc.n	20001274 <__divsi3+0x38>
2000126e:	1212      	asrs	r2, r2, #8
20001270:	0209      	lsls	r1, r1, #8
20001272:	d065      	beq.n	20001340 <__divsi3+0x104>
20001274:	0b03      	lsrs	r3, r0, #12
20001276:	428b      	cmp	r3, r1
20001278:	d319      	bcc.n	200012ae <__divsi3+0x72>
2000127a:	e000      	b.n	2000127e <__divsi3+0x42>
2000127c:	0a09      	lsrs	r1, r1, #8
2000127e:	0bc3      	lsrs	r3, r0, #15
20001280:	428b      	cmp	r3, r1
20001282:	d301      	bcc.n	20001288 <__divsi3+0x4c>
20001284:	03cb      	lsls	r3, r1, #15
20001286:	1ac0      	subs	r0, r0, r3
20001288:	4152      	adcs	r2, r2
2000128a:	0b83      	lsrs	r3, r0, #14
2000128c:	428b      	cmp	r3, r1
2000128e:	d301      	bcc.n	20001294 <__divsi3+0x58>
20001290:	038b      	lsls	r3, r1, #14
20001292:	1ac0      	subs	r0, r0, r3
20001294:	4152      	adcs	r2, r2
20001296:	0b43      	lsrs	r3, r0, #13
20001298:	428b      	cmp	r3, r1
2000129a:	d301      	bcc.n	200012a0 <__divsi3+0x64>
2000129c:	034b      	lsls	r3, r1, #13
2000129e:	1ac0      	subs	r0, r0, r3
200012a0:	4152      	adcs	r2, r2
200012a2:	0b03      	lsrs	r3, r0, #12
200012a4:	428b      	cmp	r3, r1
200012a6:	d301      	bcc.n	200012ac <__divsi3+0x70>
200012a8:	030b      	lsls	r3, r1, #12
200012aa:	1ac0      	subs	r0, r0, r3
200012ac:	4152      	adcs	r2, r2
200012ae:	0ac3      	lsrs	r3, r0, #11
200012b0:	428b      	cmp	r3, r1
200012b2:	d301      	bcc.n	200012b8 <__divsi3+0x7c>
200012b4:	02cb      	lsls	r3, r1, #11
200012b6:	1ac0      	subs	r0, r0, r3
200012b8:	4152      	adcs	r2, r2
200012ba:	0a83      	lsrs	r3, r0, #10
200012bc:	428b      	cmp	r3, r1
200012be:	d301      	bcc.n	200012c4 <__divsi3+0x88>
200012c0:	028b      	lsls	r3, r1, #10
200012c2:	1ac0      	subs	r0, r0, r3
200012c4:	4152      	adcs	r2, r2
200012c6:	0a43      	lsrs	r3, r0, #9
200012c8:	428b      	cmp	r3, r1
200012ca:	d301      	bcc.n	200012d0 <__divsi3+0x94>
200012cc:	024b      	lsls	r3, r1, #9
200012ce:	1ac0      	subs	r0, r0, r3
200012d0:	4152      	adcs	r2, r2
200012d2:	0a03      	lsrs	r3, r0, #8
200012d4:	428b      	cmp	r3, r1
200012d6:	d301      	bcc.n	200012dc <__divsi3+0xa0>
200012d8:	020b      	lsls	r3, r1, #8
200012da:	1ac0      	subs	r0, r0, r3
200012dc:	4152      	adcs	r2, r2
200012de:	d2cd      	bcs.n	2000127c <__divsi3+0x40>
200012e0:	09c3      	lsrs	r3, r0, #7
200012e2:	428b      	cmp	r3, r1
200012e4:	d301      	bcc.n	200012ea <__divsi3+0xae>
200012e6:	01cb      	lsls	r3, r1, #7
200012e8:	1ac0      	subs	r0, r0, r3
200012ea:	4152      	adcs	r2, r2
200012ec:	0983      	lsrs	r3, r0, #6
200012ee:	428b      	cmp	r3, r1
200012f0:	d301      	bcc.n	200012f6 <__divsi3+0xba>
200012f2:	018b      	lsls	r3, r1, #6
200012f4:	1ac0      	subs	r0, r0, r3
200012f6:	4152      	adcs	r2, r2
200012f8:	0943      	lsrs	r3, r0, #5
200012fa:	428b      	cmp	r3, r1
200012fc:	d301      	bcc.n	20001302 <__divsi3+0xc6>
200012fe:	014b      	lsls	r3, r1, #5
20001300:	1ac0      	subs	r0, r0, r3
20001302:	4152      	adcs	r2, r2
20001304:	0903      	lsrs	r3, r0, #4
20001306:	428b      	cmp	r3, r1
20001308:	d301      	bcc.n	2000130e <__divsi3+0xd2>
2000130a:	010b      	lsls	r3, r1, #4
2000130c:	1ac0      	subs	r0, r0, r3
2000130e:	4152      	adcs	r2, r2
20001310:	08c3      	lsrs	r3, r0, #3
20001312:	428b      	cmp	r3, r1
20001314:	d301      	bcc.n	2000131a <__divsi3+0xde>
20001316:	00cb      	lsls	r3, r1, #3
20001318:	1ac0      	subs	r0, r0, r3
2000131a:	4152      	adcs	r2, r2
2000131c:	0883      	lsrs	r3, r0, #2
2000131e:	428b      	cmp	r3, r1
20001320:	d301      	bcc.n	20001326 <__divsi3+0xea>
20001322:	008b      	lsls	r3, r1, #2
20001324:	1ac0      	subs	r0, r0, r3
20001326:	4152      	adcs	r2, r2
20001328:	0843      	lsrs	r3, r0, #1
2000132a:	428b      	cmp	r3, r1
2000132c:	d301      	bcc.n	20001332 <__divsi3+0xf6>
2000132e:	004b      	lsls	r3, r1, #1
20001330:	1ac0      	subs	r0, r0, r3
20001332:	4152      	adcs	r2, r2
20001334:	1a41      	subs	r1, r0, r1
20001336:	d200      	bcs.n	2000133a <__divsi3+0xfe>
20001338:	4601      	mov	r1, r0
2000133a:	4152      	adcs	r2, r2
2000133c:	4610      	mov	r0, r2
2000133e:	4770      	bx	lr
20001340:	e05d      	b.n	200013fe <__divsi3+0x1c2>
20001342:	0fca      	lsrs	r2, r1, #31
20001344:	d000      	beq.n	20001348 <__divsi3+0x10c>
20001346:	4249      	negs	r1, r1
20001348:	1003      	asrs	r3, r0, #32
2000134a:	d300      	bcc.n	2000134e <__divsi3+0x112>
2000134c:	4240      	negs	r0, r0
2000134e:	4053      	eors	r3, r2
20001350:	2200      	movs	r2, #0
20001352:	469c      	mov	ip, r3
20001354:	0903      	lsrs	r3, r0, #4
20001356:	428b      	cmp	r3, r1
20001358:	d32d      	bcc.n	200013b6 <__divsi3+0x17a>
2000135a:	0a03      	lsrs	r3, r0, #8
2000135c:	428b      	cmp	r3, r1
2000135e:	d312      	bcc.n	20001386 <__divsi3+0x14a>
20001360:	22fc      	movs	r2, #252	; 0xfc
20001362:	0189      	lsls	r1, r1, #6
20001364:	ba12      	rev	r2, r2
20001366:	0a03      	lsrs	r3, r0, #8
20001368:	428b      	cmp	r3, r1
2000136a:	d30c      	bcc.n	20001386 <__divsi3+0x14a>
2000136c:	0189      	lsls	r1, r1, #6
2000136e:	1192      	asrs	r2, r2, #6
20001370:	428b      	cmp	r3, r1
20001372:	d308      	bcc.n	20001386 <__divsi3+0x14a>
20001374:	0189      	lsls	r1, r1, #6
20001376:	1192      	asrs	r2, r2, #6
20001378:	428b      	cmp	r3, r1
2000137a:	d304      	bcc.n	20001386 <__divsi3+0x14a>
2000137c:	0189      	lsls	r1, r1, #6
2000137e:	d03a      	beq.n	200013f6 <__divsi3+0x1ba>
20001380:	1192      	asrs	r2, r2, #6
20001382:	e000      	b.n	20001386 <__divsi3+0x14a>
20001384:	0989      	lsrs	r1, r1, #6
20001386:	09c3      	lsrs	r3, r0, #7
20001388:	428b      	cmp	r3, r1
2000138a:	d301      	bcc.n	20001390 <__divsi3+0x154>
2000138c:	01cb      	lsls	r3, r1, #7
2000138e:	1ac0      	subs	r0, r0, r3
20001390:	4152      	adcs	r2, r2
20001392:	0983      	lsrs	r3, r0, #6
20001394:	428b      	cmp	r3, r1
20001396:	d301      	bcc.n	2000139c <__divsi3+0x160>
20001398:	018b      	lsls	r3, r1, #6
2000139a:	1ac0      	subs	r0, r0, r3
2000139c:	4152      	adcs	r2, r2
2000139e:	0943      	lsrs	r3, r0, #5
200013a0:	428b      	cmp	r3, r1
200013a2:	d301      	bcc.n	200013a8 <__divsi3+0x16c>
200013a4:	014b      	lsls	r3, r1, #5
200013a6:	1ac0      	subs	r0, r0, r3
200013a8:	4152      	adcs	r2, r2
200013aa:	0903      	lsrs	r3, r0, #4
200013ac:	428b      	cmp	r3, r1
200013ae:	d301      	bcc.n	200013b4 <__divsi3+0x178>
200013b0:	010b      	lsls	r3, r1, #4
200013b2:	1ac0      	subs	r0, r0, r3
200013b4:	4152      	adcs	r2, r2
200013b6:	08c3      	lsrs	r3, r0, #3
200013b8:	428b      	cmp	r3, r1
200013ba:	d301      	bcc.n	200013c0 <__divsi3+0x184>
200013bc:	00cb      	lsls	r3, r1, #3
200013be:	1ac0      	subs	r0, r0, r3
200013c0:	4152      	adcs	r2, r2
200013c2:	0883      	lsrs	r3, r0, #2
200013c4:	428b      	cmp	r3, r1
200013c6:	d301      	bcc.n	200013cc <__divsi3+0x190>
200013c8:	008b      	lsls	r3, r1, #2
200013ca:	1ac0      	subs	r0, r0, r3
200013cc:	4152      	adcs	r2, r2
200013ce:	d2d9      	bcs.n	20001384 <__divsi3+0x148>
200013d0:	0843      	lsrs	r3, r0, #1
200013d2:	428b      	cmp	r3, r1
200013d4:	d301      	bcc.n	200013da <__divsi3+0x19e>
200013d6:	004b      	lsls	r3, r1, #1
200013d8:	1ac0      	subs	r0, r0, r3
200013da:	4152      	adcs	r2, r2
200013dc:	1a41      	subs	r1, r0, r1
200013de:	d200      	bcs.n	200013e2 <__divsi3+0x1a6>
200013e0:	4601      	mov	r1, r0
200013e2:	4663      	mov	r3, ip
200013e4:	4152      	adcs	r2, r2
200013e6:	105b      	asrs	r3, r3, #1
200013e8:	4610      	mov	r0, r2
200013ea:	d301      	bcc.n	200013f0 <__divsi3+0x1b4>
200013ec:	4240      	negs	r0, r0
200013ee:	2b00      	cmp	r3, #0
200013f0:	d500      	bpl.n	200013f4 <__divsi3+0x1b8>
200013f2:	4249      	negs	r1, r1
200013f4:	4770      	bx	lr
200013f6:	4663      	mov	r3, ip
200013f8:	105b      	asrs	r3, r3, #1
200013fa:	d300      	bcc.n	200013fe <__divsi3+0x1c2>
200013fc:	4240      	negs	r0, r0
200013fe:	b501      	push	{r0, lr}
20001400:	2000      	movs	r0, #0
20001402:	f000 f805 	bl	20001410 <__aeabi_idiv0>
20001406:	bd02      	pop	{r1, pc}

20001408 <__aeabi_idivmod>:
20001408:	2900      	cmp	r1, #0
2000140a:	d0f8      	beq.n	200013fe <__divsi3+0x1c2>
2000140c:	e716      	b.n	2000123c <__divsi3>
2000140e:	4770      	bx	lr

20001410 <__aeabi_idiv0>:
20001410:	4770      	bx	lr
20001412:	46c0      	nop			; (mov r8, r8)

20001414 <memcpy>:
20001414:	2300      	movs	r3, #0
20001416:	b510      	push	{r4, lr}
20001418:	429a      	cmp	r2, r3
2000141a:	d100      	bne.n	2000141e <memcpy+0xa>
2000141c:	bd10      	pop	{r4, pc}
2000141e:	5ccc      	ldrb	r4, [r1, r3]
20001420:	54c4      	strb	r4, [r0, r3]
20001422:	3301      	adds	r3, #1
20001424:	e7f8      	b.n	20001418 <memcpy+0x4>
	...

20001428 <seed>:
20001428:	0000      	movs	r0, r0
	...

2000142c <backBuffer>:
	...

20001c2c <pedro_still>:
20001c2c:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20001c30:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20001c34:	1f1f7fff 	svcne	0x001f7fff
20001c38:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20001c3c:	00806030 	addeq	r6, r0, r0, lsr r0
20001c40:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20001c44:	01831f1f 	orreq	r1, r3, pc, lsl pc
20001c48:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20001c4c:	24000004 	strcs	r0, [r0], #-4
20001c50:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20001c54:	03010000 	movweq	r0, #4096	; 0x1000
20001c58:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
20001c5c:	148c8040 	strne	r8, [ip], #64	; 0x40
20001c60:	1a283828 	bne	20a0fd08 <Pedro+0xa0df9c>
20001c64:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20001c68:	06000000 	streq	r0, [r0], -r0
20001c6c:	a47b0609 	ldrbtge	r0, [fp], #-1545	; 0xfffff9f7
20001c70:	e53ed5a4 	ldr	sp, [lr, #-1444]!	; 0xfffffa5c
20001c74:	0ac6bea5 	beq	1f1b1710 <startup-0xe4e8f0>
20001c78:	00000106 	andeq	r0, r0, r6, lsl #2

20001c7c <pedro_jump>:
20001c7c:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20001c80:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20001c84:	1f1f7fff 	svcne	0x001f7fff
20001c88:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20001c8c:	00806030 	addeq	r6, r0, r0, lsr r0
20001c90:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20001c94:	01831f1f 	orreq	r1, r3, pc, lsl pc
20001c98:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20001c9c:	24000004 	strcs	r0, [r0], #-4
20001ca0:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20001ca4:	03010000 	movweq	r0, #4096	; 0x1000
20001ca8:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
20001cac:	148c8040 	strne	r8, [ip], #64	; 0x40
20001cb0:	1a283828 	bne	20a0fd58 <Pedro+0xa0dfec>
20001cb4:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20001cb8:	76000000 	strvc	r0, [r0], -r0
20001cbc:	242b7e49 	strtcs	r7, [fp], #-3657	; 0xfffff1b7
20001cc0:	150e1514 	strne	r1, [lr, #-1300]	; 0xfffffaec
20001cc4:	3a2a2615 	bcc	20a8b520 <Pedro+0xa897b4>
20001cc8:	00001d26 	andeq	r1, r0, r6, lsr #26

20001ccc <pedro_walk1>:
20001ccc:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20001cd0:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20001cd4:	1f1f7fff 	svcne	0x001f7fff
20001cd8:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20001cdc:	00806030 	addeq	r6, r0, r0, lsr r0
20001ce0:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20001ce4:	01831f1f 	orreq	r1, r3, pc, lsl pc
20001ce8:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20001cec:	24000004 	strcs	r0, [r0], #-4
20001cf0:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20001cf4:	83010000 	movwhi	r0, #4096	; 0x1000
20001cf8:	22b12c46 	adcscs	r2, r1, #17920	; 0x4600
20001cfc:	148c8040 	strne	r8, [ip], #64	; 0x40
20001d00:	1a283828 	bne	20a0fda8 <Pedro+0xa0e03c>
20001d04:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20001d08:	07000000 	streq	r0, [r0, -r0]
20001d0c:	641b050a 	ldrvs	r0, [fp], #-1290	; 0xfffffaf6
20001d10:	a5deb5a4 	ldrbge	fp, [lr, #1444]	; 0x5a4
20001d14:	0a06ceb5 	beq	201b57f0 <Pedro+0x1b3a84>
20001d18:	00000106 	andeq	r0, r0, r6, lsl #2

20001d1c <pedro_walk2>:
20001d1c:	f0e0c000 			; <UNDEFINED> instruction: 0xf0e0c000
20001d20:	fefcfcf8 	mrc2	12, 7, pc, cr12, cr8, {7}
20001d24:	3e3efefe 	mrccc	14, 1, APSR_nzcv, cr14, cr14, {7}
20001d28:	30381c1e 	eorscc	r1, r8, lr, lsl ip
20001d2c:	0000c060 	andeq	ip, r0, r0, rrx
20001d30:	8fffff3e 	svchi	0x00ffff3e
20001d34:	03073f3f 	movweq	r3, #32575	; 0x7f3f
20001d38:	68480817 	stmdavs	r8, {r0, r1, r2, r4, fp}^
20001d3c:	48000008 	stmdami	r0, {r3}
20001d40:	f00f04e4 			; <UNDEFINED> instruction: 0xf00f04e4
20001d44:	07030000 	streq	r0, [r3, -r0]
20001d48:	44a338cc 	strtmi	r3, [r3], #2252	; 0x8cc
20001d4c:	28180080 	ldmdacs	r8, {r7}
20001d50:	34507050 	ldrbcc	r7, [r0], #-80	; 0xffffffb0
20001d54:	0ff00304 	svceq	0x00f00304
20001d58:	00000000 	andeq	r0, r0, r0
20001d5c:	a5ae7300 	strge	r7, [lr, #768]!	; 0x300
20001d60:	e61d0bd6 			; <UNDEFINED> instruction: 0xe61d0bd6
20001d64:	04c4bca6 	strbeq	fp, [r4], #3238	; 0xca6
20001d68:	00010204 	andeq	r0, r1, r4, lsl #4

20001d6c <Pedro>:
20001d6c:	00000020 	andeq	r0, r0, r0, lsr #32
20001d70:	00000014 	andeq	r0, r0, r4, lsl r0
20001d74:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20001d90:	20001c2c 	andcs	r1, r0, ip, lsr #24
20001d94:	20000269 	andcs	r0, r0, r9, ror #4
20001d98:	00000000 	andeq	r0, r0, r0
20001d9c:	1c0c07f8 	stcne	7, cr0, [ip], {248}	; 0xf8
20001da0:	e00c3004 	and	r3, ip, r4
20001da4:	d81c87e8 	ldmdale	ip, {r3, r5, r6, r7, r8, r9, sl, pc}
20001da8:	20076006 	andcs	r6, r7, r6
20001dac:	600b200f 	andvs	r2, fp, pc
20001db0:	8fcdd039 	svchi	0x00cdd039
20001db4:	6004c004 	andvs	ip, r4, r4
20001db8:	1ff8300c 	svcne	0x00f8300c
20001dbc:	5f5f5f5f 	svcpl	0x005f5f5f
20001dc0:	5f6f6f5f 	svcpl	0x006f6f5f
20001dc4:	5f5f385f 	svcpl	0x005f385f
20001dc8:	6f5f6f5f 	svcvs	0x005f6f5f
20001dcc:	6f5f5f6f 	svcvs	0x005f5f6f
20001dd0:	5f5f6f5f 	svcpl	0x005f6f5f
20001dd4:	5f385f5f 	svcpl	0x00385f5f
20001dd8:	5f386f5f 	svcpl	0x00386f5f
20001ddc:	5f6f5f5f 	svcpl	0x006f5f5f
20001de0:	5f5f5f5f 	svcpl	0x005f5f5f
20001de4:	5f5f5f5f 	svcpl	0x005f5f5f
20001de8:	5f5f5f6f 	svcpl	0x005f5f6f
20001dec:	6f5f5f5f 	svcvs	0x005f5f5f
20001df0:	5f6f5f6f 	svcpl	0x006f5f6f
20001df4:	5f6f385f 	svcpl	0x006f385f
20001df8:	5f5f6f5f 	svcpl	0x005f6f5f
20001dfc:	5f6f5f5f 	svcpl	0x006f5f5f
20001e00:	5f5f5f6f 	svcpl	0x005f5f6f
20001e04:	6f5f5f5f 	svcvs	0x005f5f5f
20001e08:	5f5f5f5f 	svcpl	0x005f5f5f

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000a9 	andeq	r0, r0, r9, lsr #1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000035 	andeq	r0, r0, r5, lsr r0
      10:	0000cd0c 	andeq	ip, r0, ip, lsl #26
      14:	00000000 	andeq	r0, r0, r0
      18:	00001000 	andeq	r1, r0, r0
      1c:	0000ca20 	andeq	ip, r0, r0, lsr #20
      20:	00000000 	andeq	r0, r0, r0
      24:	00f30200 	rscseq	r0, r3, r0, lsl #4
      28:	1f010000 	svcne	0x00010000
      2c:	200000c2 	andcs	r0, r0, r2, asr #1
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00499c01 	subeq	r9, r9, r1, lsl #24
      38:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	0000491f 	andeq	r4, r0, pc, lsl r9
      44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      50:	00002902 	andeq	r2, r0, r2, lsl #18
      54:	98150100 	ldmdals	r5, {r8}
      58:	2a200000 	bcs	800060 <startup-0x1f7fffa0>
      5c:	01000000 	mrseq	r0, (UNDEF: 0)
      60:	00008a9c 	muleq	r0, ip, sl
      64:	002e0300 	eoreq	r0, lr, r0, lsl #6
      68:	15010000 	strne	r0, [r1, #-0]
      6c:	00000049 	andeq	r0, r0, r9, asr #32
      70:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
      74:	200000a0 	andcs	r0, r0, r0, lsr #1
      78:	0000001a 	andeq	r0, r0, sl, lsl r0
      7c:	01006906 	tsteq	r0, r6, lsl #18
      80:	00004919 	andeq	r4, r0, r9, lsl r9
      84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      88:	1d070000 	stcne	0, cr0, [r7, #-0]
      8c:	01000000 	mrseq	r0, (UNDEF: 0)
      90:	0000540c 	andeq	r5, r0, ip, lsl #8
      94:	00004420 	andeq	r4, r0, r0, lsr #8
      98:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
      9c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      a0:	00100301 	andseq	r0, r0, r1, lsl #6
      a4:	00442000 	subeq	r2, r4, r0
      a8:	9c010000 	stcls	0, cr0, [r1], {-0}
      ac:	00046e00 	andeq	r6, r4, r0, lsl #28
      b0:	76000400 	strvc	r0, [r0], -r0, lsl #8
      b4:	04000000 	streq	r0, [r0], #-0
      b8:	00003501 	andeq	r3, r0, r1, lsl #10
      bc:	014d0c00 	cmpeq	sp, r0, lsl #24
      c0:	00000000 	andeq	r0, r0, r0
      c4:	00dc0000 	sbcseq	r0, ip, r0
      c8:	056c2000 	strbeq	r2, [ip, #-0]!
      cc:	00870000 	addeq	r0, r7, r0
      d0:	3d020000 	stccc	0, cr0, [r2, #-0]
      d4:	30000002 	andcc	r0, r0, r2
      d8:	00c20b02 	sbceq	r0, r2, r2, lsl #22
      dc:	13030000 	movwne	r0, #12288	; 0x3000
      e0:	02000002 	andeq	r0, r0, #2
      e4:	0000c20c 	andeq	ip, r0, ip, lsl #4
      e8:	a0030000 	andge	r0, r3, r0
      ec:	02000001 	andeq	r0, r0, #1
      f0:	0000c20d 	andeq	ip, r0, sp, lsl #4
      f4:	0b030400 	bleq	c10fc <startup-0x1ff3ef04>
      f8:	02000001 	andeq	r0, r0, #1
      fc:	0000c20e 	andeq	ip, r0, lr, lsl #4
     100:	84030800 	strhi	r0, [r3], #-2048	; 0xfffff800
     104:	02000002 	andeq	r0, r0, #2
     108:	0000c20e 	andeq	ip, r0, lr, lsl #4
     10c:	bf030c00 	svclt	0x00030c00
     110:	02000001 	andeq	r0, r0, #1
     114:	0000c20f 	andeq	ip, r0, pc, lsl #4
     118:	c4031000 	strgt	r1, [r3], #-0
     11c:	02000001 	andeq	r0, r0, #1
     120:	0000c20f 	andeq	ip, r0, pc, lsl #4
     124:	7c031400 	cfstrsvc	mvf1, [r3], {-0}
     128:	02000001 	andeq	r0, r0, #1
     12c:	0000c210 	andeq	ip, r0, r0, lsl r2
     130:	81031800 	tsthi	r3, r0, lsl #16
     134:	02000001 	andeq	r0, r0, #1
     138:	0000c210 	andeq	ip, r0, r0, lsl r2
     13c:	34031c00 	strcc	r1, [r3], #-3072	; 0xfffff400
     140:	02000002 	andeq	r0, r0, #2
     144:	0000c211 	andeq	ip, r0, r1, lsl r2
     148:	1a032000 	bne	c8150 <startup-0x1ff37eb0>
     14c:	02000002 	andeq	r0, r0, #2
     150:	0000c912 	andeq	ip, r0, r2, lsl r9
     154:	62032400 	andvs	r2, r3, #0, 8
     158:	02000002 	andeq	r0, r0, #2
     15c:	0000e713 	andeq	lr, r0, r3, lsl r7
     160:	2d032800 	stccs	8, cr2, [r3, #-0]
     164:	02000001 	andeq	r0, r0, #1
     168:	0000e714 	andeq	lr, r0, r4, lsl r7
     16c:	04002c00 	streq	r2, [r0], #-3072	; 0xfffff400
     170:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     174:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     178:	000000cf 	andeq	r0, r0, pc, asr #1
     17c:	e4080106 	str	r0, [r8], #-262	; 0xfffffefa
     180:	07000001 	streq	r0, [r0, -r1]
     184:	000000e1 	andeq	r0, r0, r1, ror #1
     188:	0000e108 	andeq	lr, r0, r8, lsl #2
     18c:	04050000 	streq	r0, [r5], #-0
     190:	00000025 	andeq	r0, r0, r5, lsr #32
     194:	00d60405 	sbcseq	r0, r6, r5, lsl #8
     198:	8a090000 	bhi	2401a0 <startup-0x1fdbfe60>
     19c:	02000002 	andeq	r0, r0, #2
     1a0:	00002515 	andeq	r2, r0, r5, lsl r5
     1a4:	02890900 	addeq	r0, r9, #0, 18
     1a8:	15020000 	strne	r0, [r2, #-0]
     1ac:	000000e1 	andeq	r0, r0, r1, ror #1
     1b0:	dd060106 	stfles	f0, [r6, #-24]	; 0xffffffe8
     1b4:	06000001 	streq	r0, [r0], -r1
     1b8:	01db0801 	bicseq	r0, fp, r1, lsl #16
     1bc:	0a0a0000 	beq	2801c4 <startup-0x1fd7fe3c>
     1c0:	06000001 	streq	r0, [r0], -r1
     1c4:	01320502 	teqeq	r2, r2, lsl #10
     1c8:	02060000 	andeq	r0, r6, #0
     1cc:	00022107 	andeq	r2, r2, r7, lsl #2
     1d0:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
     1d4:	000001ab 	andeq	r0, r0, fp, lsr #3
     1d8:	f3070406 	vshl.u8	d0, d6, d7
     1dc:	06000001 	streq	r0, [r0], -r1
     1e0:	01a60508 			; <UNDEFINED> instruction: 0x01a60508
     1e4:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     1e8:	0001ee07 	andeq	lr, r1, r7, lsl #28
     1ec:	07040600 	streq	r0, [r4, -r0, lsl #12]
     1f0:	000001f8 	strdeq	r0, [r0], -r8
     1f4:	0000cf0b 	andeq	ip, r0, fp, lsl #30
     1f8:	00015d00 	andeq	r5, r1, r0, lsl #26
     1fc:	01400c00 	cmpeq	r0, r0, lsl #24
     200:	0cff0000 	ldcleq	0, cr0, [pc]	; 208 <startup-0x1ffffdf8>
     204:	00000140 	andeq	r0, r0, r0, asr #2
     208:	460d0007 	strmi	r0, [sp], -r7
     20c:	01000009 	tsteq	r0, r9
     210:	00014705 	andeq	r4, r1, r5, lsl #14
     214:	01110b00 	tsteq	r1, r0, lsl #22
     218:	017e0000 	cmneq	lr, r0
     21c:	400c0000 	andmi	r0, ip, r0
     220:	03000001 	movweq	r0, #1
     224:	0001400c 	andeq	r4, r1, ip
     228:	0a001300 	beq	4e30 <startup-0x1fffb1d0>
     22c:	00000168 	andeq	r0, r0, r8, ror #2
     230:	0002560e 	andeq	r5, r2, lr, lsl #12
     234:	7e080100 	adfvce	f0, f0, f0
     238:	05000001 	streq	r0, [r0, #-1]
     23c:	001c2c03 	andseq	r2, ip, r3, lsl #24
     240:	01270e20 			; <UNDEFINED> instruction: 0x01270e20
     244:	0c010000 	stceq	0, cr0, [r1], {-0}
     248:	0000017e 	andeq	r0, r0, lr, ror r1
     24c:	1c7c0305 	ldclne	3, cr0, [ip], #-20	; 0xffffffec
     250:	a10e2000 	mrsge	r2, (UNDEF: 14)
     254:	01000002 	tsteq	r0, r2
     258:	00017e10 	andeq	r7, r1, r0, lsl lr
     25c:	cc030500 	cfstr32gt	mvfx0, [r3], {-0}
     260:	0e20001c 	miaeq	acc0, ip, r0
     264:	000002ad 	andeq	r0, r0, sp, lsr #5
     268:	017e1401 	cmneq	lr, r1, lsl #8
     26c:	03050000 	movweq	r0, #20480	; 0x5000
     270:	20001d1c 	andcs	r1, r0, ip, lsl sp
     274:	0000170e 	andeq	r1, r0, lr, lsl #14
     278:	ed1b0100 	ldfs	f0, [fp, #-0]
     27c:	05000000 	streq	r0, [r0, #-0]
     280:	001d6c03 	andseq	r6, sp, r3, lsl #24
     284:	01980f20 	orrseq	r0, r8, r0, lsr #30
     288:	c6010000 	strgt	r0, [r1], -r0
     28c:	000000c2 	andeq	r0, r0, r2, asr #1
     290:	20000634 	andcs	r0, r0, r4, lsr r6
     294:	00000014 	andeq	r0, r0, r4, lsl r0
     298:	740f9c01 	strvc	r9, [pc], #-3073	; 2a0 <startup-0x1ffffd60>
     29c:	01000002 	tsteq	r0, r2
     2a0:	0000c2c3 	andeq	ip, r0, r3, asr #5
     2a4:	00062000 	andeq	r2, r6, r0
     2a8:	00001420 	andeq	r1, r0, r0, lsr #8
     2ac:	109c0100 	addsne	r0, ip, r0, lsl #2
     2b0:	0000011a 	andeq	r0, r0, sl, lsl r1
     2b4:	00c2b301 	sbceq	fp, r2, r1, lsl #6
     2b8:	05700000 	ldrbeq	r0, [r0, #-0]!
     2bc:	00b02000 	adcseq	r2, r0, r0
     2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2c4:	00000276 	andeq	r0, r0, r6, ror r2
     2c8:	00028011 	andeq	r8, r2, r1, lsl r0
     2cc:	c2b30100 	adcsgt	r0, r3, #0, 2
     2d0:	02000000 	andeq	r0, r0, #0
     2d4:	6d125c91 	ldcvs	12, cr5, [r2, #-580]	; 0xfffffdbc
     2d8:	01006e61 	tsteq	r0, r1, ror #28
     2dc:	000276b4 			; <UNDEFINED> instruction: 0x000276b4
     2e0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     2e4:	01006912 	tsteq	r0, r2, lsl r9
     2e8:	00010ab5 			; <UNDEFINED> instruction: 0x00010ab5
     2ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     2f0:	01007312 	tsteq	r0, r2, lsl r3
     2f4:	0000c2b6 			; <UNDEFINED> instruction: 0x0000c2b6
     2f8:	70910200 	addsvc	r0, r1, r0, lsl #4
     2fc:	00058c13 	andeq	r8, r5, r3, lsl ip
     300:	00005820 	andeq	r5, r0, r0, lsr #16
     304:	01e90e00 	mvneq	r0, r0, lsl #28
     308:	b8010000 	stmdalt	r1, {}	; <UNPREDICTABLE>
     30c:	0000010a 	andeq	r0, r0, sl, lsl #2
     310:	0e6b9102 	lgneqe	f1, f2
     314:	000001b4 			; <UNDEFINED> instruction: 0x000001b4
     318:	00c2b901 	sbceq	fp, r2, r1, lsl #18
     31c:	91020000 	mrsls	r0, (UNDEF: 2)
     320:	05000064 	streq	r0, [r0, #-100]	; 0xffffff9c
     324:	00010a04 	andeq	r0, r1, r4, lsl #20
     328:	02051400 	andeq	r1, r5, #0, 8
     32c:	a0010000 	andge	r0, r1, r0
     330:	000000cf 	andeq	r0, r0, pc, asr #1
     334:	200004a4 	andcs	r0, r0, r4, lsr #9
     338:	000000cc 	andeq	r0, r0, ip, asr #1
     33c:	02ee9c01 	rsceq	r9, lr, #256	; 0x100
     340:	420e0000 	andmi	r0, lr, #0
     344:	01000002 	tsteq	r0, r2
     348:	000140a4 	andeq	r4, r1, r4, lsr #1
     34c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     350:	0001720e 	andeq	r7, r1, lr, lsl #4
     354:	c2ab0100 	adcgt	r0, fp, #0, 2
     358:	02000000 	andeq	r0, r0, #0
     35c:	ae136c91 	mrcge	12, 0, r6, cr3, cr1, {4}
     360:	96200004 	strtls	r0, [r0], -r4
     364:	12000000 	andne	r0, r0, #0
     368:	a5010069 	strge	r0, [r1, #-105]	; 0xffffff97
     36c:	000000c2 	andeq	r0, r0, r2, asr #1
     370:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     374:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
     378:	00000084 	andeq	r0, r0, r4, lsl #1
     37c:	0001b40e 	andeq	fp, r1, lr, lsl #8
     380:	cfa60100 	svcgt	0x00a60100
     384:	02000000 	andeq	r0, r0, #0
     388:	6f0e6b91 	svcvs	0x000e6b91
     38c:	01000002 	tsteq	r0, r2
     390:	0000cfa7 	andeq	ip, r0, r7, lsr #31
     394:	6a910200 	bvs	fe440b9c <Pedro+0xde43ee30>
     398:	15000000 	strne	r0, [r0, #-0]
     39c:	00000262 	andeq	r0, r0, r2, ror #4
     3a0:	02687d01 	rsbeq	r7, r8, #1, 26	; 0x40
     3a4:	023c2000 	eorseq	r2, ip, #0
     3a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3ac:	000003ae 	andeq	r0, r0, lr, lsr #7
     3b0:	00013c11 	andeq	r3, r1, r1, lsl ip
     3b4:	f87d0100 			; <UNDEFINED> instruction: 0xf87d0100
     3b8:	02000000 	andeq	r0, r0, #0
     3bc:	69125491 	ldmdbvs	r2, {r0, r4, r7, sl, ip, lr}
     3c0:	0a7e0100 	beq	1f807c8 <startup-0x1e07f838>
     3c4:	02000001 	andeq	r0, r0, #1
     3c8:	6a127791 	bvs	49e214 <startup-0x1fb61dec>
     3cc:	0a7e0100 	beq	1f807d4 <startup-0x1e07f82c>
     3d0:	02000001 	andeq	r0, r0, #1
     3d4:	6d127691 	ldcvs	6, cr7, [r2, #-580]	; 0xfffffdbc
     3d8:	01006e61 	tsteq	r0, r1, ror #28
     3dc:	0002767f 	andeq	r7, r2, pc, ror r6
     3e0:	70910200 	addsvc	r0, r1, r0, lsl #4
     3e4:	0001b90e 	andeq	fp, r1, lr, lsl #18
     3e8:	c2800100 	addgt	r0, r0, #0, 2
     3ec:	02000000 	andeq	r0, r0, #0
     3f0:	1c166c91 	ldcne	12, cr6, [r6], {145}	; 0x91
     3f4:	42200003 	eormi	r0, r0, #3
     3f8:	6f000000 	svcvs	0x00000000
     3fc:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     400:	0000024f 	andeq	r0, r0, pc, asr #4
     404:	02768701 	rsbseq	r8, r6, #262144	; 0x40000
     408:	91020000 	mrsls	r0, (UNDEF: 2)
     40c:	01d60e60 	bicseq	r0, r6, r0, ror #28
     410:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
     414:	0000010a 	andeq	r0, r0, sl, lsl #2
     418:	005f9102 	subseq	r9, pc, r2, lsl #2
     41c:	00036013 	andeq	r6, r3, r3, lsl r0
     420:	0000f020 	andeq	pc, r0, r0, lsr #32
     424:	024f0e00 	subeq	r0, pc, #0, 28
     428:	8d010000 	stchi	0, cr0, [r1, #-0]
     42c:	00000276 	andeq	r0, r0, r6, ror r2
     430:	0e689102 	lgneqe	f1, f2
     434:	000001d6 	ldrdeq	r0, [r0], -r6
     438:	010a8e01 	tsteq	sl, r1, lsl #28
     43c:	91020000 	mrsls	r0, (UNDEF: 2)
     440:	03a81375 			; <UNDEFINED> instruction: 0x03a81375
     444:	00502000 	subseq	r2, r0, r0
     448:	860e0000 	strhi	r0, [lr], -r0
     44c:	01000001 	tsteq	r0, r1
     450:	00010a91 	muleq	r1, r1, sl
     454:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
     458:	0f000000 	svceq	0x00000000
     45c:	00000143 	andeq	r0, r0, r3, asr #2
     460:	00cf7801 	sbceq	r7, pc, r1, lsl #16
     464:	02500000 	subseq	r0, r0, #0
     468:	00182000 	andseq	r2, r8, r0
     46c:	9c010000 	stcls	0, cr0, [r1], {-0}
     470:	0001c917 	andeq	ip, r1, r7, lsl r9
     474:	186f0100 	stmdane	pc!, {r8}^	; <UNPREDICTABLE>
     478:	38200002 	stmdacc	r0!, {r1}
     47c:	01000000 	mrseq	r0, (UNDEF: 0)
     480:	0110189c 			; <UNDEFINED> instruction: 0x0110189c
     484:	44010000 	strmi	r0, [r1], #-0
     488:	20000158 	andcs	r0, r0, r8, asr r1
     48c:	000000c0 	andeq	r0, r0, r0, asr #1
     490:	042d9c01 	strteq	r9, [sp], #-3073	; 0xfffff3ff
     494:	5c160000 	ldcpl	0, cr0, [r6], {-0}
     498:	7c200001 	stcvc	0, cr0, [r0], #-4
     49c:	15000000 	strne	r0, [r0, #-0]
     4a0:	19000004 	stmdbne	r0, {r2}
     4a4:	00000291 	muleq	r0, r1, r2
     4a8:	00c24501 	sbceq	r4, r2, r1, lsl #10
     4ac:	04070000 	streq	r0, [r7], #-0
     4b0:	001a0000 	andseq	r0, sl, r0
     4b4:	00018e1b 	andeq	r8, r1, fp, lsl lr
     4b8:	c2450100 	subgt	r0, r5, #0, 2
     4bc:	1a000000 	bne	4c4 <startup-0x1ffffb3c>
     4c0:	ee130000 	cdp	0, 1, cr0, cr3, cr0, {0}
     4c4:	1a200001 	bne	8004d0 <startup-0x1f7ffb30>
     4c8:	1b000000 	blne	4d0 <startup-0x1ffffb30>
     4cc:	00000267 	andeq	r0, r0, r7, ror #4
     4d0:	00c26601 	sbceq	r6, r2, r1, lsl #12
     4d4:	001a0000 	andseq	r0, sl, r0
     4d8:	9c1c0000 	ldcls	0, cr0, [ip], {-0}
     4dc:	01000002 	tsteq	r0, r2
     4e0:	0000dc2d 	andeq	sp, r0, sp, lsr #24
     4e4:	00007c20 	andeq	r7, r0, r0, lsr #24
     4e8:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     4ec:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     4f0:	00000022 	andeq	r0, r0, r2, lsr #32
     4f4:	00000459 	andeq	r0, r0, r9, asr r4
     4f8:	0000f31b 	andeq	pc, r0, fp, lsl r3	; <UNPREDICTABLE>
     4fc:	c2350100 	eorsgt	r0, r5, #0, 2
     500:	1a000000 	bne	508 <startup-0x1ffffaf8>
     504:	1c130000 	ldcne	0, cr0, [r3], {-0}
     508:	24200001 	strtcs	r0, [r0], #-1
     50c:	1b000000 	blne	514 <startup-0x1ffffaec>
     510:	000000f3 	strdeq	r0, [r0], -r3
     514:	00c23501 	sbceq	r3, r2, r1, lsl #10
     518:	001a0000 	andseq	r0, sl, r0
     51c:	1d000000 	stcne	0, cr0, [r0, #-0]
     520:	04000001 	streq	r0, [r0], #-1
     524:	00022400 	andeq	r2, r2, r0, lsl #8
     528:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
     52c:	0c000000 	stceq	0, cr0, [r0], {-0}
     530:	000002de 	ldrdeq	r0, [r0], -lr
     534:	00000000 	andeq	r0, r0, r0
     538:	20000648 	andcs	r0, r0, r8, asr #12
     53c:	000000a8 	andeq	r0, r0, r8, lsr #1
     540:	000001c2 	andeq	r0, r0, r2, asr #3
     544:	dd060102 	stfles	f0, [r6, #-8]
     548:	02000001 	andeq	r0, r0, #1
     54c:	01db0801 	bicseq	r0, fp, r1, lsl #16
     550:	02020000 	andeq	r0, r2, #0
     554:	00013205 	andeq	r3, r1, r5, lsl #4
     558:	07020200 	streq	r0, [r2, -r0, lsl #4]
     55c:	00000221 	andeq	r0, r0, r1, lsr #4
     560:	ab050402 	blge	141570 <startup-0x1febea90>
     564:	03000001 	movweq	r0, #1
     568:	000002c1 	andeq	r0, r0, r1, asr #5
     56c:	00534f02 	subseq	r4, r3, r2, lsl #30
     570:	04020000 	streq	r0, [r2], #-0
     574:	0001f307 	andeq	pc, r1, r7, lsl #6
     578:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     57c:	000001a6 	andeq	r0, r0, r6, lsr #3
     580:	ee070802 	cdp	8, 0, cr0, cr7, cr2, {0}
     584:	04000001 	streq	r0, [r0], #-1
     588:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     58c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     590:	0001f807 	andeq	pc, r1, r7, lsl #16
     594:	02c30300 	sbceq	r0, r3, #0, 6
     598:	30030000 	andcc	r0, r3, r0
     59c:	00000048 	andeq	r0, r0, r8, asr #32
     5a0:	0002cc03 	andeq	ip, r2, r3, lsl #24
     5a4:	76070400 	strvc	r0, [r7], -r0, lsl #8
     5a8:	05000000 	streq	r0, [r0, #-0]
     5ac:	000002d6 	ldrdeq	r0, [r0], -r6
     5b0:	00810c01 	addeq	r0, r1, r1, lsl #24
     5b4:	067a0000 	ldrbteq	r0, [sl], -r0
     5b8:	00762000 	rsbseq	r2, r6, r0
     5bc:	9c010000 	stcls	0, cr0, [r1], {-0}
     5c0:	000000d6 	ldrdeq	r0, [r0], -r6
     5c4:	0005d106 	andeq	sp, r5, r6, lsl #2
     5c8:	d60c0100 	strle	r0, [ip], -r0, lsl #2
     5cc:	02000000 	andeq	r0, r0, #0
     5d0:	78076c91 	stmdavc	r7, {r0, r4, r7, sl, fp, sp, lr}
     5d4:	810e0100 	mrshi	r0, (UNDEF: 30)
     5d8:	02000000 	andeq	r0, r0, #0
     5dc:	b8087491 	stmdalt	r8, {r0, r4, r7, sl, ip, sp, lr}
     5e0:	2a200006 	bcs	800600 <startup-0x1f7ffa00>
     5e4:	07000000 	streq	r0, [r0, -r0]
     5e8:	0f010069 	svceq	0x00010069
     5ec:	00000068 	andeq	r0, r0, r8, rrx
     5f0:	00709102 	rsbseq	r9, r0, r2, lsl #2
     5f4:	81040900 	tsthi	r4, r0, lsl #18
     5f8:	0a000000 	beq	600 <startup-0x1ffffa00>
     5fc:	000002b9 			; <UNDEFINED> instruction: 0x000002b9
     600:	06480501 	strbeq	r0, [r8], -r1, lsl #10
     604:	00322000 	eorseq	r2, r2, r0
     608:	9c010000 	stcls	0, cr0, [r1], {-0}
     60c:	0005d106 	andeq	sp, r5, r6, lsl #2
     610:	d6050100 	strle	r0, [r5], -r0, lsl #2
     614:	02000000 	andeq	r0, r0, #0
     618:	9d066c91 	stcls	12, cr6, [r6, #-580]	; 0xfffffdbc
     61c:	01000006 	tsteq	r0, r6
     620:	00007605 	andeq	r7, r0, r5, lsl #12
     624:	68910200 	ldmvs	r1, {r9}
     628:	00065808 	andeq	r5, r6, r8, lsl #16
     62c:	00001a20 	andeq	r1, r0, r0, lsr #20
     630:	00690700 	rsbeq	r0, r9, r0, lsl #14
     634:	00680701 	rsbeq	r0, r8, r1, lsl #14
     638:	91020000 	mrsls	r0, (UNDEF: 2)
     63c:	00000074 	andeq	r0, r0, r4, ror r0
     640:	0000017a 	andeq	r0, r0, sl, ror r1
     644:	02bf0004 	adcseq	r0, pc, #4
     648:	01040000 	mrseq	r0, (UNDEF: 4)
     64c:	00000035 	andeq	r0, r0, r5, lsr r0
     650:	0003070c 	andeq	r0, r3, ip, lsl #14
     654:	00000000 	andeq	r0, r0, r0
     658:	0006f000 	andeq	pc, r6, r0
     65c:	00013620 	andeq	r3, r1, r0, lsr #12
     660:	0002f300 	andeq	pc, r2, r0, lsl #6
     664:	02020200 	andeq	r0, r2, #0, 4
     668:	0000460c 	andeq	r4, r0, ip, lsl #12
     66c:	03510300 	cmpeq	r1, #0, 6
     670:	0d020000 	stceq	0, cr0, [r2, #-0]
     674:	00000046 	andeq	r0, r0, r6, asr #32
     678:	03790300 	cmneq	r9, #0, 6
     67c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     680:	00000046 	andeq	r0, r0, r6, asr #32
     684:	01040001 	tsteq	r4, r1
     688:	0001db08 	andeq	sp, r1, r8, lsl #22
     68c:	02040500 	andeq	r0, r4, #0, 10
     690:	0000660a 	andeq	r6, r0, sl, lsl #12
     694:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
     698:	0b020072 	bleq	80868 <startup-0x1ff7f798>
     69c:	00000066 	andeq	r0, r0, r6, rrx
     6a0:	00002507 	andeq	r2, r0, r7, lsl #10
     6a4:	04040000 	streq	r0, [r4], #-0
     6a8:	0001f807 	andeq	pc, r1, r7, lsl #16
     6ac:	02020200 	andeq	r0, r2, #0, 4
     6b0:	00008e13 	andeq	r8, r0, r3, lsl lr
     6b4:	034a0300 	movteq	r0, #41728	; 0xa300
     6b8:	14020000 	strne	r0, [r2], #-0
     6bc:	00000046 	andeq	r0, r0, r6, asr #32
     6c0:	03350300 	teqeq	r5, #0, 6
     6c4:	15020000 	strne	r0, [r2, #-0]
     6c8:	00000046 	andeq	r0, r0, r6, asr #32
     6cc:	04050001 	streq	r0, [r5], #-1
     6d0:	00a71102 	adceq	r1, r7, r2, lsl #2
     6d4:	6f060000 	svcvs	0x00060000
     6d8:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     6dc:	00006612 	andeq	r6, r0, r2, lsl r6
     6e0:	006d0700 	rsbeq	r0, sp, r0, lsl #14
     6e4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     6e8:	00000362 	andeq	r0, r0, r2, ror #6
     6ec:	f0040218 			; <UNDEFINED> instruction: 0xf0040218
     6f0:	03000000 	movweq	r0, #0
     6f4:	0000032f 	andeq	r0, r0, pc, lsr #6
     6f8:	00660502 	rsbeq	r0, r6, r2, lsl #10
     6fc:	03000000 	movweq	r0, #0
     700:	0000033d 	andeq	r0, r0, sp, lsr r3
     704:	00660602 	rsbeq	r0, r6, r2, lsl #12
     708:	03040000 	movweq	r0, #16384	; 0x4000
     70c:	00000381 	andeq	r0, r0, r1, lsl #7
     710:	00660702 	rsbeq	r0, r6, r2, lsl #14
     714:	03080000 	movweq	r0, #32768	; 0x8000
     718:	00000344 	andeq	r0, r0, r4, asr #6
     71c:	00660802 	rsbeq	r0, r6, r2, lsl #16
     720:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     724:	0000004d 	andeq	r0, r0, sp, asr #32
     728:	008e0910 	addeq	r0, lr, r0, lsl r9
     72c:	00140000 	andseq	r0, r4, r0
     730:	0003740a 	andeq	r7, r3, sl, lsl #8
     734:	a7180200 	ldrge	r0, [r8, -r0, lsl #4]
     738:	0b000000 	bleq	740 <startup-0x1ffff8c0>
     73c:	0000018e 	andeq	r0, r0, lr, lsl #3
     740:	01103801 	tsteq	r0, r1, lsl #16
     744:	07fa0000 	ldrbeq	r0, [sl, r0]!
     748:	002c2000 	eoreq	r2, ip, r0
     74c:	9c010000 	stcls	0, cr0, [r1], {-0}
     750:	e4080104 	str	r0, [r8], #-260	; 0xfffffefc
     754:	0b000001 	bleq	760 <startup-0x1ffff8a0>
     758:	00000291 	muleq	r0, r1, r2
     75c:	01102e01 	tsteq	r0, r1, lsl #28
     760:	07ce0000 	strbeq	r0, [lr, r0]
     764:	002c2000 	eoreq	r2, ip, r0
     768:	9c010000 	stcls	0, cr0, [r1], {-0}
     76c:	0002670b 	andeq	r6, r2, fp, lsl #14
     770:	10240100 	eorne	r0, r4, r0, lsl #2
     774:	9c000001 	stcls	0, cr0, [r0], {1}
     778:	32200007 	eorcc	r0, r0, #7
     77c:	01000000 	mrseq	r0, (UNDEF: 0)
     780:	03580c9c 	cmpeq	r8, #156, 24	; 0x9c00
     784:	17010000 	strne	r0, [r1, -r0]
     788:	00000156 	andeq	r0, r0, r6, asr r1
     78c:	20000744 	andcs	r0, r0, r4, asr #14
     790:	00000058 	andeq	r0, r0, r8, asr r0
     794:	040d9c01 	streq	r9, [sp], #-3073	; 0xfffff3ff
     798:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     79c:	03680e00 	cmneq	r8, #0, 28
     7a0:	04010000 	streq	r0, [r1], #-0
     7a4:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     7a8:	00000054 	andeq	r0, r0, r4, asr r0
     7ac:	720f9c01 	andvc	r9, pc, #256	; 0x100
     7b0:	0100776f 	tsteq	r0, pc, ror #14
     7b4:	00006604 	andeq	r6, r0, r4, lsl #12
     7b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7bc:	0b950000 	bleq	fe5407c4 <Pedro+0xde53ea58>
     7c0:	00040000 	andeq	r0, r4, r0
     7c4:	000003a2 	andeq	r0, r0, r2, lsr #7
     7c8:	00350104 	eorseq	r0, r5, r4, lsl #2
     7cc:	640c0000 	strvs	r0, [ip], #-0
     7d0:	00000005 	andeq	r0, r0, r5
	...
     7dc:	81000000 	mrshi	r0, (UNDEF: 0)
     7e0:	02000003 	andeq	r0, r0, #3
     7e4:	01dd0601 	bicseq	r0, sp, r1, lsl #12
     7e8:	01020000 	mrseq	r0, (UNDEF: 2)
     7ec:	0001db08 	andeq	sp, r1, r8, lsl #22
     7f0:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
     7f4:	00000132 	andeq	r0, r0, r2, lsr r1
     7f8:	21070202 	tstcs	r7, r2, lsl #4
     7fc:	02000002 	andeq	r0, r0, #2
     800:	01ab0504 			; <UNDEFINED> instruction: 0x01ab0504
     804:	c1030000 	mrsgt	r0, (UNDEF: 3)
     808:	02000002 	andeq	r0, r0, #2
     80c:	0000534f 	andeq	r5, r0, pc, asr #6
     810:	07040200 	streq	r0, [r4, -r0, lsl #4]
     814:	000001f3 	strdeq	r0, [r0], -r3
     818:	a6050802 	strge	r0, [r5], -r2, lsl #16
     81c:	02000001 	andeq	r0, r0, #1
     820:	01ee0708 	mvneq	r0, r8, lsl #14
     824:	04040000 	streq	r0, [r4], #-0
     828:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     82c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     830:	000001f8 	strdeq	r0, [r0], -r8
     834:	0002c303 	andeq	ip, r2, r3, lsl #6
     838:	48300300 	ldmdami	r0!, {r8, r9}
     83c:	05000000 	streq	r0, [r0, #-0]
     840:	a20c0402 	andge	r0, ip, #33554432	; 0x2000000
     844:	06000000 	streq	r0, [r0], -r0
     848:	00000351 	andeq	r0, r0, r1, asr r3
     84c:	002c0d04 	eoreq	r0, ip, r4, lsl #26
     850:	06000000 	streq	r0, [r0], -r0
     854:	00000379 	andeq	r0, r0, r9, ror r3
     858:	002c0e04 	eoreq	r0, ip, r4, lsl #28
     85c:	00010000 	andeq	r0, r1, r0
     860:	0a040407 	beq	101884 <startup-0x1fefe77c>
     864:	000000bb 	strheq	r0, [r0], -fp
     868:	72646908 	rsbvc	r6, r4, #8, 18	; 0x20000
     86c:	6f0b0400 	svcvs	0x000b0400
     870:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     874:	00000081 	andeq	r0, r0, r1, lsl #1
     878:	04020500 	streq	r0, [r2], #-1280	; 0xfffffb00
     87c:	0000dc13 	andeq	sp, r0, r3, lsl ip
     880:	034a0600 	movteq	r0, #42496	; 0xa600
     884:	14040000 	strne	r0, [r4], #-0
     888:	0000002c 	andeq	r0, r0, ip, lsr #32
     88c:	03350600 	teqeq	r5, #0, 12
     890:	15040000 	strne	r0, [r4, #-0]
     894:	0000002c 	andeq	r0, r0, ip, lsr #32
     898:	04070001 	streq	r0, [r7], #-1
     89c:	00f51104 	rscseq	r1, r5, r4, lsl #2
     8a0:	6f080000 	svcvs	0x00080000
     8a4:	04007264 	streq	r7, [r0], #-612	; 0xfffffd9c
     8a8:	00006f12 	andeq	r6, r0, r2, lsl pc
     8ac:	00bb0900 	adcseq	r0, fp, r0, lsl #18
     8b0:	0a000000 	beq	8b8 <startup-0x1ffff748>
     8b4:	00000362 	andeq	r0, r0, r2, ror #6
     8b8:	3e040418 	cfmvdlrcc	mvd4, r0
     8bc:	06000001 	streq	r0, [r0], -r1
     8c0:	0000032f 	andeq	r0, r0, pc, lsr #6
     8c4:	006f0504 	rsbeq	r0, pc, r4, lsl #10
     8c8:	06000000 	streq	r0, [r0], -r0
     8cc:	0000033d 	andeq	r0, r0, sp, lsr r3
     8d0:	006f0604 	rsbeq	r0, pc, r4, lsl #12
     8d4:	06040000 	streq	r0, [r4], -r0
     8d8:	00000381 	andeq	r0, r0, r1, lsl #7
     8dc:	006f0704 	rsbeq	r0, pc, r4, lsl #14
     8e0:	06080000 	streq	r0, [r8], -r0
     8e4:	00000344 	andeq	r0, r0, r4, asr #6
     8e8:	006f0804 	rsbeq	r0, pc, r4, lsl #16
     8ec:	0b0c0000 	bleq	3008f4 <startup-0x1fcff70c>
     8f0:	000000a2 	andeq	r0, r0, r2, lsr #1
     8f4:	00dc0b10 	sbcseq	r0, ip, r0, lsl fp
     8f8:	00140000 	andseq	r0, r4, r0
     8fc:	00037403 	andeq	r7, r3, r3, lsl #8
     900:	f5180400 			; <UNDEFINED> instruction: 0xf5180400
     904:	0c000000 	stceq	0, cr0, [r0], {-0}
     908:	00014f04 	andeq	r4, r1, r4, lsl #30
     90c:	08010200 	stmdaeq	r1, {r9}
     910:	000001e4 	andeq	r0, r0, r4, ror #3
     914:	00014f0d 	andeq	r4, r1, sp, lsl #30
     918:	05430300 	strbeq	r0, [r3, #-768]	; 0xfffffd00
     91c:	22050000 	andcs	r0, r5, #0
     920:	00000166 	andeq	r0, r0, r6, ror #2
     924:	016c040c 	cmneq	ip, ip, lsl #8
     928:	aa0e0000 	bge	380930 <startup-0x1fc7f6d0>
     92c:	03000006 	movweq	r0, #6
     930:	000005ab 	andeq	r0, r0, fp, lsr #11
     934:	00412c06 	subeq	r2, r1, r6, lsl #24
     938:	b7030000 	strlt	r0, [r3, -r0]
     93c:	06000006 	streq	r0, [r0], -r6
     940:	00004172 	andeq	r4, r0, r2, ror r1
     944:	054b0f00 	strbeq	r0, [fp, #-3840]	; 0xfffff100
     948:	65070000 	strvs	r0, [r7, #-0]
     94c:	00006f01 	andeq	r6, r0, r1, lsl #30
     950:	06040700 	streq	r0, [r4], -r0, lsl #14
     954:	0001b2a6 	andeq	fp, r1, r6, lsr #5
     958:	053d1000 	ldreq	r1, [sp, #-0]!
     95c:	a8060000 	stmdage	r6, {}	; <UNPREDICTABLE>
     960:	00000187 	andeq	r0, r0, r7, lsl #3
     964:	0004dc10 	andeq	sp, r4, r0, lsl ip
     968:	b2a90600 	adclt	r0, r9, #0, 12
     96c:	00000001 	andeq	r0, r0, r1
     970:	00002c11 	andeq	r2, r0, r1, lsl ip
     974:	0001c200 	andeq	ip, r1, r0, lsl #4
     978:	006f1200 	rsbeq	r1, pc, r0, lsl #4
     97c:	00030000 	andeq	r0, r3, r0
     980:	a3060805 	movwge	r0, #26629	; 0x6805
     984:	000001e3 	andeq	r0, r0, r3, ror #3
     988:	0006a206 	andeq	sl, r6, r6, lsl #4
     98c:	68a50600 	stmiavs	r5!, {r9, sl}
     990:	00000000 	andeq	r0, r0, r0
     994:	00070a06 	andeq	r0, r7, r6, lsl #20
     998:	93aa0600 			; <UNDEFINED> instruction: 0x93aa0600
     99c:	04000001 	streq	r0, [r0], #-1
     9a0:	06240300 	strteq	r0, [r4], -r0, lsl #6
     9a4:	ab060000 	blge	1809ac <startup-0x1fe7f654>
     9a8:	000001c2 	andeq	r0, r0, r2, asr #3
     9ac:	0004a503 	andeq	sl, r4, r3, lsl #10
     9b0:	5baf0600 	blpl	febc21b8 <Pedro+0xdebc044c>
     9b4:	13000001 	movwne	r0, #1
     9b8:	07200304 	streq	r0, [r0, -r4, lsl #6]!
     9bc:	16080000 	strne	r0, [r8], -r0
     9c0:	00000053 	andeq	r0, r0, r3, asr r0
     9c4:	0004b60a 	andeq	fp, r4, sl, lsl #12
     9c8:	2f081800 	svccs	0x00081800
     9cc:	00000259 	andeq	r0, r0, r9, asr r2
     9d0:	00064506 	andeq	r4, r6, r6, lsl #10
     9d4:	59310800 	ldmdbpl	r1!, {fp}
     9d8:	00000002 	andeq	r0, r0, r2
     9dc:	006b5f14 	rsbeq	r5, fp, r4, lsl pc
     9e0:	00683208 	rsbeq	r3, r8, r8, lsl #4
     9e4:	06040000 	streq	r0, [r4], -r0
     9e8:	0000068d 	andeq	r0, r0, sp, lsl #13
     9ec:	00683208 	rsbeq	r3, r8, r8, lsl #4
     9f0:	06080000 	streq	r0, [r8], -r0
     9f4:	0000049f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
     9f8:	00683208 	rsbeq	r3, r8, r8, lsl #4
     9fc:	060c0000 	streq	r0, [ip], -r0
     a00:	00000755 	andeq	r0, r0, r5, asr r7
     a04:	00683208 	rsbeq	r3, r8, r8, lsl #4
     a08:	14100000 	ldrne	r0, [r0], #-0
     a0c:	0800785f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}
     a10:	00025f33 	andeq	r5, r2, r3, lsr pc
     a14:	0c001400 	cfstrseq	mvf1, [r0], {-0}
     a18:	00020604 	andeq	r0, r2, r4, lsl #12
     a1c:	01fb1100 	mvnseq	r1, r0, lsl #2
     a20:	026f0000 	rsbeq	r0, pc, #0
     a24:	6f120000 	svcvs	0x00120000
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	04d70a00 	ldrbeq	r0, [r7], #2560	; 0xa00
     a30:	08240000 	stmdaeq	r4!, {}	; <UNPREDICTABLE>
     a34:	0002e837 	andeq	lr, r2, r7, lsr r8
     a38:	040b0600 	streq	r0, [fp], #-1536	; 0xfffffa00
     a3c:	39080000 	stmdbcc	r8, {}	; <UNPREDICTABLE>
     a40:	00000068 	andeq	r0, r0, r8, rrx
     a44:	06cd0600 	strbeq	r0, [sp], r0, lsl #12
     a48:	3a080000 	bcc	200a50 <startup-0x1fdff5b0>
     a4c:	00000068 	andeq	r0, r0, r8, rrx
     a50:	04250604 	strteq	r0, [r5], #-1540	; 0xfffff9fc
     a54:	3b080000 	blcc	200a5c <startup-0x1fdff5a4>
     a58:	00000068 	andeq	r0, r0, r8, rrx
     a5c:	07e60608 	strbeq	r0, [r6, r8, lsl #12]!
     a60:	3c080000 	stccc	0, cr0, [r8], {-0}
     a64:	00000068 	andeq	r0, r0, r8, rrx
     a68:	058f060c 	streq	r0, [pc, #1548]	; 107c <startup-0x1fffef84>
     a6c:	3d080000 	stccc	0, cr0, [r8, #-0]
     a70:	00000068 	andeq	r0, r0, r8, rrx
     a74:	055a0610 	ldrbeq	r0, [sl, #-1552]	; 0xfffff9f0
     a78:	3e080000 	cdpcc	0, 0, cr0, cr8, cr0, {0}
     a7c:	00000068 	andeq	r0, r0, r8, rrx
     a80:	075a0614 	smmlaeq	sl, r4, r6, r0
     a84:	3f080000 	svccc	0x00080000
     a88:	00000068 	andeq	r0, r0, r8, rrx
     a8c:	06060618 			; <UNDEFINED> instruction: 0x06060618
     a90:	40080000 	andmi	r0, r8, r0
     a94:	00000068 	andeq	r0, r0, r8, rrx
     a98:	0795061c 			; <UNDEFINED> instruction: 0x0795061c
     a9c:	41080000 	mrsmi	r0, (UNDEF: 8)
     aa0:	00000068 	andeq	r0, r0, r8, rrx
     aa4:	bf150020 	svclt	0x00150020
     aa8:	08000006 	stmdaeq	r0, {r1, r2}
     aac:	284a0801 	stmdacs	sl, {r0, fp}^
     ab0:	06000003 	streq	r0, [r0], -r3
     ab4:	00000492 	muleq	r0, r2, r4
     ab8:	03284b08 			; <UNDEFINED> instruction: 0x03284b08
     abc:	06000000 	streq	r0, [r0], -r0
     ac0:	00000389 	andeq	r0, r0, r9, lsl #7
     ac4:	03284c08 			; <UNDEFINED> instruction: 0x03284c08
     ac8:	16800000 	strne	r0, [r0], r0
     acc:	00000712 	andeq	r0, r0, r2, lsl r7
     ad0:	01fb4e08 	mvnseq	r4, r8, lsl #28
     ad4:	01000000 	mrseq	r0, (UNDEF: 0)
     ad8:	00044b16 	andeq	r4, r4, r6, lsl fp
     adc:	fb510800 	blx	1442ae6 <startup-0x1ebbd51a>
     ae0:	04000001 	streq	r0, [r0], #-1
     ae4:	f9110001 			; <UNDEFINED> instruction: 0xf9110001
     ae8:	38000001 	stmdacc	r0, {r0}
     aec:	12000003 	andne	r0, r0, #3
     af0:	0000006f 	andeq	r0, r0, pc, rrx
     af4:	9815001f 	ldmdals	r5, {r0, r1, r2, r3, r4}
     af8:	90000005 	andls	r0, r0, r5
     afc:	765d0801 	ldrbvc	r0, [sp], -r1, lsl #16
     b00:	06000003 	streq	r0, [r0], -r3
     b04:	00000645 	andeq	r0, r0, r5, asr #12
     b08:	03765e08 	cmneq	r6, #8, 28	; 0x80
     b0c:	06000000 	streq	r0, [r0], -r0
     b10:	0000065d 	andeq	r0, r0, sp, asr r6
     b14:	00685f08 	rsbeq	r5, r8, r8, lsl #30
     b18:	06040000 	streq	r0, [r4], -r0
     b1c:	0000049a 	muleq	r0, sl, r4
     b20:	037c6108 	cmneq	ip, #8, 2
     b24:	06080000 	streq	r0, [r8], -r0
     b28:	000006bf 			; <UNDEFINED> instruction: 0x000006bf
     b2c:	02e86208 	rsceq	r6, r8, #8, 4	; 0x80000000
     b30:	00880000 	addeq	r0, r8, r0
     b34:	0338040c 	teqeq	r8, #12, 8	; 0xc000000
     b38:	8c110000 	ldchi	0, cr0, [r1], {-0}
     b3c:	8c000003 	stchi	0, cr0, [r0], {3}
     b40:	12000003 	andne	r0, r0, #3
     b44:	0000006f 	andeq	r0, r0, pc, rrx
     b48:	040c001f 	streq	r0, [ip], #-31	; 0xffffffe1
     b4c:	00000392 	muleq	r0, r2, r3
     b50:	06100a17 			; <UNDEFINED> instruction: 0x06100a17
     b54:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
     b58:	0003b875 	andeq	fp, r3, r5, ror r8
     b5c:	041f0600 	ldreq	r0, [pc], #-1536	; b64 <startup-0x1ffff49c>
     b60:	76080000 	strvc	r0, [r8], -r0
     b64:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     b68:	03950600 	orrseq	r0, r5, #0, 12
     b6c:	77080000 	strvc	r0, [r8, -r0]
     b70:	00000068 	andeq	r0, r0, r8, rrx
     b74:	040c0004 	streq	r0, [ip], #-4
     b78:	0000002c 	andeq	r0, r0, ip, lsr #32
     b7c:	00062f0a 	andeq	r2, r6, sl, lsl #30
     b80:	b5086800 	strlt	r6, [r8, #-2048]	; 0xfffff800
     b84:	000004e8 	andeq	r0, r0, r8, ror #9
     b88:	00705f14 	rsbseq	r5, r0, r4, lsl pc
     b8c:	03b8b608 			; <UNDEFINED> instruction: 0x03b8b608
     b90:	14000000 	strne	r0, [r0], #-0
     b94:	0800725f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
     b98:	000068b7 			; <UNDEFINED> instruction: 0x000068b7
     b9c:	5f140400 	svcpl	0x00140400
     ba0:	b8080077 	stmdalt	r8, {r0, r1, r2, r4, r5, r6}
     ba4:	00000068 	andeq	r0, r0, r8, rrx
     ba8:	04440608 	strbeq	r0, [r4], #-1544	; 0xfffff9f8
     bac:	b9080000 	stmdblt	r8, {}	; <UNPREDICTABLE>
     bb0:	00000033 	andeq	r0, r0, r3, lsr r0
     bb4:	04fb060c 	ldrbteq	r0, [fp], #1548	; 0x60c
     bb8:	ba080000 	blt	200bc0 <startup-0x1fdff440>
     bbc:	00000033 	andeq	r0, r0, r3, lsr r0
     bc0:	625f140e 	subsvs	r1, pc, #234881024	; 0xe000000
     bc4:	bb080066 	bllt	200d64 <startup-0x1fdff29c>
     bc8:	00000393 	muleq	r0, r3, r3
     bcc:	03e30610 	mvneq	r0, #16, 12	; 0x1000000
     bd0:	bc080000 	stclt	0, cr0, [r8], {-0}
     bd4:	00000068 	andeq	r0, r0, r8, rrx
     bd8:	04340618 	ldrteq	r0, [r4], #-1560	; 0xfffff9e8
     bdc:	c3080000 	movwgt	r0, #32768	; 0x8000
     be0:	000001f9 	strdeq	r0, [r0], -r9
     be4:	0846061c 	stmdaeq	r6, {r2, r3, r4, r9, sl}^
     be8:	c5080000 	strgt	r0, [r8, #-0]
     bec:	00000643 	andeq	r0, r0, r3, asr #12
     bf0:	08990620 	ldmeq	r9, {r5, r9, sl}
     bf4:	c7080000 	strgt	r0, [r8, -r0]
     bf8:	0000066d 	andeq	r0, r0, sp, ror #12
     bfc:	06b10624 	ldrteq	r0, [r1], r4, lsr #12
     c00:	ca080000 	bgt	200c08 <startup-0x1fdff3f8>
     c04:	00000691 	muleq	r0, r1, r6
     c08:	07af0628 	streq	r0, [pc, r8, lsr #12]!
     c0c:	cb080000 	blgt	200c14 <startup-0x1fdff3ec>
     c10:	000006ab 	andeq	r0, r0, fp, lsr #13
     c14:	755f142c 	ldrbvc	r1, [pc, #-1068]	; 7f0 <startup-0x1ffff810>
     c18:	ce080062 	cdpgt	0, 0, cr0, cr8, cr2, {3}
     c1c:	00000393 	muleq	r0, r3, r3
     c20:	755f1430 	ldrbvc	r1, [pc, #-1072]	; 7f8 <startup-0x1ffff808>
     c24:	cf080070 	svcgt	0x00080070
     c28:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
     c2c:	755f1438 	ldrbvc	r1, [pc, #-1080]	; 7fc <startup-0x1ffff804>
     c30:	d0080072 	andle	r0, r8, r2, ror r0
     c34:	00000068 	andeq	r0, r0, r8, rrx
     c38:	0419063c 	ldreq	r0, [r9], #-1596	; 0xfffff9c4
     c3c:	d3080000 	movwle	r0, #32768	; 0x8000
     c40:	000006b1 			; <UNDEFINED> instruction: 0x000006b1
     c44:	07870640 	streq	r0, [r7, r0, asr #12]
     c48:	d4080000 	strle	r0, [r8], #-0
     c4c:	000006c1 	andeq	r0, r0, r1, asr #13
     c50:	6c5f1443 	cfldrdvs	mvd1, [pc], {67}	; 0x43
     c54:	d7080062 	strle	r0, [r8, -r2, rrx]
     c58:	00000393 	muleq	r0, r3, r3
     c5c:	045a0644 	ldrbeq	r0, [sl], #-1604	; 0xfffff9bc
     c60:	da080000 	ble	200c68 <startup-0x1fdff398>
     c64:	00000068 	andeq	r0, r0, r8, rrx
     c68:	046b064c 	strbteq	r0, [fp], #-1612	; 0xfffff9b4
     c6c:	db080000 	blle	200c74 <startup-0x1fdff38c>
     c70:	00000171 	andeq	r0, r0, r1, ror r1
     c74:	08580650 	ldmdaeq	r8, {r4, r6, r9, sl}^
     c78:	de080000 	cdple	0, 0, cr0, cr8, cr0, {0}
     c7c:	00000506 	andeq	r0, r0, r6, lsl #10
     c80:	06ab0654 	ssateq	r0, #12, r4, asr #12
     c84:	e2080000 	and	r0, r8, #0
     c88:	000001ee 	andeq	r0, r0, lr, ror #3
     c8c:	06370658 			; <UNDEFINED> instruction: 0x06370658
     c90:	e4080000 	str	r0, [r8], #-0
     c94:	000001e3 	andeq	r0, r0, r3, ror #3
     c98:	0552065c 	ldrbeq	r0, [r2, #-1628]	; 0xfffff9a4
     c9c:	e5080000 	str	r0, [r8, #-0]
     ca0:	00000068 	andeq	r0, r0, r8, rrx
     ca4:	68180064 	ldmdavs	r8, {r2, r5, r6}
     ca8:	06000000 	streq	r0, [r0], -r0
     cac:	19000005 	stmdbne	r0, {r0, r2}
     cb0:	00000506 	andeq	r0, r0, r6, lsl #10
     cb4:	0001f919 	andeq	pc, r1, r9, lsl r9	; <UNPREDICTABLE>
     cb8:	01491900 	cmpeq	r9, r0, lsl #18
     cbc:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
     cc0:	00000000 	andeq	r0, r0, r0
     cc4:	0511040c 	ldreq	r0, [r1, #-1036]	; 0xfffffbf4
     cc8:	060d0000 	streq	r0, [sp], -r0
     ccc:	1a000005 	bne	ce8 <startup-0x1ffff318>
     cd0:	00000695 	muleq	r0, r5, r6
     cd4:	39080428 	stmdbcc	r8, {r3, r5, sl}
     cd8:	00064302 	andeq	r4, r6, r2, lsl #6
     cdc:	05ff1b00 	ldrbeq	r1, [pc, #2816]!	; 17e4 <startup-0x1fffe81c>
     ce0:	3b080000 	blcc	200ce8 <startup-0x1fdff318>
     ce4:	00006802 	andeq	r6, r0, r2, lsl #16
     ce8:	531b0000 	tstpl	fp, #0
     cec:	08000004 	stmdaeq	r0, {r2}
     cf0:	07180240 	ldreq	r0, [r8, -r0, asr #4]
     cf4:	1b040000 	blne	100cfc <startup-0x1feff304>
     cf8:	000004e3 	andeq	r0, r0, r3, ror #9
     cfc:	18024008 	stmdane	r2, {r3, lr}
     d00:	08000007 	stmdaeq	r0, {r0, r1, r2}
     d04:	0004ae1b 	andeq	sl, r4, fp, lsl lr
     d08:	02400800 	subeq	r0, r0, #0, 16
     d0c:	00000718 	andeq	r0, r0, r8, lsl r7
     d10:	06581b0c 	ldrbeq	r1, [r8], -ip, lsl #22
     d14:	42080000 	andmi	r0, r8, #0
     d18:	00006802 	andeq	r6, r0, r2, lsl #16
     d1c:	b31b1000 	tstlt	fp, #0
     d20:	08000003 	stmdaeq	r0, {r0, r1}
     d24:	08fa0243 	ldmeq	sl!, {r0, r1, r6, r9}^
     d28:	1b140000 	blne	500d30 <startup-0x1faff2d0>
     d2c:	00000674 	andeq	r0, r0, r4, ror r6
     d30:	68024608 	stmdavs	r2, {r3, r9, sl, lr}
     d34:	30000000 	andcc	r0, r0, r0
     d38:	0006621b 	andeq	r6, r6, fp, lsl r2
     d3c:	02470800 	subeq	r0, r7, #0, 16
     d40:	0000090f 	andeq	r0, r0, pc, lsl #18
     d44:	05a01b34 	streq	r1, [r0, #2868]!	; 0xb34
     d48:	49080000 	stmdbmi	r8, {}	; <UNPREDICTABLE>
     d4c:	00006802 	andeq	r6, r0, r2, lsl #16
     d50:	6a1b3800 	bvs	6ced58 <startup-0x1f9312a8>
     d54:	08000006 	stmdaeq	r0, {r1, r2}
     d58:	0920024b 	stmdbeq	r0!, {r0, r1, r3, r6, r9}
     d5c:	1b3c0000 	blne	f00d64 <startup-0x1f0ff29c>
     d60:	00000535 	andeq	r0, r0, r5, lsr r5
     d64:	59024e08 	stmdbpl	r2, {r3, r9, sl, fp, lr}
     d68:	40000002 	andmi	r0, r0, r2
     d6c:	0004cd1b 	andeq	ip, r4, fp, lsl sp
     d70:	024f0800 	subeq	r0, pc, #0, 16
     d74:	00000068 	andeq	r0, r0, r8, rrx
     d78:	07dc1b44 	ldrbeq	r1, [ip, r4, asr #22]
     d7c:	50080000 	andpl	r0, r8, r0
     d80:	00025902 	andeq	r5, r2, r2, lsl #18
     d84:	bf1b4800 	svclt	0x001b4800
     d88:	08000005 	stmdaeq	r0, {r0, r2}
     d8c:	09260251 	stmdbeq	r6!, {r0, r4, r6, r9}
     d90:	1b4c0000 	blne	1300d98 <startup-0x1ecff268>
     d94:	000004eb 	andeq	r0, r0, fp, ror #9
     d98:	68025408 	stmdavs	r2, {r3, sl, ip, lr}
     d9c:	50000000 	andpl	r0, r0, r0
     da0:	0004631b 	andeq	r6, r4, fp, lsl r3
     da4:	02550800 	subseq	r0, r5, #0, 16
     da8:	00000149 	andeq	r0, r0, r9, asr #2
     dac:	05f81b54 	ldrbeq	r1, [r8, #2900]!	; 0xb54
     db0:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
     db4:	0008d802 	andeq	sp, r8, r2, lsl #16
     db8:	981c5800 	ldmdals	ip, {fp, ip, lr}
     dbc:	08000005 	stmdaeq	r0, {r0, r2}
     dc0:	0376027c 	cmneq	r6, #124, 4	; 0xc0000007
     dc4:	01480000 	mrseq	r0, (UNDEF: 72)
     dc8:	00050d1c 	andeq	r0, r5, ip, lsl sp
     dcc:	027d0800 	rsbseq	r0, sp, #0, 16
     dd0:	00000338 	andeq	r0, r0, r8, lsr r3
     dd4:	7d1c014c 	ldfvcs	f0, [ip, #-304]	; 0xfffffed0
     dd8:	08000007 	stmdaeq	r0, {r0, r1, r2}
     ddc:	09370281 	ldmdbeq	r7!, {r0, r7, r9}
     de0:	02dc0000 	sbcseq	r0, ip, #0
     de4:	00043c1c 	andeq	r3, r4, ip, lsl ip
     de8:	02860800 	addeq	r0, r6, #0, 16
     dec:	000006dd 	ldrdeq	r0, [r0], -sp
     df0:	2f1c02e0 	svccs	0x001c02e0
     df4:	08000004 	stmdaeq	r0, {r2}
     df8:	09430288 	stmdbeq	r3, {r3, r7, r9}^
     dfc:	02ec0000 	rsceq	r0, ip, #0
     e00:	e8040c00 	stmda	r4, {sl, fp}
     e04:	18000004 	stmdane	r0, {r2}
     e08:	00000068 	andeq	r0, r0, r8, rrx
     e0c:	00000667 	andeq	r0, r0, r7, ror #12
     e10:	00050619 	andeq	r0, r5, r9, lsl r6
     e14:	01f91900 	mvnseq	r1, r0, lsl #18
     e18:	67190000 	ldrvs	r0, [r9, -r0]
     e1c:	19000006 	stmdbne	r0, {r1, r2}
     e20:	00000068 	andeq	r0, r0, r8, rrx
     e24:	56040c00 	strpl	r0, [r4], -r0, lsl #24
     e28:	0c000001 	stceq	0, cr0, [r0], {1}
     e2c:	00064904 	andeq	r4, r6, r4, lsl #18
     e30:	017c1800 	cmneq	ip, r0, lsl #16
     e34:	06910000 	ldreq	r0, [r1], r0
     e38:	06190000 	ldreq	r0, [r9], -r0
     e3c:	19000005 	stmdbne	r0, {r0, r2}
     e40:	000001f9 	strdeq	r0, [r0], -r9
     e44:	00017c19 	andeq	r7, r1, r9, lsl ip
     e48:	00681900 	rsbeq	r1, r8, r0, lsl #18
     e4c:	0c000000 	stceq	0, cr0, [r0], {-0}
     e50:	00067304 	andeq	r7, r6, r4, lsl #6
     e54:	00681800 	rsbeq	r1, r8, r0, lsl #16
     e58:	06ab0000 	strteq	r0, [fp], r0
     e5c:	06190000 	ldreq	r0, [r9], -r0
     e60:	19000005 	stmdbne	r0, {r0, r2}
     e64:	000001f9 	strdeq	r0, [r0], -r9
     e68:	97040c00 	strls	r0, [r4, -r0, lsl #24]
     e6c:	11000006 	tstne	r0, r6
     e70:	0000002c 	andeq	r0, r0, ip, lsr #32
     e74:	000006c1 	andeq	r0, r0, r1, asr #13
     e78:	00006f12 	andeq	r6, r0, r2, lsl pc
     e7c:	11000200 	mrsne	r0, R8_usr
     e80:	0000002c 	andeq	r0, r0, ip, lsr #32
     e84:	000006d1 	ldrdeq	r0, [r0], -r1
     e88:	00006f12 	andeq	r6, r0, r2, lsl pc
     e8c:	0f000000 	svceq	0x00000000
     e90:	0000061d 	andeq	r0, r0, sp, lsl r6
     e94:	be011f08 	cdplt	15, 0, cr1, cr1, cr8, {0}
     e98:	1d000003 	stcne	0, cr0, [r0, #-12]
     e9c:	00000764 	andeq	r0, r0, r4, ror #14
     ea0:	0123080c 			; <UNDEFINED> instruction: 0x0123080c
     ea4:	00000712 	andeq	r0, r0, r2, lsl r7
     ea8:	0006451b 	andeq	r4, r6, fp, lsl r5
     eac:	01250800 			; <UNDEFINED> instruction: 0x01250800
     eb0:	00000712 	andeq	r0, r0, r2, lsl r7
     eb4:	05061b00 	streq	r1, [r6, #-2816]	; 0xfffff500
     eb8:	26080000 	strcs	r0, [r8], -r0
     ebc:	00006801 	andeq	r6, r0, r1, lsl #16
     ec0:	171b0400 	ldrne	r0, [fp, -r0, lsl #8]
     ec4:	08000006 	stmdaeq	r0, {r1, r2}
     ec8:	07180127 	ldreq	r0, [r8, -r7, lsr #2]
     ecc:	00080000 	andeq	r0, r8, r0
     ed0:	06dd040c 	ldrbeq	r0, [sp], ip, lsl #8
     ed4:	040c0000 	streq	r0, [ip], #-0
     ed8:	000006d1 	ldrdeq	r0, [r0], -r1
     edc:	0003ab1d 	andeq	sl, r3, sp, lsl fp
     ee0:	3f080e00 	svccc	0x00080e00
     ee4:	00075301 	andeq	r5, r7, r1, lsl #6
     ee8:	069c1b00 	ldreq	r1, [ip], r0, lsl #22
     eec:	40080000 	andmi	r0, r8, r0
     ef0:	00075301 	andeq	r5, r7, r1, lsl #6
     ef4:	de1b0000 	cdple	0, 1, cr0, cr11, cr0, {0}
     ef8:	08000006 	stmdaeq	r0, {r1, r2}
     efc:	07530141 	ldrbeq	r0, [r3, -r1, asr #2]
     f00:	1b060000 	blne	180f08 <startup-0x1fe7f0f8>
     f04:	0000071b 	andeq	r0, r0, fp, lsl r7
     f08:	3a014208 	bcc	51730 <startup-0x1ffae8d0>
     f0c:	0c000000 	stceq	0, cr0, [r0], {-0}
     f10:	003a1100 	eorseq	r1, sl, r0, lsl #2
     f14:	07630000 	strbeq	r0, [r3, -r0]!
     f18:	6f120000 	svcvs	0x00120000
     f1c:	02000000 	andeq	r0, r0, #0
     f20:	08d01e00 	ldmeq	r0, {r9, sl, fp, ip}^
     f24:	08640259 	stmdaeq	r4!, {r0, r3, r4, r6, r9}^
     f28:	481b0000 	ldmdami	fp, {}	; <UNPREDICTABLE>
     f2c:	08000007 	stmdaeq	r0, {r0, r1, r2}
     f30:	006f025b 	rsbeq	r0, pc, fp, asr r2	; <UNPREDICTABLE>
     f34:	1b000000 	blne	f3c <startup-0x1ffff0c4>
     f38:	000006fd 	strdeq	r0, [r0], -sp
     f3c:	49025c08 	stmdbmi	r2, {r3, sl, fp, ip, lr}
     f40:	04000001 	streq	r0, [r0], #-1
     f44:	0005221b 	andeq	r2, r5, fp, lsl r2
     f48:	025d0800 	subseq	r0, sp, #0, 16
     f4c:	00000864 	andeq	r0, r0, r4, ror #16
     f50:	07a01b08 	streq	r1, [r0, r8, lsl #22]!
     f54:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
     f58:	00026f02 	andeq	r6, r2, r2, lsl #30
     f5c:	be1b2400 	cfmulslt	mvf2, mvf11, mvf0
     f60:	08000004 	stmdaeq	r0, {r2}
     f64:	0068025f 	rsbeq	r0, r8, pc, asr r2
     f68:	1b480000 	blne	1200f70 <startup-0x1edff090>
     f6c:	00000640 	andeq	r0, r0, r0, asr #12
     f70:	61026008 	tstvs	r2, r8
     f74:	50000000 	andpl	r0, r0, r0
     f78:	0007c31b 	andeq	ip, r7, fp, lsl r3
     f7c:	02610800 	rsbeq	r0, r1, #0, 16
     f80:	0000071e 	andeq	r0, r0, lr, lsl r7
     f84:	064b1b58 			; <UNDEFINED> instruction: 0x064b1b58
     f88:	62080000 	andvs	r0, r8, #0
     f8c:	0001e302 	andeq	lr, r1, r2, lsl #6
     f90:	ce1b6800 	cdpgt	8, 1, cr6, cr11, cr0, {0}
     f94:	08000007 	stmdaeq	r0, {r0, r1, r2}
     f98:	01e30263 	mvneq	r0, r3, ror #4
     f9c:	1b700000 	blne	1c00fa4 <startup-0x1e3ff05c>
     fa0:	000005c9 	andeq	r0, r0, r9, asr #11
     fa4:	e3026408 	movw	r6, #9224	; 0x2408
     fa8:	78000001 	stmdavc	r0, {r0}
     fac:	0007731b 	andeq	r7, r7, fp, lsl r3
     fb0:	02650800 	rsbeq	r0, r5, #0, 16
     fb4:	00000874 	andeq	r0, r0, r4, ror r8
     fb8:	05161b80 	ldreq	r1, [r6, #-2944]	; 0xfffff480
     fbc:	66080000 	strvs	r0, [r8], -r0
     fc0:	00088402 	andeq	r8, r8, r2, lsl #8
     fc4:	281b8800 	ldmdacs	fp, {fp, pc}
     fc8:	08000007 	stmdaeq	r0, {r0, r1, r2}
     fcc:	00680267 	rsbeq	r0, r8, r7, ror #4
     fd0:	1ba00000 	blne	fe800fd8 <Pedro+0xde7ff26c>
     fd4:	00000484 	andeq	r0, r0, r4, lsl #9
     fd8:	e3026808 	movw	r6, #10248	; 0x2808
     fdc:	a4000001 	strge	r0, [r0], #-1
     fe0:	0003fc1b 	andeq	pc, r3, fp, lsl ip	; <UNPREDICTABLE>
     fe4:	02690800 	rsbeq	r0, r9, #0, 16
     fe8:	000001e3 	andeq	r0, r0, r3, ror #3
     fec:	04731bac 	ldrbteq	r1, [r3], #-2988	; 0xfffff454
     ff0:	6a080000 	bvs	200ff8 <startup-0x1fdff008>
     ff4:	0001e302 	andeq	lr, r1, r2, lsl #6
     ff8:	c31bb400 	tstgt	fp, #0, 8
     ffc:	08000003 	stmdaeq	r0, {r0, r1}
    1000:	01e3026b 	mvneq	r0, fp, ror #4
    1004:	1bbc0000 	blne	fef0100c <Pedro+0xdeeff2a0>
    1008:	000003d2 	ldrdeq	r0, [r0], -r2
    100c:	e3026c08 	movw	r6, #11272	; 0x2c08
    1010:	c4000001 	strgt	r0, [r0], #-1
    1014:	0005fd1b 	andeq	pc, r5, fp, lsl sp	; <UNPREDICTABLE>
    1018:	026d0800 	rsbeq	r0, sp, #0, 16
    101c:	00000068 	andeq	r0, r0, r8, rrx
    1020:	4f1100cc 	svcmi	0x001100cc
    1024:	74000001 	strvc	r0, [r0], #-1
    1028:	12000008 	andne	r0, r0, #8
    102c:	0000006f 	andeq	r0, r0, pc, rrx
    1030:	4f110019 	svcmi	0x00110019
    1034:	84000001 	strhi	r0, [r0], #-1
    1038:	12000008 	andne	r0, r0, #8
    103c:	0000006f 	andeq	r0, r0, pc, rrx
    1040:	4f110007 	svcmi	0x00110007
    1044:	94000001 	strls	r0, [r0], #-1
    1048:	12000008 	andne	r0, r0, #8
    104c:	0000006f 	andeq	r0, r0, pc, rrx
    1050:	f01e0017 			; <UNDEFINED> instruction: 0xf01e0017
    1054:	b8027208 	stmdalt	r2, {r3, r9, ip, sp, lr}
    1058:	1b000008 	blne	1080 <startup-0x1fffef80>
    105c:	00000588 	andeq	r0, r0, r8, lsl #11
    1060:	b8027508 	stmdalt	r2, {r3, r8, sl, ip, sp, lr}
    1064:	00000008 	andeq	r0, r0, r8
    1068:	00076a1b 	andeq	r6, r7, fp, lsl sl
    106c:	02760800 	rsbseq	r0, r6, #0, 16
    1070:	000008c8 	andeq	r0, r0, r8, asr #17
    1074:	b8110078 	ldmdalt	r1, {r3, r4, r5, r6}
    1078:	c8000003 	stmdagt	r0, {r0, r1}
    107c:	12000008 	andne	r0, r0, #8
    1080:	0000006f 	andeq	r0, r0, pc, rrx
    1084:	6f11001d 	svcvs	0x0011001d
    1088:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    108c:	12000008 	andne	r0, r0, #8
    1090:	0000006f 	andeq	r0, r0, pc, rrx
    1094:	f01f001d 			; <UNDEFINED> instruction: 0xf01f001d
    1098:	fa025708 	blx	96cc0 <startup-0x1ff69340>
    109c:	20000008 	andcs	r0, r0, r8
    10a0:	00000695 	muleq	r0, r5, r6
    10a4:	63026e08 	movwvs	r6, #11784	; 0x2e08
    10a8:	20000007 	andcs	r0, r0, r7
    10ac:	0000078d 	andeq	r0, r0, sp, lsl #15
    10b0:	94027708 	strls	r7, [r2], #-1800	; 0xfffff8f8
    10b4:	00000008 	andeq	r0, r0, r8
    10b8:	00014f11 	andeq	r4, r1, r1, lsl pc
    10bc:	00090a00 	andeq	r0, r9, r0, lsl #20
    10c0:	006f1200 	rsbeq	r1, pc, r0, lsl #4
    10c4:	00180000 	andseq	r0, r8, r0
    10c8:	0003f10e 	andeq	pc, r3, lr, lsl #2
    10cc:	0a040c00 	beq	1040d4 <startup-0x1fefbf2c>
    10d0:	21000009 	tstcs	r0, r9
    10d4:	00000920 	andeq	r0, r0, r0, lsr #18
    10d8:	00050619 	andeq	r0, r5, r9, lsl r6
    10dc:	040c0000 	streq	r0, [ip], #-0
    10e0:	00000915 	andeq	r0, r0, r5, lsl r9
    10e4:	0259040c 	subseq	r0, r9, #12, 8	; 0xc000000
    10e8:	37210000 	strcc	r0, [r1, -r0]!
    10ec:	19000009 	stmdbne	r0, {r0, r3}
    10f0:	00000068 	andeq	r0, r0, r8, rrx
    10f4:	3d040c00 	stccc	12, cr0, [r4, #-0]
    10f8:	0c000009 	stceq	0, cr0, [r0], {9}
    10fc:	00092c04 	andeq	r2, r9, r4, lsl #24
    1100:	06d11100 	ldrbeq	r1, [r1], r0, lsl #2
    1104:	09530000 	ldmdbeq	r3, {}^	; <UNPREDICTABLE>
    1108:	6f120000 	svcvs	0x00120000
    110c:	02000000 	andeq	r0, r0, #0
    1110:	073c2200 	ldreq	r2, [ip, -r0, lsl #4]!
    1114:	07080000 	streq	r0, [r8, -r0]
    1118:	00050603 	andeq	r0, r5, r3, lsl #12
    111c:	07352200 	ldreq	r2, [r5, -r0, lsl #4]!
    1120:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
    1124:	00050c03 	andeq	r0, r5, r3, lsl #24
    1128:	014f1100 	mrseq	r1, (UNDEF: 95)
    112c:	09810000 	stmibeq	r1, {}	; <UNPREDICTABLE>
    1130:	6f120000 	svcvs	0x00120000
    1134:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    1138:	00006f12 	andeq	r6, r0, r2, lsl pc
    113c:	23000700 	movwcs	r0, #1792	; 0x700
    1140:	00000946 	andeq	r0, r0, r6, asr #18
    1144:	096b3901 	stmdbeq	fp!, {r0, r8, fp, ip, sp}^
    1148:	9d240000 	stcls	0, cr0, [r4, #-0]
    114c:	01000006 	tsteq	r0, r6
    1150:	0000763a 	andeq	r7, r0, sl, lsr r6
    1154:	28030500 	stmdacs	r3, {r8, sl}
    1158:	25200014 	strcs	r0, [r0, #-20]!	; 0xffffffec
    115c:	000007e1 	andeq	r0, r0, r1, ror #15
    1160:	0a46fa01 	beq	11bf96c <startup-0x1ee40694>
    1164:	000e2000 	andeq	r2, lr, r0
    1168:	9c010000 	stcls	0, cr0, [r1], {-0}
    116c:	00052f26 	andeq	r2, r5, r6, lsr #30
    1170:	3cdf0100 	ldfcce	f0, [pc], {0}
    1174:	0a20000a 	beq	8011a4 <startup-0x1f7fee5c>
    1178:	01000000 	mrseq	r0, (UNDEF: 0)
    117c:	04f3279c 	ldrbteq	r2, [r3], #1948	; 0x79c
    1180:	c7010000 	strgt	r0, [r1, -r0]
    1184:	200009cc 	andcs	r0, r0, ip, asr #19
    1188:	00000070 	andeq	r0, r0, r0, ror r0
    118c:	0a179c01 	beq	5e8198 <startup-0x1fa17e68>
    1190:	c8280000 	stmdagt	r8!, {}	; <UNPREDICTABLE>
    1194:	01000007 	tsteq	r0, r7
    1198:	000068c7 	andeq	r6, r0, r7, asr #17
    119c:	9c910300 	ldcls	3, cr0, [r1], {0}
    11a0:	0750297f 			; <UNDEFINED> instruction: 0x0750297f
    11a4:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    11a8:	00000068 	andeq	r0, r0, r8, rrx
    11ac:	29709102 	ldmdbcs	r0!, {r1, r8, ip, pc}^
    11b0:	000005b2 			; <UNDEFINED> instruction: 0x000005b2
    11b4:	0a17cb01 	beq	5f3dc0 <startup-0x1fa0c240>
    11b8:	91030000 	mrsls	r0, (UNDEF: 3)
    11bc:	fc2a7fa0 	stc2	15, cr7, [sl], #-640	; 0xfffffd80
    11c0:	30200009 	eorcc	r0, r0, r9
    11c4:	2b000000 	blcs	11cc <startup-0x1fffee34>
    11c8:	ce010069 	cdpgt	0, 0, cr0, cr1, cr9, {3}
    11cc:	00000068 	andeq	r0, r0, r8, rrx
    11d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    11d4:	014f1100 	mrseq	r1, (UNDEF: 95)
    11d8:	0a2d0000 	beq	b411e0 <startup-0x1f4bee20>
    11dc:	6f120000 	svcvs	0x00120000
    11e0:	13000000 	movwne	r0, #0
    11e4:	00006f12 	andeq	r6, r0, r2, lsl pc
    11e8:	27000300 	strcs	r0, [r0, -r0, lsl #6]
    11ec:	0000039b 	muleq	r0, fp, r3
    11f0:	0980b601 	stmibeq	r0, {r0, r9, sl, ip, sp, pc}
    11f4:	004c2000 	subeq	r2, ip, r0
    11f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11fc:	00000a5f 	andeq	r0, r0, pc, asr sl
    1200:	0007c828 	andeq	ip, r7, r8, lsr #16
    1204:	68b60100 	ldmvs	r6!, {r8}
    1208:	02000000 	andeq	r0, r0, #0
    120c:	be287491 	mcrlt	4, 1, r7, cr8, cr1, {4}
    1210:	01000003 	tsteq	r0, r3
    1214:	00014fb6 			; <UNDEFINED> instruction: 0x00014fb6
    1218:	73910200 	orrsvc	r0, r1, #0, 4
    121c:	07b62700 	ldreq	r2, [r6, r0, lsl #14]!
    1220:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
    1224:	20000912 	andcs	r0, r0, r2, lsl r9
    1228:	0000006e 	andeq	r0, r0, lr, rrx
    122c:	0ac99c01 	beq	ff268238 <Pedro+0xdf2664cc>
    1230:	ec280000 	stc	0, cr0, [r8], #-0
    1234:	01000003 	tsteq	r0, r3
    1238:	00006898 	muleq	r0, r8, r8
    123c:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    1240:	00050128 	andeq	r0, r5, r8, lsr #2
    1244:	68980100 	ldmvs	r8, {r8}
    1248:	02000000 	andeq	r0, r0, #0
    124c:	622b4091 	eorvs	r4, fp, #145	; 0x91
    1250:	c9990100 	ldmibgt	r9, {r8}
    1254:	0200000a 	andeq	r0, r0, #10
    1258:	2e2a4891 	mcrcs	8, 1, r4, cr10, cr1, {4}
    125c:	46200009 	strtmi	r0, [r0], -r9
    1260:	2b000000 	blcs	1268 <startup-0x1fffed98>
    1264:	ad01006a 	stcge	0, cr0, [r1, #-424]	; 0xfffffe58
    1268:	00000068 	andeq	r0, r0, r8, rrx
    126c:	2a6c9102 	bcs	1b2567c <startup-0x1e4da984>
    1270:	20000934 	andcs	r0, r0, r4, lsr r9
    1274:	00000034 	andeq	r0, r0, r4, lsr r0
    1278:	0100692b 	tsteq	r0, fp, lsr #18
    127c:	000068ae 	andeq	r6, r0, lr, lsr #17
    1280:	68910200 	ldmvs	r1, {r9}
    1284:	11000000 	mrsne	r0, (UNDEF: 0)
    1288:	0000014f 	andeq	r0, r0, pc, asr #2
    128c:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    1290:	00006f12 	andeq	r6, r0, r2, lsl pc
    1294:	6f120f00 	svcvs	0x00120f00
    1298:	01000000 	mrseq	r0, (UNDEF: 0)
    129c:	06e42c00 	strbteq	r2, [r4], r0, lsl #24
    12a0:	92010000 	andls	r0, r1, #0
    12a4:	20000902 	andcs	r0, r0, r2, lsl #18
    12a8:	00000010 	andeq	r0, r0, r0, lsl r0
    12ac:	0b029c01 	bleq	a82b8 <startup-0x1ff57d48>
    12b0:	f32d0000 	vhadd.u32	d0, d13, d0
    12b4:	01000004 	tsteq	r0, r4
    12b8:	0000688f 	andeq	r6, r0, pc, lsl #17
    12bc:	00002e00 	andeq	r2, r0, r0, lsl #28
    12c0:	0005d72c 	andeq	sp, r5, ip, lsr #14
    12c4:	f28e0100 	vaddw.s8	q0, q7, d0
    12c8:	10200008 	eorne	r0, r0, r8
    12cc:	01000000 	mrseq	r0, (UNDEF: 0)
    12d0:	000b259c 	muleq	fp, ip, r5
    12d4:	04f32d00 	ldrbteq	r2, [r3], #3328	; 0xd00
    12d8:	8f010000 	svchi	0x00010000
    12dc:	00000068 	andeq	r0, r0, r8, rrx
    12e0:	2c00002e 	stccs	0, cr0, [r0], {46}	; 0x2e
    12e4:	00000414 	andeq	r0, r0, r4, lsl r4
    12e8:	08c06a01 	stmiaeq	r0, {r0, r9, fp, sp, lr}^
    12ec:	00322000 	eorseq	r2, r2, r0
    12f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    12f4:	00000b65 	andeq	r0, r0, r5, ror #22
    12f8:	000b4d2f 	andeq	r4, fp, pc, lsr #26
    12fc:	05d72d00 	ldrbeq	r2, [r7, #3328]	; 0xd00
    1300:	75010000 	strvc	r0, [r1, #-0]
    1304:	00000068 	andeq	r0, r0, r8, rrx
    1308:	2a00002e 	bcs	13c8 <startup-0x1fffec38>
    130c:	200008d6 	ldrdcs	r0, [r0], -r6
    1310:	00000004 	andeq	r0, r0, r4
    1314:	0006e42d 	andeq	lr, r6, sp, lsr #8
    1318:	68780100 	ldmdavs	r8!, {r8}^
    131c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1320:	30000000 	andcc	r0, r0, r0
    1324:	000005a6 	andeq	r0, r0, r6, lsr #11
    1328:	08884e01 	stmeq	r8, {r0, r9, sl, fp, lr}
    132c:	00382000 	eorseq	r2, r8, r0
    1330:	9c010000 	stcls	0, cr0, [r1], {-0}
    1334:	0005ef26 	andeq	lr, r5, r6, lsr #30
    1338:	283f0100 	ldmdacs	pc!, {r8}	; <UNPREDICTABLE>
    133c:	60200008 	eorvs	r0, r0, r8
    1340:	01000000 	mrseq	r0, (UNDEF: 0)
    1344:	06d6319c 			; <UNDEFINED> instruction: 0x06d6319c
    1348:	2d010000 	stccs	0, cr0, [r1, #-0]
    134c:	20000000 	andcs	r0, r0, r0
    1350:	0000000c 	andeq	r0, r0, ip
    1354:	b5009c01 	strlt	r9, [r0, #-3073]	; 0xfffff3ff
    1358:	04000005 	streq	r0, [r0], #-5
    135c:	00064000 	andeq	r4, r6, r0
    1360:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
    1364:	0c000000 	stceq	0, cr0, [r0], {-0}
    1368:	0000090b 	andeq	r0, r0, fp, lsl #18
    136c:	00000000 	andeq	r0, r0, r0
    1370:	20000a54 	andcs	r0, r0, r4, asr sl
    1374:	000006d4 	ldrdeq	r0, [r0], -r4
    1378:	0000057b 	andeq	r0, r0, fp, ror r5
    137c:	dd060102 	stfles	f0, [r6, #-8]
    1380:	03000001 	movweq	r0, #1
    1384:	0000085e 	andeq	r0, r0, lr, asr r8
    1388:	00372b02 	eorseq	r2, r7, r2, lsl #22
    138c:	01020000 	mrseq	r0, (UNDEF: 2)
    1390:	0001db08 	andeq	sp, r1, r8, lsl #22
    1394:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    1398:	00000132 	andeq	r0, r0, r2, lsr r1
    139c:	21070202 	tstcs	r7, r2, lsl #4
    13a0:	02000002 	andeq	r0, r0, #2
    13a4:	01ab0504 			; <UNDEFINED> instruction: 0x01ab0504
    13a8:	04020000 	streq	r0, [r2], #-0
    13ac:	0001f307 	andeq	pc, r1, r7, lsl #6
    13b0:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    13b4:	000001a6 	andeq	r0, r0, r6, lsr #3
    13b8:	ee070802 	cdp	8, 0, cr0, cr7, cr2, {0}
    13bc:	04000001 	streq	r0, [r0], #-1
    13c0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    13c4:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    13c8:	0001f807 	andeq	pc, r1, r7, lsl #16
    13cc:	08600300 	stmdaeq	r0!, {r8, r9}^
    13d0:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
    13d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    13d8:	0c040205 	sfmeq	f0, 4, [r4], {5}
    13dc:	000000a2 	andeq	r0, r0, r2, lsr #1
    13e0:	00035106 	andeq	r5, r3, r6, lsl #2
    13e4:	370d0400 	strcc	r0, [sp, -r0, lsl #8]
    13e8:	00000000 	andeq	r0, r0, r0
    13ec:	00037906 	andeq	r7, r3, r6, lsl #18
    13f0:	370e0400 	strcc	r0, [lr, -r0, lsl #8]
    13f4:	01000000 	mrseq	r0, (UNDEF: 0)
    13f8:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    13fc:	0000bb0a 	andeq	fp, r0, sl, lsl #22
    1400:	64690800 	strbtvs	r0, [r9], #-2048	; 0xfffff800
    1404:	0b040072 	bleq	1015d4 <startup-0x1fefea2c>
    1408:	0000006f 	andeq	r0, r0, pc, rrx
    140c:	00008109 	andeq	r8, r0, r9, lsl #2
    1410:	02050000 	andeq	r0, r5, #0
    1414:	00dc1304 	sbcseq	r1, ip, r4, lsl #6
    1418:	4a060000 	bmi	181420 <startup-0x1fe7ebe0>
    141c:	04000003 	streq	r0, [r0], #-3
    1420:	00003714 	andeq	r3, r0, r4, lsl r7
    1424:	35060000 	strcc	r0, [r6, #-0]
    1428:	04000003 	streq	r0, [r0], #-3
    142c:	00003715 	andeq	r3, r0, r5, lsl r7
    1430:	07000100 	streq	r0, [r0, -r0, lsl #2]
    1434:	f5110404 			; <UNDEFINED> instruction: 0xf5110404
    1438:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    143c:	0072646f 	rsbseq	r6, r2, pc, ror #8
    1440:	006f1204 	rsbeq	r1, pc, r4, lsl #4
    1444:	bb090000 	bllt	24144c <startup-0x1fdbebb4>
    1448:	00000000 	andeq	r0, r0, r0
    144c:	0003620a 	andeq	r6, r3, sl, lsl #4
    1450:	04041800 	streq	r1, [r4], #-2048	; 0xfffff800
    1454:	0000013e 	andeq	r0, r0, lr, lsr r1
    1458:	00032f06 	andeq	r2, r3, r6, lsl #30
    145c:	6f050400 	svcvs	0x00050400
    1460:	00000000 	andeq	r0, r0, r0
    1464:	00033d06 	andeq	r3, r3, r6, lsl #26
    1468:	6f060400 	svcvs	0x00060400
    146c:	04000000 	streq	r0, [r0], #-0
    1470:	00038106 	andeq	r8, r3, r6, lsl #2
    1474:	6f070400 	svcvs	0x00070400
    1478:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    147c:	00034406 	andeq	r4, r3, r6, lsl #8
    1480:	6f080400 	svcvs	0x00080400
    1484:	0c000000 	stceq	0, cr0, [r0], {-0}
    1488:	0000a20b 	andeq	sl, r0, fp, lsl #4
    148c:	dc0b1000 	stcle	0, cr1, [fp], {-0}
    1490:	14000000 	strne	r0, [r0], #-0
    1494:	03740300 	cmneq	r4, #0, 6
    1498:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
    149c:	000000f5 	strdeq	r0, [r0], -r5
    14a0:	0000760c 	andeq	r7, r0, ip, lsl #12
    14a4:	00015f00 	andeq	r5, r1, r0, lsl #30
    14a8:	006f0d00 	rsbeq	r0, pc, r0, lsl #26
    14ac:	0dff0000 	ldcleq	0, cr0, [pc]	; 14b4 <startup-0x1fffeb4c>
    14b0:	0000006f 	andeq	r0, r0, pc, rrx
    14b4:	460e0007 	strmi	r0, [lr], -r7
    14b8:	01000009 	tsteq	r0, r9
    14bc:	00014906 	andeq	r4, r1, r6, lsl #18
    14c0:	2c030500 	cfstr32cs	mvfx0, [r3], {-0}
    14c4:	0f200014 	svceq	0x00200014
    14c8:	000007f6 	strdeq	r0, [r0], -r6
    14cc:	10b0ea01 	adcsne	lr, r0, r1, lsl #20
    14d0:	00782000 	rsbseq	r2, r8, r0
    14d4:	9c010000 	stcls	0, cr0, [r1], {-0}
    14d8:	000001cc 	andeq	r0, r0, ip, asr #3
    14dc:	0010b610 	andseq	fp, r0, r0, lsl r6
    14e0:	00004420 	andeq	r4, r0, r0, lsr #8
    14e4:	0001b500 	andeq	fp, r1, r0, lsl #10
    14e8:	00691100 	rsbeq	r1, r9, r0, lsl #2
    14ec:	0068eb01 	rsbeq	lr, r8, r1, lsl #22
    14f0:	91020000 	mrsls	r0, (UNDEF: 2)
    14f4:	10bc1274 	adcsne	r1, ip, r4, ror r2
    14f8:	00322000 	eorseq	r2, r2, r0
    14fc:	6a110000 	bvs	441504 <startup-0x1fbbeafc>
    1500:	68ec0100 	stmiavs	ip!, {r8}^
    1504:	02000000 	andeq	r0, r0, #0
    1508:	00007091 	muleq	r0, r1, r0
    150c:	0010fa12 	andseq	pc, r0, r2, lsl sl	; <UNPREDICTABLE>
    1510:	00002220 	andeq	r2, r0, r0, lsr #4
    1514:	006a1100 	rsbeq	r1, sl, r0, lsl #2
    1518:	0068f001 	rsbeq	pc, r8, r1
    151c:	91020000 	mrsls	r0, (UNDEF: 2)
    1520:	0f00006c 	svceq	0x0000006c
    1524:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
    1528:	103ce001 	eorsne	lr, ip, r1
    152c:	00742000 	rsbseq	r2, r4, r0
    1530:	9c010000 	stcls	0, cr0, [r1], {-0}
    1534:	00000228 	andeq	r0, r0, r8, lsr #4
    1538:	00104210 	andseq	r4, r0, r0, lsl r2
    153c:	00004420 	andeq	r4, r0, r0, lsr #8
    1540:	00021100 	andeq	r1, r2, r0, lsl #2
    1544:	00691100 	rsbeq	r1, r9, r0, lsl #2
    1548:	0068e101 	rsbeq	lr, r8, r1, lsl #2
    154c:	91020000 	mrsls	r0, (UNDEF: 2)
    1550:	10481274 	subne	r1, r8, r4, ror r2
    1554:	00322000 	eorseq	r2, r2, r0
    1558:	6a110000 	bvs	441560 <startup-0x1fbbeaa0>
    155c:	68e20100 	stmiavs	r2!, {r8}^
    1560:	02000000 	andeq	r0, r0, #0
    1564:	00007091 	muleq	r0, r1, r0
    1568:	00108612 	andseq	r8, r0, r2, lsl r6
    156c:	00001c20 	andeq	r1, r0, r0, lsr #24
    1570:	006a1100 	rsbeq	r1, sl, r0, lsl #2
    1574:	0068e601 	rsbeq	lr, r8, r1, lsl #12
    1578:	91020000 	mrsls	r0, (UNDEF: 2)
    157c:	1300006c 	movwne	r0, #108	; 0x6c
    1580:	00000800 	andeq	r0, r0, r0, lsl #16
    1584:	0f5cb001 	svceq	0x005cb001
    1588:	00e02000 	rsceq	r2, r0, r0
    158c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1590:	0000027c 	andeq	r0, r0, ip, ror r2
    1594:	01006911 	tsteq	r0, r1, lsl r9
    1598:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    159c:	6f910200 	svcvs	0x00910200
    15a0:	01006a11 	tsteq	r0, r1, lsl sl
    15a4:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    15a8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    15ac:	0008ed14 	andeq	lr, r8, r4, lsl sp
    15b0:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    15b4:	02000000 	andeq	r0, r0, #0
    15b8:	63116791 	tstvs	r1, #38010880	; 0x2440000
    15bc:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	6b116d91 	blvs	45cc10 <startup-0x1fba33f0>
    15c8:	6fb20100 	svcvs	0x00b20100
    15cc:	02000000 	andeq	r0, r0, #0
    15d0:	15006891 	strne	r6, [r0, #-2193]	; 0xfffff76f
    15d4:	000008a0 	andeq	r0, r0, r0, lsr #17
    15d8:	0f2cac01 	svceq	0x002cac01
    15dc:	00302000 	eorseq	r2, r0, r0
    15e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    15e4:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    15e8:	0003ec16 	andeq	lr, r3, r6, lsl ip
    15ec:	68ac0100 	stmiavs	ip!, {r8}
    15f0:	02000000 	andeq	r0, r0, #0
    15f4:	01167491 			; <UNDEFINED> instruction: 0x01167491
    15f8:	01000005 	tsteq	r0, r5
    15fc:	000068ac 	andeq	r6, r0, ip, lsr #17
    1600:	70910200 	addsvc	r0, r1, r0, lsl #4
    1604:	01006317 	tsteq	r0, r7, lsl r3
    1608:	0002baac 	andeq	fp, r2, ip, lsr #21
    160c:	6f910200 	svcvs	0x00910200
    1610:	08010200 	stmdaeq	r1, {r9}
    1614:	000001e4 	andeq	r0, r0, r4, ror #3
    1618:	00093315 	andeq	r3, r9, r5, lsl r3
    161c:	00a90100 	adceq	r0, r9, r0, lsl #2
    1620:	2c20000f 	stccs	0, cr0, [r0], #-60	; 0xffffffc4
    1624:	01000000 	mrseq	r0, (UNDEF: 0)
    1628:	0002ff9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    162c:	03ec1600 	mvneq	r1, #0, 12
    1630:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1634:	00000068 	andeq	r0, r0, r8, rrx
    1638:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    163c:	00000501 	andeq	r0, r0, r1, lsl #10
    1640:	0068a901 	rsbeq	sl, r8, r1, lsl #18
    1644:	91020000 	mrsls	r0, (UNDEF: 2)
    1648:	00631770 	rsbeq	r1, r3, r0, ror r7
    164c:	02baa901 	adcseq	sl, sl, #16384	; 0x4000
    1650:	91020000 	mrsls	r0, (UNDEF: 2)
    1654:	f015006f 			; <UNDEFINED> instruction: 0xf015006f
    1658:	01000007 	tsteq	r0, r7
    165c:	000e4c9d 	muleq	lr, sp, ip
    1660:	0000b420 	andeq	fp, r0, r0, lsr #8
    1664:	499c0100 	ldmibmi	ip, {r8}
    1668:	17000003 	strne	r0, [r0, -r3]
    166c:	9d010078 	stcls	0, cr0, [r1, #-480]	; 0xfffffe20
    1670:	00000068 	andeq	r0, r0, r8, rrx
    1674:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    1678:	9d010079 	stcls	0, cr0, [r1, #-484]	; 0xfffffe1c
    167c:	00000068 	andeq	r0, r0, r8, rrx
    1680:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    1684:	00746573 	rsbseq	r6, r4, r3, ror r5
    1688:	00689d01 	rsbeq	r9, r8, r1, lsl #26
    168c:	91020000 	mrsls	r0, (UNDEF: 2)
    1690:	026f1464 	rsbeq	r1, pc, #100, 8	; 0x64000000
    1694:	9f010000 	svcls	0x00010000
    1698:	00000076 	andeq	r0, r0, r6, ror r0
    169c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    16a0:	0009400f 	andeq	r4, r9, pc
    16a4:	04960100 	ldreq	r0, [r6], #256	; 0x100
    16a8:	4820000e 	stmdami	r0!, {r1, r2, r3}
    16ac:	01000000 	mrseq	r0, (UNDEF: 0)
    16b0:	00038b9c 	muleq	r3, ip, fp
    16b4:	0e0a1200 	cdpeq	2, 0, cr1, cr10, cr0, {0}
    16b8:	00342000 	eorseq	r2, r4, r0
    16bc:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    16c0:	68970100 	ldmvs	r7, {r8}
    16c4:	02000000 	andeq	r0, r0, #0
    16c8:	10127491 	mulsne	r2, r1, r4
    16cc:	2220000e 	eorcs	r0, r0, #14
    16d0:	11000000 	mrsne	r0, (UNDEF: 0)
    16d4:	9801006a 	stmdals	r1, {r1, r3, r5, r6}
    16d8:	00000068 	andeq	r0, r0, r8, rrx
    16dc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    16e0:	2a130000 	bcs	4c16e8 <startup-0x1fb3e918>
    16e4:	01000008 	tsteq	r0, r8
    16e8:	000dc68d 	andeq	ip, sp, sp, lsl #13
    16ec:	00003e20 	andeq	r3, r0, r0, lsr #28
    16f0:	cd9c0100 	ldfgts	f0, [ip]
    16f4:	12000003 	andne	r0, r0, #3
    16f8:	20000dcc 	andcs	r0, r0, ip, asr #27
    16fc:	00000030 	andeq	r0, r0, r0, lsr r0
    1700:	01006911 	tsteq	r0, r1, lsl r9
    1704:	0000688e 	andeq	r6, r0, lr, lsl #17
    1708:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    170c:	000dd212 	andeq	sp, sp, r2, lsl r2
    1710:	00001e20 	andeq	r1, r0, r0, lsr #28
    1714:	006a1100 	rsbeq	r1, sl, r0, lsl #2
    1718:	00688f01 	rsbeq	r8, r8, r1, lsl #30
    171c:	91020000 	mrsls	r0, (UNDEF: 2)
    1720:	00000070 	andeq	r0, r0, r0, ror r0
    1724:	00086813 	andeq	r6, r8, r3, lsl r8
    1728:	80860100 	addhi	r0, r6, r0, lsl #2
    172c:	4620000d 	strtmi	r0, [r0], -sp
    1730:	01000000 	mrseq	r0, (UNDEF: 0)
    1734:	0003ff9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
    1738:	08591600 	ldmdaeq	r9, {r9, sl, ip}^
    173c:	86010000 	strhi	r0, [r1], -r0
    1740:	00000076 	andeq	r0, r0, r6, ror r0
    1744:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    1748:	000008ed 	andeq	r0, r0, sp, ror #17
    174c:	00768601 	rsbseq	r8, r6, r1, lsl #12
    1750:	91020000 	mrsls	r0, (UNDEF: 2)
    1754:	14130076 	ldrne	r0, [r3], #-118	; 0xffffff8a
    1758:	01000008 	tsteq	r0, r8
    175c:	000d4080 	andeq	r4, sp, r0, lsl #1
    1760:	00004020 	andeq	r4, r0, r0, lsr #32
    1764:	319c0100 	orrscc	r0, ip, r0, lsl #2
    1768:	16000004 	strne	r0, [r0], -r4
    176c:	00000822 	andeq	r0, r0, r2, lsr #16
    1770:	00768001 	rsbseq	r8, r6, r1
    1774:	91020000 	mrsls	r0, (UNDEF: 2)
    1778:	08ed1677 	stmiaeq	sp!, {r0, r1, r2, r4, r5, r6, r9, sl, ip}^
    177c:	80010000 	andhi	r0, r1, r0
    1780:	00000076 	andeq	r0, r0, r6, ror r0
    1784:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1788:	00089213 	andeq	r9, r8, r3, lsl r2
    178c:	ca6b0100 	bgt	1ac1b94 <startup-0x1e53e46c>
    1790:	7620000c 	strtvc	r0, [r0], -ip
    1794:	01000000 	mrseq	r0, (UNDEF: 0)
    1798:	0004709c 	muleq	r4, ip, r0
    179c:	070c1600 	streq	r1, [ip, -r0, lsl #12]
    17a0:	6b010000 	blvs	417a8 <startup-0x1ffbe858>
    17a4:	00000076 	andeq	r0, r0, r6, ror r0
    17a8:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    17ac:	000008ed 	andeq	r0, r0, sp, ror #17
    17b0:	00766b01 	rsbseq	r6, r6, r1, lsl #22
    17b4:	91020000 	mrsls	r0, (UNDEF: 2)
    17b8:	001d1876 	andseq	r1, sp, r6, ror r8
    17bc:	42010000 	andmi	r0, r1, #0
    17c0:	00000068 	andeq	r0, r0, r8, rrx
    17c4:	1a000019 	bne	1830 <startup-0x1fffe7d0>
    17c8:	0000084c 	andeq	r0, r0, ip, asr #16
    17cc:	00766601 	rsbseq	r6, r6, r1, lsl #12
    17d0:	0ca00000 	stceq	0, cr0, [r0]
    17d4:	002a2000 	eoreq	r2, sl, r0
    17d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    17dc:	00000498 	muleq	r0, r8, r4
    17e0:	0008ed16 	andeq	lr, r8, r6, lsl sp
    17e4:	76660100 	strbtvc	r0, [r6], -r0, lsl #2
    17e8:	02000000 	andeq	r0, r0, #0
    17ec:	1a007791 	bne	1f638 <startup-0x1ffe09c8>
    17f0:	0000083f 	andeq	r0, r0, pc, lsr r8
    17f4:	00764e01 	rsbseq	r4, r6, r1, lsl #28
    17f8:	0c100000 	ldceq	0, cr0, [r0], {-0}
    17fc:	00902000 	addseq	r2, r0, r0
    1800:	9c010000 	stcls	0, cr0, [r1], {-0}
    1804:	000004d9 	ldrdeq	r0, [r0], -r9
    1808:	0008ed16 	andeq	lr, r8, r6, lsl sp
    180c:	764e0100 	strbvc	r0, [lr], -r0, lsl #2
    1810:	02000000 	andeq	r0, r0, #0
    1814:	63116f91 	tstvs	r1, #580	; 0x244
    1818:	764f0100 	strbvc	r0, [pc], -r0, lsl #2
    181c:	02000000 	andeq	r0, r0, #0
    1820:	1d187791 	ldcne	7, cr7, [r8, #-580]	; 0xfffffdbc
    1824:	01000000 	mrseq	r0, (UNDEF: 0)
    1828:	00006842 	andeq	r6, r0, r2, asr #16
    182c:	00001900 	andeq	r1, r0, r0, lsl #18
    1830:	0008d31b 	andeq	sp, r8, fp, lsl r3
    1834:	a63c0100 	ldrtge	r0, [ip], -r0, lsl #2
    1838:	6a20000b 	bvs	80186c <startup-0x1f7fe794>
    183c:	01000000 	mrseq	r0, (UNDEF: 0)
    1840:	0005089c 	muleq	r5, ip, r8
    1844:	00631100 	rsbeq	r1, r3, r0, lsl #2
    1848:	00763d01 	rsbseq	r3, r6, r1, lsl #26
    184c:	91020000 	mrsls	r0, (UNDEF: 2)
    1850:	001d1877 	andseq	r1, sp, r7, ror r8
    1854:	42010000 	andmi	r0, r1, #0
    1858:	00000068 	andeq	r0, r0, r8, rrx
    185c:	13000019 	movwne	r0, #25
    1860:	000008f8 	strdeq	r0, [r0], -r8
    1864:	0b422c01 	bleq	108c870 <startup-0x1ef73790>
    1868:	00642000 	rsbeq	r2, r4, r0
    186c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1870:	0000053c 	andeq	r0, r0, ip, lsr r5
    1874:	0000291c 	andeq	r2, r0, ip, lsl r9
    1878:	682e0100 	stmdavs	lr!, {r8}
    187c:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    1880:	19000005 	stmdbne	r0, {r0, r2}
    1884:	00f31800 	rscseq	r1, r3, r0, lsl #16
    1888:	30010000 	andcc	r0, r1, r0
    188c:	00000068 	andeq	r0, r0, r8, rrx
    1890:	1b000019 	blne	18fc <startup-0x1fffe704>
    1894:	000008e6 	andeq	r0, r0, r6, ror #17
    1898:	0ae81901 	beq	ffa07ca4 <Pedro+0xdfa05f38>
    189c:	005a2000 	subseq	r2, sl, r0
    18a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18a4:	00000560 	andeq	r0, r0, r0, ror #10
    18a8:	0008ed16 	andeq	lr, r8, r6, lsl sp
    18ac:	76190100 	ldrvc	r0, [r9], -r0, lsl #2
    18b0:	02000000 	andeq	r0, r0, #0
    18b4:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    18b8:	0000087b 	andeq	r0, r0, fp, ror r8
    18bc:	0a981101 	beq	fe605cc8 <Pedro+0xde603f5c>
    18c0:	00502000 	subseq	r2, r0, r0
    18c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18c8:	0000058e 	andeq	r0, r0, lr, lsl #11
    18cc:	01007817 	tsteq	r0, r7, lsl r8
    18d0:	00003711 	andeq	r3, r0, r1, lsl r7
    18d4:	6f910200 	svcvs	0x00910200
    18d8:	01006311 	tsteq	r0, r1, lsl r3
    18dc:	0002ba12 	andeq	fp, r2, r2, lsl sl
    18e0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18e4:	08be1e00 	ldmeq	lr!, {r9, sl, fp, ip}
    18e8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    18ec:	20000a54 	andcs	r0, r0, r4, asr sl
    18f0:	00000044 	andeq	r0, r0, r4, asr #32
    18f4:	78179c01 	ldmdavc	r7, {r0, sl, fp, ip, pc}
    18f8:	37090100 	strcc	r0, [r9, -r0, lsl #2]
    18fc:	02000000 	andeq	r0, r0, #0
    1900:	63116f91 	tstvs	r1, #580	; 0x244
    1904:	ba0a0100 	blt	281d0c <startup-0x1fd7e2f4>
    1908:	02000002 	andeq	r0, r0, #2
    190c:	00007791 	muleq	r0, r1, r7

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00050300 	andeq	r0, r5, r0, lsl #6
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	0b002404 	bleq	9054 <startup-0x1fff6fac>
  40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  44:	05000008 	streq	r0, [r0, #-8]
  48:	0111010b 	tsteq	r1, fp, lsl #2
  4c:	00000612 	andeq	r0, r0, r2, lsl r6
  50:	03003406 	movweq	r3, #1030	; 0x406
  54:	3b0b3a08 	blcc	2ce87c <startup-0x1fd31784>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	07000018 	smladeq	r0, r8, r0, r0
  60:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	01110b3b 	tsteq	r1, fp, lsr fp
  6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  70:	00194297 	mulseq	r9, r7, r2
  74:	11010000 	mrsne	r0, (UNDEF: 1)
  78:	130e2501 	movwne	r2, #58625	; 0xe501
  7c:	1b0e030b 	blne	380cb0 <startup-0x1fc7f350>
  80:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  84:	00171006 	andseq	r1, r7, r6
  88:	01130200 	tsteq	r3, r0, lsl #4
  8c:	0b0b0e03 	bleq	2c38a0 <startup-0x1fd3c760>
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	03000d03 	movweq	r0, #3331	; 0xd03
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  a4:	0400000b 	streq	r0, [r0], #-11
  a8:	0b0b0024 	bleq	2c0140 <startup-0x1fd3fec0>
  ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  b0:	0f050000 	svceq	0x00050000
  b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b8:	06000013 			; <UNDEFINED> instruction: 0x06000013
  bc:	0b0b0024 	bleq	2c0154 <startup-0x1fd3feac>
  c0:	0e030b3e 	vmoveq.16	d3[0], r0
  c4:	15070000 	strne	r0, [r7, #-0]
  c8:	01192701 	tsteq	r9, r1, lsl #14
  cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
  d0:	13490005 	movtne	r0, #36869	; 0x9005
  d4:	16090000 	strne	r0, [r9], -r0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0a000013 	beq	134 <startup-0x1ffffecc>
  e4:	13490035 	movtne	r0, #36917	; 0x9035
  e8:	010b0000 	mrseq	r0, (UNDEF: 11)
  ec:	01134901 	tsteq	r3, r1, lsl #18
  f0:	0c000013 	stceq	0, cr0, [r0], {19}
  f4:	13490021 	movtne	r0, #36897	; 0x9021
  f8:	00000b2f 	andeq	r0, r0, pc, lsr #22
  fc:	0300340d 	movweq	r3, #1037	; 0x40d
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	3f13490b 	svccc	0x0013490b
 108:	00193c19 	andseq	r3, r9, r9, lsl ip
 10c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 110:	0b3a0e03 	bleq	e83924 <startup-0x1f17c6dc>
 114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 118:	00001802 	andeq	r1, r0, r2, lsl #16
 11c:	3f002e0f 	svccc	0x00002e0f
 120:	3a0e0319 	bcc	380d8c <startup-0x1fc7f274>
 124:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 128:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 12c:	97184006 	ldrls	r4, [r8, -r6]
 130:	00001942 	andeq	r1, r0, r2, asr #18
 134:	3f012e10 	svccc	0x00012e10
 138:	3a0e0319 	bcc	380da4 <startup-0x1fc7f25c>
 13c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 140:	11134919 	tstne	r3, r9, lsl r9
 144:	40061201 	andmi	r1, r6, r1, lsl #4
 148:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 14c:	00001301 	andeq	r1, r0, r1, lsl #6
 150:	03000511 	movweq	r0, #1297	; 0x511
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	12000018 	andne	r0, r0, #24
 160:	08030034 	stmdaeq	r3, {r2, r4, r5}
 164:	0b3b0b3a 	bleq	ec2e54 <startup-0x1f13d1ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0b130000 	bleq	4c0174 <startup-0x1fb3fe8c>
 170:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 174:	14000006 	strne	r0, [r0], #-6
 178:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 17c:	0b3a0e03 	bleq	e83990 <startup-0x1f17c670>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	06120111 			; <UNDEFINED> instruction: 0x06120111
 188:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 18c:	00130119 	andseq	r0, r3, r9, lsl r1
 190:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 194:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 198:	0b3b0b3a 	bleq	ec2e88 <startup-0x1f13d178>
 19c:	01111927 	tsteq	r1, r7, lsr #18
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 1a8:	16000013 			; <UNDEFINED> instruction: 0x16000013
 1ac:	0111010b 	tsteq	r1, fp, lsl #2
 1b0:	13010612 	movwne	r0, #5650	; 0x1612
 1b4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 1b8:	03193f00 	tsteq	r9, #0, 30
 1bc:	3b0b3a0e 	blcc	2ce9fc <startup-0x1fd31604>
 1c0:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 1c4:	97184006 	ldrls	r4, [r8, -r6]
 1c8:	00001942 	andeq	r1, r0, r2, asr #18
 1cc:	3f012e18 	svccc	0x00012e18
 1d0:	3a0e0319 	bcc	380e3c <startup-0x1fc7f1c4>
 1d4:	110b3b0b 	tstne	fp, fp, lsl #22
 1d8:	40061201 	andmi	r1, r6, r1, lsl #4
 1dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e0:	00001301 	andeq	r1, r0, r1, lsl #6
 1e4:	3f012e19 	svccc	0x00012e19
 1e8:	3a0e0319 	bcc	380e54 <startup-0x1fc7f1ac>
 1ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	01193c13 	tsteq	r9, r3, lsl ip
 1f4:	1a000013 	bne	248 <startup-0x1ffffdb8>
 1f8:	00000018 	andeq	r0, r0, r8, lsl r0
 1fc:	3f012e1b 	svccc	0x00012e1b
 200:	3a0e0319 	bcc	380e6c <startup-0x1fc7f194>
 204:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	00193c13 	andseq	r3, r9, r3, lsl ip
 20c:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 210:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 214:	0b3b0b3a 	bleq	ec2f04 <startup-0x1f13d0fc>
 218:	06120111 			; <UNDEFINED> instruction: 0x06120111
 21c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 220:	00000019 	andeq	r0, r0, r9, lsl r0
 224:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 228:	030b130e 	movweq	r1, #45838	; 0xb30e
 22c:	110e1b0e 	tstne	lr, lr, lsl #22
 230:	10061201 	andne	r1, r6, r1, lsl #4
 234:	02000017 	andeq	r0, r0, #23
 238:	0b0b0024 	bleq	2c02d0 <startup-0x1fd3fd30>
 23c:	0e030b3e 	vmoveq.16	d3[0], r0
 240:	16030000 	strne	r0, [r3], -r0
 244:	3a0e0300 	bcc	380e4c <startup-0x1fc7f1b4>
 248:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 24c:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 250:	0b0b0024 	bleq	2c02e8 <startup-0x1fd3fd18>
 254:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 258:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 25c:	03193f01 	tsteq	r9, #1, 30
 260:	3b0b3a0e 	blcc	2ceaa0 <startup-0x1fd31560>
 264:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 268:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 26c:	97184006 	ldrls	r4, [r8, -r6]
 270:	13011942 	movwne	r1, #6466	; 0x1942
 274:	05060000 	streq	r0, [r6, #-0]
 278:	3a0e0300 	bcc	380e80 <startup-0x1fc7f180>
 27c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 280:	00180213 	andseq	r0, r8, r3, lsl r2
 284:	00340700 	eorseq	r0, r4, r0, lsl #14
 288:	0b3a0803 	bleq	e8229c <startup-0x1f17dd64>
 28c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 290:	00001802 	andeq	r1, r0, r2, lsl #16
 294:	11010b08 	tstne	r1, r8, lsl #22
 298:	00061201 	andeq	r1, r6, r1, lsl #4
 29c:	000f0900 	andeq	r0, pc, r0, lsl #18
 2a0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 2a4:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 2a8:	03193f01 	tsteq	r9, #1, 30
 2ac:	3b0b3a0e 	blcc	2ceaec <startup-0x1fd31514>
 2b0:	1119270b 	tstne	r9, fp, lsl #14
 2b4:	40061201 	andmi	r1, r6, r1, lsl #4
 2b8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2bc:	01000000 	mrseq	r0, (UNDEF: 0)
 2c0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2c4:	0e030b13 	vmoveq.32	d3[0], r0
 2c8:	01110e1b 	tsteq	r1, fp, lsl lr
 2cc:	17100612 			; <UNDEFINED> instruction: 0x17100612
 2d0:	13020000 	movwne	r0, #8192	; 0x2000
 2d4:	3a0b0b01 	bcc	2c2ee0 <startup-0x1fd3d120>
 2d8:	010b3b0b 	tsteq	fp, fp, lsl #22
 2dc:	03000013 	movweq	r0, #19
 2e0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	0b381349 	bleq	e05014 <startup-0x1f1fafec>
 2ec:	24040000 	strcs	r0, [r4], #-0
 2f0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2f4:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f8:	01170500 	tsteq	r7, r0, lsl #10
 2fc:	0b3a0b0b 	bleq	e82f30 <startup-0x1f17d0d0>
 300:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 304:	0d060000 	stceq	0, cr0, [r6, #-0]
 308:	3a080300 	bcc	200f10 <startup-0x1fdff0f0>
 30c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 310:	07000013 	smladeq	r0, r3, r0, r0
 314:	1349000d 	movtne	r0, #36877	; 0x900d
 318:	13080000 	movwne	r0, #32768	; 0x8000
 31c:	0b0e0301 	bleq	380f28 <startup-0x1fc7f0d8>
 320:	3b0b3a0b 	blcc	2ceb54 <startup-0x1fd314ac>
 324:	0013010b 	andseq	r0, r3, fp, lsl #2
 328:	000d0900 	andeq	r0, sp, r0, lsl #18
 32c:	0b381349 	bleq	e05058 <startup-0x1f1fafa8>
 330:	160a0000 	strne	r0, [sl], -r0
 334:	3a0e0300 	bcc	380f3c <startup-0x1fc7f0c4>
 338:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 33c:	0b000013 	bleq	390 <startup-0x1ffffc70>
 340:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 344:	0b3a0e03 	bleq	e83b58 <startup-0x1f17c4a8>
 348:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 34c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 350:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 354:	0c000019 	stceq	0, cr0, [r0], {25}
 358:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 35c:	0b3a0e03 	bleq	e83b70 <startup-0x1f17c490>
 360:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 364:	06120111 			; <UNDEFINED> instruction: 0x06120111
 368:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 36c:	0d000019 	stceq	0, cr0, [r0, #-100]	; 0xffffff9c
 370:	0b0b0024 	bleq	2c0408 <startup-0x1fd3fbf8>
 374:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 378:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 37c:	03193f01 	tsteq	r9, #1, 30
 380:	3b0b3a0e 	blcc	2cebc0 <startup-0x1fd31440>
 384:	1119270b 	tstne	r9, fp, lsl #14
 388:	40061201 	andmi	r1, r6, r1, lsl #4
 38c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 390:	050f0000 	streq	r0, [pc, #-0]	; 398 <startup-0x1ffffc68>
 394:	3a080300 	bcc	200f9c <startup-0x1fdff064>
 398:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 39c:	00180213 	andseq	r0, r8, r3, lsl r2
 3a0:	11010000 	mrsne	r0, (UNDEF: 1)
 3a4:	130e2501 	movwne	r2, #58625	; 0xe501
 3a8:	1b0e030b 	blne	380fdc <startup-0x1fc7f024>
 3ac:	1117550e 	tstne	r7, lr, lsl #10
 3b0:	00171001 	andseq	r1, r7, r1
 3b4:	00240200 	eoreq	r0, r4, r0, lsl #4
 3b8:	0b3e0b0b 	bleq	f82fec <startup-0x1f07d014>
 3bc:	00000e03 	andeq	r0, r0, r3, lsl #28
 3c0:	03001603 	movweq	r1, #1539	; 0x603
 3c4:	3b0b3a0e 	blcc	2cec04 <startup-0x1fd313fc>
 3c8:	0013490b 	andseq	r4, r3, fp, lsl #18
 3cc:	00240400 	eoreq	r0, r4, r0, lsl #8
 3d0:	0b3e0b0b 	bleq	f83004 <startup-0x1f07cffc>
 3d4:	00000803 	andeq	r0, r0, r3, lsl #16
 3d8:	0b011305 	bleq	44ff4 <startup-0x1ffbb00c>
 3dc:	3b0b3a0b 	blcc	2cec10 <startup-0x1fd313f0>
 3e0:	0013010b 	andseq	r0, r3, fp, lsl #2
 3e4:	000d0600 	andeq	r0, sp, r0, lsl #12
 3e8:	0b3a0e03 	bleq	e83bfc <startup-0x1f17c404>
 3ec:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3f0:	00000b38 	andeq	r0, r0, r8, lsr fp
 3f4:	0b011707 	bleq	46018 <startup-0x1ffb9fe8>
 3f8:	3b0b3a0b 	blcc	2cec2c <startup-0x1fd313d4>
 3fc:	0013010b 	andseq	r0, r3, fp, lsl #2
 400:	000d0800 	andeq	r0, sp, r0, lsl #16
 404:	0b3a0803 	bleq	e82418 <startup-0x1f17dbe8>
 408:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 40c:	0d090000 	stceq	0, cr0, [r9, #-0]
 410:	00134900 	andseq	r4, r3, r0, lsl #18
 414:	01130a00 	tsteq	r3, r0, lsl #20
 418:	0b0b0e03 	bleq	2c3c2c <startup-0x1fd3c3d4>
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	00001301 	andeq	r1, r0, r1, lsl #6
 424:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 428:	000b3813 	andeq	r3, fp, r3, lsl r8
 42c:	000f0c00 	andeq	r0, pc, r0, lsl #24
 430:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 434:	260d0000 	strcs	r0, [sp], -r0
 438:	00134900 	andseq	r4, r3, r0, lsl #18
 43c:	00130e00 	andseq	r0, r3, r0, lsl #28
 440:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 444:	160f0000 	strne	r0, [pc], -r0
 448:	3a0e0300 	bcc	381050 <startup-0x1fc7efb0>
 44c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 450:	10000013 	andne	r0, r0, r3, lsl r0
 454:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 458:	0b3b0b3a 	bleq	ec3148 <startup-0x1f13ceb8>
 45c:	00001349 	andeq	r1, r0, r9, asr #6
 460:	49010111 	stmdbmi	r1, {r0, r4, r8}
 464:	00130113 	andseq	r0, r3, r3, lsl r1
 468:	00211200 	eoreq	r1, r1, r0, lsl #4
 46c:	0b2f1349 	bleq	bc5198 <startup-0x1f43ae68>
 470:	0f130000 	svceq	0x00130000
 474:	000b0b00 	andeq	r0, fp, r0, lsl #22
 478:	000d1400 	andeq	r1, sp, r0, lsl #8
 47c:	0b3a0803 	bleq	e82490 <startup-0x1f17db70>
 480:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 484:	00000b38 	andeq	r0, r0, r8, lsr fp
 488:	03011315 	movweq	r1, #4885	; 0x1315
 48c:	3a050b0e 	bcc	1430cc <startup-0x1febcf34>
 490:	010b3b0b 	tsteq	fp, fp, lsl #22
 494:	16000013 			; <UNDEFINED> instruction: 0x16000013
 498:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 49c:	0b3b0b3a 	bleq	ec318c <startup-0x1f13ce74>
 4a0:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 4a4:	15170000 	ldrne	r0, [r7, #-0]
 4a8:	00192700 	andseq	r2, r9, r0, lsl #14
 4ac:	01151800 	tsteq	r5, r0, lsl #16
 4b0:	13491927 	movtne	r1, #39207	; 0x9927
 4b4:	00001301 	andeq	r1, r0, r1, lsl #6
 4b8:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
 4bc:	1a000013 	bne	510 <startup-0x1ffffaf0>
 4c0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 4c4:	0b3a050b 	bleq	e818f8 <startup-0x1f17e708>
 4c8:	1301053b 	movwne	r0, #5435	; 0x153b
 4cc:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
 4d0:	3a0e0300 	bcc	3810d8 <startup-0x1fc7ef28>
 4d4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 4dc:	000d1c00 	andeq	r1, sp, r0, lsl #24
 4e0:	0b3a0e03 	bleq	e83cf4 <startup-0x1f17c30c>
 4e4:	1349053b 	movtne	r0, #38203	; 0x953b
 4e8:	00000538 	andeq	r0, r0, r8, lsr r5
 4ec:	0301131d 	movweq	r1, #4893	; 0x131d
 4f0:	3a0b0b0e 	bcc	2c3130 <startup-0x1fd3ced0>
 4f4:	01053b0b 	tsteq	r5, fp, lsl #22
 4f8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 4fc:	0b0b0113 	bleq	2c0950 <startup-0x1fd3f6b0>
 500:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 504:	00001301 	andeq	r1, r0, r1, lsl #6
 508:	0b01171f 	bleq	4618c <startup-0x1ffb9e74>
 50c:	3b0b3a0b 	blcc	2ced40 <startup-0x1fd312c0>
 510:	00130105 	andseq	r0, r3, r5, lsl #2
 514:	000d2000 	andeq	r2, sp, r0
 518:	0b3a0e03 	bleq	e83d2c <startup-0x1f17c2d4>
 51c:	1349053b 	movtne	r0, #38203	; 0x953b
 520:	15210000 	strne	r0, [r1, #-0]!
 524:	01192701 	tsteq	r9, r1, lsl #14
 528:	22000013 	andcs	r0, r0, #19
 52c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 530:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 534:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 538:	0000193c 	andeq	r1, r0, ip, lsr r9
 53c:	03003423 	movweq	r3, #1059	; 0x423
 540:	3b0b3a0e 	blcc	2ced80 <startup-0x1fd31280>
 544:	3f13490b 	svccc	0x0013490b
 548:	00193c19 	andseq	r3, r9, r9, lsl ip
 54c:	00342400 	eorseq	r2, r4, r0, lsl #8
 550:	0b3a0e03 	bleq	e83d64 <startup-0x1f17c29c>
 554:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 558:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 55c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 560:	03193f00 	tsteq	r9, #0, 30
 564:	3b0b3a0e 	blcc	2ceda4 <startup-0x1fd3125c>
 568:	1119270b 	tstne	r9, fp, lsl #14
 56c:	40061201 	andmi	r1, r6, r1, lsl #4
 570:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 574:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 578:	03193f00 	tsteq	r9, #0, 30
 57c:	3b0b3a0e 	blcc	2cedbc <startup-0x1fd31244>
 580:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 584:	97184006 	ldrls	r4, [r8, -r6]
 588:	00001942 	andeq	r1, r0, r2, asr #18
 58c:	3f012e27 	svccc	0x00012e27
 590:	3a0e0319 	bcc	3811fc <startup-0x1fc7ee04>
 594:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 598:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 59c:	96184006 	ldrls	r4, [r8], -r6
 5a0:	13011942 	movwne	r1, #6466	; 0x1942
 5a4:	05280000 	streq	r0, [r8, #-0]!
 5a8:	3a0e0300 	bcc	3811b0 <startup-0x1fc7ee50>
 5ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5b0:	00180213 	andseq	r0, r8, r3, lsl r2
 5b4:	00342900 	eorseq	r2, r4, r0, lsl #18
 5b8:	0b3a0e03 	bleq	e83dcc <startup-0x1f17c234>
 5bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5c0:	00001802 	andeq	r1, r0, r2, lsl #16
 5c4:	11010b2a 	tstne	r1, sl, lsr #22
 5c8:	00061201 	andeq	r1, r6, r1, lsl #4
 5cc:	00342b00 	eorseq	r2, r4, r0, lsl #22
 5d0:	0b3a0803 	bleq	e825e4 <startup-0x1f17da1c>
 5d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5d8:	00001802 	andeq	r1, r0, r2, lsl #16
 5dc:	3f012e2c 	svccc	0x00012e2c
 5e0:	3a0e0319 	bcc	38124c <startup-0x1fc7edb4>
 5e4:	110b3b0b 	tstne	fp, fp, lsl #22
 5e8:	40061201 	andmi	r1, r6, r1, lsl #4
 5ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 5f0:	00001301 	andeq	r1, r0, r1, lsl #6
 5f4:	3f012e2d 	svccc	0x00012e2d
 5f8:	3a0e0319 	bcc	381264 <startup-0x1fc7ed9c>
 5fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 600:	00193c13 	andseq	r3, r9, r3, lsl ip
 604:	00182e00 	andseq	r2, r8, r0, lsl #28
 608:	0b2f0000 	bleq	bc0610 <startup-0x1f43f9f0>
 60c:	00130101 	andseq	r0, r3, r1, lsl #2
 610:	002e3000 	eoreq	r3, lr, r0
 614:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 618:	0b3b0b3a 	bleq	ec3308 <startup-0x1f13ccf8>
 61c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 620:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 624:	31000019 	tstcc	r0, r9, lsl r0
 628:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 62c:	0b3a0e03 	bleq	e83e40 <startup-0x1f17c1c0>
 630:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 634:	06120111 			; <UNDEFINED> instruction: 0x06120111
 638:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 63c:	00000019 	andeq	r0, r0, r9, lsl r0
 640:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 644:	030b130e 	movweq	r1, #45838	; 0xb30e
 648:	110e1b0e 	tstne	lr, lr, lsl #22
 64c:	10061201 	andne	r1, r6, r1, lsl #4
 650:	02000017 	andeq	r0, r0, #23
 654:	0b0b0024 	bleq	2c06ec <startup-0x1fd3f914>
 658:	0e030b3e 	vmoveq.16	d3[0], r0
 65c:	16030000 	strne	r0, [r3], -r0
 660:	3a0e0300 	bcc	381268 <startup-0x1fc7ed98>
 664:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 668:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 66c:	0b0b0024 	bleq	2c0704 <startup-0x1fd3f8fc>
 670:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 674:	13050000 	movwne	r0, #20480	; 0x5000
 678:	3a0b0b01 	bcc	2c3284 <startup-0x1fd3cd7c>
 67c:	010b3b0b 	tsteq	fp, fp, lsl #22
 680:	06000013 			; <UNDEFINED> instruction: 0x06000013
 684:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 688:	0b3b0b3a 	bleq	ec3378 <startup-0x1f13cc88>
 68c:	0b381349 	bleq	e053b8 <startup-0x1f1fac48>
 690:	17070000 	strne	r0, [r7, -r0]
 694:	3a0b0b01 	bcc	2c32a0 <startup-0x1fd3cd60>
 698:	010b3b0b 	tsteq	fp, fp, lsl #22
 69c:	08000013 	stmdaeq	r0, {r0, r1, r4}
 6a0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 6a4:	0b3b0b3a 	bleq	ec3394 <startup-0x1f13cc6c>
 6a8:	00001349 	andeq	r1, r0, r9, asr #6
 6ac:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 6b0:	0a000013 	beq	704 <startup-0x1ffff8fc>
 6b4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 6b8:	0b3a0b0b 	bleq	e832ec <startup-0x1f17cd14>
 6bc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 6c0:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 6c4:	38134900 	ldmdacc	r3, {r8, fp, lr}
 6c8:	0c00000b 	stceq	0, cr0, [r0], {11}
 6cc:	13490101 	movtne	r0, #37121	; 0x9101
 6d0:	00001301 	andeq	r1, r0, r1, lsl #6
 6d4:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 6d8:	000b2f13 	andeq	r2, fp, r3, lsl pc
 6dc:	00340e00 	eorseq	r0, r4, r0, lsl #28
 6e0:	0b3a0e03 	bleq	e83ef4 <startup-0x1f17c10c>
 6e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6e8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 6ec:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 6f0:	03193f01 	tsteq	r9, #1, 30
 6f4:	3b0b3a0e 	blcc	2cef34 <startup-0x1fd310cc>
 6f8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 6fc:	97184006 	ldrls	r4, [r8, -r6]
 700:	13011942 	movwne	r1, #6466	; 0x1942
 704:	0b100000 	bleq	40070c <startup-0x1fbff8f4>
 708:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 70c:	00130106 	andseq	r0, r3, r6, lsl #2
 710:	00341100 	eorseq	r1, r4, r0, lsl #2
 714:	0b3a0803 	bleq	e82728 <startup-0x1f17d8d8>
 718:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 71c:	00001802 	andeq	r1, r0, r2, lsl #16
 720:	11010b12 	tstne	r1, r2, lsl fp
 724:	00061201 	andeq	r1, r6, r1, lsl #4
 728:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 72c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 730:	0b3b0b3a 	bleq	ec3420 <startup-0x1f13cbe0>
 734:	01111927 	tsteq	r1, r7, lsr #18
 738:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 73c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 740:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 744:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 748:	0b3b0b3a 	bleq	ec3438 <startup-0x1f13cbc8>
 74c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 750:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 754:	03193f01 	tsteq	r9, #1, 30
 758:	3b0b3a0e 	blcc	2cef98 <startup-0x1fd31068>
 75c:	1119270b 	tstne	r9, fp, lsl #14
 760:	40061201 	andmi	r1, r6, r1, lsl #4
 764:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 768:	00001301 	andeq	r1, r0, r1, lsl #6
 76c:	03000516 	movweq	r0, #1302	; 0x516
 770:	3b0b3a0e 	blcc	2cefb0 <startup-0x1fd31050>
 774:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 778:	17000018 	smladne	r0, r8, r0, r0
 77c:	08030005 	stmdaeq	r3, {r0, r2}
 780:	0b3b0b3a 	bleq	ec3470 <startup-0x1f13cb90>
 784:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 788:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 78c:	03193f01 	tsteq	r9, #1, 30
 790:	3b0b3a0e 	blcc	2cefd0 <startup-0x1fd31030>
 794:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 798:	19000019 	stmdbne	r0, {r0, r3, r4}
 79c:	00000018 	andeq	r0, r0, r8, lsl r0
 7a0:	03012e1a 	movweq	r2, #7706	; 0x1e1a
 7a4:	3b0b3a0e 	blcc	2cefe4 <startup-0x1fd3101c>
 7a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 7ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 7b0:	96184006 	ldrls	r4, [r8], -r6
 7b4:	13011942 	movwne	r1, #6466	; 0x1942
 7b8:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 7bc:	3a0e0301 	bcc	3813c8 <startup-0x1fc7ec38>
 7c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 7c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 7c8:	96184006 	ldrls	r4, [r8], -r6
 7cc:	13011942 	movwne	r1, #6466	; 0x1942
 7d0:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
 7d4:	03193f01 	tsteq	r9, #1, 30
 7d8:	3b0b3a0e 	blcc	2cf018 <startup-0x1fd30fe8>
 7dc:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 7e0:	00130119 	andseq	r0, r3, r9, lsl r1
 7e4:	012e1d00 			; <UNDEFINED> instruction: 0x012e1d00
 7e8:	0b3a0e03 	bleq	e83ffc <startup-0x1f17c004>
 7ec:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 7f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 7f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 7f8:	00130119 	andseq	r0, r3, r9, lsl r1
 7fc:	012e1e00 			; <UNDEFINED> instruction: 0x012e1e00
 800:	0b3a0e03 	bleq	e84014 <startup-0x1f17bfec>
 804:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 808:	06120111 			; <UNDEFINED> instruction: 0x06120111
 80c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 810:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ca 	andeq	r0, r0, sl, asr #1
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00ad0002 	adceq	r0, sp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000dc 	ldrdcs	r0, [r0], -ip
  34:	0000056c 	andeq	r0, r0, ip, ror #10
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	051f0002 	ldreq	r0, [pc, #-2]	; 4a <startup-0x1fffffb6>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000648 	andcs	r0, r0, r8, asr #12
  54:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	06400002 	strbeq	r0, [r0], -r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  74:	00000136 	andeq	r0, r0, r6, lsr r1
	...
  80:	00000024 	andeq	r0, r0, r4, lsr #32
  84:	07be0002 	ldreq	r0, [lr, r2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000828 	andcs	r0, r0, r8, lsr #16
  94:	0000022c 	andeq	r0, r0, ip, lsr #4
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	13570002 	cmpne	r7, #2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000a54 	andcs	r0, r0, r4, asr sl
  bc:	000006d4 	ldrdeq	r0, [r0], -r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000083 	andeq	r0, r0, r3, lsl #1
   4:	003c0002 	eorseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
  24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  2c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
  30:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
  34:	006f7264 	rsbeq	r7, pc, r4, ror #4
  38:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  3c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
  40:	00010063 	andeq	r0, r1, r3, rrx
  44:	05000000 	streq	r0, [r0, #-0]
  48:	00001002 	andeq	r1, r0, r2
  4c:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; ffffffd4 <Pedro+0xdfffe268>
  50:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  54:	06010402 	streq	r0, [r1], -r2, lsl #8
  58:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  5c:	3d3d2fa0 	ldccc	15, cr2, [sp, #-640]!	; 0xfffffd80
  60:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  64:	20060104 	andcs	r0, r6, r4, lsl #2
  68:	a03d6706 	eorsge	r6, sp, r6, lsl #14
  6c:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
  70:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  74:	002d0304 	eoreq	r0, sp, r4, lsl #6
  78:	06010402 	streq	r0, [r1], -r2, lsl #8
  7c:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
  80:	04024b4b 	streq	r4, [r2], #-2891	; 0xfffff4b5
  84:	37010100 	strcc	r0, [r1, -r0, lsl #2]
  88:	02000001 	andeq	r0, r0, #1
  8c:	00004600 	andeq	r4, r0, r0, lsl #12
  90:	fb010200 	blx	4089a <startup-0x1ffbf766>
  94:	01000d0e 	tsteq	r0, lr, lsl #26
  98:	00010101 	andeq	r0, r1, r1, lsl #2
  9c:	00010000 	andeq	r0, r1, r0
  a0:	3a5a0100 	bcc	16804a8 <startup-0x1e97fb58>
  a4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  a8:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
  ac:	2f65646f 	svccs	0x0065646f
  b0:	2f706f6d 	svccs	0x00706f6d
  b4:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
  b8:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
  bc:	00006f72 	andeq	r6, r0, r2, ror pc
  c0:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  c4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
  c8:	70000001 	andvc	r0, r0, r1
  cc:	6f726465 	svcvs	0x00726465
  d0:	0100682e 	tsteq	r0, lr, lsr #16
  d4:	00000000 	andeq	r0, r0, r0
  d8:	00dc0205 	sbcseq	r0, ip, r5, lsl #4
  dc:	2c032000 	stccs	0, cr2, [r3], {-0}
  e0:	30303001 	eorscc	r3, r0, r1
  e4:	689f2f4b 	ldmvs	pc, {r0, r1, r3, r6, r8, r9, sl, fp, sp}	; <UNPREDICTABLE>
  e8:	5bad2f4b 	blpl	feb4be1c <Pedro+0xdeb4a0b0>
  ec:	2f694c2f 	svccs	0x00694c2f
  f0:	01040200 	mrseq	r0, R12_usr
  f4:	4b064a06 	blmi	192914 <startup-0x1fe6d6ec>
  f8:	38243b4b 	stmdacc	r4!, {r0, r1, r3, r6, r8, r9, fp, ip, sp}
  fc:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
 100:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 104:	24494b4c 	strbcs	r4, [r9], #-2892	; 0xfffff4b4
 108:	20090338 	andcs	r0, r9, r8, lsr r3
 10c:	4b5a4b3d 	blmi	1692e08 <startup-0x1e96d1f8>
 110:	0b034b5c 	bleq	d2e88 <startup-0x1ff2d178>
 114:	2078033c 	rsbscs	r0, r8, ip, lsr r3
 118:	3d3d4b3d 	fldmdbxcc	sp!, {d4-d33}	;@ Deprecated
 11c:	76308440 	ldrtvc	r8, [r0], -r0, asr #8
 120:	2f5a7675 	svccs	0x005a7675
 124:	3d4c694b 	vstrcc.16	s13, [ip, #-150]	; 0xffffff6a	; <UNPREDICTABLE>
 128:	020059ad 	andeq	r5, r0, #2834432	; 0x2b4000
 12c:	74060104 	strvc	r0, [r6], #-260	; 0xfffffefc
 130:	9108c906 	tstls	r8, r6, lsl #18
 134:	d75959ad 	ldrble	r5, [r9, -sp, lsr #19]
 138:	e5778359 	ldrb	r8, [r7, #-857]!	; 0xfffffca7
 13c:	919f6759 	orrsls	r6, pc, r9, asr r7	; <UNPREDICTABLE>
 140:	ad8483e5 	stcge	3, cr8, [r4, #916]	; 0x394
 144:	02009208 	andeq	r9, r0, #8, 4	; 0x80000000
 148:	6c030204 	sfmvs	f0, 4, [r3], {4}
 14c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 150:	00660601 	rsbeq	r0, r6, r1, lsl #12
 154:	06020402 	streq	r0, [r2], -r2, lsl #8
 158:	0402007e 	streq	r0, [r2], #-126	; 0xffffff82
 15c:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 160:	92c81d03 	sbcls	r1, r8, #3, 26	; 0xc0
 164:	02002f40 	andeq	r2, r0, #64, 30	; 0x100
 168:	003d0304 	eorseq	r0, sp, r4, lsl #6
 16c:	08030402 	stmdaeq	r3, {r1, sl}
 170:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 174:	00130803 	andseq	r0, r3, r3, lsl #16
 178:	75030402 	strvc	r0, [r3, #-1026]	; 0xfffffbfe
 17c:	03040200 	movweq	r0, #16896	; 0x4200
 180:	02005408 	andeq	r5, r0, #8, 8	; 0x8000000
 184:	3c060104 	stfccs	f0, [r6], {4}
 188:	4b594206 	blmi	16509a8 <startup-0x1e9af658>
 18c:	4ba02230 	blmi	fe808a54 <Pedro+0xde806ce8>
 190:	02002f3e 	andeq	r2, r0, #62, 30	; 0xf8
 194:	00590304 	subseq	r0, r9, r4, lsl #6
 198:	08030402 	stmdaeq	r3, {r1, sl}
 19c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1a0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1a4:	00830304 	addeq	r0, r3, r4, lsl #6
 1a8:	b6030402 	strlt	r0, [r3], -r2, lsl #8
 1ac:	01040200 	mrseq	r0, R12_usr
 1b0:	7a065806 	bvc	1961d0 <startup-0x1fe69e30>
 1b4:	6821764b 	stmdavs	r1!, {r0, r1, r3, r6, r9, sl, ip, sp, lr}
 1b8:	2f672f2f 	svccs	0x00672f2f
 1bc:	0006022f 	andeq	r0, r6, pc, lsr #4
 1c0:	012d0101 			; <UNDEFINED> instruction: 0x012d0101
 1c4:	00020000 	andeq	r0, r2, r0
 1c8:	000000e9 	andeq	r0, r0, r9, ror #1
 1cc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1d0:	0101000d 	tsteq	r1, sp
 1d4:	00000101 	andeq	r0, r0, r1, lsl #2
 1d8:	00000100 	andeq	r0, r0, r0, lsl #2
 1dc:	2f3a5a01 	svccs	0x003a5a01
 1e0:	2f504f4d 	svccs	0x00504f4d
 1e4:	6f632d63 	svcvs	0x00632d63
 1e8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 60 <startup-0x1fffffa0>
 1ec:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 1f0:	72657075 	rsbvc	r7, r5, #117	; 0x75
 1f4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 1f8:	3a63006f 	bcc	18c03bc <startup-0x1e73fc44>
 1fc:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 200:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 204:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 208:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 20c:	6f6f745c 	svcvs	0x006f745c
 210:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 214:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 218:	615c6d72 	cmpvs	ip, r2, ror sp
 21c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 220:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 224:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 228:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 22c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 230:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 234:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 238:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 23c:	61657363 	cmnvs	r5, r3, ror #6
 240:	635c7070 	cmpvs	ip, #112	; 0x70
 244:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 248:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 24c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 84 <startup-0x1fffff7c>
 250:	63675c73 	cmnvs	r7, #29440	; 0x7300
 254:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 258:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 25c:	6f6e2d6d 	svcvs	0x006e2d6d
 260:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 264:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 268:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 26c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 270:	00737973 	rsbseq	r7, r3, r3, ror r9
 274:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
 278:	4e6d6f64 	cdpmi	15, 6, cr6, cr13, cr4, {3}
 27c:	632e6d75 			; <UNDEFINED> instruction: 0x632e6d75
 280:	00000100 	andeq	r0, r0, r0, lsl #2
 284:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 288:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 28c:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 290:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 294:	00000200 	andeq	r0, r0, r0, lsl #4
 298:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 29c:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 2a0:	00030068 	andeq	r0, r3, r8, rrx
 2a4:	6e617200 	cdpvs	2, 6, cr7, cr1, cr0, {0}
 2a8:	4e6d6f64 	cdpmi	15, 6, cr6, cr13, cr4, {3}
 2ac:	682e6d75 	stmdavs	lr!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}
 2b0:	00000100 	andeq	r0, r0, r0, lsl #2
 2b4:	02050000 	andeq	r0, r5, #0
 2b8:	20000648 	andcs	r0, r0, r8, asr #12
 2bc:	003d5916 	eorseq	r5, sp, r6, lsl r9
 2c0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 2c4:	03040200 	movweq	r0, #16896	; 0x4200
 2c8:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 2cc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2d0:	084b4c3f 	stmdaeq	fp, {r0, r1, r2, r3, r4, r5, sl, fp, lr}^
 2d4:	02003d75 	andeq	r3, r0, #7488	; 0x1d40
 2d8:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2dc:	83030402 	movwhi	r0, #13314	; 0x3402
 2e0:	03040200 	movweq	r0, #16896	; 0x4200
 2e4:	04020048 	streq	r0, [r2], #-72	; 0xffffffb8
 2e8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2ec:	06022140 	streq	r2, [r2], -r0, asr #2
 2f0:	8a010100 	bhi	406f8 <startup-0x1ffbf908>
 2f4:	02000000 	andeq	r0, r0, #0
 2f8:	00004800 	andeq	r4, r0, r0, lsl #16
 2fc:	fb010200 	blx	40b06 <startup-0x1ffbf4fa>
 300:	01000d0e 	tsteq	r0, lr, lsl #26
 304:	00010101 	andeq	r0, r1, r1, lsl #2
 308:	00010000 	andeq	r0, r1, r0
 30c:	3a5a0100 	bcc	1680714 <startup-0x1e97f8ec>
 310:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 314:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 318:	2f65646f 	svccs	0x0065646f
 31c:	2f706f6d 	svccs	0x00706f6d
 320:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 324:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 328:	00006f72 	andeq	r6, r0, r2, ror pc
 32c:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
 330:	73636e75 	cmnvc	r3, #1872	; 0x750
 334:	0100632e 	tsteq	r0, lr, lsr #6
 338:	70670000 	rsbvc	r0, r7, r0
 33c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 340:	00000100 	andeq	r0, r0, r0, lsl #2
 344:	02050000 	andeq	r0, r5, #0
 348:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 34c:	3dbc4b15 			; <UNDEFINED> instruction: 0x3dbc4b15
 350:	3d223d22 	stccc	13, cr3, [r2, #-136]!	; 0xffffff78
 354:	3e223d22 	cdpcc	13, 2, cr3, cr2, cr2, {1}
 358:	2f752f76 	svccs	0x00752f76
 35c:	2f752f75 	svccs	0x00752f75
 360:	5b212f75 	blpl	84c13c <startup-0x1f7b3ec4>
 364:	593d3d2f 	ldmdbpl	sp!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
 368:	213d303d 	teqcs	sp, sp, lsr r0
 36c:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 370:	223d303d 	eorscs	r3, sp, #61	; 0x3d
 374:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 378:	223d303d 	eorscs	r3, sp, #61	; 0x3d
 37c:	01000302 	tsteq	r0, r2, lsl #6
 380:	0001f601 	andeq	pc, r1, r1, lsl #12
 384:	51000200 	mrspl	r0, R8_usr
 388:	02000001 	andeq	r0, r0, #1
 38c:	0d0efb01 	vstreq	d15, [lr, #-4]
 390:	01010100 	mrseq	r0, (UNDEF: 17)
 394:	00000001 	andeq	r0, r0, r1
 398:	01000001 	tsteq	r0, r1
 39c:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 3a0:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 3a4:	646f632d 	strbtvs	r6, [pc], #-813	; 3ac <startup-0x1ffffc54>
 3a8:	6f6d2f65 	svcvs	0x006d2f65
 3ac:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 3b0:	50726570 	rsbspl	r6, r2, r0, ror r5
 3b4:	6f726465 	svcvs	0x00726465
 3b8:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 3bc:	61657363 	cmnvs	r5, r3, ror #6
 3c0:	635c7070 	cmpvs	ip, #112	; 0x70
 3c4:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 3c8:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 3cc:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 204 <startup-0x1ffffdfc>
 3d0:	63675c73 	cmnvs	r7, #29440	; 0x7300
 3d4:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 3d8:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 3dc:	6f6e2d6d 	svcvs	0x006e2d6d
 3e0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 3e4:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 3e8:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 3ec:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 3f0:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 3f4:	00656e69 	rsbeq	r6, r5, r9, ror #28
 3f8:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 3fc:	70616573 	rsbvc	r6, r1, r3, ror r5
 400:	6f635c70 	svcvs	0x00635c70
 404:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 408:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 40c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 410:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 414:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 418:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 41c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 420:	61652d65 	cmnvs	r5, r5, ror #26
 424:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 428:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 42c:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 430:	63007379 	movwvs	r7, #889	; 0x379
 434:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 438:	70706165 	rsbsvc	r6, r0, r5, ror #2
 43c:	646f635c 	strbtvs	r6, [pc], #-860	; 444 <startup-0x1ffffbbc>
 440:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 444:	6f745c65 	svcvs	0x00745c65
 448:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 44c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 450:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 454:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 458:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 45c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 460:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 464:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 468:	2e375c69 	cdpcs	12, 3, cr5, cr7, cr9, {3}
 46c:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 470:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 474:	00656475 	rsbeq	r6, r5, r5, ror r4
 478:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 47c:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 480:	5f000001 	svcpl	0x00000001
 484:	61666564 	cmnvs	r6, r4, ror #10
 488:	5f746c75 	svcpl	0x00746c75
 48c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 490:	00682e73 	rsbeq	r2, r8, r3, ror lr
 494:	5f000002 	svcpl	0x00000002
 498:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 49c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 4a0:	00000300 	andeq	r0, r0, r0, lsl #6
 4a4:	6f697067 	svcvs	0x00697067
 4a8:	0100682e 	tsteq	r0, lr, lsr #16
 4ac:	6f6c0000 	svcvs	0x006c0000
 4b0:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 4b4:	00000300 	andeq	r0, r0, r0, lsl #6
 4b8:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 4bc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 4c0:	00000300 	andeq	r0, r0, r0, lsl #6
 4c4:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 4c8:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 4cc:	00000400 	andeq	r0, r0, r0, lsl #8
 4d0:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 4d4:	00682e74 	rsbeq	r2, r8, r4, ror lr
 4d8:	00000003 	andeq	r0, r0, r3
 4dc:	00020500 	andeq	r0, r2, r0, lsl #10
 4e0:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 4e4:	5e13012d 	mufplsp	f0, f3, #5.0
 4e8:	01000302 	tsteq	r0, r2, lsl #6
 4ec:	02050001 	andeq	r0, r5, #1
 4f0:	20000828 	andcs	r0, r0, r8, lsr #16
 4f4:	30013e03 	andcc	r3, r1, r3, lsl #28
 4f8:	76673e3d 			; <UNDEFINED> instruction: 0x76673e3d
 4fc:	33e86867 	mvncc	r6, #6750208	; 0x670000
 500:	763d3130 			; <UNDEFINED> instruction: 0x763d3130
 504:	0c03302f 	stceq	0, cr3, [r3], {47}	; 0x2f
 508:	2e0a0382 	cdpcs	3, 0, cr0, cr10, cr2, {4}
 50c:	35317531 	ldrcc	r7, [r1, #-1329]!	; 0xfffffacf
 510:	03587203 	cmpeq	r8, #805306368	; 0x30000000
 514:	4027200f 	eormi	r2, r7, pc
 518:	2f3e3d2f 	svccs	0x003e3d2f
 51c:	0359403d 	cmpeq	r9, #61	; 0x3d
 520:	003d9014 	eorseq	r9, sp, r4, lsl r0
 524:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 528:	03040200 	movweq	r0, #16896	; 0x4200
 52c:	040200ff 	streq	r0, [r2], #-255	; 0xffffff01
 530:	003c0601 	eorseq	r0, ip, r1, lsl #12
 534:	06020402 	streq	r0, [r2], -r2, lsl #8
 538:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
 53c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 540:	03766a41 	cmneq	r6, #266240	; 0x41000
 544:	7803820c 	stmdavc	r3, {r2, r3, r9, pc}
 548:	59225920 	stmdbpl	r2!, {r5, r8, fp, ip, lr}
 54c:	20790359 	rsbscs	r0, r9, r9, asr r3
 550:	4d200a03 	vstmdbmi	r0!, {s0-s2}
 554:	0093ae4c 	addseq	sl, r3, ip, asr #28
 558:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 55c:	03040200 	movweq	r0, #16896	; 0x4200
 560:	040200e3 	streq	r0, [r2], #-227	; 0xffffff1d
 564:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 568:	820c0341 	andhi	r0, ip, #67108865	; 0x4000001
 56c:	3c190330 	ldccc	3, cr0, [r9], {48}	; 0x30
 570:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 574:	03023001 	movweq	r3, #8193	; 0x2001
 578:	70010100 	andvc	r0, r1, r0, lsl #2
 57c:	02000002 	andeq	r0, r0, #2
 580:	0000e300 	andeq	lr, r0, r0, lsl #6
 584:	fb010200 	blx	40d8e <startup-0x1ffbf272>
 588:	01000d0e 	tsteq	r0, lr, lsl #26
 58c:	00010101 	andeq	r0, r1, r1, lsl #2
 590:	00010000 	andeq	r0, r1, r0
 594:	3a5a0100 	bcc	168099c <startup-0x1e97f664>
 598:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 59c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 5a0:	2f65646f 	svccs	0x0065646f
 5a4:	2f706f6d 	svccs	0x00706f6d
 5a8:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 5ac:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 5b0:	63006f72 	movwvs	r6, #3954	; 0xf72
 5b4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 5b8:	70706165 	rsbsvc	r6, r0, r5, ror #2
 5bc:	646f635c 	strbtvs	r6, [pc], #-860	; 5c4 <startup-0x1ffffa3c>
 5c0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 5c4:	6f745c65 	svcvs	0x00745c65
 5c8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 5cc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 5d0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 5d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 5d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 5dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 5e0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 5e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 5e8:	616d5c65 	cmnvs	sp, r5, ror #24
 5ec:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 5f0:	3a630065 	bcc	18c078c <startup-0x1e73f874>
 5f4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 5f8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 5fc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 600:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 604:	6f6f745c 	svcvs	0x006f745c
 608:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 60c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 610:	615c6d72 	cmpvs	ip, r2, ror sp
 614:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 618:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 61c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 620:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 624:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 628:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 62c:	634c0000 	movtvs	r0, #49152	; 0xc000
 630:	63734164 	cmnvs	r3, #100, 2
 634:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 638:	00000100 	andeq	r0, r0, r0, lsl #2
 63c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 640:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 644:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 648:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 64c:	00000200 	andeq	r0, r0, r0, lsl #4
 650:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 654:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 658:	00030068 	andeq	r0, r3, r8, rrx
 65c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 660:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 664:	00000001 	andeq	r0, r0, r1
 668:	54020500 	strpl	r0, [r2], #-1280	; 0xfffffb00
 66c:	1a20000a 	bne	80069c <startup-0x1f7ff964>
 670:	67755968 	ldrbvs	r5, [r5, -r8, ror #18]!
 674:	5968684b 	stmdbpl	r8!, {r0, r1, r3, r6, fp, sp, lr}^
 678:	684b75bb 	stmdavs	fp, {r0, r1, r3, r4, r5, r7, r8, sl, ip, sp, lr}^
 67c:	74100367 	ldrvc	r0, [r0], #-871	; 0xfffffc99
 680:	03207003 			; <UNDEFINED> instruction: 0x03207003
 684:	72034a10 	andvc	r4, r3, #16, 20	; 0x10000
 688:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
 68c:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 690:	4c223d22 	stcmi	13, cr3, [r2], #-136	; 0xffffff78
 694:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 698:	4b3d3d3d 	blmi	f4fb94 <startup-0x1f0b046c>
 69c:	4b4b4b4b 	blmi	12d33d0 <startup-0x1ed2cc30>
 6a0:	3e3e3d4b 	cdpcc	13, 3, cr3, cr14, cr11, {2}
 6a4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 6a8:	752f3d30 	strvc	r3, [pc, #-3376]!	; fffff980 <Pedro+0xdfffdc14>
 6ac:	25452f3d 	strbcs	r2, [r5, #-3901]	; 0xfffff0c3
 6b0:	68a03d22 	stmiavs	r0!, {r1, r5, r8, sl, fp, ip, sp}
 6b4:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 6b8:	592f3d2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 6bc:	3d593e3d 	ldclcc	14, cr3, [r9, #-244]	; 0xffffff0c
 6c0:	303d5930 	eorscc	r5, sp, r0, lsr r9
 6c4:	5967ae3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, r9, sl, fp, sp, pc}^
 6c8:	4b914c67 	blmi	fe45386c <Pedro+0xde451b00>
 6cc:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 6d0:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 6d4:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 6d8:	3d91753e 	cfldr32cc	mvfx7, [r1, #248]	; 0xf8
 6dc:	4b833d59 	blmi	fe0cfc48 <Pedro+0xde0cdedc>
 6e0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 6e4:	3d4b833d 	stclcc	3, cr8, [fp, #-244]	; 0xffffff0c
 6e8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 6ec:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 6f0:	00650304 	rsbeq	r0, r5, r4, lsl #6
 6f4:	06010402 	streq	r0, [r1], -r2, lsl #8
 6f8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 6fc:	003b0602 	eorseq	r0, fp, r2, lsl #12
 700:	06010402 	streq	r0, [r1], -r2, lsl #8
 704:	4d41063c 	stclmi	6, cr0, [r1, #-240]	; 0xffffff10
 708:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 70c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 710:	81030402 	tsthi	r3, r2, lsl #8
 714:	01040200 	mrseq	r0, R12_usr
 718:	02003c06 	andeq	r3, r0, #1536	; 0x600
 71c:	3b060204 	blcc	180f34 <startup-0x1fe7f0cc>
 720:	01040200 	mrseq	r0, R12_usr
 724:	40063c06 	andmi	r3, r6, r6, lsl #24
 728:	14086876 	strne	r6, [r8], #-2166	; 0xfffff78a
 72c:	1e87083d 	mcrne	8, 4, r0, cr7, cr13, {1}
 730:	7584ca08 	strvc	ip, [r4, #2568]	; 0xa08
 734:	9f756791 	svcls	0x00756791
 738:	592f3e76 	stmdbpl	pc!, {r1, r2, r4, r5, r6, r9, sl, fp, ip, sp}	; <UNPREDICTABLE>
 73c:	01040200 	mrseq	r0, R12_usr
 740:	02005806 	andeq	r5, r0, #393216	; 0x60000
 744:	002e0204 	eoreq	r0, lr, r4, lsl #4
 748:	20040402 	andcs	r0, r4, r2, lsl #8
 74c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 750:	c9592f06 	ldmdbgt	r9, {r1, r2, r8, r9, sl, fp, sp}^
 754:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 758:	02005903 	andeq	r5, r0, #49152	; 0xc000
 75c:	57080304 	strpl	r0, [r8, -r4, lsl #6]
 760:	01040200 	mrseq	r0, R12_usr
 764:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 768:	55060204 	strpl	r0, [r6, #-516]	; 0xfffffdfc
 76c:	01040200 	mrseq	r0, R12_usr
 770:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 774:	56060204 	strpl	r0, [r6], -r4, lsl #4
 778:	01040200 	mrseq	r0, R12_usr
 77c:	03066606 	movweq	r6, #26118	; 0x6606
 780:	2303580a 	movwcs	r5, #14346	; 0x380a
 784:	003d3d66 	eorseq	r3, sp, r6, ror #26
 788:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 78c:	03040200 	movweq	r0, #16896	; 0x4200
 790:	040200f1 	streq	r0, [r2], #-241	; 0xffffff0f
 794:	003c0601 	eorseq	r0, ip, r1, lsl #12
 798:	06020402 	streq	r0, [r2], -r2, lsl #8
 79c:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
 7a0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 7a4:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
 7a8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 7ac:	00570304 	subseq	r0, r7, r4, lsl #6
 7b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 7b4:	753f063c 	ldrvc	r0, [pc, #-1596]!	; 180 <startup-0x1ffffe80>
 7b8:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 7bc:	003d0304 	eorseq	r0, sp, r4, lsl #6
 7c0:	f1030402 			; <UNDEFINED> instruction: 0xf1030402
 7c4:	01040200 	mrseq	r0, R12_usr
 7c8:	02003c06 	andeq	r3, r0, #1536	; 0x600
 7cc:	3b060204 	blcc	180fe4 <startup-0x1fe7f01c>
 7d0:	01040200 	mrseq	r0, R12_usr
 7d4:	41063c06 	tstmi	r6, r6, lsl #24
 7d8:	03040200 	movweq	r0, #16896	; 0x4200
 7dc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 7e0:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
 7e4:	3c060104 	stfccs	f0, [r6], {4}
 7e8:	06023f06 	streq	r3, [r2], -r6, lsl #30
 7ec:	Address 0x000007ec is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4d5c3a5a 	vldrmi	s7, [ip, #-360]	; 0xfffffe98
   4:	635c504f 	cmpvs	ip, #79	; 0x4f
   8:	646f632d 	strbtvs	r6, [pc], #-813	; 10 <startup-0x1ffffff0>
   c:	6f6d5c65 	svcvs	0x006d5c65
  10:	75535c70 	ldrbvc	r5, [r3, #-3184]	; 0xfffff390
  14:	50726570 	rsbspl	r6, r2, r0, ror r5
  18:	6f726465 	svcvs	0x00726465
  1c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  20:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff6c7 <Pedro+0xdfffd95b>
  24:	736e3030 	cmnvc	lr, #48	; 0x30
  28:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  2c:	696d7961 	stmdbvs	sp!, {r0, r5, r6, r8, fp, ip, sp, lr}^
  30:	736f7263 	cmnvc	pc, #805306374	; 0x30000006
  34:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  38:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffd5a2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  80:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  84:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  94:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  98:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  9c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  a4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  ac:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	2f3a5a00 	svccs	0x003a5a00
  d0:	2f504f4d 	svccs	0x00504f4d
  d4:	6f632d63 	svcvs	0x00632d63
  d8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffff50 <Pedro+0xdfffe1e4>
  dc:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
  e0:	72657075 	rsbvc	r7, r5, #117	; 0x75
  e4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  e8:	65642f6f 	strbvs	r2, [r4, #-3951]!	; 0xfffff091
  ec:	7379616c 	cmnvc	r9, #108, 2
  f0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
  f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  f8:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  fc:	64007369 	strvs	r7, [r0], #-873	; 0xfffffc97
 100:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 104:	3035325f 	eorscc	r3, r5, pc, asr r2
 108:	7000736e 	andvc	r7, r0, lr, ror #6
 10c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 110:	63656863 	cmnvs	r5, #6488064	; 0x630000
 114:	79654b6b 	stmdbvc	r5!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}^
 118:	65670073 	strbvs	r0, [r7, #-115]!	; 0xffffff8d
 11c:	746f4274 	strbtvc	r4, [pc], #-628	; 124 <startup-0x1ffffedc>
 120:	526d6f74 	rsbpl	r6, sp, #116, 30	; 0x1d0
 124:	7000776f 	andvc	r7, r0, pc, ror #14
 128:	6f726465 	svcvs	0x00726465
 12c:	6d756a5f 	vldmdbvs	r5!, {s13-s107}
 130:	68730070 	ldmdavs	r3!, {r4, r5, r6}^
 134:	2074726f 	rsbscs	r7, r4, pc, ror #4
 138:	00746e69 	rsbseq	r6, r4, r9, ror #28
 13c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 140:	69007463 	stmdbvs	r0, {r0, r1, r5, r6, sl, ip, sp, lr}
 144:	6d754a73 	vldmdbvs	r5!, {s9-s123}
 148:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 14c:	2f3a5a00 	svccs	0x003a5a00
 150:	2f504f4d 	svccs	0x00504f4d
 154:	6f632d63 	svcvs	0x00632d63
 158:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffffd0 <Pedro+0xdfffe264>
 15c:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 160:	72657075 	rsbvc	r7, r5, #117	; 0x75
 164:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 168:	65502f6f 	ldrbvs	r2, [r0, #-3951]	; 0xfffff091
 16c:	2e6f7264 	cdpcs	2, 6, cr7, cr15, cr4, {3}
 170:	6f620063 	svcvs	0x00620063
 174:	6d6f7474 	cfstrdvs	mvd7, [pc, #-464]!	; ffffffac <Pedro+0xdfffe240>
 178:	00776f52 	rsbseq	r6, r7, r2, asr pc
 17c:	78636361 	stmdavc	r3!, {r0, r5, r6, r8, r9, sp, lr}^
 180:	63636100 	cmnvs	r3, #0, 2
 184:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
 188:	67616c6c 	strbvs	r6, [r1, -ip, ror #24]!
 18c:	73690067 	cmnvc	r9, #103	; 0x67
 190:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 194:	0079654b 	rsbseq	r6, r9, fp, asr #10
 198:	56746567 	ldrbtpl	r6, [r4], -r7, ror #10
 19c:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1a0:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1a4:	6f6c0068 	svcvs	0x006c0068
 1a8:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1ac:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1b4:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
 1b8:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 1bc:	76007466 	strvc	r7, [r0], -r6, ror #8
 1c0:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1c4:	796c6576 	stmdbvc	ip!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 1c8:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 1cc:	6850796c 	ldmdavs	r0, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
 1d0:	63697379 	cmnvs	r9, #-469762047	; 0xe4000001
 1d4:	79620073 	stmdbvc	r2!, {r0, r1, r4, r5, r6}^
 1d8:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
 1dc:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1e0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1e4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1e8:	6b617400 	blvs	185d1f0 <startup-0x1e7a2e10>
 1ec:	6f6c0065 	svcvs	0x006c0065
 1f0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1f4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1f8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1fc:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 200:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 204:	756f7400 	strbvc	r7, [pc, #-1024]!	; fffffe0c <Pedro+0xdfffe0a0>
 208:	73656863 	cmnvc	r5, #6488064	; 0x630000
 20c:	70706550 	rsbsvc	r6, r0, r0, asr r5
 210:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 214:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 218:	70730074 	rsbsvc	r0, r3, r4, ror r0
 21c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 220:	6f687300 	svcvs	0x00687300
 224:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 228:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 22c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 230:	00746e69 	rsbseq	r6, r4, r9, ror #28
 234:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
 238:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 23c:	624f7400 	subvs	r7, pc, #0, 8
 240:	6570006a 	ldrbvs	r0, [r0, #-106]!	; 0xffffff96
 244:	72657070 	rsbvc	r7, r5, #112	; 0x70
 248:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 24c:	61006570 	tstvs	r0, r0, ror r5
 250:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 254:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
 258:	5f6f7264 	svcpl	0x006f7264
 25c:	6c697473 	cfstrdvs	mvd7, [r9], #-460	; 0xfffffe34
 260:	7264006c 	rsbvc	r0, r4, #108	; 0x6c
 264:	69007761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, ip, sp, lr}
 268:	4b705573 	blmi	1c1583c <startup-0x1e3ea7c4>
 26c:	6d007965 	vstrvs.16	s14, [r0, #-202]	; 0xffffff36	; <UNPREDICTABLE>
 270:	006b7361 	rsbeq	r7, fp, r1, ror #6
 274:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
 278:	61747369 	cmnvs	r4, r9, ror #6
 27c:	0065636e 	rsbeq	r6, r5, lr, ror #6
 280:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 284:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 288:	424f5000 	submi	r5, pc, #0
 28c:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 290:	52736900 	rsbspl	r6, r3, #0, 18
 294:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 298:	0079654b 	rsbseq	r6, r9, fp, asr #10
 29c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 2a0:	64657000 	strbtvs	r7, [r5], #-0
 2a4:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2a8:	316b6c61 	cmncc	fp, r1, ror #24
 2ac:	64657000 	strbtvs	r7, [r5], #-0
 2b0:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2b4:	326b6c61 	rsbcc	r6, fp, #24832	; 0x6100
 2b8:	65657300 	strbvs	r7, [r5, #-768]!	; 0xfffffd00
 2bc:	676e5264 	strbvs	r5, [lr, -r4, ror #4]!
 2c0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff3c8 <Pedro+0xdfffd65c>
 2c4:	33746e69 	cmncc	r4, #1680	; 0x690
 2c8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 2cc:	77676e72 			; <UNDEFINED> instruction: 0x77676e72
 2d0:	5f64726f 	svcpl	0x0064726f
 2d4:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 2d8:	6e527478 	mrcvs	4, 2, r7, cr2, cr8, {3}
 2dc:	3a5a0064 	bcc	1680474 <startup-0x1e97fb8c>
 2e0:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 2e4:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 2e8:	2f65646f 	svccs	0x0065646f
 2ec:	2f706f6d 	svccs	0x00706f6d
 2f0:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 2f4:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 2f8:	722f6f72 	eorvc	r6, pc, #456	; 0x1c8
 2fc:	6f646e61 	svcvs	0x00646e61
 300:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
 304:	5a00632e 	bpl	18fc4 <startup-0x1ffe703c>
 308:	4f4d2f3a 	svcmi	0x004d2f3a
 30c:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 310:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 314:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 318:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 31c:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 320:	2f6f7264 	svccs	0x006f7264
 324:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
 328:	73636e75 	cmnvc	r3, #1872	; 0x750
 32c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 330:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 334:	72646f00 	rsbvc	r6, r4, #0, 30
 338:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 33c:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 340:	00726570 	rsbseq	r6, r2, r0, ror r5
 344:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 348:	646f0072 	strbtvs	r0, [pc], #-114	; 350 <startup-0x1ffffcb0>
 34c:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 350:	72646900 	rsbvc	r6, r4, #0, 18
 354:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 358:	4764626b 	strbmi	r6, [r4, -fp, ror #4]!
 35c:	6f437465 	svcvs	0x00437465
 360:	675f006c 	ldrbvs	r0, [pc, -ip, rrx]
 364:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 368:	4164626b 	cmnmi	r4, fp, ror #4
 36c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 370:	00657461 	rsbeq	r7, r5, r1, ror #8
 374:	4f495047 	svcmi	0x00495047
 378:	72646900 	rsbvc	r6, r4, #0, 18
 37c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 380:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 384:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 388:	73645f00 	cmnvc	r4, #0, 30
 38c:	61685f6f 	cmnvs	r8, pc, ror #30
 390:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 394:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 398:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
 39c:	5064616f 	rsbpl	r6, r4, pc, ror #2
 3a0:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 3a4:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
 3a8:	5f007069 	svcpl	0x00007069
 3ac:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 3b0:	5f003834 	svcpl	0x00003834
 3b4:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
 3b8:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
 3bc:	79740079 	ldmdbvc	r4!, {r0, r3, r4, r5, r6}^
 3c0:	5f006570 	svcpl	0x00006570
 3c4:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
 3c8:	5f626d6f 	svcpl	0x00626d6f
 3cc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 3d0:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
 3d4:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
 3d8:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 3dc:	6174735f 	cmnvs	r4, pc, asr r3
 3e0:	5f006574 	svcpl	0x00006574
 3e4:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
 3e8:	00657a69 	rsbeq	r7, r5, r9, ror #20
 3ec:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 3f0:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 3f4:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 3f8:	00745f65 	rsbseq	r5, r4, r5, ror #30
 3fc:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 400:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 404:	6174735f 	cmnvs	r4, pc, asr r3
 408:	5f006574 	svcpl	0x00006574
 40c:	5f6d745f 	svcpl	0x006d745f
 410:	00636573 	rsbeq	r6, r3, r3, ror r5
 414:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 418:	62755f00 	rsbsvs	r5, r5, #0, 30
 41c:	5f006675 	svcpl	0x00006675
 420:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 424:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 42c <startup-0x1ffffbd4>
 428:	6f685f6d 	svcvs	0x00685f6d
 42c:	5f007275 	svcpl	0x00007275
 430:	0066735f 	rsbeq	r7, r6, pc, asr r3
 434:	6f6f635f 	svcvs	0x006f635f
 438:	0065696b 	rsbeq	r6, r5, fp, ror #18
 43c:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 440:	0065756c 	rsbeq	r7, r5, ip, ror #10
 444:	616c665f 	cmnvs	ip, pc, asr r6
 448:	5f007367 	svcpl	0x00007367
 44c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 450:	5f006178 	svcpl	0x00006178
 454:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 458:	625f006e 	subsvs	r0, pc, #110	; 0x6e
 45c:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 460:	5f00657a 	svcpl	0x0000657a
 464:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
 468:	5f006675 	svcpl	0x00006675
 46c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 470:	5f007465 	svcpl	0x00007465
 474:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
 478:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 47c:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 480:	00657461 	rsbeq	r7, r5, r1, ror #8
 484:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 488:	5f6e656c 	svcpl	0x006e656c
 48c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 490:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 494:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 498:	665f0073 			; <UNDEFINED> instruction: 0x665f0073
 49c:	5f00736e 	svcpl	0x0000736e
 4a0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 4a4:	6c665f00 	stclvs	15, cr5, [r6], #-0
 4a8:	5f6b636f 	svcpl	0x006b636f
 4ac:	735f0074 	cmpvc	pc, #116	; 0x74
 4b0:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
 4b4:	425f0072 	subsmi	r0, pc, #114	; 0x72
 4b8:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
 4bc:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 4c0:	616d6d61 	cmnvs	sp, r1, ror #26
 4c4:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 4c8:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
 4cc:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 4d0:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 4d4:	5f006b5f 	svcpl	0x00006b5f
 4d8:	006d745f 	rsbeq	r7, sp, pc, asr r4
 4dc:	63775f5f 	cmnvs	r7, #380	; 0x17c
 4e0:	5f006268 	svcpl	0x00006268
 4e4:	6f647473 	svcvs	0x00647473
 4e8:	5f007475 	svcpl	0x00007475
 4ec:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
 4f0:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
 4f4:	4c64616f 	stfmie	f6, [r4], #-444	; 0xfffffe44
 4f8:	5f006c76 	svcpl	0x00006c76
 4fc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 500:	67617000 	strbvs	r7, [r1, -r0]!
 504:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 508:	73626f69 	cmnvc	r2, #420	; 0x1a4
 50c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 510:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 514:	735f0030 	cmpvc	pc, #48	; 0x30
 518:	616e6769 	cmnvs	lr, r9, ror #14
 51c:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 520:	615f0066 	cmpvs	pc, r6, rrx
 524:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 528:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 52c:	6f006675 	svcvs	0x00006675
 530:	6e69576e 	cdpvs	7, 6, cr5, cr9, cr14, {3}
 534:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 538:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 53c:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 540:	5f006863 	svcpl	0x00006863
 544:	4b434f4c 	blmi	10d427c <startup-0x1ef2bd84>
 548:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
 54c:	5f746e69 	svcpl	0x00746e69
 550:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 554:	7367616c 	cmnvc	r7, #108, 2
 558:	5f5f0032 	svcpl	0x005f0032
 55c:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 560:	00726165 	rsbseq	r6, r2, r5, ror #2
 564:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 568:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 56c:	646f632d 	strbtvs	r6, [pc], #-813	; 574 <startup-0x1ffffa8c>
 570:	6f6d2f65 	svcvs	0x006d2f65
 574:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 578:	50726570 	rsbspl	r6, r2, r0, ror r5
 57c:	6f726465 	svcvs	0x00726465
 580:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
 584:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 588:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 58c:	5f006674 	svcpl	0x00006674
 590:	5f6d745f 	svcpl	0x006d745f
 594:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
 598:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 59c:	00746978 	rsbseq	r6, r4, r8, ror r9
 5a0:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
 5a4:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
 5a8:	5f007469 	svcpl	0x00007469
 5ac:	5f66666f 	svcpl	0x0066666f
 5b0:	65500074 	ldrbvs	r0, [r0, #-116]	; 0xffffff8c
 5b4:	72657070 	rsbvc	r7, r5, #112	; 0x70
 5b8:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 5bc:	5f007370 	svcpl	0x00007370
 5c0:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
 5c4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 5c8:	63775f00 	cmnvs	r7, #0, 30
 5cc:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 5d0:	6174735f 	cmnvs	r4, pc, asr r3
 5d4:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 5d8:	4e64616f 	powmisz	f6, f4, #10.0
 5dc:	654c7765 	strbvs	r7, [ip, #-1893]	; 0xfffff89b
 5e0:	536c6576 	cmnpl	ip, #494927872	; 0x1d800000
 5e4:	656d6765 	strbvs	r6, [sp, #-1893]!	; 0xfffff89b
 5e8:	654c746e 	strbvs	r7, [ip, #-1134]	; 0xfffffb92
 5ec:	67007466 	strvs	r7, [r0, -r6, ror #8]
 5f0:	496f6970 	stmdbmi	pc!, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 5f4:	0074696e 	rsbseq	r6, r4, lr, ror #18
 5f8:	77656e5f 			; <UNDEFINED> instruction: 0x77656e5f
 5fc:	5f685f00 	svcpl	0x00685f00
 600:	6e727265 	cdpvs	2, 7, cr7, cr2, cr5, {3}
 604:	5f5f006f 	svcpl	0x005f006f
 608:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 60c:	00796164 	rsbseq	r6, r9, r4, ror #2
 610:	62735f5f 	rsbsvs	r5, r3, #380	; 0x17c
 614:	5f006675 	svcpl	0x00006675
 618:	73626f69 	cmnvc	r2, #420	; 0x1a4
 61c:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 620:	00454c49 	subeq	r4, r5, r9, asr #24
 624:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 628:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 62c:	5f00745f 	svcpl	0x0000745f
 630:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 634:	5f00454c 	svcpl	0x0000454c
 638:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 63c:	00657461 	rsbeq	r7, r5, r1, ror #8
 640:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 644:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
 648:	5f007478 	svcpl	0x00007478
 64c:	656c626d 	strbvs	r6, [ip, #-621]!	; 0xfffffd93
 650:	74735f6e 	ldrbtvc	r5, [r3], #-3950	; 0xfffff092
 654:	00657461 	rsbeq	r7, r5, r1, ror #8
 658:	636e695f 	cmnvs	lr, #1556480	; 0x17c000
 65c:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 660:	6c5f0064 	mrrcvs	0, 6, r0, pc, cr4	; <UNPREDICTABLE>
 664:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 668:	5f5f0065 	svcpl	0x005f0065
 66c:	61656c63 	cmnvs	r5, r3, ror #24
 670:	0070756e 	rsbseq	r7, r0, lr, ror #10
 674:	736e755f 	cmnvc	lr, #398458880	; 0x17c00000
 678:	69636570 	stmdbvs	r3!, {r4, r5, r6, r8, sl, sp, lr}^
 67c:	64656966 	strbtvs	r6, [r5], #-2406	; 0xfffff69a
 680:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 684:	5f656c61 	svcpl	0x00656c61
 688:	6f666e69 	svcvs	0x00666e69
 68c:	616d5f00 	cmnvs	sp, r0, lsl #30
 690:	73647778 	cmnvc	r4, #120, 14	; 0x1e00000
 694:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 698:	00746e65 	rsbseq	r6, r4, r5, ror #28
 69c:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 6a0:	5f5f0064 	svcpl	0x005f0064
 6a4:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 6a8:	5f5f0074 	svcpl	0x005f0074
 6ac:	6b636f6c 	blvs	18dc464 <startup-0x1e723b9c>
 6b0:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 6b4:	5f006b65 	svcpl	0x00006b65
 6b8:	736f7066 	cmnvc	pc, #102	; 0x66
 6bc:	5f00745f 	svcpl	0x0000745f
 6c0:	655f6e6f 	ldrbvs	r6, [pc, #-3695]	; fffff859 <Pedro+0xdfffdaed>
 6c4:	5f746978 	svcpl	0x00746978
 6c8:	73677261 	cmnvc	r7, #268435462	; 0x10000006
 6cc:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 6d4 <startup-0x1ffff92c>
 6d0:	696d5f6d 	stmdbvs	sp!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 6d4:	7473006e 	ldrbtvc	r0, [r3], #-110	; 0xffffff92
 6d8:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 6dc:	6d5f0070 	ldclvs	0, cr0, [pc, #-448]	; 524 <startup-0x1ffffadc>
 6e0:	00746c75 	rsbseq	r6, r4, r5, ror ip
 6e4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 6e8:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
 6ec:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 6f0:	6d676553 	cfstr64vs	mvdx6, [r7, #-332]!	; 0xfffffeb4
 6f4:	52746e65 	rsbspl	r6, r4, #1616	; 0x650
 6f8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 6fc:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 700:	6b6f7472 	blvs	1bdd8d0 <startup-0x1e422730>
 704:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
 708:	5f5f0074 	svcpl	0x005f0074
 70c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 710:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 714:	7079746e 	rsbsvc	r7, r9, lr, ror #8
 718:	5f007365 	svcpl	0x00007365
 71c:	00646461 	rsbeq	r6, r4, r1, ror #8
 720:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
 724:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 728:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 72c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 730:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 734:	6c675f00 	stclvs	15, cr5, [r7], #-0
 738:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
 73c:	706d695f 	rsbvc	r6, sp, pc, asr r9
 740:	5f657275 	svcpl	0x00657275
 744:	00727470 	rsbseq	r7, r2, r0, ror r4
 748:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 74c:	5f646573 	svcpl	0x00646573
 750:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 754:	64775f00 	ldrbtvs	r5, [r7], #-3840	; 0xfffff100
 758:	5f5f0073 	svcpl	0x005f0073
 75c:	775f6d74 			; <UNDEFINED> instruction: 0x775f6d74
 760:	00796164 	rsbseq	r6, r9, r4, ror #2
 764:	756c675f 	strbvc	r6, [ip, #-1887]!	; 0xfffff8a1
 768:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 76c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 770:	5f00636f 	svcpl	0x0000636f
 774:	6134366c 	teqvs	r4, ip, ror #12
 778:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 77c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 780:	75665f67 	strbvc	r5, [r6, #-3943]!	; 0xfffff099
 784:	5f00636e 	svcpl	0x0000636e
 788:	6675626e 	ldrbtvs	r6, [r5], -lr, ror #4
 78c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 790:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 794:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 79c <startup-0x1ffff864>
 798:	73695f6d 	cmnvc	r9, #436	; 0x1b4
 79c:	00747364 	rsbseq	r7, r4, r4, ror #6
 7a0:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 7a4:	69746c61 	ldmdbvs	r4!, {r0, r5, r6, sl, fp, sp, lr}^
 7a8:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 7ac:	5f006675 	svcpl	0x00006675
 7b0:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 7b4:	6f6c0065 	svcvs	0x006c0065
 7b8:	65506461 	ldrbvs	r6, [r0, #-1121]	; 0xfffffb9f
 7bc:	72657070 	rsbvc	r7, r5, #112	; 0x70
 7c0:	5f007441 	svcpl	0x00007441
 7c4:	00383472 	eorseq	r3, r8, r2, ror r4
 7c8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 7cc:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; 604 <startup-0x1ffff9fc>
 7d0:	776f7462 	strbvc	r7, [pc, -r2, ror #8]!
 7d4:	74735f63 	ldrbtvc	r5, [r3], #-3939	; 0xfffff09d
 7d8:	00657461 	rsbeq	r7, r5, r1, ror #8
 7dc:	7335705f 	teqvc	r5, #95	; 0x5f
 7e0:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 7e4:	5f5f006e 	svcpl	0x005f006e
 7e8:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 620 <startup-0x1ffff9e0>
 7ec:	00796164 	rsbseq	r6, r9, r4, ror #2
 7f0:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 7f4:	6873006c 	ldmdavs	r3!, {r2, r3, r5, r6}^
 7f8:	4c746669 	ldclmi	6, cr6, [r4], #-420	; 0xfffffe5c
 7fc:	00746665 	rsbseq	r6, r4, r5, ror #12
 800:	70617267 	rsbvc	r7, r1, r7, ror #4
 804:	5f636968 	svcpl	0x00636968
 808:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 80c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 810:	006e6565 	rsbeq	r6, lr, r5, ror #10
 814:	70617267 	rsbvc	r7, r1, r7, ror #4
 818:	5f636968 	svcpl	0x00636968
 81c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 820:	6f635f65 	svcvs	0x00635f65
 824:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 828:	72670064 	rsbvc	r0, r7, #100	; 0x64
 82c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 830:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 834:	5f726165 	svcpl	0x00726165
 838:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 83c:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 840:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 844:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 848:	00646165 	rsbeq	r6, r4, r5, ror #2
 84c:	70617267 	rsbvc	r7, r1, r7, ror #4
 850:	5f636968 	svcpl	0x00636968
 854:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 858:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 85c:	5f5f0061 	svcpl	0x005f0061
 860:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 864:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 868:	70617267 	rsbvc	r7, r1, r7, ror #4
 86c:	5f636968 	svcpl	0x00636968
 870:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 874:	61645f65 	cmnvs	r4, r5, ror #30
 878:	67006174 	smlsdxvs	r0, r4, r1, r6
 87c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 880:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 884:	5f6c7274 	svcpl	0x006c7274
 888:	5f746962 	svcpl	0x00746962
 88c:	61656c63 	cmnvs	r5, r3, ror #24
 890:	72670072 	rsbvc	r0, r7, #114	; 0x72
 894:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 898:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 89c:	00657469 	rsbeq	r7, r5, r9, ror #8
 8a0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 8a4:	63536f54 	cmpvs	r3, #84, 30	; 0x150
 8a8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 8ac:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 8b0:	73007265 	movwvc	r7, #613	; 0x265
 8b4:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
 8b8:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 8bc:	72670074 	rsbvc	r0, r7, #116	; 0x74
 8c0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8c4:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 8c8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 8cc:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 8d0:	67007465 	strvs	r7, [r0, -r5, ror #8]
 8d4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 8d8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 8dc:	5f746961 	svcpl	0x00746961
 8e0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8e4:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 8e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 8ec:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8f0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 728 <startup-0x1ffff8d8>
 8f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 8f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 8fc:	5f636968 	svcpl	0x00636968
 900:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 904:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 908:	5a00657a 	bpl	19ef8 <startup-0x1ffe6108>
 90c:	4f4d2f3a 	svcmi	0x004d2f3a
 910:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 914:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 918:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 91c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 920:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 924:	2f6f7264 	svccs	0x006f7264
 928:	4164634c 	cmnmi	r4, ip, asr #6
 92c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 930:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
 934:	54657479 	strbtpl	r7, [r5], #-1145	; 0xfffffb87
 938:	6675426f 	ldrbtvs	r4, [r5], -pc, ror #4
 93c:	00726566 	rsbseq	r6, r2, r6, ror #10
 940:	61656c63 	cmnvs	r5, r3, ror #24
 944:	61625f72 	smcvs	9714	; 0x25f2
 948:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 94c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffd5a2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	00000044 	andeq	r0, r0, r4, asr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000098 	mulcs	r0, r8, r0
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
  58:	40080e41 	andmi	r0, r8, r1, asr #28
  5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  60:	180e4101 	stmdane	lr, {r0, r8, lr}
  64:	00070d41 	andeq	r0, r7, r1, asr #26
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200000c2 	andcs	r0, r0, r2, asr #1
  74:	00000018 	andeq	r0, r0, r8, lsl r0
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000dc 	ldrdcs	r0, [r0], -ip
  a4:	0000007c 	andeq	r0, r0, ip, ror r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
  b8:	00000088 	andeq	r0, r0, r8, lsl #1
  bc:	20000158 	andcs	r0, r0, r8, asr r1
  c0:	000000c0 	andeq	r0, r0, r0, asr #1
  c4:	40080e41 	andmi	r0, r8, r1, asr #28
  c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d0:	00000018 	andeq	r0, r0, r8, lsl r0
  d4:	00000088 	andeq	r0, r0, r8, lsl #1
  d8:	20000218 	andcs	r0, r0, r8, lsl r2
  dc:	00000038 	andeq	r0, r0, r8, lsr r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  ec:	00000018 	andeq	r0, r0, r8, lsl r0
  f0:	00000088 	andeq	r0, r0, r8, lsl #1
  f4:	20000250 	andcs	r0, r0, r0, asr r2
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	40080e41 	andmi	r0, r8, r1, asr #28
 100:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 104:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 108:	0000001c 	andeq	r0, r0, ip, lsl r0
 10c:	00000088 	andeq	r0, r0, r8, lsl #1
 110:	20000268 	andcs	r0, r0, r8, ror #4
 114:	0000023c 	andeq	r0, r0, ip, lsr r2
 118:	40080e41 	andmi	r0, r8, r1, asr #28
 11c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 120:	300e4101 	andcc	r4, lr, r1, lsl #2
 124:	00070d41 	andeq	r0, r7, r1, asr #26
 128:	0000001c 	andeq	r0, r0, ip, lsl r0
 12c:	00000088 	andeq	r0, r0, r8, lsl #1
 130:	200004a4 	andcs	r0, r0, r4, lsr #9
 134:	000000cc 	andeq	r0, r0, ip, asr #1
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	180e4101 	stmdane	lr, {r0, r8, lr}
 144:	00070d41 	andeq	r0, r7, r1, asr #26
 148:	0000001c 	andeq	r0, r0, ip, lsl r0
 14c:	00000088 	andeq	r0, r0, r8, lsl #1
 150:	20000570 	andcs	r0, r0, r0, ror r5
 154:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 158:	40080e41 	andmi	r0, r8, r1, asr #28
 15c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 160:	280e4101 	stmdacs	lr, {r0, r8, lr}
 164:	00070d41 	andeq	r0, r7, r1, asr #26
 168:	00000018 	andeq	r0, r0, r8, lsl r0
 16c:	00000088 	andeq	r0, r0, r8, lsl #1
 170:	20000620 	andcs	r0, r0, r0, lsr #12
 174:	00000014 	andeq	r0, r0, r4, lsl r0
 178:	40080e41 	andmi	r0, r8, r1, asr #28
 17c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 180:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 184:	00000018 	andeq	r0, r0, r8, lsl r0
 188:	00000088 	andeq	r0, r0, r8, lsl #1
 18c:	20000634 	andcs	r0, r0, r4, lsr r6
 190:	00000014 	andeq	r0, r0, r4, lsl r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1a0:	0000000c 	andeq	r0, r0, ip
 1a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1a8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1ac:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1b8:	20000648 	andcs	r0, r0, r8, asr #12
 1bc:	00000032 	andeq	r0, r0, r2, lsr r0
 1c0:	40080e41 	andmi	r0, r8, r1, asr #28
 1c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1cc:	00070d41 	andeq	r0, r7, r1, asr #26
 1d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1d8:	2000067a 	andcs	r0, r0, sl, ror r6
 1dc:	00000076 	andeq	r0, r0, r6, ror r0
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 1ec:	00070d41 	andeq	r0, r7, r1, asr #26
 1f0:	0000000c 	andeq	r0, r0, ip
 1f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1f8:	7c020001 	stcvc	0, cr0, [r2], {1}
 1fc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 208:	200006f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 20c:	00000054 	andeq	r0, r0, r4, asr r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	100e4101 	andne	r4, lr, r1, lsl #2
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	00000018 	andeq	r0, r0, r8, lsl r0
 224:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 228:	20000744 	andcs	r0, r0, r4, asr #14
 22c:	00000058 	andeq	r0, r0, r8, asr r0
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 244:	2000079c 	mulcs	r0, ip, r7
 248:	00000032 	andeq	r0, r0, r2, lsr r0
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 258:	00000018 	andeq	r0, r0, r8, lsl r0
 25c:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 260:	200007ce 	andcs	r0, r0, lr, asr #15
 264:	0000002c 	andeq	r0, r0, ip, lsr #32
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 274:	00000018 	andeq	r0, r0, r8, lsl r0
 278:	000001f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 27c:	200007fa 	strdcs	r0, [r0], -sl
 280:	0000002c 	andeq	r0, r0, ip, lsr #32
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 290:	0000000c 	andeq	r0, r0, ip
 294:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 298:	7c020001 	stcvc	0, cr0, [r2], {1}
 29c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a0:	0000000c 	andeq	r0, r0, ip
 2a4:	00000290 	muleq	r0, r0, r2
 2a8:	20000000 	andcs	r0, r0, r0
 2ac:	0000000c 	andeq	r0, r0, ip
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	00000290 	muleq	r0, r0, r2
 2b8:	20000828 	andcs	r0, r0, r8, lsr #16
 2bc:	00000060 	andeq	r0, r0, r0, rrx
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2cc:	00000018 	andeq	r0, r0, r8, lsl r0
 2d0:	00000290 	muleq	r0, r0, r2
 2d4:	20000888 	andcs	r0, r0, r8, lsl #17
 2d8:	00000038 	andeq	r0, r0, r8, lsr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2e8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ec:	00000290 	muleq	r0, r0, r2
 2f0:	200008c0 	andcs	r0, r0, r0, asr #17
 2f4:	00000032 	andeq	r0, r0, r2, lsr r0
 2f8:	40080e41 	andmi	r0, r8, r1, asr #28
 2fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 300:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	00000290 	muleq	r0, r0, r2
 30c:	200008f2 	strdcs	r0, [r0], -r2
 310:	00000010 	andeq	r0, r0, r0, lsl r0
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 320:	00000018 	andeq	r0, r0, r8, lsl r0
 324:	00000290 	muleq	r0, r0, r2
 328:	20000902 	andcs	r0, r0, r2, lsl #18
 32c:	00000010 	andeq	r0, r0, r0, lsl r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 33c:	00000020 	andeq	r0, r0, r0, lsr #32
 340:	00000290 	muleq	r0, r0, r2
 344:	20000912 	andcs	r0, r0, r2, lsl r9
 348:	0000006e 	andeq	r0, r0, lr, rrx
 34c:	400c0e41 	andmi	r0, ip, r1, asr #28
 350:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 354:	018e4002 	orreq	r4, lr, r2
 358:	41400e41 	cmpmi	r0, r1, asr #28
 35c:	0000070d 	andeq	r0, r0, sp, lsl #14
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000290 	muleq	r0, r0, r2
 368:	20000980 	andcs	r0, r0, r0, lsl #19
 36c:	0000004c 	andeq	r0, r0, ip, asr #32
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	100e4101 	andne	r4, lr, r1, lsl #2
 37c:	00070d41 	andeq	r0, r7, r1, asr #26
 380:	0000001c 	andeq	r0, r0, ip, lsl r0
 384:	00000290 	muleq	r0, r0, r2
 388:	200009cc 	andcs	r0, r0, ip, asr #19
 38c:	00000070 	andeq	r0, r0, r0, ror r0
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	680e4101 	stmdavs	lr, {r0, r8, lr}
 39c:	00070d41 	andeq	r0, r7, r1, asr #26
 3a0:	00000018 	andeq	r0, r0, r8, lsl r0
 3a4:	00000290 	muleq	r0, r0, r2
 3a8:	20000a3c 	andcs	r0, r0, ip, lsr sl
 3ac:	0000000a 	andeq	r0, r0, sl
 3b0:	40080e41 	andmi	r0, r8, r1, asr #28
 3b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3bc:	00000018 	andeq	r0, r0, r8, lsl r0
 3c0:	00000290 	muleq	r0, r0, r2
 3c4:	20000a46 	andcs	r0, r0, r6, asr #20
 3c8:	0000000e 	andeq	r0, r0, lr
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3e0:	7c020001 	stcvc	0, cr0, [r2], {1}
 3e4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3ec:	000003d8 	ldrdeq	r0, [r0], -r8
 3f0:	20000a54 	andcs	r0, r0, r4, asr sl
 3f4:	00000044 	andeq	r0, r0, r4, asr #32
 3f8:	40080e41 	andmi	r0, r8, r1, asr #28
 3fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 400:	180e4101 	stmdane	lr, {r0, r8, lr}
 404:	00070d41 	andeq	r0, r7, r1, asr #26
 408:	0000001c 	andeq	r0, r0, ip, lsl r0
 40c:	000003d8 	ldrdeq	r0, [r0], -r8
 410:	20000a98 	mulcs	r0, r8, sl
 414:	00000050 	andeq	r0, r0, r0, asr r0
 418:	40080e41 	andmi	r0, r8, r1, asr #28
 41c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 420:	180e4101 	stmdane	lr, {r0, r8, lr}
 424:	00070d41 	andeq	r0, r7, r1, asr #26
 428:	0000001c 	andeq	r0, r0, ip, lsl r0
 42c:	000003d8 	ldrdeq	r0, [r0], -r8
 430:	20000ae8 	andcs	r0, r0, r8, ror #21
 434:	0000005a 	andeq	r0, r0, sl, asr r0
 438:	40080e41 	andmi	r0, r8, r1, asr #28
 43c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 440:	100e4101 	andne	r4, lr, r1, lsl #2
 444:	00070d41 	andeq	r0, r7, r1, asr #26
 448:	00000018 	andeq	r0, r0, r8, lsl r0
 44c:	000003d8 	ldrdeq	r0, [r0], -r8
 450:	20000b42 	andcs	r0, r0, r2, asr #22
 454:	00000064 	andeq	r0, r0, r4, rrx
 458:	40080e41 	andmi	r0, r8, r1, asr #28
 45c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 460:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	000003d8 	ldrdeq	r0, [r0], -r8
 46c:	20000ba6 	andcs	r0, r0, r6, lsr #23
 470:	0000006a 	andeq	r0, r0, sl, rrx
 474:	40080e41 	andmi	r0, r8, r1, asr #28
 478:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 47c:	100e4101 	andne	r4, lr, r1, lsl #2
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	000003d8 	ldrdeq	r0, [r0], -r8
 48c:	20000c10 	andcs	r0, r0, r0, lsl ip
 490:	00000090 	muleq	r0, r0, r0
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	180e4101 	stmdane	lr, {r0, r8, lr}
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	000003d8 	ldrdeq	r0, [r0], -r8
 4ac:	20000ca0 	andcs	r0, r0, r0, lsr #25
 4b0:	0000002a 	andeq	r0, r0, sl, lsr #32
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	100e4101 	andne	r4, lr, r1, lsl #2
 4c0:	00070d41 	andeq	r0, r7, r1, asr #26
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	000003d8 	ldrdeq	r0, [r0], -r8
 4cc:	20000cca 	andcs	r0, r0, sl, asr #25
 4d0:	00000076 	andeq	r0, r0, r6, ror r0
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	100e4101 	andne	r4, lr, r1, lsl #2
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	000003d8 	ldrdeq	r0, [r0], -r8
 4ec:	20000d40 	andcs	r0, r0, r0, asr #26
 4f0:	00000040 	andeq	r0, r0, r0, asr #32
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	100e4101 	andne	r4, lr, r1, lsl #2
 500:	00070d41 	andeq	r0, r7, r1, asr #26
 504:	0000001c 	andeq	r0, r0, ip, lsl r0
 508:	000003d8 	ldrdeq	r0, [r0], -r8
 50c:	20000d80 	andcs	r0, r0, r0, lsl #27
 510:	00000046 	andeq	r0, r0, r6, asr #32
 514:	40080e41 	andmi	r0, r8, r1, asr #28
 518:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 51c:	100e4101 	andne	r4, lr, r1, lsl #2
 520:	00070d41 	andeq	r0, r7, r1, asr #26
 524:	0000001c 	andeq	r0, r0, ip, lsl r0
 528:	000003d8 	ldrdeq	r0, [r0], -r8
 52c:	20000dc6 	andcs	r0, r0, r6, asr #27
 530:	0000003e 	andeq	r0, r0, lr, lsr r0
 534:	40080e41 	andmi	r0, r8, r1, asr #28
 538:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 53c:	100e4101 	andne	r4, lr, r1, lsl #2
 540:	00070d41 	andeq	r0, r7, r1, asr #26
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000003d8 	ldrdeq	r0, [r0], -r8
 54c:	20000e04 	andcs	r0, r0, r4, lsl #28
 550:	00000048 	andeq	r0, r0, r8, asr #32
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	100e4101 	andne	r4, lr, r1, lsl #2
 560:	00070d41 	andeq	r0, r7, r1, asr #26
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000003d8 	ldrdeq	r0, [r0], -r8
 56c:	20000e4c 	andcs	r0, r0, ip, asr #28
 570:	000000b4 	strheq	r0, [r0], -r4
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	200e4101 	andcs	r4, lr, r1, lsl #2
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	000003d8 	ldrdeq	r0, [r0], -r8
 58c:	20000f00 	andcs	r0, r0, r0, lsl #30
 590:	0000002c 	andeq	r0, r0, ip, lsr #32
 594:	40080e41 	andmi	r0, r8, r1, asr #28
 598:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 59c:	180e4101 	stmdane	lr, {r0, r8, lr}
 5a0:	00070d41 	andeq	r0, r7, r1, asr #26
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	000003d8 	ldrdeq	r0, [r0], -r8
 5ac:	20000f2c 	andcs	r0, r0, ip, lsr #30
 5b0:	00000030 	andeq	r0, r0, r0, lsr r0
 5b4:	40080e41 	andmi	r0, r8, r1, asr #28
 5b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 5c0:	00070d41 	andeq	r0, r7, r1, asr #26
 5c4:	00000020 	andeq	r0, r0, r0, lsr #32
 5c8:	000003d8 	ldrdeq	r0, [r0], -r8
 5cc:	20000f5c 	andcs	r0, r0, ip, asr pc
 5d0:	000000e0 	andeq	r0, r0, r0, ror #1
 5d4:	400c0e41 	andmi	r0, ip, r1, asr #28
 5d8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 5dc:	018e4002 	orreq	r4, lr, r2
 5e0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 5e4:	0000070d 	andeq	r0, r0, sp, lsl #14
 5e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 5ec:	000003d8 	ldrdeq	r0, [r0], -r8
 5f0:	2000103c 	andcs	r1, r0, ip, lsr r0
 5f4:	00000074 	andeq	r0, r0, r4, ror r0
 5f8:	40080e41 	andmi	r0, r8, r1, asr #28
 5fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 600:	180e4101 	stmdane	lr, {r0, r8, lr}
 604:	00070d41 	andeq	r0, r7, r1, asr #26
 608:	0000001c 	andeq	r0, r0, ip, lsl r0
 60c:	000003d8 	ldrdeq	r0, [r0], -r8
 610:	200010b0 	strhcs	r1, [r0], -r0
 614:	00000078 	andeq	r0, r0, r8, ror r0
 618:	40080e41 	andmi	r0, r8, r1, asr #28
 61c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 620:	180e4101 	stmdane	lr, {r0, r8, lr}
 624:	00070d41 	andeq	r0, r7, r1, asr #26
 628:	0000000c 	andeq	r0, r0, ip
 62c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 630:	7c010001 	stcvc	0, cr0, [r1], {1}
 634:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 638:	0000000c 	andeq	r0, r0, ip
 63c:	00000628 	andeq	r0, r0, r8, lsr #12
 640:	20001129 	andcs	r1, r0, r9, lsr #2
 644:	0000010a 	andeq	r0, r0, sl, lsl #2
 648:	0000000c 	andeq	r0, r0, ip
 64c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 650:	7c010001 	stcvc	0, cr0, [r1], {1}
 654:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 658:	0000000c 	andeq	r0, r0, ip
 65c:	00000648 	andeq	r0, r0, r8, asr #12
 660:	2000123d 	andcs	r1, r0, sp, lsr r2
 664:	000001cc 	andeq	r0, r0, ip, asr #3
 668:	0000000c 	andeq	r0, r0, ip
 66c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 670:	7c020001 	stcvc	0, cr0, [r2], {1}
 674:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 678:	00000014 	andeq	r0, r0, r4, lsl r0
 67c:	00000668 	andeq	r0, r0, r8, ror #12
 680:	20001414 	andcs	r1, r0, r4, lsl r4
 684:	00000012 	andeq	r0, r0, r2, lsl r0
 688:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 68c:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000828 	andcs	r0, r0, r8, lsr #16
   4:	20000a54 	andcs	r0, r0, r4, asr sl
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
