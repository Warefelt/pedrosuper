
./Debug/SuperPedro.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff98 	bl	20000f38 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#include "delays.h"

void delay_250ns(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL=0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/4-1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL=0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	*STK_CTRL=0;
20000058:	4b0c      	ldr	r3, [pc, #48]	; (2000008c <delay_500ns+0x38>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/2-1;
2000005e:	4b0c      	ldr	r3, [pc, #48]	; (20000090 <delay_500ns+0x3c>)
20000060:	2253      	movs	r2, #83	; 0x53
20000062:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_500ns+0x40>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
2000006a:	4b08      	ldr	r3, [pc, #32]	; (2000008c <delay_500ns+0x38>)
2000006c:	2205      	movs	r2, #5
2000006e:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	4b06      	ldr	r3, [pc, #24]	; (2000008c <delay_500ns+0x38>)
20000074:	681a      	ldr	r2, [r3, #0]
20000076:	2380      	movs	r3, #128	; 0x80
20000078:	025b      	lsls	r3, r3, #9
2000007a:	4013      	ands	r3, r2
2000007c:	d0f9      	beq.n	20000072 <delay_500ns+0x1e>
    *STK_CTRL=0;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <delay_500ns+0x38>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	bd80      	pop	{r7, pc}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	e000e010 	and	lr, r0, r0, lsl r0
20000090:	e000e014 	and	lr, r0, r4, lsl r0
20000094:	e000e018 	and	lr, r0, r8, lsl r0

20000098 <delaymicros>:

void delaymicros(int micros){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
    #ifdef NONSIMULATOR
		//micros *= 1000;
	#endif
    for(int i = 0; i < micros * 2; i++){
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delaymicros+0x18>
        delay_500ns();
200000a6:	f7ff ffd5 	bl	20000054 <delay_500ns>
    for(int i = 0; i < micros * 2; i++){
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	005b      	lsls	r3, r3, #1
200000b4:	68fa      	ldr	r2, [r7, #12]
200000b6:	429a      	cmp	r2, r3
200000b8:	dbf5      	blt.n	200000a6 <delaymicros+0xe>
    }
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b004      	add	sp, #16
200000c0:	bd80      	pop	{r7, pc}

200000c2 <delaymillis>:


void delaymillis(int millis){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	6078      	str	r0, [r7, #4]
	delaymicros(millis * 1000);
200000ca:	687a      	ldr	r2, [r7, #4]
200000cc:	0013      	movs	r3, r2
200000ce:	015b      	lsls	r3, r3, #5
200000d0:	1a9b      	subs	r3, r3, r2
200000d2:	009b      	lsls	r3, r3, #2
200000d4:	189b      	adds	r3, r3, r2
200000d6:	00db      	lsls	r3, r3, #3
200000d8:	0018      	movs	r0, r3
200000da:	f7ff ffdd 	bl	20000098 <delaymicros>
}
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	46bd      	mov	sp, r7
200000e2:	b002      	add	sp, #8
200000e4:	bd80      	pop	{r7, pc}
200000e6:	46c0      	nop			; (mov r8, r8)

200000e8 <resetPedro>:
	0,
	0 
    /*komplettera?*/
};

void resetPedro(){
200000e8:	b580      	push	{r7, lr}
200000ea:	af00      	add	r7, sp, #0
    Pedro = (OBJECT){
200000ec:	4a05      	ldr	r2, [pc, #20]	; (20000104 <resetPedro+0x1c>)
200000ee:	4b06      	ldr	r3, [pc, #24]	; (20000108 <resetPedro+0x20>)
200000f0:	0010      	movs	r0, r2
200000f2:	0019      	movs	r1, r3
200000f4:	2340      	movs	r3, #64	; 0x40
200000f6:	001a      	movs	r2, r3
200000f8:	f002 fdc2 	bl	20002c80 <memcpy>
	&pedro_still,		//Sprite
	0,
	0 
    /*komplettera?*/
};
}
200000fc:	46c0      	nop			; (mov r8, r8)
200000fe:	46bd      	mov	sp, r7
20000100:	bd80      	pop	{r7, pc}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	200036f0 	strdcs	r3, [r0], -r0
20000108:	20003730 	andcs	r3, r0, r0, lsr r7

2000010c <move>:


void move(){								//Kollar knapptryck och uppdaterar alla Pedros v√§rden
2000010c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000010e:	af00      	add	r7, sp, #0
    
    checkKeys();
20000110:	f000 f866 	bl	200001e0 <checkKeys>

    applyPhysics();
20000114:	f000 f910 	bl	20000338 <applyPhysics>
    
    if(Pedro.velx > 0){
20000118:	4b30      	ldr	r3, [pc, #192]	; (200001dc <move+0xd0>)
2000011a:	6918      	ldr	r0, [r3, #16]
2000011c:	6959      	ldr	r1, [r3, #20]
2000011e:	2200      	movs	r2, #0
20000120:	2300      	movs	r3, #0
20000122:	f001 fdbd 	bl	20001ca0 <__aeabi_dcmpgt>
20000126:	1e03      	subs	r3, r0, #0
20000128:	d017      	beq.n	2000015a <move+0x4e>
        shiftLeft();
2000012a:	f001 fa3d 	bl	200015a8 <shiftLeft>
        delaymillis(50/(int)Pedro.velx);
2000012e:	4b2b      	ldr	r3, [pc, #172]	; (200001dc <move+0xd0>)
20000130:	695c      	ldr	r4, [r3, #20]
20000132:	691b      	ldr	r3, [r3, #16]
20000134:	0018      	movs	r0, r3
20000136:	0021      	movs	r1, r4
20000138:	f002 fd32 	bl	20002ba0 <__aeabi_d2iz>
2000013c:	0003      	movs	r3, r0
2000013e:	0019      	movs	r1, r3
20000140:	2032      	movs	r0, #50	; 0x32
20000142:	f001 fc97 	bl	20001a74 <__divsi3>
20000146:	0003      	movs	r3, r0
20000148:	0018      	movs	r0, r3
2000014a:	f7ff ffba 	bl	200000c2 <delaymillis>
        Pedro.distance++;
2000014e:	4b23      	ldr	r3, [pc, #140]	; (200001dc <move+0xd0>)
20000150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000152:	1c5a      	adds	r2, r3, #1
20000154:	4b21      	ldr	r3, [pc, #132]	; (200001dc <move+0xd0>)
20000156:	631a      	str	r2, [r3, #48]	; 0x30
20000158:	e025      	b.n	200001a6 <move+0x9a>
    }
    else if(Pedro.velx < 0){
2000015a:	4b20      	ldr	r3, [pc, #128]	; (200001dc <move+0xd0>)
2000015c:	6918      	ldr	r0, [r3, #16]
2000015e:	6959      	ldr	r1, [r3, #20]
20000160:	2200      	movs	r2, #0
20000162:	2300      	movs	r3, #0
20000164:	f001 fd88 	bl	20001c78 <__aeabi_dcmplt>
20000168:	1e03      	subs	r3, r0, #0
2000016a:	d01c      	beq.n	200001a6 <move+0x9a>
        shiftRight();
2000016c:	f001 f9e2 	bl	20001534 <shiftRight>
        delaymillis(50/(int)(-Pedro.velx));
20000170:	4b1a      	ldr	r3, [pc, #104]	; (200001dc <move+0xd0>)
20000172:	695c      	ldr	r4, [r3, #20]
20000174:	691b      	ldr	r3, [r3, #16]
20000176:	001a      	movs	r2, r3
20000178:	0015      	movs	r5, r2
2000017a:	2280      	movs	r2, #128	; 0x80
2000017c:	0612      	lsls	r2, r2, #24
2000017e:	4062      	eors	r2, r4
20000180:	0016      	movs	r6, r2
20000182:	0028      	movs	r0, r5
20000184:	0031      	movs	r1, r6
20000186:	f002 fd0b 	bl	20002ba0 <__aeabi_d2iz>
2000018a:	0003      	movs	r3, r0
2000018c:	0019      	movs	r1, r3
2000018e:	2032      	movs	r0, #50	; 0x32
20000190:	f001 fc70 	bl	20001a74 <__divsi3>
20000194:	0003      	movs	r3, r0
20000196:	0018      	movs	r0, r3
20000198:	f7ff ff93 	bl	200000c2 <delaymillis>
        Pedro.distance--;
2000019c:	4b0f      	ldr	r3, [pc, #60]	; (200001dc <move+0xd0>)
2000019e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200001a0:	1e5a      	subs	r2, r3, #1
200001a2:	4b0e      	ldr	r3, [pc, #56]	; (200001dc <move+0xd0>)
200001a4:	631a      	str	r2, [r3, #48]	; 0x30

    }

    if(Pedro.velx != 0 || Pedro.vely != 0){
200001a6:	4b0d      	ldr	r3, [pc, #52]	; (200001dc <move+0xd0>)
200001a8:	6918      	ldr	r0, [r3, #16]
200001aa:	6959      	ldr	r1, [r3, #20]
200001ac:	2200      	movs	r2, #0
200001ae:	2300      	movs	r3, #0
200001b0:	f001 fd5c 	bl	20001c6c <__aeabi_dcmpeq>
200001b4:	1e03      	subs	r3, r0, #0
200001b6:	d009      	beq.n	200001cc <move+0xc0>
200001b8:	4b08      	ldr	r3, [pc, #32]	; (200001dc <move+0xd0>)
200001ba:	6998      	ldr	r0, [r3, #24]
200001bc:	69d9      	ldr	r1, [r3, #28]
200001be:	2200      	movs	r2, #0
200001c0:	2300      	movs	r3, #0
200001c2:	f001 fd53 	bl	20001c6c <__aeabi_dcmpeq>
200001c6:	1e03      	subs	r3, r0, #0
200001c8:	d000      	beq.n	200001cc <move+0xc0>
        //draw2();
        graphic_draw_screen();
        draw();  //extra args? FLYTTA? han kan ritas ut med resten av sk√§rmen_________________________________________________________________________________*  
    }
    
}
200001ca:	e003      	b.n	200001d4 <move+0xc8>
        graphic_draw_screen();
200001cc:	f001 f940 	bl	20001450 <graphic_draw_screen>
        draw();  //extra args? FLYTTA? han kan ritas ut med resten av sk√§rmen_________________________________________________________________________________*  
200001d0:	f000 f9c2 	bl	20000558 <draw>
}
200001d4:	46c0      	nop			; (mov r8, r8)
200001d6:	46bd      	mov	sp, r7
200001d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
200001da:	46c0      	nop			; (mov r8, r8)
200001dc:	200036f0 	strdcs	r3, [r0], -r0

200001e0 <checkKeys>:

//check keypresses and change pedros properties (acceleration for <- ^ -> and velocity for ^) accordingly
void checkKeys(){
200001e0:	b5b0      	push	{r4, r5, r7, lr}
200001e2:	af00      	add	r7, sp, #0
    if(isRightKey() && !isLeftKey()){     //Kr√§ver importerad keyb
200001e4:	f000 fce6 	bl	20000bb4 <isRightKey>
200001e8:	1e03      	subs	r3, r0, #0
200001ea:	d018      	beq.n	2000021e <checkKeys+0x3e>
200001ec:	f000 fcf8 	bl	20000be0 <isLeftKey>
200001f0:	1e03      	subs	r3, r0, #0
200001f2:	d114      	bne.n	2000021e <checkKeys+0x3e>
		if(Pedro.velx < MAX_VELX){
200001f4:	4b48      	ldr	r3, [pc, #288]	; (20000318 <checkKeys+0x138>)
200001f6:	6918      	ldr	r0, [r3, #16]
200001f8:	6959      	ldr	r1, [r3, #20]
200001fa:	2200      	movs	r2, #0
200001fc:	4b47      	ldr	r3, [pc, #284]	; (2000031c <checkKeys+0x13c>)
200001fe:	f001 fd3b 	bl	20001c78 <__aeabi_dcmplt>
20000202:	1e03      	subs	r3, r0, #0
20000204:	d005      	beq.n	20000212 <checkKeys+0x32>
			Pedro.accx = ACCX;     //accelerate right
20000206:	4a44      	ldr	r2, [pc, #272]	; (20000318 <checkKeys+0x138>)
20000208:	2300      	movs	r3, #0
2000020a:	4c45      	ldr	r4, [pc, #276]	; (20000320 <checkKeys+0x140>)
2000020c:	6213      	str	r3, [r2, #32]
2000020e:	6254      	str	r4, [r2, #36]	; 0x24
		if(Pedro.velx < MAX_VELX){
20000210:	e052      	b.n	200002b8 <checkKeys+0xd8>
		}
		else{
			Pedro.accx = 0;
20000212:	4a41      	ldr	r2, [pc, #260]	; (20000318 <checkKeys+0x138>)
20000214:	2300      	movs	r3, #0
20000216:	2400      	movs	r4, #0
20000218:	6213      	str	r3, [r2, #32]
2000021a:	6254      	str	r4, [r2, #36]	; 0x24
		if(Pedro.velx < MAX_VELX){
2000021c:	e04c      	b.n	200002b8 <checkKeys+0xd8>
		}
	}
	else if(!isRightKey() && isLeftKey())
2000021e:	f000 fcc9 	bl	20000bb4 <isRightKey>
20000222:	1e03      	subs	r3, r0, #0
20000224:	d119      	bne.n	2000025a <checkKeys+0x7a>
20000226:	f000 fcdb 	bl	20000be0 <isLeftKey>
2000022a:	1e03      	subs	r3, r0, #0
2000022c:	d015      	beq.n	2000025a <checkKeys+0x7a>
	{
		if((int)Pedro.velx > -MAX_VELX){
2000022e:	4b3a      	ldr	r3, [pc, #232]	; (20000318 <checkKeys+0x138>)
20000230:	695c      	ldr	r4, [r3, #20]
20000232:	691b      	ldr	r3, [r3, #16]
20000234:	0018      	movs	r0, r3
20000236:	0021      	movs	r1, r4
20000238:	f002 fcb2 	bl	20002ba0 <__aeabi_d2iz>
2000023c:	0003      	movs	r3, r0
2000023e:	330d      	adds	r3, #13
20000240:	db05      	blt.n	2000024e <checkKeys+0x6e>
			Pedro.accx = -ACCX;    //accelerate left
20000242:	4a35      	ldr	r2, [pc, #212]	; (20000318 <checkKeys+0x138>)
20000244:	2300      	movs	r3, #0
20000246:	4c37      	ldr	r4, [pc, #220]	; (20000324 <checkKeys+0x144>)
20000248:	6213      	str	r3, [r2, #32]
2000024a:	6254      	str	r4, [r2, #36]	; 0x24
		if((int)Pedro.velx > -MAX_VELX){
2000024c:	e034      	b.n	200002b8 <checkKeys+0xd8>
		}
		else{
			Pedro.accx = 0;
2000024e:	4a32      	ldr	r2, [pc, #200]	; (20000318 <checkKeys+0x138>)
20000250:	2300      	movs	r3, #0
20000252:	2400      	movs	r4, #0
20000254:	6213      	str	r3, [r2, #32]
20000256:	6254      	str	r4, [r2, #36]	; 0x24
		if((int)Pedro.velx > -MAX_VELX){
20000258:	e02e      	b.n	200002b8 <checkKeys+0xd8>
		}
	}
	else                            //decrease velocity
	{
		Pedro.accx = 0;
2000025a:	4a2f      	ldr	r2, [pc, #188]	; (20000318 <checkKeys+0x138>)
2000025c:	2300      	movs	r3, #0
2000025e:	2400      	movs	r4, #0
20000260:	6213      	str	r3, [r2, #32]
20000262:	6254      	str	r4, [r2, #36]	; 0x24
		if(Pedro.velx > 0){
20000264:	4b2c      	ldr	r3, [pc, #176]	; (20000318 <checkKeys+0x138>)
20000266:	6918      	ldr	r0, [r3, #16]
20000268:	6959      	ldr	r1, [r3, #20]
2000026a:	2200      	movs	r2, #0
2000026c:	2300      	movs	r3, #0
2000026e:	f001 fd17 	bl	20001ca0 <__aeabi_dcmpgt>
20000272:	1e03      	subs	r3, r0, #0
20000274:	d00b      	beq.n	2000028e <checkKeys+0xae>
			Pedro.velx -= ACCX;
20000276:	4b28      	ldr	r3, [pc, #160]	; (20000318 <checkKeys+0x138>)
20000278:	6918      	ldr	r0, [r3, #16]
2000027a:	6959      	ldr	r1, [r3, #20]
2000027c:	2200      	movs	r2, #0
2000027e:	4b28      	ldr	r3, [pc, #160]	; (20000320 <checkKeys+0x140>)
20000280:	f002 f946 	bl	20002510 <__aeabi_dsub>
20000284:	0003      	movs	r3, r0
20000286:	000c      	movs	r4, r1
20000288:	4a23      	ldr	r2, [pc, #140]	; (20000318 <checkKeys+0x138>)
2000028a:	6113      	str	r3, [r2, #16]
2000028c:	6154      	str	r4, [r2, #20]
		}
		if(Pedro.velx < 0){
2000028e:	4b22      	ldr	r3, [pc, #136]	; (20000318 <checkKeys+0x138>)
20000290:	6918      	ldr	r0, [r3, #16]
20000292:	6959      	ldr	r1, [r3, #20]
20000294:	2200      	movs	r2, #0
20000296:	2300      	movs	r3, #0
20000298:	f001 fcee 	bl	20001c78 <__aeabi_dcmplt>
2000029c:	1e03      	subs	r3, r0, #0
2000029e:	d00b      	beq.n	200002b8 <checkKeys+0xd8>
			Pedro.velx += ACCX;
200002a0:	4b1d      	ldr	r3, [pc, #116]	; (20000318 <checkKeys+0x138>)
200002a2:	6918      	ldr	r0, [r3, #16]
200002a4:	6959      	ldr	r1, [r3, #20]
200002a6:	2200      	movs	r2, #0
200002a8:	4b1d      	ldr	r3, [pc, #116]	; (20000320 <checkKeys+0x140>)
200002aa:	f001 fd0d 	bl	20001cc8 <__aeabi_dadd>
200002ae:	0003      	movs	r3, r0
200002b0:	000c      	movs	r4, r1
200002b2:	4a19      	ldr	r2, [pc, #100]	; (20000318 <checkKeys+0x138>)
200002b4:	6113      	str	r3, [r2, #16]
200002b6:	6154      	str	r4, [r2, #20]
		}
	}
    
    if(Pedro.posy <= 0){
200002b8:	4b17      	ldr	r3, [pc, #92]	; (20000318 <checkKeys+0x138>)
200002ba:	68db      	ldr	r3, [r3, #12]
200002bc:	2b00      	cmp	r3, #0
200002be:	dc0c      	bgt.n	200002da <checkKeys+0xfa>
        Pedro.vely = 0;
200002c0:	4a15      	ldr	r2, [pc, #84]	; (20000318 <checkKeys+0x138>)
200002c2:	2300      	movs	r3, #0
200002c4:	2400      	movs	r4, #0
200002c6:	6193      	str	r3, [r2, #24]
200002c8:	61d4      	str	r4, [r2, #28]
        Pedro.posy = 0;
200002ca:	4b13      	ldr	r3, [pc, #76]	; (20000318 <checkKeys+0x138>)
200002cc:	2200      	movs	r2, #0
200002ce:	60da      	str	r2, [r3, #12]
        Pedro.accy = 0;
200002d0:	4a11      	ldr	r2, [pc, #68]	; (20000318 <checkKeys+0x138>)
200002d2:	2300      	movs	r3, #0
200002d4:	2400      	movs	r4, #0
200002d6:	6293      	str	r3, [r2, #40]	; 0x28
200002d8:	62d4      	str	r4, [r2, #44]	; 0x2c
    }
    
    
    if(isJumping()){
200002da:	f000 f85f 	bl	2000039c <isJumping>
200002de:	1e03      	subs	r3, r0, #0
200002e0:	d005      	beq.n	200002ee <checkKeys+0x10e>
        Pedro.accy = ACCY;
200002e2:	4a0d      	ldr	r2, [pc, #52]	; (20000318 <checkKeys+0x138>)
200002e4:	4b10      	ldr	r3, [pc, #64]	; (20000328 <checkKeys+0x148>)
200002e6:	4c11      	ldr	r4, [pc, #68]	; (2000032c <checkKeys+0x14c>)
200002e8:	6293      	str	r3, [r2, #40]	; 0x28
200002ea:	62d4      	str	r4, [r2, #44]	; 0x2c
            Pedro.accy = ACCY;
            Pedro.sprite = pedro_jump;
		}
	}

}
200002ec:	e010      	b.n	20000310 <checkKeys+0x130>
        if(isUpKey()){
200002ee:	f000 fc4b 	bl	20000b88 <isUpKey>
200002f2:	1e03      	subs	r3, r0, #0
200002f4:	d00c      	beq.n	20000310 <checkKeys+0x130>
			Pedro.vely = VELY;    //jump
200002f6:	4a08      	ldr	r2, [pc, #32]	; (20000318 <checkKeys+0x138>)
200002f8:	2300      	movs	r3, #0
200002fa:	4c0d      	ldr	r4, [pc, #52]	; (20000330 <checkKeys+0x150>)
200002fc:	6193      	str	r3, [r2, #24]
200002fe:	61d4      	str	r4, [r2, #28]
            Pedro.accy = ACCY;
20000300:	4a05      	ldr	r2, [pc, #20]	; (20000318 <checkKeys+0x138>)
20000302:	4b09      	ldr	r3, [pc, #36]	; (20000328 <checkKeys+0x148>)
20000304:	4c09      	ldr	r4, [pc, #36]	; (2000032c <checkKeys+0x14c>)
20000306:	6293      	str	r3, [r2, #40]	; 0x28
20000308:	62d4      	str	r4, [r2, #44]	; 0x2c
            Pedro.sprite = pedro_jump;
2000030a:	4b03      	ldr	r3, [pc, #12]	; (20000318 <checkKeys+0x138>)
2000030c:	4a09      	ldr	r2, [pc, #36]	; (20000334 <checkKeys+0x154>)
2000030e:	635a      	str	r2, [r3, #52]	; 0x34
}
20000310:	46c0      	nop			; (mov r8, r8)
20000312:	46bd      	mov	sp, r7
20000314:	bdb0      	pop	{r4, r5, r7, pc}
20000316:	46c0      	nop			; (mov r8, r8)
20000318:	200036f0 	strdcs	r3, [r0], -r0
2000031c:	402c0000 	eormi	r0, ip, r0
20000320:	3ff00000 	svccc	0x00f00000	; IMB
20000324:	bff00000 	svclt	0x00f00000	; IMB
20000328:	1eb851ec 	frdne<illegal precision>z	f5, f0, #4.0
2000032c:	bfc1eb85 	svclt	0x00c1eb85
20000330:	40100000 	andsmi	r0, r0, r0
20000334:	20003600 	andcs	r3, r0, r0, lsl #12

20000338 <applyPhysics>:

void applyPhysics(){
20000338:	b5b0      	push	{r4, r5, r7, lr}
2000033a:	af00      	add	r7, sp, #0
    //physics
    Pedro.velx += Pedro.accx;
2000033c:	4b16      	ldr	r3, [pc, #88]	; (20000398 <applyPhysics+0x60>)
2000033e:	6918      	ldr	r0, [r3, #16]
20000340:	6959      	ldr	r1, [r3, #20]
20000342:	4b15      	ldr	r3, [pc, #84]	; (20000398 <applyPhysics+0x60>)
20000344:	6a5c      	ldr	r4, [r3, #36]	; 0x24
20000346:	6a1b      	ldr	r3, [r3, #32]
20000348:	001a      	movs	r2, r3
2000034a:	0023      	movs	r3, r4
2000034c:	f001 fcbc 	bl	20001cc8 <__aeabi_dadd>
20000350:	0003      	movs	r3, r0
20000352:	000c      	movs	r4, r1
20000354:	4a10      	ldr	r2, [pc, #64]	; (20000398 <applyPhysics+0x60>)
20000356:	6113      	str	r3, [r2, #16]
20000358:	6154      	str	r4, [r2, #20]
    
    Pedro.vely += Pedro.accy;
2000035a:	4b0f      	ldr	r3, [pc, #60]	; (20000398 <applyPhysics+0x60>)
2000035c:	6998      	ldr	r0, [r3, #24]
2000035e:	69d9      	ldr	r1, [r3, #28]
20000360:	4b0d      	ldr	r3, [pc, #52]	; (20000398 <applyPhysics+0x60>)
20000362:	6adc      	ldr	r4, [r3, #44]	; 0x2c
20000364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000366:	001a      	movs	r2, r3
20000368:	0023      	movs	r3, r4
2000036a:	f001 fcad 	bl	20001cc8 <__aeabi_dadd>
2000036e:	0003      	movs	r3, r0
20000370:	000c      	movs	r4, r1
20000372:	4a09      	ldr	r2, [pc, #36]	; (20000398 <applyPhysics+0x60>)
20000374:	6193      	str	r3, [r2, #24]
20000376:	61d4      	str	r4, [r2, #28]
	Pedro.posy += (int)Pedro.vely;
20000378:	4b07      	ldr	r3, [pc, #28]	; (20000398 <applyPhysics+0x60>)
2000037a:	68dd      	ldr	r5, [r3, #12]
2000037c:	4b06      	ldr	r3, [pc, #24]	; (20000398 <applyPhysics+0x60>)
2000037e:	69dc      	ldr	r4, [r3, #28]
20000380:	699b      	ldr	r3, [r3, #24]
20000382:	0018      	movs	r0, r3
20000384:	0021      	movs	r1, r4
20000386:	f002 fc0b 	bl	20002ba0 <__aeabi_d2iz>
2000038a:	0003      	movs	r3, r0
2000038c:	18ea      	adds	r2, r5, r3
2000038e:	4b02      	ldr	r3, [pc, #8]	; (20000398 <applyPhysics+0x60>)
20000390:	60da      	str	r2, [r3, #12]
    
}
20000392:	46c0      	nop			; (mov r8, r8)
20000394:	46bd      	mov	sp, r7
20000396:	bdb0      	pop	{r4, r5, r7, pc}
20000398:	200036f0 	strdcs	r3, [r0], -r0

2000039c <isJumping>:

char isJumping(){
2000039c:	b580      	push	{r7, lr}
2000039e:	af00      	add	r7, sp, #0
    return (Pedro.posy > 0 || Pedro.vely != 0);       //groundlvl+pedroheight
200003a0:	4b09      	ldr	r3, [pc, #36]	; (200003c8 <isJumping+0x2c>)
200003a2:	68db      	ldr	r3, [r3, #12]
200003a4:	2b00      	cmp	r3, #0
200003a6:	dc08      	bgt.n	200003ba <isJumping+0x1e>
200003a8:	4b07      	ldr	r3, [pc, #28]	; (200003c8 <isJumping+0x2c>)
200003aa:	6998      	ldr	r0, [r3, #24]
200003ac:	69d9      	ldr	r1, [r3, #28]
200003ae:	2200      	movs	r2, #0
200003b0:	2300      	movs	r3, #0
200003b2:	f001 fc5b 	bl	20001c6c <__aeabi_dcmpeq>
200003b6:	1e03      	subs	r3, r0, #0
200003b8:	d101      	bne.n	200003be <isJumping+0x22>
200003ba:	2301      	movs	r3, #1
200003bc:	e000      	b.n	200003c0 <isJumping+0x24>
200003be:	2300      	movs	r3, #0
200003c0:	b2db      	uxtb	r3, r3
}
200003c2:	0018      	movs	r0, r3
200003c4:	46bd      	mov	sp, r7
200003c6:	bd80      	pop	{r7, pc}
200003c8:	200036f0 	strdcs	r3, [r0], -r0

200003cc <setSprite>:


#define distanceBetweenAnimationChange 4
char facingLeft = 0;
char setSprite(){
200003cc:	b580      	push	{r7, lr}
200003ce:	b082      	sub	sp, #8
200003d0:	af00      	add	r7, sp, #0
    char* lastSprite = Pedro.sprite;
200003d2:	4b2b      	ldr	r3, [pc, #172]	; (20000480 <setSprite+0xb4>)
200003d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200003d6:	607b      	str	r3, [r7, #4]
	if(Pedro.velx > 0){
200003d8:	4b29      	ldr	r3, [pc, #164]	; (20000480 <setSprite+0xb4>)
200003da:	6918      	ldr	r0, [r3, #16]
200003dc:	6959      	ldr	r1, [r3, #20]
200003de:	2200      	movs	r2, #0
200003e0:	2300      	movs	r3, #0
200003e2:	f001 fc5d 	bl	20001ca0 <__aeabi_dcmpgt>
200003e6:	1e03      	subs	r3, r0, #0
200003e8:	d002      	beq.n	200003f0 <setSprite+0x24>
		facingLeft = 0;
200003ea:	4b26      	ldr	r3, [pc, #152]	; (20000484 <setSprite+0xb8>)
200003ec:	2200      	movs	r2, #0
200003ee:	701a      	strb	r2, [r3, #0]
	}
	if(Pedro.velx < 0){
200003f0:	4b23      	ldr	r3, [pc, #140]	; (20000480 <setSprite+0xb4>)
200003f2:	6918      	ldr	r0, [r3, #16]
200003f4:	6959      	ldr	r1, [r3, #20]
200003f6:	2200      	movs	r2, #0
200003f8:	2300      	movs	r3, #0
200003fa:	f001 fc3d 	bl	20001c78 <__aeabi_dcmplt>
200003fe:	1e03      	subs	r3, r0, #0
20000400:	d002      	beq.n	20000408 <setSprite+0x3c>
		facingLeft = 1;
20000402:	4b20      	ldr	r3, [pc, #128]	; (20000484 <setSprite+0xb8>)
20000404:	2201      	movs	r2, #1
20000406:	701a      	strb	r2, [r3, #0]
	}
	if(Pedro.posy > 0){
20000408:	4b1d      	ldr	r3, [pc, #116]	; (20000480 <setSprite+0xb4>)
2000040a:	68db      	ldr	r3, [r3, #12]
2000040c:	2b00      	cmp	r3, #0
2000040e:	dd03      	ble.n	20000418 <setSprite+0x4c>
		Pedro.sprite = pedro_jump;
20000410:	4b1b      	ldr	r3, [pc, #108]	; (20000480 <setSprite+0xb4>)
20000412:	4a1d      	ldr	r2, [pc, #116]	; (20000488 <setSprite+0xbc>)
20000414:	635a      	str	r2, [r3, #52]	; 0x34
20000416:	e01d      	b.n	20000454 <setSprite+0x88>
	}
	else if(Pedro.velx == 0){
20000418:	4b19      	ldr	r3, [pc, #100]	; (20000480 <setSprite+0xb4>)
2000041a:	6918      	ldr	r0, [r3, #16]
2000041c:	6959      	ldr	r1, [r3, #20]
2000041e:	2200      	movs	r2, #0
20000420:	2300      	movs	r3, #0
20000422:	f001 fc23 	bl	20001c6c <__aeabi_dcmpeq>
20000426:	1e03      	subs	r3, r0, #0
20000428:	d003      	beq.n	20000432 <setSprite+0x66>
		Pedro.sprite = pedro_still;
2000042a:	4b15      	ldr	r3, [pc, #84]	; (20000480 <setSprite+0xb4>)
2000042c:	4a17      	ldr	r2, [pc, #92]	; (2000048c <setSprite+0xc0>)
2000042e:	635a      	str	r2, [r3, #52]	; 0x34
20000430:	e010      	b.n	20000454 <setSprite+0x88>
	}
	else if((getDistance()/distanceBetweenAnimationChange)%2){
20000432:	f000 fae5 	bl	20000a00 <getDistance>
20000436:	1e03      	subs	r3, r0, #0
20000438:	da00      	bge.n	2000043c <setSprite+0x70>
2000043a:	3303      	adds	r3, #3
2000043c:	109b      	asrs	r3, r3, #2
2000043e:	001a      	movs	r2, r3
20000440:	2301      	movs	r3, #1
20000442:	4013      	ands	r3, r2
20000444:	d003      	beq.n	2000044e <setSprite+0x82>
		Pedro.sprite = pedro_walk2;
20000446:	4b0e      	ldr	r3, [pc, #56]	; (20000480 <setSprite+0xb4>)
20000448:	4a11      	ldr	r2, [pc, #68]	; (20000490 <setSprite+0xc4>)
2000044a:	635a      	str	r2, [r3, #52]	; 0x34
2000044c:	e002      	b.n	20000454 <setSprite+0x88>
	}
	else{
		Pedro.sprite = pedro_walk1;
2000044e:	4b0c      	ldr	r3, [pc, #48]	; (20000480 <setSprite+0xb4>)
20000450:	4a10      	ldr	r2, [pc, #64]	; (20000494 <setSprite+0xc8>)
20000452:	635a      	str	r2, [r3, #52]	; 0x34
	}
    if(lastSprite == Pedro.sprite && Pedro.vely == 0){
20000454:	4b0a      	ldr	r3, [pc, #40]	; (20000480 <setSprite+0xb4>)
20000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000458:	687a      	ldr	r2, [r7, #4]
2000045a:	429a      	cmp	r2, r3
2000045c:	d10a      	bne.n	20000474 <setSprite+0xa8>
2000045e:	4b08      	ldr	r3, [pc, #32]	; (20000480 <setSprite+0xb4>)
20000460:	6998      	ldr	r0, [r3, #24]
20000462:	69d9      	ldr	r1, [r3, #28]
20000464:	2200      	movs	r2, #0
20000466:	2300      	movs	r3, #0
20000468:	f001 fc00 	bl	20001c6c <__aeabi_dcmpeq>
2000046c:	1e03      	subs	r3, r0, #0
2000046e:	d001      	beq.n	20000474 <setSprite+0xa8>
        return 0;
20000470:	2300      	movs	r3, #0
20000472:	e000      	b.n	20000476 <setSprite+0xaa>
    }
    else {
        return 1;
20000474:	2301      	movs	r3, #1
    }
}
20000476:	0018      	movs	r0, r3
20000478:	46bd      	mov	sp, r7
2000047a:	b002      	add	sp, #8
2000047c:	bd80      	pop	{r7, pc}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	200036f0 	strdcs	r3, [r0], -r0
20000484:	20002d00 	andcs	r2, r0, r0, lsl #26
20000488:	20003600 	andcs	r3, r0, r0, lsl #12
2000048c:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
20000490:	200036a0 	andcs	r3, r0, r0, lsr #13
20000494:	20003650 	andcs	r3, r0, r0, asr r6

20000498 <draw2>:


void draw2(){
20000498:	b5f0      	push	{r4, r5, r6, r7, lr}
2000049a:	b085      	sub	sp, #20
2000049c:	af00      	add	r7, sp, #0
    char newsprite = setSprite();
2000049e:	1cfe      	adds	r6, r7, #3
200004a0:	f7ff ff94 	bl	200003cc <setSprite>
200004a4:	0003      	movs	r3, r0
200004a6:	7033      	strb	r3, [r6, #0]
    
    for(int i = 0; i < 20; i++){
200004a8:	2300      	movs	r3, #0
200004aa:	60fb      	str	r3, [r7, #12]
200004ac:	e01e      	b.n	200004ec <draw2+0x54>
        for(int j = 0; j < 4; j++){
200004ae:	2300      	movs	r3, #0
200004b0:	60bb      	str	r3, [r7, #8]
200004b2:	e015      	b.n	200004e0 <draw2+0x48>
            BUF[i].c[j+4] = *(Pedro.sprite + j*Pedro.width + i);
200004b4:	4b26      	ldr	r3, [pc, #152]	; (20000550 <draw2+0xb8>)
200004b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200004b8:	4b25      	ldr	r3, [pc, #148]	; (20000550 <draw2+0xb8>)
200004ba:	685b      	ldr	r3, [r3, #4]
200004bc:	68b9      	ldr	r1, [r7, #8]
200004be:	434b      	muls	r3, r1
200004c0:	0019      	movs	r1, r3
200004c2:	68fb      	ldr	r3, [r7, #12]
200004c4:	18cb      	adds	r3, r1, r3
200004c6:	18d2      	adds	r2, r2, r3
200004c8:	68bb      	ldr	r3, [r7, #8]
200004ca:	3304      	adds	r3, #4
200004cc:	7810      	ldrb	r0, [r2, #0]
200004ce:	4921      	ldr	r1, [pc, #132]	; (20000554 <draw2+0xbc>)
200004d0:	68fa      	ldr	r2, [r7, #12]
200004d2:	00d2      	lsls	r2, r2, #3
200004d4:	188a      	adds	r2, r1, r2
200004d6:	1c01      	adds	r1, r0, #0
200004d8:	54d1      	strb	r1, [r2, r3]
        for(int j = 0; j < 4; j++){
200004da:	68bb      	ldr	r3, [r7, #8]
200004dc:	3301      	adds	r3, #1
200004de:	60bb      	str	r3, [r7, #8]
200004e0:	68bb      	ldr	r3, [r7, #8]
200004e2:	2b03      	cmp	r3, #3
200004e4:	dde6      	ble.n	200004b4 <draw2+0x1c>
    for(int i = 0; i < 20; i++){
200004e6:	68fb      	ldr	r3, [r7, #12]
200004e8:	3301      	adds	r3, #1
200004ea:	60fb      	str	r3, [r7, #12]
200004ec:	68fb      	ldr	r3, [r7, #12]
200004ee:	2b13      	cmp	r3, #19
200004f0:	dddd      	ble.n	200004ae <draw2+0x16>
        }
    }
    
    for(int i = 0; i < 20; i++){
200004f2:	2300      	movs	r3, #0
200004f4:	607b      	str	r3, [r7, #4]
200004f6:	e024      	b.n	20000542 <draw2+0xaa>
        BUF[i].lng <<= Pedro.posy;
200004f8:	4a16      	ldr	r2, [pc, #88]	; (20000554 <draw2+0xbc>)
200004fa:	687b      	ldr	r3, [r7, #4]
200004fc:	00db      	lsls	r3, r3, #3
200004fe:	18d3      	adds	r3, r2, r3
20000500:	681a      	ldr	r2, [r3, #0]
20000502:	685b      	ldr	r3, [r3, #4]
20000504:	4912      	ldr	r1, [pc, #72]	; (20000550 <draw2+0xb8>)
20000506:	68c9      	ldr	r1, [r1, #12]
20000508:	0008      	movs	r0, r1
2000050a:	3820      	subs	r0, #32
2000050c:	2800      	cmp	r0, #0
2000050e:	db03      	blt.n	20000518 <draw2+0x80>
20000510:	0016      	movs	r6, r2
20000512:	4086      	lsls	r6, r0
20000514:	0035      	movs	r5, r6
20000516:	e008      	b.n	2000052a <draw2+0x92>
20000518:	2020      	movs	r0, #32
2000051a:	1a40      	subs	r0, r0, r1
2000051c:	0016      	movs	r6, r2
2000051e:	40c6      	lsrs	r6, r0
20000520:	0030      	movs	r0, r6
20000522:	001e      	movs	r6, r3
20000524:	408e      	lsls	r6, r1
20000526:	0035      	movs	r5, r6
20000528:	4305      	orrs	r5, r0
2000052a:	0013      	movs	r3, r2
2000052c:	408b      	lsls	r3, r1
2000052e:	001c      	movs	r4, r3
20000530:	4a08      	ldr	r2, [pc, #32]	; (20000554 <draw2+0xbc>)
20000532:	687b      	ldr	r3, [r7, #4]
20000534:	00db      	lsls	r3, r3, #3
20000536:	18d3      	adds	r3, r2, r3
20000538:	601c      	str	r4, [r3, #0]
2000053a:	605d      	str	r5, [r3, #4]
    for(int i = 0; i < 20; i++){
2000053c:	687b      	ldr	r3, [r7, #4]
2000053e:	3301      	adds	r3, #1
20000540:	607b      	str	r3, [r7, #4]
20000542:	687b      	ldr	r3, [r7, #4]
20000544:	2b13      	cmp	r3, #19
20000546:	ddd7      	ble.n	200004f8 <draw2+0x60>
    }
    
}
20000548:	46c0      	nop			; (mov r8, r8)
2000054a:	46bd      	mov	sp, r7
2000054c:	b005      	add	sp, #20
2000054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000550:	200036f0 	strdcs	r3, [r0], -r0
20000554:	20002d08 	andcs	r2, r0, r8, lsl #26

20000558 <draw>:

void draw(){
20000558:	b590      	push	{r4, r7, lr}
2000055a:	b089      	sub	sp, #36	; 0x24
2000055c:	af00      	add	r7, sp, #0
    
    char newsprite = setSprite();
2000055e:	231c      	movs	r3, #28
20000560:	18fc      	adds	r4, r7, r3
20000562:	f7ff ff33 	bl	200003cc <setSprite>
20000566:	0003      	movs	r3, r0
20000568:	7023      	strb	r3, [r4, #0]

    
    unsigned char i, j;
    unsigned char* man = Pedro.sprite;
2000056a:	4b8a      	ldr	r3, [pc, #552]	; (20000794 <draw+0x23c>)
2000056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000056e:	61bb      	str	r3, [r7, #24]
    int shift = Pedro.posy%8;
20000570:	4b88      	ldr	r3, [pc, #544]	; (20000794 <draw+0x23c>)
20000572:	68db      	ldr	r3, [r3, #12]
20000574:	4a88      	ldr	r2, [pc, #544]	; (20000798 <draw+0x240>)
20000576:	4013      	ands	r3, r2
20000578:	d504      	bpl.n	20000584 <draw+0x2c>
2000057a:	3b01      	subs	r3, #1
2000057c:	2208      	movs	r2, #8
2000057e:	4252      	negs	r2, r2
20000580:	4313      	orrs	r3, r2
20000582:	3301      	adds	r3, #1
20000584:	617b      	str	r3, [r7, #20]
    for(j = 0; j < ((Pedro.height)/8)+1; j++) {
20000586:	231e      	movs	r3, #30
20000588:	18fb      	adds	r3, r7, r3
2000058a:	2200      	movs	r2, #0
2000058c:	701a      	strb	r2, [r3, #0]
2000058e:	e0ef      	b.n	20000770 <draw+0x218>
        if(!(Pedro.posy+Pedro.height > 54 && j < ((54-Pedro.posy)/8))){						//If page is over his bottom position
20000590:	4b80      	ldr	r3, [pc, #512]	; (20000794 <draw+0x23c>)
20000592:	68da      	ldr	r2, [r3, #12]
20000594:	4b7f      	ldr	r3, [pc, #508]	; (20000794 <draw+0x23c>)
20000596:	681b      	ldr	r3, [r3, #0]
20000598:	18d3      	adds	r3, r2, r3
2000059a:	2b36      	cmp	r3, #54	; 0x36
2000059c:	dd0c      	ble.n	200005b8 <draw+0x60>
2000059e:	231e      	movs	r3, #30
200005a0:	18fb      	adds	r3, r7, r3
200005a2:	781a      	ldrb	r2, [r3, #0]
200005a4:	4b7b      	ldr	r3, [pc, #492]	; (20000794 <draw+0x23c>)
200005a6:	68db      	ldr	r3, [r3, #12]
200005a8:	2136      	movs	r1, #54	; 0x36
200005aa:	1acb      	subs	r3, r1, r3
200005ac:	d500      	bpl.n	200005b0 <draw+0x58>
200005ae:	3307      	adds	r3, #7
200005b0:	10db      	asrs	r3, r3, #3
200005b2:	429a      	cmp	r2, r3
200005b4:	da00      	bge.n	200005b8 <draw+0x60>
200005b6:	e0d5      	b.n	20000764 <draw+0x20c>

            graphic_write_command(LCD_SET_PAGE | (((63-Pedro.posy-Pedro.height)/8)+j), B_CS1);
200005b8:	4b76      	ldr	r3, [pc, #472]	; (20000794 <draw+0x23c>)
200005ba:	68db      	ldr	r3, [r3, #12]
200005bc:	223f      	movs	r2, #63	; 0x3f
200005be:	1ad2      	subs	r2, r2, r3
200005c0:	4b74      	ldr	r3, [pc, #464]	; (20000794 <draw+0x23c>)
200005c2:	681b      	ldr	r3, [r3, #0]
200005c4:	1ad3      	subs	r3, r2, r3
200005c6:	d500      	bpl.n	200005ca <draw+0x72>
200005c8:	3307      	adds	r3, #7
200005ca:	10db      	asrs	r3, r3, #3
200005cc:	b2da      	uxtb	r2, r3
200005ce:	231e      	movs	r3, #30
200005d0:	18fb      	adds	r3, r7, r3
200005d2:	781b      	ldrb	r3, [r3, #0]
200005d4:	18d3      	adds	r3, r2, r3
200005d6:	b2db      	uxtb	r3, r3
200005d8:	b25b      	sxtb	r3, r3
200005da:	2248      	movs	r2, #72	; 0x48
200005dc:	4252      	negs	r2, r2
200005de:	4313      	orrs	r3, r2
200005e0:	b25b      	sxtb	r3, r3
200005e2:	b2db      	uxtb	r3, r3
200005e4:	2108      	movs	r1, #8
200005e6:	0018      	movs	r0, r3
200005e8:	f000 fe24 	bl	20001234 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | Pedro.posx, B_CS1);
200005ec:	4b69      	ldr	r3, [pc, #420]	; (20000794 <draw+0x23c>)
200005ee:	689b      	ldr	r3, [r3, #8]
200005f0:	b25b      	sxtb	r3, r3
200005f2:	2240      	movs	r2, #64	; 0x40
200005f4:	4313      	orrs	r3, r2
200005f6:	b25b      	sxtb	r3, r3
200005f8:	b2db      	uxtb	r3, r3
200005fa:	2108      	movs	r1, #8
200005fc:	0018      	movs	r0, r3
200005fe:	f000 fe19 	bl	20001234 <graphic_write_command>
            for(i = 0; i < Pedro.width; i++) {
20000602:	231f      	movs	r3, #31
20000604:	18fb      	adds	r3, r7, r3
20000606:	2200      	movs	r2, #0
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	e0a3      	b.n	20000754 <draw+0x1fc>
                if(j == 0){
2000060c:	231e      	movs	r3, #30
2000060e:	18fb      	adds	r3, r7, r3
20000610:	781b      	ldrb	r3, [r3, #0]
20000612:	2b00      	cmp	r3, #0
20000614:	d120      	bne.n	20000658 <draw+0x100>
                    unsigned char* adress = (man+(j*Pedro.width)+i);
20000616:	231e      	movs	r3, #30
20000618:	18fb      	adds	r3, r7, r3
2000061a:	781a      	ldrb	r2, [r3, #0]
2000061c:	4b5d      	ldr	r3, [pc, #372]	; (20000794 <draw+0x23c>)
2000061e:	685b      	ldr	r3, [r3, #4]
20000620:	4353      	muls	r3, r2
20000622:	001a      	movs	r2, r3
20000624:	231f      	movs	r3, #31
20000626:	18fb      	adds	r3, r7, r3
20000628:	781b      	ldrb	r3, [r3, #0]
2000062a:	18d3      	adds	r3, r2, r3
2000062c:	69ba      	ldr	r2, [r7, #24]
2000062e:	18d3      	adds	r3, r2, r3
20000630:	60bb      	str	r3, [r7, #8]
                    unsigned char byte = *adress;
20000632:	1dfb      	adds	r3, r7, #7
20000634:	68ba      	ldr	r2, [r7, #8]
20000636:	7812      	ldrb	r2, [r2, #0]
20000638:	701a      	strb	r2, [r3, #0]
                    byte = byte<<(8-shift);
2000063a:	1dfb      	adds	r3, r7, #7
2000063c:	781a      	ldrb	r2, [r3, #0]
2000063e:	697b      	ldr	r3, [r7, #20]
20000640:	2108      	movs	r1, #8
20000642:	1acb      	subs	r3, r1, r3
20000644:	409a      	lsls	r2, r3
20000646:	1dfb      	adds	r3, r7, #7
20000648:	701a      	strb	r2, [r3, #0]
                    graphic_write_data(byte, B_CS1);
2000064a:	1dfb      	adds	r3, r7, #7
2000064c:	781b      	ldrb	r3, [r3, #0]
2000064e:	2108      	movs	r1, #8
20000650:	0018      	movs	r0, r3
20000652:	f000 fe0f 	bl	20001274 <graphic_write_data>
20000656:	e077      	b.n	20000748 <draw+0x1f0>
                }
                else{
                    unsigned char* adress = (man+((j-1)*Pedro.width)+i);
20000658:	201e      	movs	r0, #30
2000065a:	183b      	adds	r3, r7, r0
2000065c:	781b      	ldrb	r3, [r3, #0]
2000065e:	1e5a      	subs	r2, r3, #1
20000660:	4b4c      	ldr	r3, [pc, #304]	; (20000794 <draw+0x23c>)
20000662:	685b      	ldr	r3, [r3, #4]
20000664:	4353      	muls	r3, r2
20000666:	001a      	movs	r2, r3
20000668:	231f      	movs	r3, #31
2000066a:	18fb      	adds	r3, r7, r3
2000066c:	781b      	ldrb	r3, [r3, #0]
2000066e:	18d3      	adds	r3, r2, r3
20000670:	69ba      	ldr	r2, [r7, #24]
20000672:	18d3      	adds	r3, r2, r3
20000674:	613b      	str	r3, [r7, #16]
                    unsigned char byte = *adress;
20000676:	211d      	movs	r1, #29
20000678:	187b      	adds	r3, r7, r1
2000067a:	693a      	ldr	r2, [r7, #16]
2000067c:	7812      	ldrb	r2, [r2, #0]
2000067e:	701a      	strb	r2, [r3, #0]
                    byte = byte>>(shift);
20000680:	187b      	adds	r3, r7, r1
20000682:	781a      	ldrb	r2, [r3, #0]
20000684:	697b      	ldr	r3, [r7, #20]
20000686:	411a      	asrs	r2, r3
20000688:	187b      	adds	r3, r7, r1
2000068a:	701a      	strb	r2, [r3, #0]
                    if(j < (Pedro.height)/8){
2000068c:	183b      	adds	r3, r7, r0
2000068e:	781a      	ldrb	r2, [r3, #0]
20000690:	4b40      	ldr	r3, [pc, #256]	; (20000794 <draw+0x23c>)
20000692:	681b      	ldr	r3, [r3, #0]
20000694:	2b00      	cmp	r3, #0
20000696:	da00      	bge.n	2000069a <draw+0x142>
20000698:	3307      	adds	r3, #7
2000069a:	10db      	asrs	r3, r3, #3
2000069c:	429a      	cmp	r2, r3
2000069e:	da27      	bge.n	200006f0 <draw+0x198>
                        unsigned char tillagg = *(adress+Pedro.width);
200006a0:	4b3c      	ldr	r3, [pc, #240]	; (20000794 <draw+0x23c>)
200006a2:	685b      	ldr	r3, [r3, #4]
200006a4:	001a      	movs	r2, r3
200006a6:	693b      	ldr	r3, [r7, #16]
200006a8:	189a      	adds	r2, r3, r2
200006aa:	210f      	movs	r1, #15
200006ac:	187b      	adds	r3, r7, r1
200006ae:	7812      	ldrb	r2, [r2, #0]
200006b0:	701a      	strb	r2, [r3, #0]
                        tillagg &= (0xFF>>(8-shift));		//nollst√§ller √∂verblivna bitar som ej ing√•r i bildf√∂rskjutningen
200006b2:	697b      	ldr	r3, [r7, #20]
200006b4:	2208      	movs	r2, #8
200006b6:	1ad3      	subs	r3, r2, r3
200006b8:	22ff      	movs	r2, #255	; 0xff
200006ba:	411a      	asrs	r2, r3
200006bc:	0013      	movs	r3, r2
200006be:	b25b      	sxtb	r3, r3
200006c0:	0008      	movs	r0, r1
200006c2:	183a      	adds	r2, r7, r0
200006c4:	7812      	ldrb	r2, [r2, #0]
200006c6:	b252      	sxtb	r2, r2
200006c8:	4013      	ands	r3, r2
200006ca:	b25a      	sxtb	r2, r3
200006cc:	183b      	adds	r3, r7, r0
200006ce:	701a      	strb	r2, [r3, #0]
                        tillagg = tillagg<<(8-shift);
200006d0:	183b      	adds	r3, r7, r0
200006d2:	781a      	ldrb	r2, [r3, #0]
200006d4:	697b      	ldr	r3, [r7, #20]
200006d6:	2108      	movs	r1, #8
200006d8:	1acb      	subs	r3, r1, r3
200006da:	409a      	lsls	r2, r3
200006dc:	183b      	adds	r3, r7, r0
200006de:	701a      	strb	r2, [r3, #0]
                        byte |= tillagg;
200006e0:	221d      	movs	r2, #29
200006e2:	18bb      	adds	r3, r7, r2
200006e4:	18b9      	adds	r1, r7, r2
200006e6:	183a      	adds	r2, r7, r0
200006e8:	7809      	ldrb	r1, [r1, #0]
200006ea:	7812      	ldrb	r2, [r2, #0]
200006ec:	430a      	orrs	r2, r1
200006ee:	701a      	strb	r2, [r3, #0]
                    }
                    if(j == (Pedro.height)/8){
200006f0:	231e      	movs	r3, #30
200006f2:	18fb      	adds	r3, r7, r3
200006f4:	781a      	ldrb	r2, [r3, #0]
200006f6:	4b27      	ldr	r3, [pc, #156]	; (20000794 <draw+0x23c>)
200006f8:	681b      	ldr	r3, [r3, #0]
200006fa:	2b00      	cmp	r3, #0
200006fc:	da00      	bge.n	20000700 <draw+0x1a8>
200006fe:	3307      	adds	r3, #7
20000700:	10db      	asrs	r3, r3, #3
20000702:	429a      	cmp	r2, r3
20000704:	d119      	bne.n	2000073a <draw+0x1e2>
                        byte |= backBuffer[64+(Pedro.posx)+i][7-(Pedro.posy)/8];
20000706:	4b23      	ldr	r3, [pc, #140]	; (20000794 <draw+0x23c>)
20000708:	689b      	ldr	r3, [r3, #8]
2000070a:	3340      	adds	r3, #64	; 0x40
2000070c:	001a      	movs	r2, r3
2000070e:	231f      	movs	r3, #31
20000710:	18fb      	adds	r3, r7, r3
20000712:	781b      	ldrb	r3, [r3, #0]
20000714:	18d2      	adds	r2, r2, r3
20000716:	4b1f      	ldr	r3, [pc, #124]	; (20000794 <draw+0x23c>)
20000718:	68db      	ldr	r3, [r3, #12]
2000071a:	2b00      	cmp	r3, #0
2000071c:	da00      	bge.n	20000720 <draw+0x1c8>
2000071e:	3307      	adds	r3, #7
20000720:	10db      	asrs	r3, r3, #3
20000722:	425b      	negs	r3, r3
20000724:	3307      	adds	r3, #7
20000726:	491d      	ldr	r1, [pc, #116]	; (2000079c <draw+0x244>)
20000728:	00d2      	lsls	r2, r2, #3
2000072a:	188a      	adds	r2, r1, r2
2000072c:	5cd1      	ldrb	r1, [r2, r3]
2000072e:	221d      	movs	r2, #29
20000730:	18bb      	adds	r3, r7, r2
20000732:	18ba      	adds	r2, r7, r2
20000734:	7812      	ldrb	r2, [r2, #0]
20000736:	430a      	orrs	r2, r1
20000738:	701a      	strb	r2, [r3, #0]
                    }
                        graphic_write_data(byte, B_CS1);
2000073a:	231d      	movs	r3, #29
2000073c:	18fb      	adds	r3, r7, r3
2000073e:	781b      	ldrb	r3, [r3, #0]
20000740:	2108      	movs	r1, #8
20000742:	0018      	movs	r0, r3
20000744:	f000 fd96 	bl	20001274 <graphic_write_data>
            for(i = 0; i < Pedro.width; i++) {
20000748:	211f      	movs	r1, #31
2000074a:	187b      	adds	r3, r7, r1
2000074c:	781a      	ldrb	r2, [r3, #0]
2000074e:	187b      	adds	r3, r7, r1
20000750:	3201      	adds	r2, #1
20000752:	701a      	strb	r2, [r3, #0]
20000754:	231f      	movs	r3, #31
20000756:	18fb      	adds	r3, r7, r3
20000758:	781a      	ldrb	r2, [r3, #0]
2000075a:	4b0e      	ldr	r3, [pc, #56]	; (20000794 <draw+0x23c>)
2000075c:	685b      	ldr	r3, [r3, #4]
2000075e:	429a      	cmp	r2, r3
20000760:	da00      	bge.n	20000764 <draw+0x20c>
20000762:	e753      	b.n	2000060c <draw+0xb4>
    for(j = 0; j < ((Pedro.height)/8)+1; j++) {
20000764:	211e      	movs	r1, #30
20000766:	187b      	adds	r3, r7, r1
20000768:	781a      	ldrb	r2, [r3, #0]
2000076a:	187b      	adds	r3, r7, r1
2000076c:	3201      	adds	r2, #1
2000076e:	701a      	strb	r2, [r3, #0]
20000770:	231e      	movs	r3, #30
20000772:	18fb      	adds	r3, r7, r3
20000774:	781a      	ldrb	r2, [r3, #0]
20000776:	4b07      	ldr	r3, [pc, #28]	; (20000794 <draw+0x23c>)
20000778:	681b      	ldr	r3, [r3, #0]
2000077a:	2b00      	cmp	r3, #0
2000077c:	da00      	bge.n	20000780 <draw+0x228>
2000077e:	3307      	adds	r3, #7
20000780:	10db      	asrs	r3, r3, #3
20000782:	3301      	adds	r3, #1
20000784:	429a      	cmp	r2, r3
20000786:	da00      	bge.n	2000078a <draw+0x232>
20000788:	e702      	b.n	20000590 <draw+0x38>
                }
            }
        }
    }
}
2000078a:	46c0      	nop			; (mov r8, r8)
2000078c:	46bd      	mov	sp, r7
2000078e:	b009      	add	sp, #36	; 0x24
20000790:	bd90      	pop	{r4, r7, pc}
20000792:	46c0      	nop			; (mov r8, r8)
20000794:	200036f0 	strdcs	r3, [r0], -r0
20000798:	80000007 	andhi	r0, r0, r7
2000079c:	20002dac 	andcs	r2, r0, ip, lsr #27

200007a0 <oldDraw>:

void oldDraw ()
{
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
	unsigned char i, j;
	 unsigned char* man = Pedro.sprite;
200007a6:	4b2f      	ldr	r3, [pc, #188]	; (20000864 <oldDraw+0xc4>)
200007a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200007aa:	603b      	str	r3, [r7, #0]
        for(j = 0; j < (Pedro.height)/8; j++) {
200007ac:	1dbb      	adds	r3, r7, #6
200007ae:	2200      	movs	r2, #0
200007b0:	701a      	strb	r2, [r3, #0]
200007b2:	e049      	b.n	20000848 <oldDraw+0xa8>
            graphic_write_command(LCD_SET_PAGE | abs((((63-Pedro.posy-Pedro.height)/8)+j)), B_CS1);
200007b4:	4b2b      	ldr	r3, [pc, #172]	; (20000864 <oldDraw+0xc4>)
200007b6:	68db      	ldr	r3, [r3, #12]
200007b8:	223f      	movs	r2, #63	; 0x3f
200007ba:	1ad2      	subs	r2, r2, r3
200007bc:	4b29      	ldr	r3, [pc, #164]	; (20000864 <oldDraw+0xc4>)
200007be:	681b      	ldr	r3, [r3, #0]
200007c0:	1ad3      	subs	r3, r2, r3
200007c2:	d500      	bpl.n	200007c6 <oldDraw+0x26>
200007c4:	3307      	adds	r3, #7
200007c6:	10db      	asrs	r3, r3, #3
200007c8:	001a      	movs	r2, r3
200007ca:	1dbb      	adds	r3, r7, #6
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	18d3      	adds	r3, r2, r3
200007d0:	17da      	asrs	r2, r3, #31
200007d2:	189b      	adds	r3, r3, r2
200007d4:	4053      	eors	r3, r2
200007d6:	b25b      	sxtb	r3, r3
200007d8:	2248      	movs	r2, #72	; 0x48
200007da:	4252      	negs	r2, r2
200007dc:	4313      	orrs	r3, r2
200007de:	b25b      	sxtb	r3, r3
200007e0:	b2db      	uxtb	r3, r3
200007e2:	2108      	movs	r1, #8
200007e4:	0018      	movs	r0, r3
200007e6:	f000 fd25 	bl	20001234 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | Pedro.posx, B_CS1);
200007ea:	4b1e      	ldr	r3, [pc, #120]	; (20000864 <oldDraw+0xc4>)
200007ec:	689b      	ldr	r3, [r3, #8]
200007ee:	b25b      	sxtb	r3, r3
200007f0:	2240      	movs	r2, #64	; 0x40
200007f2:	4313      	orrs	r3, r2
200007f4:	b25b      	sxtb	r3, r3
200007f6:	b2db      	uxtb	r3, r3
200007f8:	2108      	movs	r1, #8
200007fa:	0018      	movs	r0, r3
200007fc:	f000 fd1a 	bl	20001234 <graphic_write_command>
            for(i = 0; i < Pedro.width; i++) {
20000800:	1dfb      	adds	r3, r7, #7
20000802:	2200      	movs	r2, #0
20000804:	701a      	strb	r2, [r3, #0]
20000806:	e014      	b.n	20000832 <oldDraw+0x92>
                graphic_write_data(*(man+(j*Pedro.width)+i), B_CS1);
20000808:	1dbb      	adds	r3, r7, #6
2000080a:	781a      	ldrb	r2, [r3, #0]
2000080c:	4b15      	ldr	r3, [pc, #84]	; (20000864 <oldDraw+0xc4>)
2000080e:	685b      	ldr	r3, [r3, #4]
20000810:	4353      	muls	r3, r2
20000812:	001a      	movs	r2, r3
20000814:	1dfb      	adds	r3, r7, #7
20000816:	781b      	ldrb	r3, [r3, #0]
20000818:	18d3      	adds	r3, r2, r3
2000081a:	683a      	ldr	r2, [r7, #0]
2000081c:	18d3      	adds	r3, r2, r3
2000081e:	781b      	ldrb	r3, [r3, #0]
20000820:	2108      	movs	r1, #8
20000822:	0018      	movs	r0, r3
20000824:	f000 fd26 	bl	20001274 <graphic_write_data>
            for(i = 0; i < Pedro.width; i++) {
20000828:	1dfb      	adds	r3, r7, #7
2000082a:	781a      	ldrb	r2, [r3, #0]
2000082c:	1dfb      	adds	r3, r7, #7
2000082e:	3201      	adds	r2, #1
20000830:	701a      	strb	r2, [r3, #0]
20000832:	1dfb      	adds	r3, r7, #7
20000834:	781a      	ldrb	r2, [r3, #0]
20000836:	4b0b      	ldr	r3, [pc, #44]	; (20000864 <oldDraw+0xc4>)
20000838:	685b      	ldr	r3, [r3, #4]
2000083a:	429a      	cmp	r2, r3
2000083c:	dbe4      	blt.n	20000808 <oldDraw+0x68>
        for(j = 0; j < (Pedro.height)/8; j++) {
2000083e:	1dbb      	adds	r3, r7, #6
20000840:	781a      	ldrb	r2, [r3, #0]
20000842:	1dbb      	adds	r3, r7, #6
20000844:	3201      	adds	r2, #1
20000846:	701a      	strb	r2, [r3, #0]
20000848:	1dbb      	adds	r3, r7, #6
2000084a:	781a      	ldrb	r2, [r3, #0]
2000084c:	4b05      	ldr	r3, [pc, #20]	; (20000864 <oldDraw+0xc4>)
2000084e:	681b      	ldr	r3, [r3, #0]
20000850:	2b00      	cmp	r3, #0
20000852:	da00      	bge.n	20000856 <oldDraw+0xb6>
20000854:	3307      	adds	r3, #7
20000856:	10db      	asrs	r3, r3, #3
20000858:	429a      	cmp	r2, r3
2000085a:	dbab      	blt.n	200007b4 <oldDraw+0x14>
            }
        }
}
2000085c:	46c0      	nop			; (mov r8, r8)
2000085e:	46bd      	mov	sp, r7
20000860:	b002      	add	sp, #8
20000862:	bd80      	pop	{r7, pc}
20000864:	200036f0 	strdcs	r3, [r0], -r0

20000868 <abs>:

int abs(int x){
20000868:	b580      	push	{r7, lr}
2000086a:	b082      	sub	sp, #8
2000086c:	af00      	add	r7, sp, #0
2000086e:	6078      	str	r0, [r7, #4]
    if(x >= 0){
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	2b00      	cmp	r3, #0
20000874:	db01      	blt.n	2000087a <abs+0x12>
        return x;
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	e000      	b.n	2000087c <abs+0x14>
    }
    else {
        return 7;
2000087a:	2307      	movs	r3, #7
    }
}
2000087c:	0018      	movs	r0, r3
2000087e:	46bd      	mov	sp, r7
20000880:	b002      	add	sp, #8
20000882:	bd80      	pop	{r7, pc}

20000884 <touchesPepper>:

char touchesPepper(){
20000884:	b580      	push	{r7, lr}
20000886:	b084      	sub	sp, #16
20000888:	af00      	add	r7, sp, #0
    //kolla nedre h√∂rnen (om Pedro bredare √§n 16px √§ven i mitten) f√∂rst, om pixeln √§r 1 -> Pedro.touches = 1 innan
    //jfr pedrobyte & backbufferbyte
	
	unsigned int pepperStripe = 0;
2000088a:	2300      	movs	r3, #0
2000088c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
2000088e:	2300      	movs	r3, #0
20000890:	60bb      	str	r3, [r7, #8]
20000892:	e044      	b.n	2000091e <touchesPepper+0x9a>
		char part = backBuffer[64+(Pedro.posx)+i][7-(Pedro.posy)/8];
20000894:	4b2b      	ldr	r3, [pc, #172]	; (20000944 <touchesPepper+0xc0>)
20000896:	689b      	ldr	r3, [r3, #8]
20000898:	3340      	adds	r3, #64	; 0x40
2000089a:	001a      	movs	r2, r3
2000089c:	68bb      	ldr	r3, [r7, #8]
2000089e:	18d1      	adds	r1, r2, r3
200008a0:	4b28      	ldr	r3, [pc, #160]	; (20000944 <touchesPepper+0xc0>)
200008a2:	68db      	ldr	r3, [r3, #12]
200008a4:	2b00      	cmp	r3, #0
200008a6:	da00      	bge.n	200008aa <touchesPepper+0x26>
200008a8:	3307      	adds	r3, #7
200008aa:	10db      	asrs	r3, r3, #3
200008ac:	425b      	negs	r3, r3
200008ae:	1dda      	adds	r2, r3, #7
200008b0:	1cfb      	adds	r3, r7, #3
200008b2:	4825      	ldr	r0, [pc, #148]	; (20000948 <touchesPepper+0xc4>)
200008b4:	00c9      	lsls	r1, r1, #3
200008b6:	1841      	adds	r1, r0, r1
200008b8:	5c8a      	ldrb	r2, [r1, r2]
200008ba:	701a      	strb	r2, [r3, #0]
		char mask = 1<<(7-(Pedro.posy%8));
200008bc:	4b21      	ldr	r3, [pc, #132]	; (20000944 <touchesPepper+0xc0>)
200008be:	68db      	ldr	r3, [r3, #12]
200008c0:	4a22      	ldr	r2, [pc, #136]	; (2000094c <touchesPepper+0xc8>)
200008c2:	4013      	ands	r3, r2
200008c4:	d504      	bpl.n	200008d0 <touchesPepper+0x4c>
200008c6:	3b01      	subs	r3, #1
200008c8:	2208      	movs	r2, #8
200008ca:	4252      	negs	r2, r2
200008cc:	4313      	orrs	r3, r2
200008ce:	3301      	adds	r3, #1
200008d0:	001a      	movs	r2, r3
200008d2:	2307      	movs	r3, #7
200008d4:	1a9b      	subs	r3, r3, r2
200008d6:	2201      	movs	r2, #1
200008d8:	409a      	lsls	r2, r3
200008da:	1cbb      	adds	r3, r7, #2
200008dc:	701a      	strb	r2, [r3, #0]
		part &= mask;
200008de:	1cfb      	adds	r3, r7, #3
200008e0:	1cfa      	adds	r2, r7, #3
200008e2:	1cb9      	adds	r1, r7, #2
200008e4:	7812      	ldrb	r2, [r2, #0]
200008e6:	7809      	ldrb	r1, [r1, #0]
200008e8:	400a      	ands	r2, r1
200008ea:	701a      	strb	r2, [r3, #0]
		pepperStripe |= (part<<(24-i+(Pedro.posy%8)));
200008ec:	1cfb      	adds	r3, r7, #3
200008ee:	781a      	ldrb	r2, [r3, #0]
200008f0:	68bb      	ldr	r3, [r7, #8]
200008f2:	2118      	movs	r1, #24
200008f4:	1ac9      	subs	r1, r1, r3
200008f6:	4b13      	ldr	r3, [pc, #76]	; (20000944 <touchesPepper+0xc0>)
200008f8:	68db      	ldr	r3, [r3, #12]
200008fa:	4814      	ldr	r0, [pc, #80]	; (2000094c <touchesPepper+0xc8>)
200008fc:	4003      	ands	r3, r0
200008fe:	d504      	bpl.n	2000090a <touchesPepper+0x86>
20000900:	3b01      	subs	r3, #1
20000902:	2008      	movs	r0, #8
20000904:	4240      	negs	r0, r0
20000906:	4303      	orrs	r3, r0
20000908:	3301      	adds	r3, #1
2000090a:	18cb      	adds	r3, r1, r3
2000090c:	409a      	lsls	r2, r3
2000090e:	0013      	movs	r3, r2
20000910:	001a      	movs	r2, r3
20000912:	68fb      	ldr	r3, [r7, #12]
20000914:	4313      	orrs	r3, r2
20000916:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
20000918:	68bb      	ldr	r3, [r7, #8]
2000091a:	3301      	adds	r3, #1
2000091c:	60bb      	str	r3, [r7, #8]
2000091e:	68bb      	ldr	r3, [r7, #8]
20000920:	2b13      	cmp	r3, #19
20000922:	ddb7      	ble.n	20000894 <touchesPepper+0x10>
	}	
	int bottomRow = getBottomRow(0);
20000924:	2000      	movs	r0, #0
20000926:	f000 f813 	bl	20000950 <getBottomRow>
2000092a:	0003      	movs	r3, r0
2000092c:	607b      	str	r3, [r7, #4]
	if(bottomRow & pepperStripe){
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	68fa      	ldr	r2, [r7, #12]
20000932:	4013      	ands	r3, r2
20000934:	d001      	beq.n	2000093a <touchesPepper+0xb6>
		return 1;
20000936:	2301      	movs	r3, #1
20000938:	e000      	b.n	2000093c <touchesPepper+0xb8>
	}
	return 0;
2000093a:	2300      	movs	r3, #0
	
}
2000093c:	0018      	movs	r0, r3
2000093e:	46bd      	mov	sp, r7
20000940:	b004      	add	sp, #16
20000942:	bd80      	pop	{r7, pc}
20000944:	200036f0 	strdcs	r3, [r0], -r0
20000948:	20002dac 	andcs	r2, r0, ip, lsr #27
2000094c:	80000007 	andhi	r0, r0, r7

20000950 <getBottomRow>:

int getBottomRow(int posyposy){
20000950:	b580      	push	{r7, lr}
20000952:	b088      	sub	sp, #32
20000954:	af00      	add	r7, sp, #0
20000956:	6078      	str	r0, [r7, #4]
	unsigned char* man = Pedro.sprite;
20000958:	4b28      	ldr	r3, [pc, #160]	; (200009fc <getBottomRow+0xac>)
2000095a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000095c:	617b      	str	r3, [r7, #20]
	unsigned char i;
	int s = 0;
2000095e:	2300      	movs	r3, #0
20000960:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
20000962:	231f      	movs	r3, #31
20000964:	18fb      	adds	r3, r7, r3
20000966:	2200      	movs	r2, #0
20000968:	701a      	strb	r2, [r3, #0]
2000096a:	e030      	b.n	200009ce <getBottomRow+0x7e>
		unsigned char take = *(man+(((Pedro.height)/8)-1)*(Pedro.width)+i);
2000096c:	4b23      	ldr	r3, [pc, #140]	; (200009fc <getBottomRow+0xac>)
2000096e:	681b      	ldr	r3, [r3, #0]
20000970:	2b00      	cmp	r3, #0
20000972:	da00      	bge.n	20000976 <getBottomRow+0x26>
20000974:	3307      	adds	r3, #7
20000976:	10db      	asrs	r3, r3, #3
20000978:	1e5a      	subs	r2, r3, #1
2000097a:	4b20      	ldr	r3, [pc, #128]	; (200009fc <getBottomRow+0xac>)
2000097c:	685b      	ldr	r3, [r3, #4]
2000097e:	4353      	muls	r3, r2
20000980:	001a      	movs	r2, r3
20000982:	211f      	movs	r1, #31
20000984:	187b      	adds	r3, r7, r1
20000986:	781b      	ldrb	r3, [r3, #0]
20000988:	18d3      	adds	r3, r2, r3
2000098a:	697a      	ldr	r2, [r7, #20]
2000098c:	18d2      	adds	r2, r2, r3
2000098e:	2013      	movs	r0, #19
20000990:	183b      	adds	r3, r7, r0
20000992:	7812      	ldrb	r2, [r2, #0]
20000994:	701a      	strb	r2, [r3, #0]
		int part = (int)take;
20000996:	183b      	adds	r3, r7, r0
20000998:	781b      	ldrb	r3, [r3, #0]
2000099a:	60fb      	str	r3, [r7, #12]
		part &= (1<<(7-posyposy));
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	2207      	movs	r2, #7
200009a0:	1ad3      	subs	r3, r2, r3
200009a2:	2201      	movs	r2, #1
200009a4:	409a      	lsls	r2, r3
200009a6:	68fb      	ldr	r3, [r7, #12]
200009a8:	4013      	ands	r3, r2
200009aa:	60fb      	str	r3, [r7, #12]
		s |= part<<(24-i+posyposy);
200009ac:	187b      	adds	r3, r7, r1
200009ae:	781b      	ldrb	r3, [r3, #0]
200009b0:	2218      	movs	r2, #24
200009b2:	1ad2      	subs	r2, r2, r3
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	18d3      	adds	r3, r2, r3
200009b8:	68fa      	ldr	r2, [r7, #12]
200009ba:	409a      	lsls	r2, r3
200009bc:	0013      	movs	r3, r2
200009be:	69ba      	ldr	r2, [r7, #24]
200009c0:	4313      	orrs	r3, r2
200009c2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
200009c4:	187b      	adds	r3, r7, r1
200009c6:	781a      	ldrb	r2, [r3, #0]
200009c8:	187b      	adds	r3, r7, r1
200009ca:	3201      	adds	r2, #1
200009cc:	701a      	strb	r2, [r3, #0]
200009ce:	231f      	movs	r3, #31
200009d0:	18fb      	adds	r3, r7, r3
200009d2:	781a      	ldrb	r2, [r3, #0]
200009d4:	4b09      	ldr	r3, [pc, #36]	; (200009fc <getBottomRow+0xac>)
200009d6:	685b      	ldr	r3, [r3, #4]
200009d8:	429a      	cmp	r2, r3
200009da:	dbc7      	blt.n	2000096c <getBottomRow+0x1c>
	}
	if((s & 0x03FFFFFF) == 0){
200009dc:	69bb      	ldr	r3, [r7, #24]
200009de:	019b      	lsls	r3, r3, #6
200009e0:	099b      	lsrs	r3, r3, #6
200009e2:	d106      	bne.n	200009f2 <getBottomRow+0xa2>
		return getBottomRow((posyposy+1));
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	3301      	adds	r3, #1
200009e8:	0018      	movs	r0, r3
200009ea:	f7ff ffb1 	bl	20000950 <getBottomRow>
200009ee:	0003      	movs	r3, r0
200009f0:	e000      	b.n	200009f4 <getBottomRow+0xa4>
	}
	return s;
200009f2:	69bb      	ldr	r3, [r7, #24]
}
200009f4:	0018      	movs	r0, r3
200009f6:	46bd      	mov	sp, r7
200009f8:	b008      	add	sp, #32
200009fa:	bd80      	pop	{r7, pc}
200009fc:	200036f0 	strdcs	r3, [r0], -r0

20000a00 <getDistance>:

int getDistance(){
20000a00:	b580      	push	{r7, lr}
20000a02:	af00      	add	r7, sp, #0
    return Pedro.distance;
20000a04:	4b02      	ldr	r3, [pc, #8]	; (20000a10 <getDistance+0x10>)
20000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
20000a08:	0018      	movs	r0, r3
20000a0a:	46bd      	mov	sp, r7
20000a0c:	bd80      	pop	{r7, pc}
20000a0e:	46c0      	nop			; (mov r8, r8)
20000a10:	200036f0 	strdcs	r3, [r0], -r0

20000a14 <getVelx>:
int getVelx(){
20000a14:	b5b0      	push	{r4, r5, r7, lr}
20000a16:	af00      	add	r7, sp, #0
    return (int)Pedro.velx;
20000a18:	4b05      	ldr	r3, [pc, #20]	; (20000a30 <getVelx+0x1c>)
20000a1a:	695c      	ldr	r4, [r3, #20]
20000a1c:	691b      	ldr	r3, [r3, #16]
20000a1e:	0018      	movs	r0, r3
20000a20:	0021      	movs	r1, r4
20000a22:	f002 f8bd 	bl	20002ba0 <__aeabi_d2iz>
20000a26:	0003      	movs	r3, r0
}
20000a28:	0018      	movs	r0, r3
20000a2a:	46bd      	mov	sp, r7
20000a2c:	bdb0      	pop	{r4, r5, r7, pc}
20000a2e:	46c0      	nop			; (mov r8, r8)
20000a30:	200036f0 	strdcs	r3, [r0], -r0

20000a34 <seedRng>:
#include "randomNum.h"

//typedef uint32_t rngword_t;

void seedRng(rngword_t* state, uint32_t seed) {
20000a34:	b580      	push	{r7, lr}
20000a36:	b084      	sub	sp, #16
20000a38:	af00      	add	r7, sp, #0
20000a3a:	6078      	str	r0, [r7, #4]
20000a3c:	6039      	str	r1, [r7, #0]
	*state = seed;
20000a3e:	687b      	ldr	r3, [r7, #4]
20000a40:	683a      	ldr	r2, [r7, #0]
20000a42:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
20000a44:	2300      	movs	r3, #0
20000a46:	60fb      	str	r3, [r7, #12]
20000a48:	e006      	b.n	20000a58 <seedRng+0x24>
		nextRnd(state);
20000a4a:	687b      	ldr	r3, [r7, #4]
20000a4c:	0018      	movs	r0, r3
20000a4e:	f000 f80a 	bl	20000a66 <nextRnd>
	for(int i = 0; i < 10; i++) {
20000a52:	68fb      	ldr	r3, [r7, #12]
20000a54:	3301      	adds	r3, #1
20000a56:	60fb      	str	r3, [r7, #12]
20000a58:	68fb      	ldr	r3, [r7, #12]
20000a5a:	2b09      	cmp	r3, #9
20000a5c:	ddf5      	ble.n	20000a4a <seedRng+0x16>
	}
}
20000a5e:	46c0      	nop			; (mov r8, r8)
20000a60:	46bd      	mov	sp, r7
20000a62:	b004      	add	sp, #16
20000a64:	bd80      	pop	{r7, pc}

20000a66 <nextRnd>:

rngword_t nextRnd(rngword_t* state) {
20000a66:	b580      	push	{r7, lr}
20000a68:	b084      	sub	sp, #16
20000a6a:	af00      	add	r7, sp, #0
20000a6c:	6078      	str	r0, [r7, #4]
	*state = *state * 0xDEADBEAD + 0x1;
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	6819      	ldr	r1, [r3, #0]
20000a72:	000b      	movs	r3, r1
20000a74:	00db      	lsls	r3, r3, #3
20000a76:	1a5b      	subs	r3, r3, r1
20000a78:	011a      	lsls	r2, r3, #4
20000a7a:	1ad2      	subs	r2, r2, r3
20000a7c:	0092      	lsls	r2, r2, #2
20000a7e:	1a52      	subs	r2, r2, r1
20000a80:	0113      	lsls	r3, r2, #4
20000a82:	1a9b      	subs	r3, r3, r2
20000a84:	00db      	lsls	r3, r3, #3
20000a86:	1a5b      	subs	r3, r3, r1
20000a88:	015b      	lsls	r3, r3, #5
20000a8a:	1a5b      	subs	r3, r3, r1
20000a8c:	00da      	lsls	r2, r3, #3
20000a8e:	189b      	adds	r3, r3, r2
20000a90:	01da      	lsls	r2, r3, #7
20000a92:	189b      	adds	r3, r3, r2
20000a94:	005b      	lsls	r3, r3, #1
20000a96:	1a5b      	subs	r3, r3, r1
20000a98:	1c5a      	adds	r2, r3, #1
20000a9a:	687b      	ldr	r3, [r7, #4]
20000a9c:	601a      	str	r2, [r3, #0]
	rngword_t x = *state;
20000a9e:	687b      	ldr	r3, [r7, #4]
20000aa0:	681b      	ldr	r3, [r3, #0]
20000aa2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
20000aa4:	2300      	movs	r3, #0
20000aa6:	60bb      	str	r3, [r7, #8]
20000aa8:	e00e      	b.n	20000ac8 <nextRnd+0x62>
		x ^= (x >> 9) ^ (x >> 17);
20000aaa:	68fb      	ldr	r3, [r7, #12]
20000aac:	0a5a      	lsrs	r2, r3, #9
20000aae:	68fb      	ldr	r3, [r7, #12]
20000ab0:	0c5b      	lsrs	r3, r3, #17
20000ab2:	4053      	eors	r3, r2
20000ab4:	68fa      	ldr	r2, [r7, #12]
20000ab6:	4053      	eors	r3, r2
20000ab8:	60fb      	str	r3, [r7, #12]
		x *= 23456789;
20000aba:	68fb      	ldr	r3, [r7, #12]
20000abc:	4a06      	ldr	r2, [pc, #24]	; (20000ad8 <nextRnd+0x72>)
20000abe:	4353      	muls	r3, r2
20000ac0:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
20000ac2:	68bb      	ldr	r3, [r7, #8]
20000ac4:	3301      	adds	r3, #1
20000ac6:	60bb      	str	r3, [r7, #8]
20000ac8:	68bb      	ldr	r3, [r7, #8]
20000aca:	2b02      	cmp	r3, #2
20000acc:	dded      	ble.n	20000aaa <nextRnd+0x44>
	}
	return x;
20000ace:	68fb      	ldr	r3, [r7, #12]
20000ad0:	0018      	movs	r0, r3
20000ad2:	46bd      	mov	sp, r7
20000ad4:	b004      	add	sp, #16
20000ad6:	bd80      	pop	{r7, pc}
20000ad8:	0165ec15 	cmneq	r5, r5, lsl ip

20000adc <kbdActivate>:
#include "keyfuncs.h"
#include "gpio.h"

void kbdActivate(unsigned int row){
20000adc:	b580      	push	{r7, lr}
20000ade:	b082      	sub	sp, #8
20000ae0:	af00      	add	r7, sp, #0
20000ae2:	6078      	str	r0, [r7, #4]
    switch(row){
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	2b02      	cmp	r3, #2
20000ae8:	d00c      	beq.n	20000b04 <kbdActivate+0x28>
20000aea:	d802      	bhi.n	20000af2 <kbdActivate+0x16>
20000aec:	2b01      	cmp	r3, #1
20000aee:	d005      	beq.n	20000afc <kbdActivate+0x20>
20000af0:	e014      	b.n	20000b1c <kbdActivate+0x40>
20000af2:	2b03      	cmp	r3, #3
20000af4:	d00a      	beq.n	20000b0c <kbdActivate+0x30>
20000af6:	2b04      	cmp	r3, #4
20000af8:	d00c      	beq.n	20000b14 <kbdActivate+0x38>
20000afa:	e00f      	b.n	20000b1c <kbdActivate+0x40>
        case 1: 
            GPIO_D->odrHigh = 0x10;
20000afc:	4b0b      	ldr	r3, [pc, #44]	; (20000b2c <kbdActivate+0x50>)
20000afe:	2210      	movs	r2, #16
20000b00:	755a      	strb	r2, [r3, #21]
            break;
20000b02:	e00e      	b.n	20000b22 <kbdActivate+0x46>
        case 2: 
            GPIO_D->odrHigh = 0x20;
20000b04:	4b09      	ldr	r3, [pc, #36]	; (20000b2c <kbdActivate+0x50>)
20000b06:	2220      	movs	r2, #32
20000b08:	755a      	strb	r2, [r3, #21]
            break;
20000b0a:	e00a      	b.n	20000b22 <kbdActivate+0x46>
        case 3: 
            GPIO_D->odrHigh = 0x40;
20000b0c:	4b07      	ldr	r3, [pc, #28]	; (20000b2c <kbdActivate+0x50>)
20000b0e:	2240      	movs	r2, #64	; 0x40
20000b10:	755a      	strb	r2, [r3, #21]
            break;
20000b12:	e006      	b.n	20000b22 <kbdActivate+0x46>
        case 4: 
            GPIO_D->odrHigh = 0x80;
20000b14:	4b05      	ldr	r3, [pc, #20]	; (20000b2c <kbdActivate+0x50>)
20000b16:	2280      	movs	r2, #128	; 0x80
20000b18:	755a      	strb	r2, [r3, #21]
            break;
20000b1a:	e002      	b.n	20000b22 <kbdActivate+0x46>
        default: 
            GPIO_D->odrHigh = 0;
20000b1c:	4b03      	ldr	r3, [pc, #12]	; (20000b2c <kbdActivate+0x50>)
20000b1e:	2200      	movs	r2, #0
20000b20:	755a      	strb	r2, [r3, #21]
    }
}
20000b22:	46c0      	nop			; (mov r8, r8)
20000b24:	46bd      	mov	sp, r7
20000b26:	b002      	add	sp, #8
20000b28:	bd80      	pop	{r7, pc}
20000b2a:	46c0      	nop			; (mov r8, r8)
20000b2c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000b30 <kbdGetCol>:

int kbdGetCol(){                    
20000b30:	b580      	push	{r7, lr}
20000b32:	af00      	add	r7, sp, #0
    if(GPIO_D->idrHigh & 8) 
20000b34:	4b13      	ldr	r3, [pc, #76]	; (20000b84 <kbdGetCol+0x54>)
20000b36:	7c5b      	ldrb	r3, [r3, #17]
20000b38:	b2db      	uxtb	r3, r3
20000b3a:	001a      	movs	r2, r3
20000b3c:	2308      	movs	r3, #8
20000b3e:	4013      	ands	r3, r2
20000b40:	d001      	beq.n	20000b46 <kbdGetCol+0x16>
        return 4;
20000b42:	2304      	movs	r3, #4
20000b44:	e01b      	b.n	20000b7e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 4) 
20000b46:	4b0f      	ldr	r3, [pc, #60]	; (20000b84 <kbdGetCol+0x54>)
20000b48:	7c5b      	ldrb	r3, [r3, #17]
20000b4a:	b2db      	uxtb	r3, r3
20000b4c:	001a      	movs	r2, r3
20000b4e:	2304      	movs	r3, #4
20000b50:	4013      	ands	r3, r2
20000b52:	d001      	beq.n	20000b58 <kbdGetCol+0x28>
        return 3;
20000b54:	2303      	movs	r3, #3
20000b56:	e012      	b.n	20000b7e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 2) 
20000b58:	4b0a      	ldr	r3, [pc, #40]	; (20000b84 <kbdGetCol+0x54>)
20000b5a:	7c5b      	ldrb	r3, [r3, #17]
20000b5c:	b2db      	uxtb	r3, r3
20000b5e:	001a      	movs	r2, r3
20000b60:	2302      	movs	r3, #2
20000b62:	4013      	ands	r3, r2
20000b64:	d001      	beq.n	20000b6a <kbdGetCol+0x3a>
        return 2;
20000b66:	2302      	movs	r3, #2
20000b68:	e009      	b.n	20000b7e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 1) 
20000b6a:	4b06      	ldr	r3, [pc, #24]	; (20000b84 <kbdGetCol+0x54>)
20000b6c:	7c5b      	ldrb	r3, [r3, #17]
20000b6e:	b2db      	uxtb	r3, r3
20000b70:	001a      	movs	r2, r3
20000b72:	2301      	movs	r3, #1
20000b74:	4013      	ands	r3, r2
20000b76:	d001      	beq.n	20000b7c <kbdGetCol+0x4c>
        return 1;
20000b78:	2301      	movs	r3, #1
20000b7a:	e000      	b.n	20000b7e <kbdGetCol+0x4e>
    return 0;
20000b7c:	2300      	movs	r3, #0
}
20000b7e:	0018      	movs	r0, r3
20000b80:	46bd      	mov	sp, r7
20000b82:	bd80      	pop	{r7, pc}
20000b84:	40020c00 	andmi	r0, r2, r0, lsl #24

20000b88 <isUpKey>:


char isUpKey(){
20000b88:	b580      	push	{r7, lr}
20000b8a:	af00      	add	r7, sp, #0
	kbdActivate(3);	//row3
20000b8c:	2003      	movs	r0, #3
20000b8e:	f7ff ffa5 	bl	20000adc <kbdActivate>
	//kbdActivate(4);         //power off kbd-rows
	if(kbdGetCol() == 3){
20000b92:	f7ff ffcd 	bl	20000b30 <kbdGetCol>
20000b96:	0003      	movs	r3, r0
20000b98:	2b03      	cmp	r3, #3
20000b9a:	d104      	bne.n	20000ba6 <isUpKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000b9c:	2000      	movs	r0, #0
20000b9e:	f7ff ff9d 	bl	20000adc <kbdActivate>
		return 1;
20000ba2:	2301      	movs	r3, #1
20000ba4:	e003      	b.n	20000bae <isUpKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000ba6:	2000      	movs	r0, #0
20000ba8:	f7ff ff98 	bl	20000adc <kbdActivate>
	return 0;
20000bac:	2300      	movs	r3, #0
}
20000bae:	0018      	movs	r0, r3
20000bb0:	46bd      	mov	sp, r7
20000bb2:	bd80      	pop	{r7, pc}

20000bb4 <isRightKey>:
char isRightKey(){
20000bb4:	b580      	push	{r7, lr}
20000bb6:	af00      	add	r7, sp, #0
	kbdActivate(4);
20000bb8:	2004      	movs	r0, #4
20000bba:	f7ff ff8f 	bl	20000adc <kbdActivate>
	if(kbdGetCol() == 4){
20000bbe:	f7ff ffb7 	bl	20000b30 <kbdGetCol>
20000bc2:	0003      	movs	r3, r0
20000bc4:	2b04      	cmp	r3, #4
20000bc6:	d104      	bne.n	20000bd2 <isRightKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000bc8:	2000      	movs	r0, #0
20000bca:	f7ff ff87 	bl	20000adc <kbdActivate>
		return 1;
20000bce:	2301      	movs	r3, #1
20000bd0:	e003      	b.n	20000bda <isRightKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000bd2:	2000      	movs	r0, #0
20000bd4:	f7ff ff82 	bl	20000adc <kbdActivate>
    return 0;
20000bd8:	2300      	movs	r3, #0
	
}
20000bda:	0018      	movs	r0, r3
20000bdc:	46bd      	mov	sp, r7
20000bde:	bd80      	pop	{r7, pc}

20000be0 <isLeftKey>:
char isLeftKey(){
20000be0:	b580      	push	{r7, lr}
20000be2:	af00      	add	r7, sp, #0
	kbdActivate(4);
20000be4:	2004      	movs	r0, #4
20000be6:	f7ff ff79 	bl	20000adc <kbdActivate>
	if(kbdGetCol() == 2){
20000bea:	f7ff ffa1 	bl	20000b30 <kbdGetCol>
20000bee:	0003      	movs	r3, r0
20000bf0:	2b02      	cmp	r3, #2
20000bf2:	d104      	bne.n	20000bfe <isLeftKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000bf4:	2000      	movs	r0, #0
20000bf6:	f7ff ff71 	bl	20000adc <kbdActivate>
		return 1;
20000bfa:	2301      	movs	r3, #1
20000bfc:	e003      	b.n	20000c06 <isLeftKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000bfe:	2000      	movs	r0, #0
20000c00:	f7ff ff6c 	bl	20000adc <kbdActivate>
	return 0;
20000c04:	2300      	movs	r3, #0
	
}
20000c06:	0018      	movs	r0, r3
20000c08:	46bd      	mov	sp, r7
20000c0a:	bd80      	pop	{r7, pc}

20000c0c <isResetKey>:


char isResetKey(){
20000c0c:	b580      	push	{r7, lr}
20000c0e:	af00      	add	r7, sp, #0
    kbdActivate(1);
20000c10:	2001      	movs	r0, #1
20000c12:	f7ff ff63 	bl	20000adc <kbdActivate>
	if(kbdGetCol() == 1){
20000c16:	f7ff ff8b 	bl	20000b30 <kbdGetCol>
20000c1a:	0003      	movs	r3, r0
20000c1c:	2b01      	cmp	r3, #1
20000c1e:	d104      	bne.n	20000c2a <isResetKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000c20:	2000      	movs	r0, #0
20000c22:	f7ff ff5b 	bl	20000adc <kbdActivate>
		return 1;
20000c26:	2301      	movs	r3, #1
20000c28:	e003      	b.n	20000c32 <isResetKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000c2a:	2000      	movs	r0, #0
20000c2c:	f7ff ff56 	bl	20000adc <kbdActivate>
	return 0;
20000c30:	2300      	movs	r3, #0
}
20000c32:	0018      	movs	r0, r3
20000c34:	46bd      	mov	sp, r7
20000c36:	bd80      	pop	{r7, pc}

20000c38 <keyb>:



unsigned char keyb(){
20000c38:	b590      	push	{r4, r7, lr}
20000c3a:	b087      	sub	sp, #28
20000c3c:	af00      	add	r7, sp, #0
    char key[] = {1,2,3,10,4,5,6,11,7,8,9,12,14,0,15,13};
20000c3e:	003b      	movs	r3, r7
20000c40:	4a17      	ldr	r2, [pc, #92]	; (20000ca0 <keyb+0x68>)
20000c42:	ca13      	ldmia	r2!, {r0, r1, r4}
20000c44:	c313      	stmia	r3!, {r0, r1, r4}
20000c46:	6812      	ldr	r2, [r2, #0]
20000c48:	601a      	str	r2, [r3, #0]
    int row;
    int col = 0;
20000c4a:	2300      	movs	r3, #0
20000c4c:	613b      	str	r3, [r7, #16]
    
    for(row = 1; row <= 4; row++){
20000c4e:	2301      	movs	r3, #1
20000c50:	617b      	str	r3, [r7, #20]
20000c52:	e01c      	b.n	20000c8e <keyb+0x56>
        kbdActivate(row);           //power kbd-rows
20000c54:	697b      	ldr	r3, [r7, #20]
20000c56:	0018      	movs	r0, r3
20000c58:	f7ff ff40 	bl	20000adc <kbdActivate>
        if(col = kbdGetCol()){      //drain kbd-cols
20000c5c:	f7ff ff68 	bl	20000b30 <kbdGetCol>
20000c60:	0003      	movs	r3, r0
20000c62:	613b      	str	r3, [r7, #16]
20000c64:	693b      	ldr	r3, [r7, #16]
20000c66:	2b00      	cmp	r3, #0
20000c68:	d00e      	beq.n	20000c88 <keyb+0x50>
            kbdActivate(0);         //power off kbd-rows
20000c6a:	2000      	movs	r0, #0
20000c6c:	f7ff ff36 	bl	20000adc <kbdActivate>
            return (4*(row-1)+(col-1));
20000c70:	697b      	ldr	r3, [r7, #20]
20000c72:	3b01      	subs	r3, #1
20000c74:	b2db      	uxtb	r3, r3
20000c76:	009b      	lsls	r3, r3, #2
20000c78:	b2da      	uxtb	r2, r3
20000c7a:	693b      	ldr	r3, [r7, #16]
20000c7c:	b2db      	uxtb	r3, r3
20000c7e:	18d3      	adds	r3, r2, r3
20000c80:	b2db      	uxtb	r3, r3
20000c82:	3b01      	subs	r3, #1
20000c84:	b2db      	uxtb	r3, r3
20000c86:	e006      	b.n	20000c96 <keyb+0x5e>
    for(row = 1; row <= 4; row++){
20000c88:	697b      	ldr	r3, [r7, #20]
20000c8a:	3301      	adds	r3, #1
20000c8c:	617b      	str	r3, [r7, #20]
20000c8e:	697b      	ldr	r3, [r7, #20]
20000c90:	2b04      	cmp	r3, #4
20000c92:	dddf      	ble.n	20000c54 <keyb+0x1c>
        }
    }
    return 0xFF;
20000c94:	23ff      	movs	r3, #255	; 0xff
20000c96:	0018      	movs	r0, r3
20000c98:	46bd      	mov	sp, r7
20000c9a:	b007      	add	sp, #28
20000c9c:	bd90      	pop	{r4, r7, pc}
20000c9e:	46c0      	nop			; (mov r8, r8)
20000ca0:	20003770 	andcs	r3, r0, r0, ror r7

20000ca4 <gpioInit>:
uint32_t seed;

//#define USBDM
#define NONSIMULATOR

void gpioInit(){
20000ca4:	b580      	push	{r7, lr}
20000ca6:	af00      	add	r7, sp, #0
	
    GPIO_E->moder=0x55555555;		//------------------------------------------------------------------------------------------------
20000ca8:	4b10      	ldr	r3, [pc, #64]	; (20000cec <gpioInit+0x48>)
20000caa:	4a11      	ldr	r2, [pc, #68]	; (20000cf0 <gpioInit+0x4c>)
20000cac:	601a      	str	r2, [r3, #0]
    GPIO_D->moder = 0x55005555;
20000cae:	4b11      	ldr	r3, [pc, #68]	; (20000cf4 <gpioInit+0x50>)
20000cb0:	4a11      	ldr	r2, [pc, #68]	; (20000cf8 <gpioInit+0x54>)
20000cb2:	601a      	str	r2, [r3, #0]
    
	GPIO_D->otyper &= 0xFFFF00FF;
20000cb4:	4b0f      	ldr	r3, [pc, #60]	; (20000cf4 <gpioInit+0x50>)
20000cb6:	685a      	ldr	r2, [r3, #4]
20000cb8:	4b0e      	ldr	r3, [pc, #56]	; (20000cf4 <gpioInit+0x50>)
20000cba:	4910      	ldr	r1, [pc, #64]	; (20000cfc <gpioInit+0x58>)
20000cbc:	400a      	ands	r2, r1
20000cbe:	605a      	str	r2, [r3, #4]
	GPIO_D->otyper |= 0x00000F00;
20000cc0:	4b0c      	ldr	r3, [pc, #48]	; (20000cf4 <gpioInit+0x50>)
20000cc2:	685a      	ldr	r2, [r3, #4]
20000cc4:	4b0b      	ldr	r3, [pc, #44]	; (20000cf4 <gpioInit+0x50>)
20000cc6:	21f0      	movs	r1, #240	; 0xf0
20000cc8:	0109      	lsls	r1, r1, #4
20000cca:	430a      	orrs	r2, r1
20000ccc:	605a      	str	r2, [r3, #4]
	// S√§tter pinnar 4-0 till "pull-down"
	GPIO_D->pupdr &= 0x0000FFFF;
20000cce:	4b09      	ldr	r3, [pc, #36]	; (20000cf4 <gpioInit+0x50>)
20000cd0:	68da      	ldr	r2, [r3, #12]
20000cd2:	4b08      	ldr	r3, [pc, #32]	; (20000cf4 <gpioInit+0x50>)
20000cd4:	0412      	lsls	r2, r2, #16
20000cd6:	0c12      	lsrs	r2, r2, #16
20000cd8:	60da      	str	r2, [r3, #12]
	GPIO_D->pupdr |= 0xFFAA0000;
20000cda:	4b06      	ldr	r3, [pc, #24]	; (20000cf4 <gpioInit+0x50>)
20000cdc:	68da      	ldr	r2, [r3, #12]
20000cde:	4b05      	ldr	r3, [pc, #20]	; (20000cf4 <gpioInit+0x50>)
20000ce0:	4907      	ldr	r1, [pc, #28]	; (20000d00 <gpioInit+0x5c>)
20000ce2:	430a      	orrs	r2, r1
20000ce4:	60da      	str	r2, [r3, #12]

}
20000ce6:	46c0      	nop			; (mov r8, r8)
20000ce8:	46bd      	mov	sp, r7
20000cea:	bd80      	pop	{r7, pc}
20000cec:	40021000 	andmi	r1, r2, r0
20000cf0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000cf4:	40020c00 	andmi	r0, r2, r0, lsl #24
20000cf8:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000cfc:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000d00:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

20000d04 <init>:



void init(){
20000d04:	b580      	push	{r7, lr}
20000d06:	af00      	add	r7, sp, #0
        *((unsigned long*)0x40023844)|=0x4000;
        //*((unsigned long*)0xE000ED08)=0x2001C000;
        __asm volatile( "LDR R0,=0x08000208\n" "BLX R0\n ");
    #endif
	
    gpioInit();
20000d08:	f7ff ffcc 	bl	20000ca4 <gpioInit>
    
    ascii_init();
20000d0c:	f000 fd82 	bl	20001814 <ascii_init>
    
    graphic_initialize();
20000d10:	f000 f991 	bl	20001036 <graphic_initialize>
    
    seed = 1337;
20000d14:	4b08      	ldr	r3, [pc, #32]	; (20000d38 <init+0x34>)
20000d16:	4a09      	ldr	r2, [pc, #36]	; (20000d3c <init+0x38>)
20000d18:	601a      	str	r2, [r3, #0]
    seedRng(&seed, seed);
20000d1a:	4b07      	ldr	r3, [pc, #28]	; (20000d38 <init+0x34>)
20000d1c:	681a      	ldr	r2, [r3, #0]
20000d1e:	4b06      	ldr	r3, [pc, #24]	; (20000d38 <init+0x34>)
20000d20:	0011      	movs	r1, r2
20000d22:	0018      	movs	r0, r3
20000d24:	f7ff fe86 	bl	20000a34 <seedRng>

	clear_backBuffer();
20000d28:	f000 fae6 	bl	200012f8 <clear_backBuffer>
	graphic_draw_screen();
20000d2c:	f000 fb90 	bl	20001450 <graphic_draw_screen>

}
20000d30:	46c0      	nop			; (mov r8, r8)
20000d32:	46bd      	mov	sp, r7
20000d34:	bd80      	pop	{r7, pc}
20000d36:	46c0      	nop			; (mov r8, r8)
20000d38:	20002da8 	andcs	r2, r0, r8, lsr #27
20000d3c:	00000539 	andeq	r0, r0, r9, lsr r5

20000d40 <loop>:





void loop(){
20000d40:	b580      	push	{r7, lr}
20000d42:	af00      	add	r7, sp, #0
    //drawGround(64, 191);
	
	while(1){
		//
		//√§ndra Pedros properties
		if(getDistance() % 64 == 0 && getVelx < 0){
20000d44:	f7ff fe5c 	bl	20000a00 <getDistance>
			loadNewLevelSegmentLeft();
		}
		if(getDistance() % 64 == 0 && getVelx >= 0){
20000d48:	f7ff fe5a 	bl	20000a00 <getDistance>
20000d4c:	0003      	movs	r3, r0
20000d4e:	001a      	movs	r2, r3
20000d50:	233f      	movs	r3, #63	; 0x3f
20000d52:	4013      	ands	r3, r2
20000d54:	d101      	bne.n	20000d5a <loop+0x1a>
			loadNewLevelSegmentRight();
20000d56:	f000 f825 	bl	20000da4 <loadNewLevelSegmentRight>
		}
		
		move();			//flyttar hela sk√§rmen s√• det ser ut som att Pedro r√∂r sig
20000d5a:	f7ff f9d7 	bl	2000010c <move>
        
        if(getVelx() != 0){
20000d5e:	f7ff fe59 	bl	20000a14 <getVelx>
20000d62:	1e03      	subs	r3, r0, #0
20000d64:	d001      	beq.n	20000d6a <loop+0x2a>
            showDistance();
20000d66:	f000 f8c0 	bl	20000eea <showDistance>
        }
        
		//win/loss
        
        if(isResetKey()){
20000d6a:	f7ff ff4f 	bl	20000c0c <isResetKey>
20000d6e:	1e03      	subs	r3, r0, #0
20000d70:	d003      	beq.n	20000d7a <loop+0x3a>
            init();
20000d72:	f7ff ffc7 	bl	20000d04 <init>
            resetPedro();
20000d76:	f7ff f9b7 	bl	200000e8 <resetPedro>
        }
		if(touchesPepper() == 1){
20000d7a:	f7ff fd83 	bl	20000884 <touchesPepper>
20000d7e:	0003      	movs	r3, r0
20000d80:	2b01      	cmp	r3, #1
20000d82:	d1df      	bne.n	20000d44 <loop+0x4>
            init();
20000d84:	f7ff ffbe 	bl	20000d04 <init>
            resetPedro();
20000d88:	f7ff f9ae 	bl	200000e8 <resetPedro>
			break;		//startar om spelet fr√•n b√∂rjan
20000d8c:	46c0      	nop			; (mov r8, r8)
		/*if(Pedro.distance == ){
			onWin();
		}*/
	}
	
}
20000d8e:	46c0      	nop			; (mov r8, r8)
20000d90:	46bd      	mov	sp, r7
20000d92:	bd80      	pop	{r7, pc}

20000d94 <loadNewLevelSegmentLeft>:



void loadNewLevelSegmentLeft(){
20000d94:	b580      	push	{r7, lr}
20000d96:	af00      	add	r7, sp, #0
    loadLvl(0);  //64px wide
20000d98:	2000      	movs	r0, #0
20000d9a:	f000 f869 	bl	20000e70 <loadLvl>
}
20000d9e:	46c0      	nop			; (mov r8, r8)
20000da0:	46bd      	mov	sp, r7
20000da2:	bd80      	pop	{r7, pc}

20000da4 <loadNewLevelSegmentRight>:

void loadNewLevelSegmentRight(){
20000da4:	b580      	push	{r7, lr}
20000da6:	af00      	add	r7, sp, #0
    loadLvl(192);
20000da8:	20c0      	movs	r0, #192	; 0xc0
20000daa:	f000 f861 	bl	20000e70 <loadLvl>
}
20000dae:	46c0      	nop			; (mov r8, r8)
20000db0:	46bd      	mov	sp, r7
20000db2:	bd80      	pop	{r7, pc}

20000db4 <loadPepperAt>:


//b√∂r fungera
void loadPepperAt(int addr, int page){
20000db4:	b590      	push	{r4, r7, lr}
20000db6:	b08d      	sub	sp, #52	; 0x34
20000db8:	af00      	add	r7, sp, #0
20000dba:	6078      	str	r0, [r7, #4]
20000dbc:	6039      	str	r1, [r7, #0]
		char b[][2]= 
20000dbe:	2308      	movs	r3, #8
20000dc0:	18fb      	adds	r3, r7, r3
20000dc2:	4a17      	ldr	r2, [pc, #92]	; (20000e20 <loadPepperAt+0x6c>)
20000dc4:	ca13      	ldmia	r2!, {r0, r1, r4}
20000dc6:	c313      	stmia	r3!, {r0, r1, r4}
20000dc8:	ca13      	ldmia	r2!, {r0, r1, r4}
20000dca:	c313      	stmia	r3!, {r0, r1, r4}
20000dcc:	ca03      	ldmia	r2!, {r0, r1}
20000dce:	c303      	stmia	r3!, {r0, r1}
				{0b00000100, 0b01100000},
				{0b00001100, 0b00110000},
				{0b11111000, 0b00011111}
				};
     
		for(int j = 0; j < 2; j++){
20000dd0:	2300      	movs	r3, #0
20000dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
20000dd4:	e01c      	b.n	20000e10 <loadPepperAt+0x5c>
			for(int i = 0; i < 16; i++){
20000dd6:	2300      	movs	r3, #0
20000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
20000dda:	e013      	b.n	20000e04 <loadPepperAt+0x50>
				byteToBuffer(addr + i, page + j, b[i][j]);
20000ddc:	687a      	ldr	r2, [r7, #4]
20000dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000de0:	18d0      	adds	r0, r2, r3
20000de2:	683a      	ldr	r2, [r7, #0]
20000de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000de6:	18d1      	adds	r1, r2, r3
20000de8:	2308      	movs	r3, #8
20000dea:	18fa      	adds	r2, r7, r3
20000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000dee:	005b      	lsls	r3, r3, #1
20000df0:	18d2      	adds	r2, r2, r3
20000df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000df4:	18d3      	adds	r3, r2, r3
20000df6:	781b      	ldrb	r3, [r3, #0]
20000df8:	001a      	movs	r2, r3
20000dfa:	f000 fafb 	bl	200013f4 <byteToBuffer>
			for(int i = 0; i < 16; i++){
20000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000e00:	3301      	adds	r3, #1
20000e02:	62bb      	str	r3, [r7, #40]	; 0x28
20000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000e06:	2b0f      	cmp	r3, #15
20000e08:	dde8      	ble.n	20000ddc <loadPepperAt+0x28>
		for(int j = 0; j < 2; j++){
20000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e0c:	3301      	adds	r3, #1
20000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
20000e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e12:	2b01      	cmp	r3, #1
20000e14:	dddf      	ble.n	20000dd6 <loadPepperAt+0x22>
			}
		}
}
20000e16:	46c0      	nop			; (mov r8, r8)
20000e18:	46bd      	mov	sp, r7
20000e1a:	b00d      	add	sp, #52	; 0x34
20000e1c:	bd90      	pop	{r4, r7, pc}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	20003780 	andcs	r3, r0, r0, lsl #15

20000e24 <loadPepperStrip>:


//b√∂r fungera
void loadPepperStrip(int start, char type){
20000e24:	b580      	push	{r7, lr}
20000e26:	b082      	sub	sp, #8
20000e28:	af00      	add	r7, sp, #0
20000e2a:	6078      	str	r0, [r7, #4]
20000e2c:	000a      	movs	r2, r1
20000e2e:	1cfb      	adds	r3, r7, #3
20000e30:	701a      	strb	r2, [r3, #0]
	
	switch(type){
20000e32:	1cfb      	adds	r3, r7, #3
20000e34:	781b      	ldrb	r3, [r3, #0]
20000e36:	2b5f      	cmp	r3, #95	; 0x5f
20000e38:	d015      	beq.n	20000e66 <loadPepperStrip+0x42>
20000e3a:	2b6f      	cmp	r3, #111	; 0x6f
20000e3c:	d002      	beq.n	20000e44 <loadPepperStrip+0x20>
20000e3e:	2b38      	cmp	r3, #56	; 0x38
20000e40:	d006      	beq.n	20000e50 <loadPepperStrip+0x2c>
			loadPepperAt(start, 6);
			loadPepperAt(start, 4);
			break;
			
	}
}
20000e42:	e011      	b.n	20000e68 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
20000e44:	687b      	ldr	r3, [r7, #4]
20000e46:	2106      	movs	r1, #6
20000e48:	0018      	movs	r0, r3
20000e4a:	f7ff ffb3 	bl	20000db4 <loadPepperAt>
			break;
20000e4e:	e00b      	b.n	20000e68 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
20000e50:	687b      	ldr	r3, [r7, #4]
20000e52:	2106      	movs	r1, #6
20000e54:	0018      	movs	r0, r3
20000e56:	f7ff ffad 	bl	20000db4 <loadPepperAt>
			loadPepperAt(start, 4);
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	2104      	movs	r1, #4
20000e5e:	0018      	movs	r0, r3
20000e60:	f7ff ffa8 	bl	20000db4 <loadPepperAt>
			break;
20000e64:	e000      	b.n	20000e68 <loadPepperStrip+0x44>
			break;
20000e66:	46c0      	nop			; (mov r8, r8)
}
20000e68:	46c0      	nop			; (mov r8, r8)
20000e6a:	46bd      	mov	sp, r7
20000e6c:	b002      	add	sp, #8
20000e6e:	bd80      	pop	{r7, pc}

20000e70 <loadLvl>:


void loadLvl(int start){        //loads a 64px wide levelstrip of new peppers into the backBuffer (starting at start, moving right)
20000e70:	b580      	push	{r7, lr}
20000e72:	b098      	sub	sp, #96	; 0x60
20000e74:	af00      	add	r7, sp, #0
20000e76:	6078      	str	r0, [r7, #4]
	//int seed = getDistance();
    int rand = (nextRnd(&seed) % 19);
20000e78:	4b17      	ldr	r3, [pc, #92]	; (20000ed8 <loadLvl+0x68>)
20000e7a:	0018      	movs	r0, r3
20000e7c:	f7ff fdf3 	bl	20000a66 <nextRnd>
20000e80:	0003      	movs	r3, r0
20000e82:	2113      	movs	r1, #19
20000e84:	0018      	movs	r0, r3
20000e86:	f000 fdf1 	bl	20001a6c <__aeabi_uidivmod>
20000e8a:	000b      	movs	r3, r1
20000e8c:	65bb      	str	r3, [r7, #88]	; 0x58
	//int type = nextRnd() % 20;      // Returns a pseudo-random integer between 0 and 10, n√•gra olika varianter 1=____, 2=_oo_, 3=_8__, 4=_o_o mm.
    char PepperStrips[][4] = { "____", "_oo_", "_8__", "_oo_", "__o_", "_o__", "__8_", "__8_", "__o_", "____", "____", "_o__", "__o_", "__oo_", "_8__","_o__","__o_","_o__", "__o_","____"};
20000e8e:	2308      	movs	r3, #8
20000e90:	18fa      	adds	r2, r7, r3
20000e92:	4b12      	ldr	r3, [pc, #72]	; (20000edc <loadLvl+0x6c>)
20000e94:	0010      	movs	r0, r2
20000e96:	0019      	movs	r1, r3
20000e98:	2350      	movs	r3, #80	; 0x50
20000e9a:	001a      	movs	r2, r3
20000e9c:	f001 fef0 	bl	20002c80 <memcpy>
	
	
	for(int i = 0; i < 4; i++){
20000ea0:	2300      	movs	r3, #0
20000ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
20000ea4:	e011      	b.n	20000eca <loadLvl+0x5a>
		loadPepperStrip(start + i*16, PepperStrips[rand][i]);
20000ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000ea8:	011a      	lsls	r2, r3, #4
20000eaa:	687b      	ldr	r3, [r7, #4]
20000eac:	18d0      	adds	r0, r2, r3
20000eae:	2308      	movs	r3, #8
20000eb0:	18fa      	adds	r2, r7, r3
20000eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
20000eb4:	009b      	lsls	r3, r3, #2
20000eb6:	18d2      	adds	r2, r2, r3
20000eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000eba:	18d3      	adds	r3, r2, r3
20000ebc:	781b      	ldrb	r3, [r3, #0]
20000ebe:	0019      	movs	r1, r3
20000ec0:	f7ff ffb0 	bl	20000e24 <loadPepperStrip>
	for(int i = 0; i < 4; i++){
20000ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000ec6:	3301      	adds	r3, #1
20000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
20000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000ecc:	2b03      	cmp	r3, #3
20000ece:	ddea      	ble.n	20000ea6 <loadLvl+0x36>
	}
	//drawGround(start, start+63);
    
}
20000ed0:	46c0      	nop			; (mov r8, r8)
20000ed2:	46bd      	mov	sp, r7
20000ed4:	b018      	add	sp, #96	; 0x60
20000ed6:	bd80      	pop	{r7, pc}
20000ed8:	20002da8 	andcs	r2, r0, r8, lsr #27
20000edc:	200037a0 	andcs	r3, r0, r0, lsr #15

20000ee0 <onWin>:
    }
}
*/


void onWin(){
20000ee0:	b580      	push	{r7, lr}
20000ee2:	af00      	add	r7, sp, #0
	//ska vi ha med denna?
}
20000ee4:	46c0      	nop			; (mov r8, r8)
20000ee6:	46bd      	mov	sp, r7
20000ee8:	bd80      	pop	{r7, pc}

20000eea <showDistance>:



void showDistance(){
20000eea:	b580      	push	{r7, lr}
20000eec:	b088      	sub	sp, #32
20000eee:	af00      	add	r7, sp, #0
    char buffer[20];
    for(int i = 0; i < 20; i++){
20000ef0:	2300      	movs	r3, #0
20000ef2:	61fb      	str	r3, [r7, #28]
20000ef4:	e007      	b.n	20000f06 <showDistance+0x1c>
        buffer[i] = 0;
20000ef6:	1d3a      	adds	r2, r7, #4
20000ef8:	69fb      	ldr	r3, [r7, #28]
20000efa:	18d3      	adds	r3, r2, r3
20000efc:	2200      	movs	r2, #0
20000efe:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; i++){
20000f00:	69fb      	ldr	r3, [r7, #28]
20000f02:	3301      	adds	r3, #1
20000f04:	61fb      	str	r3, [r7, #28]
20000f06:	69fb      	ldr	r3, [r7, #28]
20000f08:	2b13      	cmp	r3, #19
20000f0a:	ddf4      	ble.n	20000ef6 <showDistance+0xc>
    }
       
        int d = getDistance();
20000f0c:	f7ff fd78 	bl	20000a00 <getDistance>
20000f10:	0003      	movs	r3, r0
20000f12:	61bb      	str	r3, [r7, #24]
        itoa(d, buffer, 10);
20000f14:	1d39      	adds	r1, r7, #4
20000f16:	69bb      	ldr	r3, [r7, #24]
20000f18:	220a      	movs	r2, #10
20000f1a:	0018      	movs	r0, r3
20000f1c:	f001 feac 	bl	20002c78 <itoa>
        ascii_clear_disp();
20000f20:	f000 fca1 	bl	20001866 <ascii_clear_disp>
        stringToAscii(buffer, 1, 1);
20000f24:	1d3b      	adds	r3, r7, #4
20000f26:	2201      	movs	r2, #1
20000f28:	2101      	movs	r1, #1
20000f2a:	0018      	movs	r0, r3
20000f2c:	f000 fcee 	bl	2000190c <stringToAscii>
       
}
20000f30:	46c0      	nop			; (mov r8, r8)
20000f32:	46bd      	mov	sp, r7
20000f34:	b008      	add	sp, #32
20000f36:	bd80      	pop	{r7, pc}

20000f38 <main>:





void main(void){
20000f38:	b580      	push	{r7, lr}
20000f3a:	af00      	add	r7, sp, #0
    init();
20000f3c:	f7ff fee2 	bl	20000d04 <init>
        delaymicros(100 * 1000);
        p++;
    }
#endif*/
	while(1){
		loop();
20000f40:	f7ff fefe 	bl	20000d40 <loop>
20000f44:	e7fc      	b.n	20000f40 <main+0x8>
20000f46:	46c0      	nop			; (mov r8, r8)

20000f48 <graphic_ctrl_bit_set>:


uint8_t backBuffer[256][8]; // 256 * 64 / 8


void graphic_ctrl_bit_set(unsigned char x){
20000f48:	b580      	push	{r7, lr}
20000f4a:	b084      	sub	sp, #16
20000f4c:	af00      	add	r7, sp, #0
20000f4e:	0002      	movs	r2, r0
20000f50:	1dfb      	adds	r3, r7, #7
20000f52:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000f54:	4a0c      	ldr	r2, [pc, #48]	; (20000f88 <graphic_ctrl_bit_set+0x40>)
20000f56:	200f      	movs	r0, #15
20000f58:	183b      	adds	r3, r7, r0
20000f5a:	7d12      	ldrb	r2, [r2, #20]
20000f5c:	701a      	strb	r2, [r3, #0]
    c |= x;
20000f5e:	183b      	adds	r3, r7, r0
20000f60:	1839      	adds	r1, r7, r0
20000f62:	1dfa      	adds	r2, r7, #7
20000f64:	7809      	ldrb	r1, [r1, #0]
20000f66:	7812      	ldrb	r2, [r2, #0]
20000f68:	430a      	orrs	r2, r1
20000f6a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000f6c:	183b      	adds	r3, r7, r0
20000f6e:	183a      	adds	r2, r7, r0
20000f70:	7812      	ldrb	r2, [r2, #0]
20000f72:	2104      	movs	r1, #4
20000f74:	438a      	bics	r2, r1
20000f76:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000f78:	4a03      	ldr	r2, [pc, #12]	; (20000f88 <graphic_ctrl_bit_set+0x40>)
20000f7a:	183b      	adds	r3, r7, r0
20000f7c:	781b      	ldrb	r3, [r3, #0]
20000f7e:	7513      	strb	r3, [r2, #20]
}
20000f80:	46c0      	nop			; (mov r8, r8)
20000f82:	46bd      	mov	sp, r7
20000f84:	b004      	add	sp, #16
20000f86:	bd80      	pop	{r7, pc}
20000f88:	40021000 	andmi	r1, r2, r0

20000f8c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x){
20000f8c:	b580      	push	{r7, lr}
20000f8e:	b084      	sub	sp, #16
20000f90:	af00      	add	r7, sp, #0
20000f92:	0002      	movs	r2, r0
20000f94:	1dfb      	adds	r3, r7, #7
20000f96:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000f98:	4a0f      	ldr	r2, [pc, #60]	; (20000fd8 <graphic_ctrl_bit_clear+0x4c>)
20000f9a:	210f      	movs	r1, #15
20000f9c:	187b      	adds	r3, r7, r1
20000f9e:	7d12      	ldrb	r2, [r2, #20]
20000fa0:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000fa2:	1dfb      	adds	r3, r7, #7
20000fa4:	781b      	ldrb	r3, [r3, #0]
20000fa6:	b25b      	sxtb	r3, r3
20000fa8:	43db      	mvns	r3, r3
20000faa:	b25b      	sxtb	r3, r3
20000fac:	187a      	adds	r2, r7, r1
20000fae:	7812      	ldrb	r2, [r2, #0]
20000fb0:	b252      	sxtb	r2, r2
20000fb2:	4013      	ands	r3, r2
20000fb4:	b25a      	sxtb	r2, r3
20000fb6:	187b      	adds	r3, r7, r1
20000fb8:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000fba:	187b      	adds	r3, r7, r1
20000fbc:	0008      	movs	r0, r1
20000fbe:	187a      	adds	r2, r7, r1
20000fc0:	7812      	ldrb	r2, [r2, #0]
20000fc2:	2104      	movs	r1, #4
20000fc4:	438a      	bics	r2, r1
20000fc6:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000fc8:	4a03      	ldr	r2, [pc, #12]	; (20000fd8 <graphic_ctrl_bit_clear+0x4c>)
20000fca:	183b      	adds	r3, r7, r0
20000fcc:	781b      	ldrb	r3, [r3, #0]
20000fce:	7513      	strb	r3, [r2, #20]
}
20000fd0:	46c0      	nop			; (mov r8, r8)
20000fd2:	46bd      	mov	sp, r7
20000fd4:	b004      	add	sp, #16
20000fd6:	bd80      	pop	{r7, pc}
20000fd8:	40021000 	andmi	r1, r2, r0

20000fdc <select_controller>:

static void select_controller(uint8_t controller){  //@param controller - 0/B_CS1/B_CS2/both
20000fdc:	b580      	push	{r7, lr}
20000fde:	b082      	sub	sp, #8
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	0002      	movs	r2, r0
20000fe4:	1dfb      	adds	r3, r7, #7
20000fe6:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000fe8:	1dfb      	adds	r3, r7, #7
20000fea:	781b      	ldrb	r3, [r3, #0]
20000fec:	2b08      	cmp	r3, #8
20000fee:	d00c      	beq.n	2000100a <select_controller+0x2e>
20000ff0:	dc02      	bgt.n	20000ff8 <select_controller+0x1c>
20000ff2:	2b00      	cmp	r3, #0
20000ff4:	d005      	beq.n	20001002 <select_controller+0x26>
            break;
        case B_CS1|B_CS2 :  //both
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000ff6:	e01a      	b.n	2000102e <select_controller+0x52>
    switch(controller){
20000ff8:	2b10      	cmp	r3, #16
20000ffa:	d00d      	beq.n	20001018 <select_controller+0x3c>
20000ffc:	2b18      	cmp	r3, #24
20000ffe:	d012      	beq.n	20001026 <select_controller+0x4a>
}
20001000:	e015      	b.n	2000102e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20001002:	2018      	movs	r0, #24
20001004:	f7ff ffc2 	bl	20000f8c <graphic_ctrl_bit_clear>
            break;
20001008:	e011      	b.n	2000102e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
2000100a:	2008      	movs	r0, #8
2000100c:	f7ff ff9c 	bl	20000f48 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20001010:	2010      	movs	r0, #16
20001012:	f7ff ffbb 	bl	20000f8c <graphic_ctrl_bit_clear>
            break;
20001016:	e00a      	b.n	2000102e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS2);
20001018:	2010      	movs	r0, #16
2000101a:	f7ff ff95 	bl	20000f48 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS1);
2000101e:	2008      	movs	r0, #8
20001020:	f7ff ffb4 	bl	20000f8c <graphic_ctrl_bit_clear>
            break;
20001024:	e003      	b.n	2000102e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20001026:	2018      	movs	r0, #24
20001028:	f7ff ff8e 	bl	20000f48 <graphic_ctrl_bit_set>
            break;
2000102c:	46c0      	nop			; (mov r8, r8)
}
2000102e:	46c0      	nop			; (mov r8, r8)
20001030:	46bd      	mov	sp, r7
20001032:	b002      	add	sp, #8
20001034:	bd80      	pop	{r7, pc}

20001036 <graphic_initialize>:

void graphic_initialize(void) {
20001036:	b580      	push	{r7, lr}
20001038:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
2000103a:	2040      	movs	r0, #64	; 0x40
2000103c:	f7ff ff84 	bl	20000f48 <graphic_ctrl_bit_set>
    delaymicros(10);
20001040:	200a      	movs	r0, #10
20001042:	f7ff f829 	bl	20000098 <delaymicros>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20001046:	2078      	movs	r0, #120	; 0x78
20001048:	f7ff ffa0 	bl	20000f8c <graphic_ctrl_bit_clear>
    delaymillis(30);
2000104c:	201e      	movs	r0, #30
2000104e:	f7ff f838 	bl	200000c2 <delaymillis>
    graphic_ctrl_bit_set(B_RST);
20001052:	2020      	movs	r0, #32
20001054:	f7ff ff78 	bl	20000f48 <graphic_ctrl_bit_set>
    delaymillis(100);
20001058:	2064      	movs	r0, #100	; 0x64
2000105a:	f7ff f832 	bl	200000c2 <delaymillis>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
2000105e:	2118      	movs	r1, #24
20001060:	203e      	movs	r0, #62	; 0x3e
20001062:	f000 f8e7 	bl	20001234 <graphic_write_command>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20001066:	2118      	movs	r1, #24
20001068:	203e      	movs	r0, #62	; 0x3e
2000106a:	f000 f8e3 	bl	20001234 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);     //...
2000106e:	2118      	movs	r1, #24
20001070:	203f      	movs	r0, #63	; 0x3f
20001072:	f000 f8df 	bl	20001234 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20001076:	2118      	movs	r1, #24
20001078:	20c0      	movs	r0, #192	; 0xc0
2000107a:	f000 f8db 	bl	20001234 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000107e:	2118      	movs	r1, #24
20001080:	2040      	movs	r0, #64	; 0x40
20001082:	f000 f8d7 	bl	20001234 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20001086:	2118      	movs	r1, #24
20001088:	20b8      	movs	r0, #184	; 0xb8
2000108a:	f000 f8d3 	bl	20001234 <graphic_write_command>
    select_controller(0);       //choose neither CS1/CS2
2000108e:	2000      	movs	r0, #0
20001090:	f7ff ffa4 	bl	20000fdc <select_controller>
}
20001094:	46c0      	nop			; (mov r8, r8)
20001096:	46bd      	mov	sp, r7
20001098:	bd80      	pop	{r7, pc}

2000109a <graphic_wait_ready>:

static void graphic_wait_ready(void) {
2000109a:	b580      	push	{r7, lr}
2000109c:	b082      	sub	sp, #8
2000109e:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
200010a0:	2040      	movs	r0, #64	; 0x40
200010a2:	f7ff ff73 	bl	20000f8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200010a6:	4b14      	ldr	r3, [pc, #80]	; (200010f8 <graphic_wait_ready+0x5e>)
200010a8:	4a14      	ldr	r2, [pc, #80]	; (200010fc <graphic_wait_ready+0x62>)
200010aa:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
200010ac:	2001      	movs	r0, #1
200010ae:	f7ff ff6d 	bl	20000f8c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
200010b2:	2002      	movs	r0, #2
200010b4:	f7ff ff48 	bl	20000f48 <graphic_ctrl_bit_set>
    delay_500ns();
200010b8:	f7fe ffcc 	bl	20000054 <delay_500ns>
    while(1) {
        graphic_ctrl_bit_set(B_E);
200010bc:	2040      	movs	r0, #64	; 0x40
200010be:	f7ff ff43 	bl	20000f48 <graphic_ctrl_bit_set>
        delay_500ns();
200010c2:	f7fe ffc7 	bl	20000054 <delay_500ns>
        c = GPIO_E->idrHigh & LCD_BUSY;
200010c6:	4b0c      	ldr	r3, [pc, #48]	; (200010f8 <graphic_wait_ready+0x5e>)
200010c8:	7c5b      	ldrb	r3, [r3, #17]
200010ca:	b2da      	uxtb	r2, r3
200010cc:	1dfb      	adds	r3, r7, #7
200010ce:	217f      	movs	r1, #127	; 0x7f
200010d0:	438a      	bics	r2, r1
200010d2:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
200010d4:	2040      	movs	r0, #64	; 0x40
200010d6:	f7ff ff59 	bl	20000f8c <graphic_ctrl_bit_clear>
        delay_500ns();
200010da:	f7fe ffbb 	bl	20000054 <delay_500ns>
        if( c == 0 ) break;
200010de:	1dfb      	adds	r3, r7, #7
200010e0:	781b      	ldrb	r3, [r3, #0]
200010e2:	2b00      	cmp	r3, #0
200010e4:	d000      	beq.n	200010e8 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
200010e6:	e7e9      	b.n	200010bc <graphic_wait_ready+0x22>
        if( c == 0 ) break;
200010e8:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
200010ea:	4b03      	ldr	r3, [pc, #12]	; (200010f8 <graphic_wait_ready+0x5e>)
200010ec:	4a04      	ldr	r2, [pc, #16]	; (20001100 <graphic_wait_ready+0x66>)
200010ee:	601a      	str	r2, [r3, #0]
}
200010f0:	46c0      	nop			; (mov r8, r8)
200010f2:	46bd      	mov	sp, r7
200010f4:	b002      	add	sp, #8
200010f6:	bd80      	pop	{r7, pc}
200010f8:	40021000 	andmi	r1, r2, r0
200010fc:	00005555 	andeq	r5, r0, r5, asr r5
20001100:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001104 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20001104:	b580      	push	{r7, lr}
20001106:	b084      	sub	sp, #16
20001108:	af00      	add	r7, sp, #0
2000110a:	0002      	movs	r2, r0
2000110c:	1dfb      	adds	r3, r7, #7
2000110e:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20001110:	2040      	movs	r0, #64	; 0x40
20001112:	f7ff ff3b 	bl	20000f8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20001116:	4b1c      	ldr	r3, [pc, #112]	; (20001188 <graphic_read+0x84>)
20001118:	4a1c      	ldr	r2, [pc, #112]	; (2000118c <graphic_read+0x88>)
2000111a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
2000111c:	2003      	movs	r0, #3
2000111e:	f7ff ff13 	bl	20000f48 <graphic_ctrl_bit_set>
    select_controller(controller);
20001122:	1dfb      	adds	r3, r7, #7
20001124:	781b      	ldrb	r3, [r3, #0]
20001126:	0018      	movs	r0, r3
20001128:	f7ff ff58 	bl	20000fdc <select_controller>
    delay_500ns();
2000112c:	f7fe ff92 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20001130:	2040      	movs	r0, #64	; 0x40
20001132:	f7ff ff09 	bl	20000f48 <graphic_ctrl_bit_set>
    delay_500ns();
20001136:	f7fe ff8d 	bl	20000054 <delay_500ns>
    c = GPIO_E->idrHigh;
2000113a:	4a13      	ldr	r2, [pc, #76]	; (20001188 <graphic_read+0x84>)
2000113c:	230f      	movs	r3, #15
2000113e:	18fb      	adds	r3, r7, r3
20001140:	7c52      	ldrb	r2, [r2, #17]
20001142:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20001144:	2040      	movs	r0, #64	; 0x40
20001146:	f7ff ff21 	bl	20000f8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
2000114a:	4b0f      	ldr	r3, [pc, #60]	; (20001188 <graphic_read+0x84>)
2000114c:	4a10      	ldr	r2, [pc, #64]	; (20001190 <graphic_read+0x8c>)
2000114e:	601a      	str	r2, [r3, #0]

    if( controller & B_CS1 ) {
20001150:	1dfb      	adds	r3, r7, #7
20001152:	781b      	ldrb	r3, [r3, #0]
20001154:	2208      	movs	r2, #8
20001156:	4013      	ands	r3, r2
20001158:	d004      	beq.n	20001164 <graphic_read+0x60>
        select_controller(B_CS1);
2000115a:	2008      	movs	r0, #8
2000115c:	f7ff ff3e 	bl	20000fdc <select_controller>
        graphic_wait_ready();
20001160:	f7ff ff9b 	bl	2000109a <graphic_wait_ready>
    }
    if( controller & B_CS2 ) {
20001164:	1dfb      	adds	r3, r7, #7
20001166:	781b      	ldrb	r3, [r3, #0]
20001168:	2210      	movs	r2, #16
2000116a:	4013      	ands	r3, r2
2000116c:	d004      	beq.n	20001178 <graphic_read+0x74>
        select_controller(B_CS2);
2000116e:	2010      	movs	r0, #16
20001170:	f7ff ff34 	bl	20000fdc <select_controller>
        graphic_wait_ready();
20001174:	f7ff ff91 	bl	2000109a <graphic_wait_ready>
    }
    return c;
20001178:	230f      	movs	r3, #15
2000117a:	18fb      	adds	r3, r7, r3
2000117c:	781b      	ldrb	r3, [r3, #0]
}
2000117e:	0018      	movs	r0, r3
20001180:	46bd      	mov	sp, r7
20001182:	b004      	add	sp, #16
20001184:	bd80      	pop	{r7, pc}
20001186:	46c0      	nop			; (mov r8, r8)
20001188:	40021000 	andmi	r1, r2, r0
2000118c:	00005555 	andeq	r5, r0, r5, asr r5
20001190:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001194 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20001194:	b580      	push	{r7, lr}
20001196:	b082      	sub	sp, #8
20001198:	af00      	add	r7, sp, #0
2000119a:	0002      	movs	r2, r0
2000119c:	1dfb      	adds	r3, r7, #7
2000119e:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
200011a0:	1dfb      	adds	r3, r7, #7
200011a2:	781b      	ldrb	r3, [r3, #0]
200011a4:	0018      	movs	r0, r3
200011a6:	f7ff ffad 	bl	20001104 <graphic_read>
    return graphic_read(controller);
200011aa:	1dfb      	adds	r3, r7, #7
200011ac:	781b      	ldrb	r3, [r3, #0]
200011ae:	0018      	movs	r0, r3
200011b0:	f7ff ffa8 	bl	20001104 <graphic_read>
200011b4:	0003      	movs	r3, r0
}
200011b6:	0018      	movs	r0, r3
200011b8:	46bd      	mov	sp, r7
200011ba:	b002      	add	sp, #8
200011bc:	bd80      	pop	{r7, pc}

200011be <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
200011be:	b580      	push	{r7, lr}
200011c0:	b082      	sub	sp, #8
200011c2:	af00      	add	r7, sp, #0
200011c4:	0002      	movs	r2, r0
200011c6:	1dfb      	adds	r3, r7, #7
200011c8:	701a      	strb	r2, [r3, #0]
200011ca:	1dbb      	adds	r3, r7, #6
200011cc:	1c0a      	adds	r2, r1, #0
200011ce:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
200011d0:	4a17      	ldr	r2, [pc, #92]	; (20001230 <graphic_write+0x72>)
200011d2:	1dfb      	adds	r3, r7, #7
200011d4:	781b      	ldrb	r3, [r3, #0]
200011d6:	7553      	strb	r3, [r2, #21]
    delay_500ns();
200011d8:	f7fe ff3c 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200011dc:	2040      	movs	r0, #64	; 0x40
200011de:	f7ff feb3 	bl	20000f48 <graphic_ctrl_bit_set>
    delay_500ns();
200011e2:	f7fe ff37 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
200011e6:	2040      	movs	r0, #64	; 0x40
200011e8:	f7ff fed0 	bl	20000f8c <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
200011ec:	1dbb      	adds	r3, r7, #6
200011ee:	781b      	ldrb	r3, [r3, #0]
200011f0:	2208      	movs	r2, #8
200011f2:	4013      	ands	r3, r2
200011f4:	d004      	beq.n	20001200 <graphic_write+0x42>
        select_controller(B_CS1);
200011f6:	2008      	movs	r0, #8
200011f8:	f7ff fef0 	bl	20000fdc <select_controller>
        graphic_wait_ready();
200011fc:	f7ff ff4d 	bl	2000109a <graphic_wait_ready>
    }
    if(controller & B_CS2){
20001200:	1dbb      	adds	r3, r7, #6
20001202:	781b      	ldrb	r3, [r3, #0]
20001204:	2210      	movs	r2, #16
20001206:	4013      	ands	r3, r2
20001208:	d004      	beq.n	20001214 <graphic_write+0x56>
        select_controller(B_CS2);
2000120a:	2010      	movs	r0, #16
2000120c:	f7ff fee6 	bl	20000fdc <select_controller>
        graphic_wait_ready();
20001210:	f7ff ff43 	bl	2000109a <graphic_wait_ready>
    }
        
    GPIO_E->odrHigh = 0;
20001214:	4b06      	ldr	r3, [pc, #24]	; (20001230 <graphic_write+0x72>)
20001216:	2200      	movs	r2, #0
20001218:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(B_E);
2000121a:	2040      	movs	r0, #64	; 0x40
2000121c:	f7ff fe94 	bl	20000f48 <graphic_ctrl_bit_set>
    select_controller(0);    
20001220:	2000      	movs	r0, #0
20001222:	f7ff fedb 	bl	20000fdc <select_controller>
    
}
20001226:	46c0      	nop			; (mov r8, r8)
20001228:	46bd      	mov	sp, r7
2000122a:	b002      	add	sp, #8
2000122c:	bd80      	pop	{r7, pc}
2000122e:	46c0      	nop			; (mov r8, r8)
20001230:	40021000 	andmi	r1, r2, r0

20001234 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20001234:	b580      	push	{r7, lr}
20001236:	b082      	sub	sp, #8
20001238:	af00      	add	r7, sp, #0
2000123a:	0002      	movs	r2, r0
2000123c:	1dfb      	adds	r3, r7, #7
2000123e:	701a      	strb	r2, [r3, #0]
20001240:	1dbb      	adds	r3, r7, #6
20001242:	1c0a      	adds	r2, r1, #0
20001244:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20001246:	2040      	movs	r0, #64	; 0x40
20001248:	f7ff fea0 	bl	20000f8c <graphic_ctrl_bit_clear>
    select_controller(controller);
2000124c:	1dbb      	adds	r3, r7, #6
2000124e:	781b      	ldrb	r3, [r3, #0]
20001250:	0018      	movs	r0, r3
20001252:	f7ff fec3 	bl	20000fdc <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
20001256:	2003      	movs	r0, #3
20001258:	f7ff fe98 	bl	20000f8c <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
2000125c:	1dbb      	adds	r3, r7, #6
2000125e:	781a      	ldrb	r2, [r3, #0]
20001260:	1dfb      	adds	r3, r7, #7
20001262:	781b      	ldrb	r3, [r3, #0]
20001264:	0011      	movs	r1, r2
20001266:	0018      	movs	r0, r3
20001268:	f7ff ffa9 	bl	200011be <graphic_write>
}
2000126c:	46c0      	nop			; (mov r8, r8)
2000126e:	46bd      	mov	sp, r7
20001270:	b002      	add	sp, #8
20001272:	bd80      	pop	{r7, pc}

20001274 <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller){
20001274:	b580      	push	{r7, lr}
20001276:	b082      	sub	sp, #8
20001278:	af00      	add	r7, sp, #0
2000127a:	0002      	movs	r2, r0
2000127c:	1dfb      	adds	r3, r7, #7
2000127e:	701a      	strb	r2, [r3, #0]
20001280:	1dbb      	adds	r3, r7, #6
20001282:	1c0a      	adds	r2, r1, #0
20001284:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20001286:	2040      	movs	r0, #64	; 0x40
20001288:	f7ff fe80 	bl	20000f8c <graphic_ctrl_bit_clear>
    select_controller(controller);
2000128c:	1dbb      	adds	r3, r7, #6
2000128e:	781b      	ldrb	r3, [r3, #0]
20001290:	0018      	movs	r0, r3
20001292:	f7ff fea3 	bl	20000fdc <select_controller>
    graphic_ctrl_bit_clear(B_RW);
20001296:	2002      	movs	r0, #2
20001298:	f7ff fe78 	bl	20000f8c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RS);
2000129c:	2001      	movs	r0, #1
2000129e:	f7ff fe53 	bl	20000f48 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
200012a2:	1dbb      	adds	r3, r7, #6
200012a4:	781a      	ldrb	r2, [r3, #0]
200012a6:	1dfb      	adds	r3, r7, #7
200012a8:	781b      	ldrb	r3, [r3, #0]
200012aa:	0011      	movs	r1, r2
200012ac:	0018      	movs	r0, r3
200012ae:	f7ff ff86 	bl	200011be <graphic_write>
}
200012b2:	46c0      	nop			; (mov r8, r8)
200012b4:	46bd      	mov	sp, r7
200012b6:	b002      	add	sp, #8
200012b8:	bd80      	pop	{r7, pc}

200012ba <graphic_clear_screen>:
void graphic_clear_screen(void){
200012ba:	b580      	push	{r7, lr}
200012bc:	b082      	sub	sp, #8
200012be:	af00      	add	r7, sp, #0
    for(int i = 1; i <= 128; i++){
200012c0:	2301      	movs	r3, #1
200012c2:	607b      	str	r3, [r7, #4]
200012c4:	e011      	b.n	200012ea <graphic_clear_screen+0x30>
		for(int j = 1; j <= 64; j++){
200012c6:	2301      	movs	r3, #1
200012c8:	603b      	str	r3, [r7, #0]
200012ca:	e008      	b.n	200012de <graphic_clear_screen+0x24>
			pixel(i, j, 0);
200012cc:	6839      	ldr	r1, [r7, #0]
200012ce:	687b      	ldr	r3, [r7, #4]
200012d0:	2200      	movs	r2, #0
200012d2:	0018      	movs	r0, r3
200012d4:	f000 f834 	bl	20001340 <pixel>
		for(int j = 1; j <= 64; j++){
200012d8:	683b      	ldr	r3, [r7, #0]
200012da:	3301      	adds	r3, #1
200012dc:	603b      	str	r3, [r7, #0]
200012de:	683b      	ldr	r3, [r7, #0]
200012e0:	2b40      	cmp	r3, #64	; 0x40
200012e2:	ddf3      	ble.n	200012cc <graphic_clear_screen+0x12>
    for(int i = 1; i <= 128; i++){
200012e4:	687b      	ldr	r3, [r7, #4]
200012e6:	3301      	adds	r3, #1
200012e8:	607b      	str	r3, [r7, #4]
200012ea:	687b      	ldr	r3, [r7, #4]
200012ec:	2b80      	cmp	r3, #128	; 0x80
200012ee:	ddea      	ble.n	200012c6 <graphic_clear_screen+0xc>
		}
	}
}
200012f0:	46c0      	nop			; (mov r8, r8)
200012f2:	46bd      	mov	sp, r7
200012f4:	b002      	add	sp, #8
200012f6:	bd80      	pop	{r7, pc}

200012f8 <clear_backBuffer>:


void clear_backBuffer() {
200012f8:	b580      	push	{r7, lr}
200012fa:	b082      	sub	sp, #8
200012fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++){
200012fe:	2300      	movs	r3, #0
20001300:	607b      	str	r3, [r7, #4]
20001302:	e013      	b.n	2000132c <clear_backBuffer+0x34>
        for(int j = 0; j < 8; j++)
20001304:	2300      	movs	r3, #0
20001306:	603b      	str	r3, [r7, #0]
20001308:	e00a      	b.n	20001320 <clear_backBuffer+0x28>
			 backBuffer[i][j] = 0;
2000130a:	4a0c      	ldr	r2, [pc, #48]	; (2000133c <clear_backBuffer+0x44>)
2000130c:	687b      	ldr	r3, [r7, #4]
2000130e:	00db      	lsls	r3, r3, #3
20001310:	18d2      	adds	r2, r2, r3
20001312:	683b      	ldr	r3, [r7, #0]
20001314:	18d3      	adds	r3, r2, r3
20001316:	2200      	movs	r2, #0
20001318:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++)
2000131a:	683b      	ldr	r3, [r7, #0]
2000131c:	3301      	adds	r3, #1
2000131e:	603b      	str	r3, [r7, #0]
20001320:	683b      	ldr	r3, [r7, #0]
20001322:	2b07      	cmp	r3, #7
20001324:	ddf1      	ble.n	2000130a <clear_backBuffer+0x12>
    for (int i = 0; i < 256; i++){
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	3301      	adds	r3, #1
2000132a:	607b      	str	r3, [r7, #4]
2000132c:	687b      	ldr	r3, [r7, #4]
2000132e:	2bff      	cmp	r3, #255	; 0xff
20001330:	dde8      	ble.n	20001304 <clear_backBuffer+0xc>
	}
}
20001332:	46c0      	nop			; (mov r8, r8)
20001334:	46bd      	mov	sp, r7
20001336:	b002      	add	sp, #8
20001338:	bd80      	pop	{r7, pc}
2000133a:	46c0      	nop			; (mov r8, r8)
2000133c:	20002dac 	andcs	r2, r0, ip, lsr #27

20001340 <pixel>:

void pixel(int x, int y, int set) {
20001340:	b580      	push	{r7, lr}
20001342:	b086      	sub	sp, #24
20001344:	af00      	add	r7, sp, #0
20001346:	60f8      	str	r0, [r7, #12]
20001348:	60b9      	str	r1, [r7, #8]
2000134a:	607a      	str	r2, [r7, #4]
    
    uint8_t mask = 1 << ((y-1)%8);
2000134c:	68bb      	ldr	r3, [r7, #8]
2000134e:	3b01      	subs	r3, #1
20001350:	4a26      	ldr	r2, [pc, #152]	; (200013ec <pixel+0xac>)
20001352:	4013      	ands	r3, r2
20001354:	d504      	bpl.n	20001360 <pixel+0x20>
20001356:	3b01      	subs	r3, #1
20001358:	2208      	movs	r2, #8
2000135a:	4252      	negs	r2, r2
2000135c:	4313      	orrs	r3, r2
2000135e:	3301      	adds	r3, #1
20001360:	001a      	movs	r2, r3
20001362:	2301      	movs	r3, #1
20001364:	4093      	lsls	r3, r2
20001366:	001a      	movs	r2, r3
20001368:	2317      	movs	r3, #23
2000136a:	18fb      	adds	r3, r7, r3
2000136c:	701a      	strb	r2, [r3, #0]
    
    if(set){
2000136e:	687b      	ldr	r3, [r7, #4]
20001370:	2b00      	cmp	r3, #0
20001372:	d019      	beq.n	200013a8 <pixel+0x68>
        backBuffer[64+(y-1)][(x-1)/8] |= mask;
20001374:	68bb      	ldr	r3, [r7, #8]
20001376:	333f      	adds	r3, #63	; 0x3f
20001378:	001a      	movs	r2, r3
2000137a:	68fb      	ldr	r3, [r7, #12]
2000137c:	3b01      	subs	r3, #1
2000137e:	2b00      	cmp	r3, #0
20001380:	da00      	bge.n	20001384 <pixel+0x44>
20001382:	3307      	adds	r3, #7
20001384:	10db      	asrs	r3, r3, #3
20001386:	491a      	ldr	r1, [pc, #104]	; (200013f0 <pixel+0xb0>)
20001388:	00d2      	lsls	r2, r2, #3
2000138a:	188a      	adds	r2, r1, r2
2000138c:	5cd0      	ldrb	r0, [r2, r3]
2000138e:	68ba      	ldr	r2, [r7, #8]
20001390:	323f      	adds	r2, #63	; 0x3f
20001392:	2117      	movs	r1, #23
20001394:	1879      	adds	r1, r7, r1
20001396:	7809      	ldrb	r1, [r1, #0]
20001398:	4301      	orrs	r1, r0
2000139a:	b2c8      	uxtb	r0, r1
2000139c:	4914      	ldr	r1, [pc, #80]	; (200013f0 <pixel+0xb0>)
2000139e:	00d2      	lsls	r2, r2, #3
200013a0:	188a      	adds	r2, r1, r2
200013a2:	1c01      	adds	r1, r0, #0
200013a4:	54d1      	strb	r1, [r2, r3]
    }
    else{
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
    }
}
200013a6:	e01d      	b.n	200013e4 <pixel+0xa4>
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
200013a8:	68bb      	ldr	r3, [r7, #8]
200013aa:	333f      	adds	r3, #63	; 0x3f
200013ac:	001a      	movs	r2, r3
200013ae:	68fb      	ldr	r3, [r7, #12]
200013b0:	3b01      	subs	r3, #1
200013b2:	2b00      	cmp	r3, #0
200013b4:	da00      	bge.n	200013b8 <pixel+0x78>
200013b6:	3307      	adds	r3, #7
200013b8:	10db      	asrs	r3, r3, #3
200013ba:	490d      	ldr	r1, [pc, #52]	; (200013f0 <pixel+0xb0>)
200013bc:	00d2      	lsls	r2, r2, #3
200013be:	188a      	adds	r2, r1, r2
200013c0:	5cd2      	ldrb	r2, [r2, r3]
200013c2:	b252      	sxtb	r2, r2
200013c4:	2117      	movs	r1, #23
200013c6:	1879      	adds	r1, r7, r1
200013c8:	7809      	ldrb	r1, [r1, #0]
200013ca:	b249      	sxtb	r1, r1
200013cc:	43c9      	mvns	r1, r1
200013ce:	b249      	sxtb	r1, r1
200013d0:	400a      	ands	r2, r1
200013d2:	b251      	sxtb	r1, r2
200013d4:	68ba      	ldr	r2, [r7, #8]
200013d6:	323f      	adds	r2, #63	; 0x3f
200013d8:	b2c8      	uxtb	r0, r1
200013da:	4905      	ldr	r1, [pc, #20]	; (200013f0 <pixel+0xb0>)
200013dc:	00d2      	lsls	r2, r2, #3
200013de:	188a      	adds	r2, r1, r2
200013e0:	1c01      	adds	r1, r0, #0
200013e2:	54d1      	strb	r1, [r2, r3]
}
200013e4:	46c0      	nop			; (mov r8, r8)
200013e6:	46bd      	mov	sp, r7
200013e8:	b006      	add	sp, #24
200013ea:	bd80      	pop	{r7, pc}
200013ec:	80000007 	andhi	r0, r0, r7
200013f0:	20002dac 	andcs	r2, r0, ip, lsr #27

200013f4 <byteToBuffer>:

void byteToBuffer(int addr, int page, char c){
200013f4:	b580      	push	{r7, lr}
200013f6:	b084      	sub	sp, #16
200013f8:	af00      	add	r7, sp, #0
200013fa:	60f8      	str	r0, [r7, #12]
200013fc:	60b9      	str	r1, [r7, #8]
200013fe:	1dfb      	adds	r3, r7, #7
20001400:	701a      	strb	r2, [r3, #0]
	backBuffer[addr][page] = c;
20001402:	4a06      	ldr	r2, [pc, #24]	; (2000141c <byteToBuffer+0x28>)
20001404:	68fb      	ldr	r3, [r7, #12]
20001406:	00db      	lsls	r3, r3, #3
20001408:	18d2      	adds	r2, r2, r3
2000140a:	68bb      	ldr	r3, [r7, #8]
2000140c:	18d3      	adds	r3, r2, r3
2000140e:	1dfa      	adds	r2, r7, #7
20001410:	7812      	ldrb	r2, [r2, #0]
20001412:	701a      	strb	r2, [r3, #0]
}
20001414:	46c0      	nop			; (mov r8, r8)
20001416:	46bd      	mov	sp, r7
20001418:	b004      	add	sp, #16
2000141a:	bd80      	pop	{r7, pc}
2000141c:	20002dac 	andcs	r2, r0, ip, lsr #27

20001420 <byteToScreenBuffer>:
void byteToScreenBuffer(int addr, int page, char c){
20001420:	b580      	push	{r7, lr}
20001422:	b084      	sub	sp, #16
20001424:	af00      	add	r7, sp, #0
20001426:	60f8      	str	r0, [r7, #12]
20001428:	60b9      	str	r1, [r7, #8]
2000142a:	1dfb      	adds	r3, r7, #7
2000142c:	701a      	strb	r2, [r3, #0]
	backBuffer[64+addr][page] = c;
2000142e:	68fb      	ldr	r3, [r7, #12]
20001430:	3340      	adds	r3, #64	; 0x40
20001432:	4a06      	ldr	r2, [pc, #24]	; (2000144c <byteToScreenBuffer+0x2c>)
20001434:	00db      	lsls	r3, r3, #3
20001436:	18d2      	adds	r2, r2, r3
20001438:	68bb      	ldr	r3, [r7, #8]
2000143a:	18d3      	adds	r3, r2, r3
2000143c:	1dfa      	adds	r2, r7, #7
2000143e:	7812      	ldrb	r2, [r2, #0]
20001440:	701a      	strb	r2, [r3, #0]
}
20001442:	46c0      	nop			; (mov r8, r8)
20001444:	46bd      	mov	sp, r7
20001446:	b004      	add	sp, #16
20001448:	bd80      	pop	{r7, pc}
2000144a:	46c0      	nop			; (mov r8, r8)
2000144c:	20002dac 	andcs	r2, r0, ip, lsr #27

20001450 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20001450:	b590      	push	{r4, r7, lr}
20001452:	b085      	sub	sp, #20
20001454:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20001456:	2300      	movs	r3, #0
20001458:	60bb      	str	r3, [r7, #8]
    unsigned int m = 0;
2000145a:	2300      	movs	r3, #0
2000145c:	607b      	str	r3, [r7, #4]
    for(c = 0; c < 2; c++) {
2000145e:	230d      	movs	r3, #13
20001460:	18fb      	adds	r3, r7, r3
20001462:	2200      	movs	r2, #0
20001464:	701a      	strb	r2, [r3, #0]
20001466:	e05a      	b.n	2000151e <graphic_draw_screen+0xce>
        controller = (c == 0) ? B_CS1 : B_CS2;
20001468:	230d      	movs	r3, #13
2000146a:	18fb      	adds	r3, r7, r3
2000146c:	781b      	ldrb	r3, [r3, #0]
2000146e:	2b00      	cmp	r3, #0
20001470:	d101      	bne.n	20001476 <graphic_draw_screen+0x26>
20001472:	2208      	movs	r2, #8
20001474:	e000      	b.n	20001478 <graphic_draw_screen+0x28>
20001476:	2210      	movs	r2, #16
20001478:	1cfb      	adds	r3, r7, #3
2000147a:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 8; j++) {
2000147c:	230e      	movs	r3, #14
2000147e:	18fb      	adds	r3, r7, r3
20001480:	2200      	movs	r2, #0
20001482:	701a      	strb	r2, [r3, #0]
20001484:	e040      	b.n	20001508 <graphic_draw_screen+0xb8>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20001486:	230e      	movs	r3, #14
20001488:	18fb      	adds	r3, r7, r3
2000148a:	781b      	ldrb	r3, [r3, #0]
2000148c:	2248      	movs	r2, #72	; 0x48
2000148e:	4252      	negs	r2, r2
20001490:	4313      	orrs	r3, r2
20001492:	b2da      	uxtb	r2, r3
20001494:	1cfb      	adds	r3, r7, #3
20001496:	781b      	ldrb	r3, [r3, #0]
20001498:	0019      	movs	r1, r3
2000149a:	0010      	movs	r0, r2
2000149c:	f7ff feca 	bl	20001234 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
200014a0:	1cfb      	adds	r3, r7, #3
200014a2:	781b      	ldrb	r3, [r3, #0]
200014a4:	0019      	movs	r1, r3
200014a6:	2040      	movs	r0, #64	; 0x40
200014a8:	f7ff fec4 	bl	20001234 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++) {
200014ac:	230f      	movs	r3, #15
200014ae:	18fb      	adds	r3, r7, r3
200014b0:	2200      	movs	r2, #0
200014b2:	701a      	strb	r2, [r3, #0]
200014b4:	e01d      	b.n	200014f2 <graphic_draw_screen+0xa2>
                    m++;
                }
                else{
                    graphic_write_data(backBuffer[64+c*64 + i][j], controller);
                }*/
                graphic_write_data(backBuffer[64+c*64 + i][j], controller);
200014b6:	230d      	movs	r3, #13
200014b8:	18fb      	adds	r3, r7, r3
200014ba:	781b      	ldrb	r3, [r3, #0]
200014bc:	3301      	adds	r3, #1
200014be:	019a      	lsls	r2, r3, #6
200014c0:	240f      	movs	r4, #15
200014c2:	193b      	adds	r3, r7, r4
200014c4:	781b      	ldrb	r3, [r3, #0]
200014c6:	18d2      	adds	r2, r2, r3
200014c8:	230e      	movs	r3, #14
200014ca:	18fb      	adds	r3, r7, r3
200014cc:	781b      	ldrb	r3, [r3, #0]
200014ce:	4918      	ldr	r1, [pc, #96]	; (20001530 <graphic_draw_screen+0xe0>)
200014d0:	00d2      	lsls	r2, r2, #3
200014d2:	188a      	adds	r2, r1, r2
200014d4:	5cd2      	ldrb	r2, [r2, r3]
200014d6:	1cfb      	adds	r3, r7, #3
200014d8:	781b      	ldrb	r3, [r3, #0]
200014da:	0019      	movs	r1, r3
200014dc:	0010      	movs	r0, r2
200014de:	f7ff fec9 	bl	20001274 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++) {
200014e2:	193b      	adds	r3, r7, r4
200014e4:	781a      	ldrb	r2, [r3, #0]
200014e6:	193b      	adds	r3, r7, r4
200014e8:	3201      	adds	r2, #1
200014ea:	701a      	strb	r2, [r3, #0]
200014ec:	68bb      	ldr	r3, [r7, #8]
200014ee:	3301      	adds	r3, #1
200014f0:	60bb      	str	r3, [r7, #8]
200014f2:	230f      	movs	r3, #15
200014f4:	18fb      	adds	r3, r7, r3
200014f6:	781b      	ldrb	r3, [r3, #0]
200014f8:	2b3f      	cmp	r3, #63	; 0x3f
200014fa:	d9dc      	bls.n	200014b6 <graphic_draw_screen+0x66>
        for(j = 0; j < 8; j++) {
200014fc:	210e      	movs	r1, #14
200014fe:	187b      	adds	r3, r7, r1
20001500:	781a      	ldrb	r2, [r3, #0]
20001502:	187b      	adds	r3, r7, r1
20001504:	3201      	adds	r2, #1
20001506:	701a      	strb	r2, [r3, #0]
20001508:	230e      	movs	r3, #14
2000150a:	18fb      	adds	r3, r7, r3
2000150c:	781b      	ldrb	r3, [r3, #0]
2000150e:	2b07      	cmp	r3, #7
20001510:	d9b9      	bls.n	20001486 <graphic_draw_screen+0x36>
    for(c = 0; c < 2; c++) {
20001512:	210d      	movs	r1, #13
20001514:	187b      	adds	r3, r7, r1
20001516:	781a      	ldrb	r2, [r3, #0]
20001518:	187b      	adds	r3, r7, r1
2000151a:	3201      	adds	r2, #1
2000151c:	701a      	strb	r2, [r3, #0]
2000151e:	230d      	movs	r3, #13
20001520:	18fb      	adds	r3, r7, r3
20001522:	781b      	ldrb	r3, [r3, #0]
20001524:	2b01      	cmp	r3, #1
20001526:	d99f      	bls.n	20001468 <graphic_draw_screen+0x18>
            }
        }
    }
}
20001528:	46c0      	nop			; (mov r8, r8)
2000152a:	46bd      	mov	sp, r7
2000152c:	b005      	add	sp, #20
2000152e:	bd90      	pop	{r4, r7, pc}
20001530:	20002dac 	andcs	r2, r0, ip, lsr #27

20001534 <shiftRight>:


*/


void shiftRight(){
20001534:	b580      	push	{r7, lr}
20001536:	b084      	sub	sp, #16
20001538:	af00      	add	r7, sp, #0
	for(int i = 255; i > 0; i--){
2000153a:	23ff      	movs	r3, #255	; 0xff
2000153c:	60fb      	str	r3, [r7, #12]
2000153e:	e01b      	b.n	20001578 <shiftRight+0x44>
		for(int j = 0; j < 8; j++){
20001540:	2300      	movs	r3, #0
20001542:	60bb      	str	r3, [r7, #8]
20001544:	e012      	b.n	2000156c <shiftRight+0x38>
			backBuffer[i][j] = backBuffer[i-1][j];
20001546:	68fb      	ldr	r3, [r7, #12]
20001548:	3b01      	subs	r3, #1
2000154a:	4a16      	ldr	r2, [pc, #88]	; (200015a4 <shiftRight+0x70>)
2000154c:	00db      	lsls	r3, r3, #3
2000154e:	18d2      	adds	r2, r2, r3
20001550:	68bb      	ldr	r3, [r7, #8]
20001552:	18d3      	adds	r3, r2, r3
20001554:	7819      	ldrb	r1, [r3, #0]
20001556:	4a13      	ldr	r2, [pc, #76]	; (200015a4 <shiftRight+0x70>)
20001558:	68fb      	ldr	r3, [r7, #12]
2000155a:	00db      	lsls	r3, r3, #3
2000155c:	18d2      	adds	r2, r2, r3
2000155e:	68bb      	ldr	r3, [r7, #8]
20001560:	18d3      	adds	r3, r2, r3
20001562:	1c0a      	adds	r2, r1, #0
20001564:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20001566:	68bb      	ldr	r3, [r7, #8]
20001568:	3301      	adds	r3, #1
2000156a:	60bb      	str	r3, [r7, #8]
2000156c:	68bb      	ldr	r3, [r7, #8]
2000156e:	2b07      	cmp	r3, #7
20001570:	dde9      	ble.n	20001546 <shiftRight+0x12>
	for(int i = 255; i > 0; i--){
20001572:	68fb      	ldr	r3, [r7, #12]
20001574:	3b01      	subs	r3, #1
20001576:	60fb      	str	r3, [r7, #12]
20001578:	68fb      	ldr	r3, [r7, #12]
2000157a:	2b00      	cmp	r3, #0
2000157c:	dce0      	bgt.n	20001540 <shiftRight+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
2000157e:	2300      	movs	r3, #0
20001580:	607b      	str	r3, [r7, #4]
20001582:	e007      	b.n	20001594 <shiftRight+0x60>
        backBuffer[0][j] = 0; 
20001584:	4a07      	ldr	r2, [pc, #28]	; (200015a4 <shiftRight+0x70>)
20001586:	687b      	ldr	r3, [r7, #4]
20001588:	18d3      	adds	r3, r2, r3
2000158a:	2200      	movs	r2, #0
2000158c:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
2000158e:	687b      	ldr	r3, [r7, #4]
20001590:	3301      	adds	r3, #1
20001592:	607b      	str	r3, [r7, #4]
20001594:	687b      	ldr	r3, [r7, #4]
20001596:	2b07      	cmp	r3, #7
20001598:	ddf4      	ble.n	20001584 <shiftRight+0x50>
    }
}
2000159a:	46c0      	nop			; (mov r8, r8)
2000159c:	46bd      	mov	sp, r7
2000159e:	b004      	add	sp, #16
200015a0:	bd80      	pop	{r7, pc}
200015a2:	46c0      	nop			; (mov r8, r8)
200015a4:	20002dac 	andcs	r2, r0, ip, lsr #27

200015a8 <shiftLeft>:
void shiftLeft(){
200015a8:	b580      	push	{r7, lr}
200015aa:	b084      	sub	sp, #16
200015ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < 255; i++){
200015ae:	2300      	movs	r3, #0
200015b0:	60fb      	str	r3, [r7, #12]
200015b2:	e01b      	b.n	200015ec <shiftLeft+0x44>
		for(int j = 0; j < 8; j++){
200015b4:	2300      	movs	r3, #0
200015b6:	60bb      	str	r3, [r7, #8]
200015b8:	e012      	b.n	200015e0 <shiftLeft+0x38>
			backBuffer[i][j] = backBuffer[i+1][j];
200015ba:	68fb      	ldr	r3, [r7, #12]
200015bc:	3301      	adds	r3, #1
200015be:	4a17      	ldr	r2, [pc, #92]	; (2000161c <shiftLeft+0x74>)
200015c0:	00db      	lsls	r3, r3, #3
200015c2:	18d2      	adds	r2, r2, r3
200015c4:	68bb      	ldr	r3, [r7, #8]
200015c6:	18d3      	adds	r3, r2, r3
200015c8:	7819      	ldrb	r1, [r3, #0]
200015ca:	4a14      	ldr	r2, [pc, #80]	; (2000161c <shiftLeft+0x74>)
200015cc:	68fb      	ldr	r3, [r7, #12]
200015ce:	00db      	lsls	r3, r3, #3
200015d0:	18d2      	adds	r2, r2, r3
200015d2:	68bb      	ldr	r3, [r7, #8]
200015d4:	18d3      	adds	r3, r2, r3
200015d6:	1c0a      	adds	r2, r1, #0
200015d8:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
200015da:	68bb      	ldr	r3, [r7, #8]
200015dc:	3301      	adds	r3, #1
200015de:	60bb      	str	r3, [r7, #8]
200015e0:	68bb      	ldr	r3, [r7, #8]
200015e2:	2b07      	cmp	r3, #7
200015e4:	dde9      	ble.n	200015ba <shiftLeft+0x12>
	for(int i = 0; i < 255; i++){
200015e6:	68fb      	ldr	r3, [r7, #12]
200015e8:	3301      	adds	r3, #1
200015ea:	60fb      	str	r3, [r7, #12]
200015ec:	68fb      	ldr	r3, [r7, #12]
200015ee:	2bfe      	cmp	r3, #254	; 0xfe
200015f0:	dde0      	ble.n	200015b4 <shiftLeft+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
200015f2:	2300      	movs	r3, #0
200015f4:	607b      	str	r3, [r7, #4]
200015f6:	e00a      	b.n	2000160e <shiftLeft+0x66>
        backBuffer[255][j] = 0; 
200015f8:	4908      	ldr	r1, [pc, #32]	; (2000161c <shiftLeft+0x74>)
200015fa:	23ff      	movs	r3, #255	; 0xff
200015fc:	00db      	lsls	r3, r3, #3
200015fe:	687a      	ldr	r2, [r7, #4]
20001600:	188a      	adds	r2, r1, r2
20001602:	18d3      	adds	r3, r2, r3
20001604:	2200      	movs	r2, #0
20001606:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20001608:	687b      	ldr	r3, [r7, #4]
2000160a:	3301      	adds	r3, #1
2000160c:	607b      	str	r3, [r7, #4]
2000160e:	687b      	ldr	r3, [r7, #4]
20001610:	2b07      	cmp	r3, #7
20001612:	ddf1      	ble.n	200015f8 <shiftLeft+0x50>
    }
}
20001614:	46c0      	nop			; (mov r8, r8)
20001616:	46bd      	mov	sp, r7
20001618:	b004      	add	sp, #16
2000161a:	bd80      	pop	{r7, pc}
2000161c:	20002dac 	andcs	r2, r0, ip, lsr #27

20001620 <ascii_ctrl_bit_set>:



 
 
 void ascii_ctrl_bit_set(unsigned char x){
20001620:	b580      	push	{r7, lr}
20001622:	b084      	sub	sp, #16
20001624:	af00      	add	r7, sp, #0
20001626:	0002      	movs	r2, r0
20001628:	1dfb      	adds	r3, r7, #7
2000162a:	701a      	strb	r2, [r3, #0]
	unsigned char c = *portOdrLow;
2000162c:	4a0c      	ldr	r2, [pc, #48]	; (20001660 <ascii_ctrl_bit_set+0x40>)
2000162e:	210f      	movs	r1, #15
20001630:	187b      	adds	r3, r7, r1
20001632:	7812      	ldrb	r2, [r2, #0]
20001634:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20001636:	1dfa      	adds	r2, r7, #7
20001638:	187b      	adds	r3, r7, r1
2000163a:	7812      	ldrb	r2, [r2, #0]
2000163c:	781b      	ldrb	r3, [r3, #0]
2000163e:	4313      	orrs	r3, r2
20001640:	b2da      	uxtb	r2, r3
20001642:	0008      	movs	r0, r1
20001644:	187b      	adds	r3, r7, r1
20001646:	2104      	movs	r1, #4
20001648:	430a      	orrs	r2, r1
2000164a:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
2000164c:	4a04      	ldr	r2, [pc, #16]	; (20001660 <ascii_ctrl_bit_set+0x40>)
2000164e:	0001      	movs	r1, r0
20001650:	187b      	adds	r3, r7, r1
20001652:	781b      	ldrb	r3, [r3, #0]
20001654:	7013      	strb	r3, [r2, #0]
}
20001656:	46c0      	nop			; (mov r8, r8)
20001658:	46bd      	mov	sp, r7
2000165a:	b004      	add	sp, #16
2000165c:	bd80      	pop	{r7, pc}
2000165e:	46c0      	nop			; (mov r8, r8)
20001660:	40021014 	andmi	r1, r2, r4, lsl r0

20001664 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20001664:	b580      	push	{r7, lr}
20001666:	b084      	sub	sp, #16
20001668:	af00      	add	r7, sp, #0
2000166a:	0002      	movs	r2, r0
2000166c:	1dfb      	adds	r3, r7, #7
2000166e:	701a      	strb	r2, [r3, #0]
	unsigned char c = *portOdrLow;
20001670:	4a0d      	ldr	r2, [pc, #52]	; (200016a8 <ascii_ctrl_bit_clear+0x44>)
20001672:	210f      	movs	r1, #15
20001674:	187b      	adds	r3, r7, r1
20001676:	7812      	ldrb	r2, [r2, #0]
20001678:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000167a:	1dfb      	adds	r3, r7, #7
2000167c:	781b      	ldrb	r3, [r3, #0]
2000167e:	b25b      	sxtb	r3, r3
20001680:	43db      	mvns	r3, r3
20001682:	b25b      	sxtb	r3, r3
20001684:	187a      	adds	r2, r7, r1
20001686:	7812      	ldrb	r2, [r2, #0]
20001688:	b252      	sxtb	r2, r2
2000168a:	4013      	ands	r3, r2
2000168c:	b25a      	sxtb	r2, r3
2000168e:	187b      	adds	r3, r7, r1
20001690:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c | B_SELECT;
20001692:	4a05      	ldr	r2, [pc, #20]	; (200016a8 <ascii_ctrl_bit_clear+0x44>)
20001694:	187b      	adds	r3, r7, r1
20001696:	781b      	ldrb	r3, [r3, #0]
20001698:	2104      	movs	r1, #4
2000169a:	430b      	orrs	r3, r1
2000169c:	b2db      	uxtb	r3, r3
2000169e:	7013      	strb	r3, [r2, #0]
}
200016a0:	46c0      	nop			; (mov r8, r8)
200016a2:	46bd      	mov	sp, r7
200016a4:	b004      	add	sp, #16
200016a6:	bd80      	pop	{r7, pc}
200016a8:	40021014 	andmi	r1, r2, r4, lsl r0

200016ac <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
200016ac:	b580      	push	{r7, lr}
200016ae:	b082      	sub	sp, #8
200016b0:	af00      	add	r7, sp, #0
200016b2:	0002      	movs	r2, r0
200016b4:	1dfb      	adds	r3, r7, #7
200016b6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200016b8:	2040      	movs	r0, #64	; 0x40
200016ba:	f7ff ffb1 	bl	20001620 <ascii_ctrl_bit_set>
	*portOdrHigh = c;
200016be:	4a06      	ldr	r2, [pc, #24]	; (200016d8 <ascii_write_controller+0x2c>)
200016c0:	1dfb      	adds	r3, r7, #7
200016c2:	781b      	ldrb	r3, [r3, #0]
200016c4:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200016c6:	f7fe fca3 	bl	20000010 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200016ca:	2040      	movs	r0, #64	; 0x40
200016cc:	f7ff ffca 	bl	20001664 <ascii_ctrl_bit_clear>
}
200016d0:	46c0      	nop			; (mov r8, r8)
200016d2:	46bd      	mov	sp, r7
200016d4:	b002      	add	sp, #8
200016d6:	bd80      	pop	{r7, pc}
200016d8:	40021015 	andmi	r1, r2, r5, lsl r0

200016dc <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200016dc:	b580      	push	{r7, lr}
200016de:	b082      	sub	sp, #8
200016e0:	af00      	add	r7, sp, #0
200016e2:	0002      	movs	r2, r0
200016e4:	1dfb      	adds	r3, r7, #7
200016e6:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS | B_RW);
200016e8:	2003      	movs	r0, #3
200016ea:	f7ff ffbb 	bl	20001664 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200016ee:	1dfb      	adds	r3, r7, #7
200016f0:	781b      	ldrb	r3, [r3, #0]
200016f2:	0018      	movs	r0, r3
200016f4:	f7ff ffda 	bl	200016ac <ascii_write_controller>
}
200016f8:	46c0      	nop			; (mov r8, r8)
200016fa:	46bd      	mov	sp, r7
200016fc:	b002      	add	sp, #8
200016fe:	bd80      	pop	{r7, pc}

20001700 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20001700:	b580      	push	{r7, lr}
20001702:	b082      	sub	sp, #8
20001704:	af00      	add	r7, sp, #0
20001706:	0002      	movs	r2, r0
20001708:	1dfb      	adds	r3, r7, #7
2000170a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000170c:	2001      	movs	r0, #1
2000170e:	f7ff ff87 	bl	20001620 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20001712:	2002      	movs	r0, #2
20001714:	f7ff ffa6 	bl	20001664 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20001718:	1dfb      	adds	r3, r7, #7
2000171a:	781b      	ldrb	r3, [r3, #0]
2000171c:	0018      	movs	r0, r3
2000171e:	f7ff ffc5 	bl	200016ac <ascii_write_controller>
}
20001722:	46c0      	nop			; (mov r8, r8)
20001724:	46bd      	mov	sp, r7
20001726:	b002      	add	sp, #8
20001728:	bd80      	pop	{r7, pc}

2000172a <ascii_read_controller>:

unsigned char ascii_read_controller(void){
2000172a:	b580      	push	{r7, lr}
2000172c:	b082      	sub	sp, #8
2000172e:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
20001730:	2040      	movs	r0, #64	; 0x40
20001732:	f7ff ff75 	bl	20001620 <ascii_ctrl_bit_set>
	delay_250ns();
20001736:	f7fe fc6b 	bl	20000010 <delay_250ns>
	delay_250ns();
2000173a:	f7fe fc69 	bl	20000010 <delay_250ns>
	c= *portIdrHigh;
2000173e:	4a06      	ldr	r2, [pc, #24]	; (20001758 <ascii_read_controller+0x2e>)
20001740:	1dfb      	adds	r3, r7, #7
20001742:	7812      	ldrb	r2, [r2, #0]
20001744:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20001746:	2040      	movs	r0, #64	; 0x40
20001748:	f7ff ff8c 	bl	20001664 <ascii_ctrl_bit_clear>
	return c;
2000174c:	1dfb      	adds	r3, r7, #7
2000174e:	781b      	ldrb	r3, [r3, #0]
}
20001750:	0018      	movs	r0, r3
20001752:	46bd      	mov	sp, r7
20001754:	b002      	add	sp, #8
20001756:	bd80      	pop	{r7, pc}
20001758:	40021011 	andmi	r1, r2, r1, lsl r0

2000175c <ascii_read_data>:

unsigned char ascii_read_data(void){
2000175c:	b590      	push	{r4, r7, lr}
2000175e:	b083      	sub	sp, #12
20001760:	af00      	add	r7, sp, #0
	unsigned char c;
	*portModer = 0x00005555;
20001762:	4b0a      	ldr	r3, [pc, #40]	; (2000178c <ascii_read_data+0x30>)
20001764:	4a0a      	ldr	r2, [pc, #40]	; (20001790 <ascii_read_data+0x34>)
20001766:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW |B_RS);
20001768:	2003      	movs	r0, #3
2000176a:	f7ff ff59 	bl	20001620 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
2000176e:	1dfc      	adds	r4, r7, #7
20001770:	f7ff ffdb 	bl	2000172a <ascii_read_controller>
20001774:	0003      	movs	r3, r0
20001776:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
20001778:	4b04      	ldr	r3, [pc, #16]	; (2000178c <ascii_read_data+0x30>)
2000177a:	4a06      	ldr	r2, [pc, #24]	; (20001794 <ascii_read_data+0x38>)
2000177c:	601a      	str	r2, [r3, #0]
	return c;
2000177e:	1dfb      	adds	r3, r7, #7
20001780:	781b      	ldrb	r3, [r3, #0]
}
20001782:	0018      	movs	r0, r3
20001784:	46bd      	mov	sp, r7
20001786:	b003      	add	sp, #12
20001788:	bd90      	pop	{r4, r7, pc}
2000178a:	46c0      	nop			; (mov r8, r8)
2000178c:	40021000 	andmi	r1, r2, r0
20001790:	00005555 	andeq	r5, r0, r5, asr r5
20001794:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001798 <ascii_read_status>:

unsigned char ascii_read_status(void){
20001798:	b590      	push	{r4, r7, lr}
2000179a:	b083      	sub	sp, #12
2000179c:	af00      	add	r7, sp, #0
	unsigned char c;
	*portModer = 0x00005555;
2000179e:	4b0b      	ldr	r3, [pc, #44]	; (200017cc <ascii_read_status+0x34>)
200017a0:	4a0b      	ldr	r2, [pc, #44]	; (200017d0 <ascii_read_status+0x38>)
200017a2:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200017a4:	2002      	movs	r0, #2
200017a6:	f7ff ff3b 	bl	20001620 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
200017aa:	2001      	movs	r0, #1
200017ac:	f7ff ff5a 	bl	20001664 <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
200017b0:	1dfc      	adds	r4, r7, #7
200017b2:	f7ff ffba 	bl	2000172a <ascii_read_controller>
200017b6:	0003      	movs	r3, r0
200017b8:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200017ba:	4b04      	ldr	r3, [pc, #16]	; (200017cc <ascii_read_status+0x34>)
200017bc:	4a05      	ldr	r2, [pc, #20]	; (200017d4 <ascii_read_status+0x3c>)
200017be:	601a      	str	r2, [r3, #0]
	return c;
200017c0:	1dfb      	adds	r3, r7, #7
200017c2:	781b      	ldrb	r3, [r3, #0]
}
200017c4:	0018      	movs	r0, r3
200017c6:	46bd      	mov	sp, r7
200017c8:	b003      	add	sp, #12
200017ca:	bd90      	pop	{r4, r7, pc}
200017cc:	40021000 	andmi	r1, r2, r0
200017d0:	00005555 	andeq	r5, r0, r5, asr r5
200017d4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200017d8 <ascii_command>:

void ascii_command(unsigned char command){
200017d8:	b580      	push	{r7, lr}
200017da:	b082      	sub	sp, #8
200017dc:	af00      	add	r7, sp, #0
200017de:	0002      	movs	r2, r0
200017e0:	1dfb      	adds	r3, r7, #7
200017e2:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80)==0x80){}	/*v√§nta tills display √§r klar att ta emot kommando */
200017e4:	46c0      	nop			; (mov r8, r8)
200017e6:	f7ff ffd7 	bl	20001798 <ascii_read_status>
200017ea:	0003      	movs	r3, r0
200017ec:	001a      	movs	r2, r3
200017ee:	2380      	movs	r3, #128	; 0x80
200017f0:	4013      	ands	r3, r2
200017f2:	2b80      	cmp	r3, #128	; 0x80
200017f4:	d0f7      	beq.n	200017e6 <ascii_command+0xe>
	delaymicros(8); 								/*latenstid f√∂r kommando*/
200017f6:	2008      	movs	r0, #8
200017f8:	f7fe fc4e 	bl	20000098 <delaymicros>
	ascii_write_cmd(command);						
200017fc:	1dfb      	adds	r3, r7, #7
200017fe:	781b      	ldrb	r3, [r3, #0]
20001800:	0018      	movs	r0, r3
20001802:	f7ff ff6b 	bl	200016dc <ascii_write_cmd>
	delaymillis (2); 								/*ist√§llet f√∂r 1,53 ms*/
20001806:	2002      	movs	r0, #2
20001808:	f7fe fc5b 	bl	200000c2 <delaymillis>
}
2000180c:	46c0      	nop			; (mov r8, r8)
2000180e:	46bd      	mov	sp, r7
20001810:	b002      	add	sp, #8
20001812:	bd80      	pop	{r7, pc}

20001814 <ascii_init>:

void ascii_init(void){
20001814:	b580      	push	{r7, lr}
20001816:	af00      	add	r7, sp, #0
    delaymicros(20);
20001818:	2014      	movs	r0, #20
2000181a:	f7fe fc3d 	bl	20000098 <delaymicros>
	ascii_write_controller(0x38);   //2 rader, 5x8 punkter
2000181e:	2038      	movs	r0, #56	; 0x38
20001820:	f7ff ff44 	bl	200016ac <ascii_write_controller>
	delaymicros(39);
20001824:	2027      	movs	r0, #39	; 0x27
20001826:	f7fe fc37 	bl	20000098 <delaymicros>
    
    delaymicros(20);
2000182a:	2014      	movs	r0, #20
2000182c:	f7fe fc34 	bl	20000098 <delaymicros>
	ascii_write_controller(0x0C);      // T√§nd display, t√§nd mark√∂r ("cursor"), konstant visning.
20001830:	200c      	movs	r0, #12
20001832:	f7ff ff3b 	bl	200016ac <ascii_write_controller>
	delaymicros(39);
20001836:	2027      	movs	r0, #39	; 0x27
20001838:	f7fe fc2e 	bl	20000098 <delaymicros>
	
	delaymicros(20);
2000183c:	2014      	movs	r0, #20
2000183e:	f7fe fc2b 	bl	20000098 <delaymicros>
	ascii_write_controller(0x01);  	// Clear disp
20001842:	2001      	movs	r0, #1
20001844:	f7ff ff32 	bl	200016ac <ascii_write_controller>
	delaymicros(39);
20001848:	2027      	movs	r0, #39	; 0x27
2000184a:	f7fe fc25 	bl	20000098 <delaymicros>
	
	delaymicros(20);
2000184e:	2014      	movs	r0, #20
20001850:	f7fe fc22 	bl	20000098 <delaymicros>
	ascii_write_controller(0x06);  // Adressering med "increment", inget skift av adressbuffern
20001854:	2006      	movs	r0, #6
20001856:	f7ff ff29 	bl	200016ac <ascii_write_controller>
	delaymicros(39);					/* adressering med increment, inget skift av adressbufferten*/
2000185a:	2027      	movs	r0, #39	; 0x27
2000185c:	f7fe fc1c 	bl	20000098 <delaymicros>
}
20001860:	46c0      	nop			; (mov r8, r8)
20001862:	46bd      	mov	sp, r7
20001864:	bd80      	pop	{r7, pc}

20001866 <ascii_clear_disp>:

void ascii_clear_disp(){
20001866:	b580      	push	{r7, lr}
20001868:	af00      	add	r7, sp, #0
    delaymicros(20);
2000186a:	2014      	movs	r0, #20
2000186c:	f7fe fc14 	bl	20000098 <delaymicros>
	ascii_write_cmd(0x01);  	// Clear disp
20001870:	2001      	movs	r0, #1
20001872:	f7ff ff33 	bl	200016dc <ascii_write_cmd>
	delaymillis(2);
20001876:	2002      	movs	r0, #2
20001878:	f7fe fc23 	bl	200000c2 <delaymillis>
}
2000187c:	46c0      	nop			; (mov r8, r8)
2000187e:	46bd      	mov	sp, r7
20001880:	bd80      	pop	{r7, pc}

20001882 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20001882:	b580      	push	{r7, lr}
20001884:	b082      	sub	sp, #8
20001886:	af00      	add	r7, sp, #0
20001888:	0002      	movs	r2, r0
2000188a:	1dfb      	adds	r3, r7, #7
2000188c:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80)==0x80){}	/*v√§nta tills display √§r klar att ta emot kommando */
2000188e:	46c0      	nop			; (mov r8, r8)
20001890:	f7ff ff82 	bl	20001798 <ascii_read_status>
20001894:	0003      	movs	r3, r0
20001896:	001a      	movs	r2, r3
20001898:	2380      	movs	r3, #128	; 0x80
2000189a:	4013      	ands	r3, r2
2000189c:	2b80      	cmp	r3, #128	; 0x80
2000189e:	d0f7      	beq.n	20001890 <ascii_write_char+0xe>
	delaymicros(8); 
200018a0:	2008      	movs	r0, #8
200018a2:	f7fe fbf9 	bl	20000098 <delaymicros>
	ascii_write_data(c);
200018a6:	1dfb      	adds	r3, r7, #7
200018a8:	781b      	ldrb	r3, [r3, #0]
200018aa:	0018      	movs	r0, r3
200018ac:	f7ff ff28 	bl	20001700 <ascii_write_data>
	delaymillis (2); 
200018b0:	2002      	movs	r0, #2
200018b2:	f7fe fc06 	bl	200000c2 <delaymillis>
}
200018b6:	46c0      	nop			; (mov r8, r8)
200018b8:	46bd      	mov	sp, r7
200018ba:	b002      	add	sp, #8
200018bc:	bd80      	pop	{r7, pc}

200018be <ascii_gotoxy>:

void ascii_gotoxy( int column, int row){
200018be:	b580      	push	{r7, lr}
200018c0:	b084      	sub	sp, #16
200018c2:	af00      	add	r7, sp, #0
200018c4:	6078      	str	r0, [r7, #4]
200018c6:	6039      	str	r1, [r7, #0]
	if(row >=1 && row <=20 && column >=1 && column <=2){
200018c8:	683b      	ldr	r3, [r7, #0]
200018ca:	2b00      	cmp	r3, #0
200018cc:	dd1a      	ble.n	20001904 <ascii_gotoxy+0x46>
200018ce:	683b      	ldr	r3, [r7, #0]
200018d0:	2b14      	cmp	r3, #20
200018d2:	dc17      	bgt.n	20001904 <ascii_gotoxy+0x46>
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	2b00      	cmp	r3, #0
200018d8:	dd14      	ble.n	20001904 <ascii_gotoxy+0x46>
200018da:	687b      	ldr	r3, [r7, #4]
200018dc:	2b02      	cmp	r3, #2
200018de:	dc11      	bgt.n	20001904 <ascii_gotoxy+0x46>
		unsigned int adress = row-1;
200018e0:	683b      	ldr	r3, [r7, #0]
200018e2:	3b01      	subs	r3, #1
200018e4:	60fb      	str	r3, [r7, #12]
		if (column == 2){
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	2b02      	cmp	r3, #2
200018ea:	d102      	bne.n	200018f2 <ascii_gotoxy+0x34>
			adress = adress + 0x40;
200018ec:	68fb      	ldr	r3, [r7, #12]
200018ee:	3340      	adds	r3, #64	; 0x40
200018f0:	60fb      	str	r3, [r7, #12]
		}
		ascii_write_cmd(0x80 | adress);
200018f2:	68fb      	ldr	r3, [r7, #12]
200018f4:	b2db      	uxtb	r3, r3
200018f6:	2280      	movs	r2, #128	; 0x80
200018f8:	4252      	negs	r2, r2
200018fa:	4313      	orrs	r3, r2
200018fc:	b2db      	uxtb	r3, r3
200018fe:	0018      	movs	r0, r3
20001900:	f7ff feec 	bl	200016dc <ascii_write_cmd>
	}
}
20001904:	46c0      	nop			; (mov r8, r8)
20001906:	46bd      	mov	sp, r7
20001908:	b004      	add	sp, #16
2000190a:	bd80      	pop	{r7, pc}

2000190c <stringToAscii>:

void stringToAscii(char str[], int col, int row){
2000190c:	b580      	push	{r7, lr}
2000190e:	b086      	sub	sp, #24
20001910:	af00      	add	r7, sp, #0
20001912:	60f8      	str	r0, [r7, #12]
20001914:	60b9      	str	r1, [r7, #8]
20001916:	607a      	str	r2, [r7, #4]
    graphic_ctrl_bit_clear(B_E);
20001918:	2040      	movs	r0, #64	; 0x40
2000191a:	f7ff fb37 	bl	20000f8c <graphic_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_E);
2000191e:	2040      	movs	r0, #64	; 0x40
20001920:	f7ff fe7e 	bl	20001620 <ascii_ctrl_bit_set>
    
	char *s;
	ascii_gotoxy(col,row);
20001924:	687a      	ldr	r2, [r7, #4]
20001926:	68bb      	ldr	r3, [r7, #8]
20001928:	0011      	movs	r1, r2
2000192a:	0018      	movs	r0, r3
2000192c:	f7ff ffc7 	bl	200018be <ascii_gotoxy>
	s = str;
20001930:	68fb      	ldr	r3, [r7, #12]
20001932:	617b      	str	r3, [r7, #20]
	while (*s)
20001934:	e006      	b.n	20001944 <stringToAscii+0x38>
		ascii_write_char(*s++);
20001936:	697b      	ldr	r3, [r7, #20]
20001938:	1c5a      	adds	r2, r3, #1
2000193a:	617a      	str	r2, [r7, #20]
2000193c:	781b      	ldrb	r3, [r3, #0]
2000193e:	0018      	movs	r0, r3
20001940:	f7ff ff9f 	bl	20001882 <ascii_write_char>
	while (*s)
20001944:	697b      	ldr	r3, [r7, #20]
20001946:	781b      	ldrb	r3, [r3, #0]
20001948:	2b00      	cmp	r3, #0
2000194a:	d1f4      	bne.n	20001936 <stringToAscii+0x2a>
	
    ascii_ctrl_bit_clear(B_E);
2000194c:	2040      	movs	r0, #64	; 0x40
2000194e:	f7ff fe89 	bl	20001664 <ascii_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_E);
20001952:	2040      	movs	r0, #64	; 0x40
20001954:	f7ff faf8 	bl	20000f48 <graphic_ctrl_bit_set>
}
20001958:	46c0      	nop			; (mov r8, r8)
2000195a:	46bd      	mov	sp, r7
2000195c:	b006      	add	sp, #24
2000195e:	bd80      	pop	{r7, pc}

20001960 <__udivsi3>:
20001960:	2200      	movs	r2, #0
20001962:	0843      	lsrs	r3, r0, #1
20001964:	428b      	cmp	r3, r1
20001966:	d374      	bcc.n	20001a52 <__udivsi3+0xf2>
20001968:	0903      	lsrs	r3, r0, #4
2000196a:	428b      	cmp	r3, r1
2000196c:	d35f      	bcc.n	20001a2e <__udivsi3+0xce>
2000196e:	0a03      	lsrs	r3, r0, #8
20001970:	428b      	cmp	r3, r1
20001972:	d344      	bcc.n	200019fe <__udivsi3+0x9e>
20001974:	0b03      	lsrs	r3, r0, #12
20001976:	428b      	cmp	r3, r1
20001978:	d328      	bcc.n	200019cc <__udivsi3+0x6c>
2000197a:	0c03      	lsrs	r3, r0, #16
2000197c:	428b      	cmp	r3, r1
2000197e:	d30d      	bcc.n	2000199c <__udivsi3+0x3c>
20001980:	22ff      	movs	r2, #255	; 0xff
20001982:	0209      	lsls	r1, r1, #8
20001984:	ba12      	rev	r2, r2
20001986:	0c03      	lsrs	r3, r0, #16
20001988:	428b      	cmp	r3, r1
2000198a:	d302      	bcc.n	20001992 <__udivsi3+0x32>
2000198c:	1212      	asrs	r2, r2, #8
2000198e:	0209      	lsls	r1, r1, #8
20001990:	d065      	beq.n	20001a5e <__udivsi3+0xfe>
20001992:	0b03      	lsrs	r3, r0, #12
20001994:	428b      	cmp	r3, r1
20001996:	d319      	bcc.n	200019cc <__udivsi3+0x6c>
20001998:	e000      	b.n	2000199c <__udivsi3+0x3c>
2000199a:	0a09      	lsrs	r1, r1, #8
2000199c:	0bc3      	lsrs	r3, r0, #15
2000199e:	428b      	cmp	r3, r1
200019a0:	d301      	bcc.n	200019a6 <__udivsi3+0x46>
200019a2:	03cb      	lsls	r3, r1, #15
200019a4:	1ac0      	subs	r0, r0, r3
200019a6:	4152      	adcs	r2, r2
200019a8:	0b83      	lsrs	r3, r0, #14
200019aa:	428b      	cmp	r3, r1
200019ac:	d301      	bcc.n	200019b2 <__udivsi3+0x52>
200019ae:	038b      	lsls	r3, r1, #14
200019b0:	1ac0      	subs	r0, r0, r3
200019b2:	4152      	adcs	r2, r2
200019b4:	0b43      	lsrs	r3, r0, #13
200019b6:	428b      	cmp	r3, r1
200019b8:	d301      	bcc.n	200019be <__udivsi3+0x5e>
200019ba:	034b      	lsls	r3, r1, #13
200019bc:	1ac0      	subs	r0, r0, r3
200019be:	4152      	adcs	r2, r2
200019c0:	0b03      	lsrs	r3, r0, #12
200019c2:	428b      	cmp	r3, r1
200019c4:	d301      	bcc.n	200019ca <__udivsi3+0x6a>
200019c6:	030b      	lsls	r3, r1, #12
200019c8:	1ac0      	subs	r0, r0, r3
200019ca:	4152      	adcs	r2, r2
200019cc:	0ac3      	lsrs	r3, r0, #11
200019ce:	428b      	cmp	r3, r1
200019d0:	d301      	bcc.n	200019d6 <__udivsi3+0x76>
200019d2:	02cb      	lsls	r3, r1, #11
200019d4:	1ac0      	subs	r0, r0, r3
200019d6:	4152      	adcs	r2, r2
200019d8:	0a83      	lsrs	r3, r0, #10
200019da:	428b      	cmp	r3, r1
200019dc:	d301      	bcc.n	200019e2 <__udivsi3+0x82>
200019de:	028b      	lsls	r3, r1, #10
200019e0:	1ac0      	subs	r0, r0, r3
200019e2:	4152      	adcs	r2, r2
200019e4:	0a43      	lsrs	r3, r0, #9
200019e6:	428b      	cmp	r3, r1
200019e8:	d301      	bcc.n	200019ee <__udivsi3+0x8e>
200019ea:	024b      	lsls	r3, r1, #9
200019ec:	1ac0      	subs	r0, r0, r3
200019ee:	4152      	adcs	r2, r2
200019f0:	0a03      	lsrs	r3, r0, #8
200019f2:	428b      	cmp	r3, r1
200019f4:	d301      	bcc.n	200019fa <__udivsi3+0x9a>
200019f6:	020b      	lsls	r3, r1, #8
200019f8:	1ac0      	subs	r0, r0, r3
200019fa:	4152      	adcs	r2, r2
200019fc:	d2cd      	bcs.n	2000199a <__udivsi3+0x3a>
200019fe:	09c3      	lsrs	r3, r0, #7
20001a00:	428b      	cmp	r3, r1
20001a02:	d301      	bcc.n	20001a08 <__udivsi3+0xa8>
20001a04:	01cb      	lsls	r3, r1, #7
20001a06:	1ac0      	subs	r0, r0, r3
20001a08:	4152      	adcs	r2, r2
20001a0a:	0983      	lsrs	r3, r0, #6
20001a0c:	428b      	cmp	r3, r1
20001a0e:	d301      	bcc.n	20001a14 <__udivsi3+0xb4>
20001a10:	018b      	lsls	r3, r1, #6
20001a12:	1ac0      	subs	r0, r0, r3
20001a14:	4152      	adcs	r2, r2
20001a16:	0943      	lsrs	r3, r0, #5
20001a18:	428b      	cmp	r3, r1
20001a1a:	d301      	bcc.n	20001a20 <__udivsi3+0xc0>
20001a1c:	014b      	lsls	r3, r1, #5
20001a1e:	1ac0      	subs	r0, r0, r3
20001a20:	4152      	adcs	r2, r2
20001a22:	0903      	lsrs	r3, r0, #4
20001a24:	428b      	cmp	r3, r1
20001a26:	d301      	bcc.n	20001a2c <__udivsi3+0xcc>
20001a28:	010b      	lsls	r3, r1, #4
20001a2a:	1ac0      	subs	r0, r0, r3
20001a2c:	4152      	adcs	r2, r2
20001a2e:	08c3      	lsrs	r3, r0, #3
20001a30:	428b      	cmp	r3, r1
20001a32:	d301      	bcc.n	20001a38 <__udivsi3+0xd8>
20001a34:	00cb      	lsls	r3, r1, #3
20001a36:	1ac0      	subs	r0, r0, r3
20001a38:	4152      	adcs	r2, r2
20001a3a:	0883      	lsrs	r3, r0, #2
20001a3c:	428b      	cmp	r3, r1
20001a3e:	d301      	bcc.n	20001a44 <__udivsi3+0xe4>
20001a40:	008b      	lsls	r3, r1, #2
20001a42:	1ac0      	subs	r0, r0, r3
20001a44:	4152      	adcs	r2, r2
20001a46:	0843      	lsrs	r3, r0, #1
20001a48:	428b      	cmp	r3, r1
20001a4a:	d301      	bcc.n	20001a50 <__udivsi3+0xf0>
20001a4c:	004b      	lsls	r3, r1, #1
20001a4e:	1ac0      	subs	r0, r0, r3
20001a50:	4152      	adcs	r2, r2
20001a52:	1a41      	subs	r1, r0, r1
20001a54:	d200      	bcs.n	20001a58 <__udivsi3+0xf8>
20001a56:	4601      	mov	r1, r0
20001a58:	4152      	adcs	r2, r2
20001a5a:	4610      	mov	r0, r2
20001a5c:	4770      	bx	lr
20001a5e:	e7ff      	b.n	20001a60 <__udivsi3+0x100>
20001a60:	b501      	push	{r0, lr}
20001a62:	2000      	movs	r0, #0
20001a64:	f000 f8f0 	bl	20001c48 <__aeabi_idiv0>
20001a68:	bd02      	pop	{r1, pc}
20001a6a:	46c0      	nop			; (mov r8, r8)

20001a6c <__aeabi_uidivmod>:
20001a6c:	2900      	cmp	r1, #0
20001a6e:	d0f7      	beq.n	20001a60 <__udivsi3+0x100>
20001a70:	e776      	b.n	20001960 <__udivsi3>
20001a72:	4770      	bx	lr

20001a74 <__divsi3>:
20001a74:	4603      	mov	r3, r0
20001a76:	430b      	orrs	r3, r1
20001a78:	d47f      	bmi.n	20001b7a <__divsi3+0x106>
20001a7a:	2200      	movs	r2, #0
20001a7c:	0843      	lsrs	r3, r0, #1
20001a7e:	428b      	cmp	r3, r1
20001a80:	d374      	bcc.n	20001b6c <__divsi3+0xf8>
20001a82:	0903      	lsrs	r3, r0, #4
20001a84:	428b      	cmp	r3, r1
20001a86:	d35f      	bcc.n	20001b48 <__divsi3+0xd4>
20001a88:	0a03      	lsrs	r3, r0, #8
20001a8a:	428b      	cmp	r3, r1
20001a8c:	d344      	bcc.n	20001b18 <__divsi3+0xa4>
20001a8e:	0b03      	lsrs	r3, r0, #12
20001a90:	428b      	cmp	r3, r1
20001a92:	d328      	bcc.n	20001ae6 <__divsi3+0x72>
20001a94:	0c03      	lsrs	r3, r0, #16
20001a96:	428b      	cmp	r3, r1
20001a98:	d30d      	bcc.n	20001ab6 <__divsi3+0x42>
20001a9a:	22ff      	movs	r2, #255	; 0xff
20001a9c:	0209      	lsls	r1, r1, #8
20001a9e:	ba12      	rev	r2, r2
20001aa0:	0c03      	lsrs	r3, r0, #16
20001aa2:	428b      	cmp	r3, r1
20001aa4:	d302      	bcc.n	20001aac <__divsi3+0x38>
20001aa6:	1212      	asrs	r2, r2, #8
20001aa8:	0209      	lsls	r1, r1, #8
20001aaa:	d065      	beq.n	20001b78 <__divsi3+0x104>
20001aac:	0b03      	lsrs	r3, r0, #12
20001aae:	428b      	cmp	r3, r1
20001ab0:	d319      	bcc.n	20001ae6 <__divsi3+0x72>
20001ab2:	e000      	b.n	20001ab6 <__divsi3+0x42>
20001ab4:	0a09      	lsrs	r1, r1, #8
20001ab6:	0bc3      	lsrs	r3, r0, #15
20001ab8:	428b      	cmp	r3, r1
20001aba:	d301      	bcc.n	20001ac0 <__divsi3+0x4c>
20001abc:	03cb      	lsls	r3, r1, #15
20001abe:	1ac0      	subs	r0, r0, r3
20001ac0:	4152      	adcs	r2, r2
20001ac2:	0b83      	lsrs	r3, r0, #14
20001ac4:	428b      	cmp	r3, r1
20001ac6:	d301      	bcc.n	20001acc <__divsi3+0x58>
20001ac8:	038b      	lsls	r3, r1, #14
20001aca:	1ac0      	subs	r0, r0, r3
20001acc:	4152      	adcs	r2, r2
20001ace:	0b43      	lsrs	r3, r0, #13
20001ad0:	428b      	cmp	r3, r1
20001ad2:	d301      	bcc.n	20001ad8 <__divsi3+0x64>
20001ad4:	034b      	lsls	r3, r1, #13
20001ad6:	1ac0      	subs	r0, r0, r3
20001ad8:	4152      	adcs	r2, r2
20001ada:	0b03      	lsrs	r3, r0, #12
20001adc:	428b      	cmp	r3, r1
20001ade:	d301      	bcc.n	20001ae4 <__divsi3+0x70>
20001ae0:	030b      	lsls	r3, r1, #12
20001ae2:	1ac0      	subs	r0, r0, r3
20001ae4:	4152      	adcs	r2, r2
20001ae6:	0ac3      	lsrs	r3, r0, #11
20001ae8:	428b      	cmp	r3, r1
20001aea:	d301      	bcc.n	20001af0 <__divsi3+0x7c>
20001aec:	02cb      	lsls	r3, r1, #11
20001aee:	1ac0      	subs	r0, r0, r3
20001af0:	4152      	adcs	r2, r2
20001af2:	0a83      	lsrs	r3, r0, #10
20001af4:	428b      	cmp	r3, r1
20001af6:	d301      	bcc.n	20001afc <__divsi3+0x88>
20001af8:	028b      	lsls	r3, r1, #10
20001afa:	1ac0      	subs	r0, r0, r3
20001afc:	4152      	adcs	r2, r2
20001afe:	0a43      	lsrs	r3, r0, #9
20001b00:	428b      	cmp	r3, r1
20001b02:	d301      	bcc.n	20001b08 <__divsi3+0x94>
20001b04:	024b      	lsls	r3, r1, #9
20001b06:	1ac0      	subs	r0, r0, r3
20001b08:	4152      	adcs	r2, r2
20001b0a:	0a03      	lsrs	r3, r0, #8
20001b0c:	428b      	cmp	r3, r1
20001b0e:	d301      	bcc.n	20001b14 <__divsi3+0xa0>
20001b10:	020b      	lsls	r3, r1, #8
20001b12:	1ac0      	subs	r0, r0, r3
20001b14:	4152      	adcs	r2, r2
20001b16:	d2cd      	bcs.n	20001ab4 <__divsi3+0x40>
20001b18:	09c3      	lsrs	r3, r0, #7
20001b1a:	428b      	cmp	r3, r1
20001b1c:	d301      	bcc.n	20001b22 <__divsi3+0xae>
20001b1e:	01cb      	lsls	r3, r1, #7
20001b20:	1ac0      	subs	r0, r0, r3
20001b22:	4152      	adcs	r2, r2
20001b24:	0983      	lsrs	r3, r0, #6
20001b26:	428b      	cmp	r3, r1
20001b28:	d301      	bcc.n	20001b2e <__divsi3+0xba>
20001b2a:	018b      	lsls	r3, r1, #6
20001b2c:	1ac0      	subs	r0, r0, r3
20001b2e:	4152      	adcs	r2, r2
20001b30:	0943      	lsrs	r3, r0, #5
20001b32:	428b      	cmp	r3, r1
20001b34:	d301      	bcc.n	20001b3a <__divsi3+0xc6>
20001b36:	014b      	lsls	r3, r1, #5
20001b38:	1ac0      	subs	r0, r0, r3
20001b3a:	4152      	adcs	r2, r2
20001b3c:	0903      	lsrs	r3, r0, #4
20001b3e:	428b      	cmp	r3, r1
20001b40:	d301      	bcc.n	20001b46 <__divsi3+0xd2>
20001b42:	010b      	lsls	r3, r1, #4
20001b44:	1ac0      	subs	r0, r0, r3
20001b46:	4152      	adcs	r2, r2
20001b48:	08c3      	lsrs	r3, r0, #3
20001b4a:	428b      	cmp	r3, r1
20001b4c:	d301      	bcc.n	20001b52 <__divsi3+0xde>
20001b4e:	00cb      	lsls	r3, r1, #3
20001b50:	1ac0      	subs	r0, r0, r3
20001b52:	4152      	adcs	r2, r2
20001b54:	0883      	lsrs	r3, r0, #2
20001b56:	428b      	cmp	r3, r1
20001b58:	d301      	bcc.n	20001b5e <__divsi3+0xea>
20001b5a:	008b      	lsls	r3, r1, #2
20001b5c:	1ac0      	subs	r0, r0, r3
20001b5e:	4152      	adcs	r2, r2
20001b60:	0843      	lsrs	r3, r0, #1
20001b62:	428b      	cmp	r3, r1
20001b64:	d301      	bcc.n	20001b6a <__divsi3+0xf6>
20001b66:	004b      	lsls	r3, r1, #1
20001b68:	1ac0      	subs	r0, r0, r3
20001b6a:	4152      	adcs	r2, r2
20001b6c:	1a41      	subs	r1, r0, r1
20001b6e:	d200      	bcs.n	20001b72 <__divsi3+0xfe>
20001b70:	4601      	mov	r1, r0
20001b72:	4152      	adcs	r2, r2
20001b74:	4610      	mov	r0, r2
20001b76:	4770      	bx	lr
20001b78:	e05d      	b.n	20001c36 <__divsi3+0x1c2>
20001b7a:	0fca      	lsrs	r2, r1, #31
20001b7c:	d000      	beq.n	20001b80 <__divsi3+0x10c>
20001b7e:	4249      	negs	r1, r1
20001b80:	1003      	asrs	r3, r0, #32
20001b82:	d300      	bcc.n	20001b86 <__divsi3+0x112>
20001b84:	4240      	negs	r0, r0
20001b86:	4053      	eors	r3, r2
20001b88:	2200      	movs	r2, #0
20001b8a:	469c      	mov	ip, r3
20001b8c:	0903      	lsrs	r3, r0, #4
20001b8e:	428b      	cmp	r3, r1
20001b90:	d32d      	bcc.n	20001bee <__divsi3+0x17a>
20001b92:	0a03      	lsrs	r3, r0, #8
20001b94:	428b      	cmp	r3, r1
20001b96:	d312      	bcc.n	20001bbe <__divsi3+0x14a>
20001b98:	22fc      	movs	r2, #252	; 0xfc
20001b9a:	0189      	lsls	r1, r1, #6
20001b9c:	ba12      	rev	r2, r2
20001b9e:	0a03      	lsrs	r3, r0, #8
20001ba0:	428b      	cmp	r3, r1
20001ba2:	d30c      	bcc.n	20001bbe <__divsi3+0x14a>
20001ba4:	0189      	lsls	r1, r1, #6
20001ba6:	1192      	asrs	r2, r2, #6
20001ba8:	428b      	cmp	r3, r1
20001baa:	d308      	bcc.n	20001bbe <__divsi3+0x14a>
20001bac:	0189      	lsls	r1, r1, #6
20001bae:	1192      	asrs	r2, r2, #6
20001bb0:	428b      	cmp	r3, r1
20001bb2:	d304      	bcc.n	20001bbe <__divsi3+0x14a>
20001bb4:	0189      	lsls	r1, r1, #6
20001bb6:	d03a      	beq.n	20001c2e <__divsi3+0x1ba>
20001bb8:	1192      	asrs	r2, r2, #6
20001bba:	e000      	b.n	20001bbe <__divsi3+0x14a>
20001bbc:	0989      	lsrs	r1, r1, #6
20001bbe:	09c3      	lsrs	r3, r0, #7
20001bc0:	428b      	cmp	r3, r1
20001bc2:	d301      	bcc.n	20001bc8 <__divsi3+0x154>
20001bc4:	01cb      	lsls	r3, r1, #7
20001bc6:	1ac0      	subs	r0, r0, r3
20001bc8:	4152      	adcs	r2, r2
20001bca:	0983      	lsrs	r3, r0, #6
20001bcc:	428b      	cmp	r3, r1
20001bce:	d301      	bcc.n	20001bd4 <__divsi3+0x160>
20001bd0:	018b      	lsls	r3, r1, #6
20001bd2:	1ac0      	subs	r0, r0, r3
20001bd4:	4152      	adcs	r2, r2
20001bd6:	0943      	lsrs	r3, r0, #5
20001bd8:	428b      	cmp	r3, r1
20001bda:	d301      	bcc.n	20001be0 <__divsi3+0x16c>
20001bdc:	014b      	lsls	r3, r1, #5
20001bde:	1ac0      	subs	r0, r0, r3
20001be0:	4152      	adcs	r2, r2
20001be2:	0903      	lsrs	r3, r0, #4
20001be4:	428b      	cmp	r3, r1
20001be6:	d301      	bcc.n	20001bec <__divsi3+0x178>
20001be8:	010b      	lsls	r3, r1, #4
20001bea:	1ac0      	subs	r0, r0, r3
20001bec:	4152      	adcs	r2, r2
20001bee:	08c3      	lsrs	r3, r0, #3
20001bf0:	428b      	cmp	r3, r1
20001bf2:	d301      	bcc.n	20001bf8 <__divsi3+0x184>
20001bf4:	00cb      	lsls	r3, r1, #3
20001bf6:	1ac0      	subs	r0, r0, r3
20001bf8:	4152      	adcs	r2, r2
20001bfa:	0883      	lsrs	r3, r0, #2
20001bfc:	428b      	cmp	r3, r1
20001bfe:	d301      	bcc.n	20001c04 <__divsi3+0x190>
20001c00:	008b      	lsls	r3, r1, #2
20001c02:	1ac0      	subs	r0, r0, r3
20001c04:	4152      	adcs	r2, r2
20001c06:	d2d9      	bcs.n	20001bbc <__divsi3+0x148>
20001c08:	0843      	lsrs	r3, r0, #1
20001c0a:	428b      	cmp	r3, r1
20001c0c:	d301      	bcc.n	20001c12 <__divsi3+0x19e>
20001c0e:	004b      	lsls	r3, r1, #1
20001c10:	1ac0      	subs	r0, r0, r3
20001c12:	4152      	adcs	r2, r2
20001c14:	1a41      	subs	r1, r0, r1
20001c16:	d200      	bcs.n	20001c1a <__divsi3+0x1a6>
20001c18:	4601      	mov	r1, r0
20001c1a:	4663      	mov	r3, ip
20001c1c:	4152      	adcs	r2, r2
20001c1e:	105b      	asrs	r3, r3, #1
20001c20:	4610      	mov	r0, r2
20001c22:	d301      	bcc.n	20001c28 <__divsi3+0x1b4>
20001c24:	4240      	negs	r0, r0
20001c26:	2b00      	cmp	r3, #0
20001c28:	d500      	bpl.n	20001c2c <__divsi3+0x1b8>
20001c2a:	4249      	negs	r1, r1
20001c2c:	4770      	bx	lr
20001c2e:	4663      	mov	r3, ip
20001c30:	105b      	asrs	r3, r3, #1
20001c32:	d300      	bcc.n	20001c36 <__divsi3+0x1c2>
20001c34:	4240      	negs	r0, r0
20001c36:	b501      	push	{r0, lr}
20001c38:	2000      	movs	r0, #0
20001c3a:	f000 f805 	bl	20001c48 <__aeabi_idiv0>
20001c3e:	bd02      	pop	{r1, pc}

20001c40 <__aeabi_idivmod>:
20001c40:	2900      	cmp	r1, #0
20001c42:	d0f8      	beq.n	20001c36 <__divsi3+0x1c2>
20001c44:	e716      	b.n	20001a74 <__divsi3>
20001c46:	4770      	bx	lr

20001c48 <__aeabi_idiv0>:
20001c48:	4770      	bx	lr
20001c4a:	46c0      	nop			; (mov r8, r8)

20001c4c <__aeabi_cdrcmple>:
20001c4c:	4684      	mov	ip, r0
20001c4e:	1c10      	adds	r0, r2, #0
20001c50:	4662      	mov	r2, ip
20001c52:	468c      	mov	ip, r1
20001c54:	1c19      	adds	r1, r3, #0
20001c56:	4663      	mov	r3, ip
20001c58:	e000      	b.n	20001c5c <__aeabi_cdcmpeq>
20001c5a:	46c0      	nop			; (mov r8, r8)

20001c5c <__aeabi_cdcmpeq>:
20001c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
20001c5e:	f000 fbef 	bl	20002440 <__ledf2>
20001c62:	2800      	cmp	r0, #0
20001c64:	d401      	bmi.n	20001c6a <__aeabi_cdcmpeq+0xe>
20001c66:	2100      	movs	r1, #0
20001c68:	42c8      	cmn	r0, r1
20001c6a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

20001c6c <__aeabi_dcmpeq>:
20001c6c:	b510      	push	{r4, lr}
20001c6e:	f000 fb47 	bl	20002300 <__eqdf2>
20001c72:	4240      	negs	r0, r0
20001c74:	3001      	adds	r0, #1
20001c76:	bd10      	pop	{r4, pc}

20001c78 <__aeabi_dcmplt>:
20001c78:	b510      	push	{r4, lr}
20001c7a:	f000 fbe1 	bl	20002440 <__ledf2>
20001c7e:	2800      	cmp	r0, #0
20001c80:	db01      	blt.n	20001c86 <__aeabi_dcmplt+0xe>
20001c82:	2000      	movs	r0, #0
20001c84:	bd10      	pop	{r4, pc}
20001c86:	2001      	movs	r0, #1
20001c88:	bd10      	pop	{r4, pc}
20001c8a:	46c0      	nop			; (mov r8, r8)

20001c8c <__aeabi_dcmple>:
20001c8c:	b510      	push	{r4, lr}
20001c8e:	f000 fbd7 	bl	20002440 <__ledf2>
20001c92:	2800      	cmp	r0, #0
20001c94:	dd01      	ble.n	20001c9a <__aeabi_dcmple+0xe>
20001c96:	2000      	movs	r0, #0
20001c98:	bd10      	pop	{r4, pc}
20001c9a:	2001      	movs	r0, #1
20001c9c:	bd10      	pop	{r4, pc}
20001c9e:	46c0      	nop			; (mov r8, r8)

20001ca0 <__aeabi_dcmpgt>:
20001ca0:	b510      	push	{r4, lr}
20001ca2:	f000 fb69 	bl	20002378 <__gedf2>
20001ca6:	2800      	cmp	r0, #0
20001ca8:	dc01      	bgt.n	20001cae <__aeabi_dcmpgt+0xe>
20001caa:	2000      	movs	r0, #0
20001cac:	bd10      	pop	{r4, pc}
20001cae:	2001      	movs	r0, #1
20001cb0:	bd10      	pop	{r4, pc}
20001cb2:	46c0      	nop			; (mov r8, r8)

20001cb4 <__aeabi_dcmpge>:
20001cb4:	b510      	push	{r4, lr}
20001cb6:	f000 fb5f 	bl	20002378 <__gedf2>
20001cba:	2800      	cmp	r0, #0
20001cbc:	da01      	bge.n	20001cc2 <__aeabi_dcmpge+0xe>
20001cbe:	2000      	movs	r0, #0
20001cc0:	bd10      	pop	{r4, pc}
20001cc2:	2001      	movs	r0, #1
20001cc4:	bd10      	pop	{r4, pc}
20001cc6:	46c0      	nop			; (mov r8, r8)

20001cc8 <__aeabi_dadd>:
20001cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
20001cca:	464f      	mov	r7, r9
20001ccc:	4646      	mov	r6, r8
20001cce:	46d6      	mov	lr, sl
20001cd0:	000c      	movs	r4, r1
20001cd2:	0309      	lsls	r1, r1, #12
20001cd4:	b5c0      	push	{r6, r7, lr}
20001cd6:	0a49      	lsrs	r1, r1, #9
20001cd8:	0f47      	lsrs	r7, r0, #29
20001cda:	005e      	lsls	r6, r3, #1
20001cdc:	4339      	orrs	r1, r7
20001cde:	031f      	lsls	r7, r3, #12
20001ce0:	0fdb      	lsrs	r3, r3, #31
20001ce2:	469c      	mov	ip, r3
20001ce4:	0065      	lsls	r5, r4, #1
20001ce6:	0a7b      	lsrs	r3, r7, #9
20001ce8:	0f57      	lsrs	r7, r2, #29
20001cea:	431f      	orrs	r7, r3
20001cec:	0d6d      	lsrs	r5, r5, #21
20001cee:	0fe4      	lsrs	r4, r4, #31
20001cf0:	0d76      	lsrs	r6, r6, #21
20001cf2:	46a1      	mov	r9, r4
20001cf4:	00c0      	lsls	r0, r0, #3
20001cf6:	46b8      	mov	r8, r7
20001cf8:	00d2      	lsls	r2, r2, #3
20001cfa:	1bab      	subs	r3, r5, r6
20001cfc:	4564      	cmp	r4, ip
20001cfe:	d07b      	beq.n	20001df8 <__aeabi_dadd+0x130>
20001d00:	2b00      	cmp	r3, #0
20001d02:	dd5f      	ble.n	20001dc4 <__aeabi_dadd+0xfc>
20001d04:	2e00      	cmp	r6, #0
20001d06:	d000      	beq.n	20001d0a <__aeabi_dadd+0x42>
20001d08:	e0a4      	b.n	20001e54 <__aeabi_dadd+0x18c>
20001d0a:	003e      	movs	r6, r7
20001d0c:	4316      	orrs	r6, r2
20001d0e:	d100      	bne.n	20001d12 <__aeabi_dadd+0x4a>
20001d10:	e112      	b.n	20001f38 <__aeabi_dadd+0x270>
20001d12:	1e5e      	subs	r6, r3, #1
20001d14:	2e00      	cmp	r6, #0
20001d16:	d000      	beq.n	20001d1a <__aeabi_dadd+0x52>
20001d18:	e19e      	b.n	20002058 <__aeabi_dadd+0x390>
20001d1a:	1a87      	subs	r7, r0, r2
20001d1c:	4643      	mov	r3, r8
20001d1e:	42b8      	cmp	r0, r7
20001d20:	4180      	sbcs	r0, r0
20001d22:	2501      	movs	r5, #1
20001d24:	1ac9      	subs	r1, r1, r3
20001d26:	4240      	negs	r0, r0
20001d28:	1a09      	subs	r1, r1, r0
20001d2a:	020b      	lsls	r3, r1, #8
20001d2c:	d400      	bmi.n	20001d30 <__aeabi_dadd+0x68>
20001d2e:	e131      	b.n	20001f94 <__aeabi_dadd+0x2cc>
20001d30:	0249      	lsls	r1, r1, #9
20001d32:	0a4e      	lsrs	r6, r1, #9
20001d34:	2e00      	cmp	r6, #0
20001d36:	d100      	bne.n	20001d3a <__aeabi_dadd+0x72>
20001d38:	e16e      	b.n	20002018 <__aeabi_dadd+0x350>
20001d3a:	0030      	movs	r0, r6
20001d3c:	f000 ff66 	bl	20002c0c <__clzsi2>
20001d40:	0003      	movs	r3, r0
20001d42:	3b08      	subs	r3, #8
20001d44:	2b1f      	cmp	r3, #31
20001d46:	dd00      	ble.n	20001d4a <__aeabi_dadd+0x82>
20001d48:	e161      	b.n	2000200e <__aeabi_dadd+0x346>
20001d4a:	2220      	movs	r2, #32
20001d4c:	0039      	movs	r1, r7
20001d4e:	1ad2      	subs	r2, r2, r3
20001d50:	409e      	lsls	r6, r3
20001d52:	40d1      	lsrs	r1, r2
20001d54:	409f      	lsls	r7, r3
20001d56:	430e      	orrs	r6, r1
20001d58:	429d      	cmp	r5, r3
20001d5a:	dd00      	ble.n	20001d5e <__aeabi_dadd+0x96>
20001d5c:	e151      	b.n	20002002 <__aeabi_dadd+0x33a>
20001d5e:	1b5d      	subs	r5, r3, r5
20001d60:	1c6b      	adds	r3, r5, #1
20001d62:	2b1f      	cmp	r3, #31
20001d64:	dd00      	ble.n	20001d68 <__aeabi_dadd+0xa0>
20001d66:	e17c      	b.n	20002062 <__aeabi_dadd+0x39a>
20001d68:	2120      	movs	r1, #32
20001d6a:	1ac9      	subs	r1, r1, r3
20001d6c:	003d      	movs	r5, r7
20001d6e:	0030      	movs	r0, r6
20001d70:	408f      	lsls	r7, r1
20001d72:	4088      	lsls	r0, r1
20001d74:	40dd      	lsrs	r5, r3
20001d76:	1e79      	subs	r1, r7, #1
20001d78:	418f      	sbcs	r7, r1
20001d7a:	0031      	movs	r1, r6
20001d7c:	2207      	movs	r2, #7
20001d7e:	4328      	orrs	r0, r5
20001d80:	40d9      	lsrs	r1, r3
20001d82:	2500      	movs	r5, #0
20001d84:	4307      	orrs	r7, r0
20001d86:	403a      	ands	r2, r7
20001d88:	2a00      	cmp	r2, #0
20001d8a:	d009      	beq.n	20001da0 <__aeabi_dadd+0xd8>
20001d8c:	230f      	movs	r3, #15
20001d8e:	403b      	ands	r3, r7
20001d90:	2b04      	cmp	r3, #4
20001d92:	d005      	beq.n	20001da0 <__aeabi_dadd+0xd8>
20001d94:	1d3b      	adds	r3, r7, #4
20001d96:	42bb      	cmp	r3, r7
20001d98:	41bf      	sbcs	r7, r7
20001d9a:	427f      	negs	r7, r7
20001d9c:	19c9      	adds	r1, r1, r7
20001d9e:	001f      	movs	r7, r3
20001da0:	020b      	lsls	r3, r1, #8
20001da2:	d400      	bmi.n	20001da6 <__aeabi_dadd+0xde>
20001da4:	e226      	b.n	200021f4 <__aeabi_dadd+0x52c>
20001da6:	1c6a      	adds	r2, r5, #1
20001da8:	4bc6      	ldr	r3, [pc, #792]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001daa:	0555      	lsls	r5, r2, #21
20001dac:	0d6d      	lsrs	r5, r5, #21
20001dae:	429a      	cmp	r2, r3
20001db0:	d100      	bne.n	20001db4 <__aeabi_dadd+0xec>
20001db2:	e106      	b.n	20001fc2 <__aeabi_dadd+0x2fa>
20001db4:	4ac4      	ldr	r2, [pc, #784]	; (200020c8 <__aeabi_dadd+0x400>)
20001db6:	08ff      	lsrs	r7, r7, #3
20001db8:	400a      	ands	r2, r1
20001dba:	0753      	lsls	r3, r2, #29
20001dbc:	0252      	lsls	r2, r2, #9
20001dbe:	433b      	orrs	r3, r7
20001dc0:	0b12      	lsrs	r2, r2, #12
20001dc2:	e08e      	b.n	20001ee2 <__aeabi_dadd+0x21a>
20001dc4:	2b00      	cmp	r3, #0
20001dc6:	d000      	beq.n	20001dca <__aeabi_dadd+0x102>
20001dc8:	e0b8      	b.n	20001f3c <__aeabi_dadd+0x274>
20001dca:	1c6b      	adds	r3, r5, #1
20001dcc:	055b      	lsls	r3, r3, #21
20001dce:	0d5b      	lsrs	r3, r3, #21
20001dd0:	2b01      	cmp	r3, #1
20001dd2:	dc00      	bgt.n	20001dd6 <__aeabi_dadd+0x10e>
20001dd4:	e130      	b.n	20002038 <__aeabi_dadd+0x370>
20001dd6:	1a87      	subs	r7, r0, r2
20001dd8:	4643      	mov	r3, r8
20001dda:	42b8      	cmp	r0, r7
20001ddc:	41b6      	sbcs	r6, r6
20001dde:	1acb      	subs	r3, r1, r3
20001de0:	4276      	negs	r6, r6
20001de2:	1b9e      	subs	r6, r3, r6
20001de4:	0233      	lsls	r3, r6, #8
20001de6:	d500      	bpl.n	20001dea <__aeabi_dadd+0x122>
20001de8:	e14c      	b.n	20002084 <__aeabi_dadd+0x3bc>
20001dea:	003b      	movs	r3, r7
20001dec:	4333      	orrs	r3, r6
20001dee:	d1a1      	bne.n	20001d34 <__aeabi_dadd+0x6c>
20001df0:	2200      	movs	r2, #0
20001df2:	2400      	movs	r4, #0
20001df4:	2500      	movs	r5, #0
20001df6:	e070      	b.n	20001eda <__aeabi_dadd+0x212>
20001df8:	2b00      	cmp	r3, #0
20001dfa:	dc00      	bgt.n	20001dfe <__aeabi_dadd+0x136>
20001dfc:	e0e5      	b.n	20001fca <__aeabi_dadd+0x302>
20001dfe:	2e00      	cmp	r6, #0
20001e00:	d100      	bne.n	20001e04 <__aeabi_dadd+0x13c>
20001e02:	e083      	b.n	20001f0c <__aeabi_dadd+0x244>
20001e04:	4eaf      	ldr	r6, [pc, #700]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001e06:	42b5      	cmp	r5, r6
20001e08:	d060      	beq.n	20001ecc <__aeabi_dadd+0x204>
20001e0a:	2680      	movs	r6, #128	; 0x80
20001e0c:	0436      	lsls	r6, r6, #16
20001e0e:	4337      	orrs	r7, r6
20001e10:	46b8      	mov	r8, r7
20001e12:	2b38      	cmp	r3, #56	; 0x38
20001e14:	dc00      	bgt.n	20001e18 <__aeabi_dadd+0x150>
20001e16:	e13e      	b.n	20002096 <__aeabi_dadd+0x3ce>
20001e18:	4643      	mov	r3, r8
20001e1a:	4313      	orrs	r3, r2
20001e1c:	001f      	movs	r7, r3
20001e1e:	1e7a      	subs	r2, r7, #1
20001e20:	4197      	sbcs	r7, r2
20001e22:	183f      	adds	r7, r7, r0
20001e24:	4287      	cmp	r7, r0
20001e26:	4180      	sbcs	r0, r0
20001e28:	4240      	negs	r0, r0
20001e2a:	1809      	adds	r1, r1, r0
20001e2c:	020b      	lsls	r3, r1, #8
20001e2e:	d400      	bmi.n	20001e32 <__aeabi_dadd+0x16a>
20001e30:	e0b0      	b.n	20001f94 <__aeabi_dadd+0x2cc>
20001e32:	4ba4      	ldr	r3, [pc, #656]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001e34:	3501      	adds	r5, #1
20001e36:	429d      	cmp	r5, r3
20001e38:	d100      	bne.n	20001e3c <__aeabi_dadd+0x174>
20001e3a:	e0c3      	b.n	20001fc4 <__aeabi_dadd+0x2fc>
20001e3c:	4aa2      	ldr	r2, [pc, #648]	; (200020c8 <__aeabi_dadd+0x400>)
20001e3e:	087b      	lsrs	r3, r7, #1
20001e40:	400a      	ands	r2, r1
20001e42:	2101      	movs	r1, #1
20001e44:	400f      	ands	r7, r1
20001e46:	431f      	orrs	r7, r3
20001e48:	0851      	lsrs	r1, r2, #1
20001e4a:	07d3      	lsls	r3, r2, #31
20001e4c:	2207      	movs	r2, #7
20001e4e:	431f      	orrs	r7, r3
20001e50:	403a      	ands	r2, r7
20001e52:	e799      	b.n	20001d88 <__aeabi_dadd+0xc0>
20001e54:	4e9b      	ldr	r6, [pc, #620]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001e56:	42b5      	cmp	r5, r6
20001e58:	d038      	beq.n	20001ecc <__aeabi_dadd+0x204>
20001e5a:	2680      	movs	r6, #128	; 0x80
20001e5c:	0436      	lsls	r6, r6, #16
20001e5e:	4337      	orrs	r7, r6
20001e60:	46b8      	mov	r8, r7
20001e62:	2b38      	cmp	r3, #56	; 0x38
20001e64:	dd00      	ble.n	20001e68 <__aeabi_dadd+0x1a0>
20001e66:	e0dc      	b.n	20002022 <__aeabi_dadd+0x35a>
20001e68:	2b1f      	cmp	r3, #31
20001e6a:	dc00      	bgt.n	20001e6e <__aeabi_dadd+0x1a6>
20001e6c:	e130      	b.n	200020d0 <__aeabi_dadd+0x408>
20001e6e:	001e      	movs	r6, r3
20001e70:	4647      	mov	r7, r8
20001e72:	3e20      	subs	r6, #32
20001e74:	40f7      	lsrs	r7, r6
20001e76:	46bc      	mov	ip, r7
20001e78:	2b20      	cmp	r3, #32
20001e7a:	d004      	beq.n	20001e86 <__aeabi_dadd+0x1be>
20001e7c:	2640      	movs	r6, #64	; 0x40
20001e7e:	1af3      	subs	r3, r6, r3
20001e80:	4646      	mov	r6, r8
20001e82:	409e      	lsls	r6, r3
20001e84:	4332      	orrs	r2, r6
20001e86:	0017      	movs	r7, r2
20001e88:	4663      	mov	r3, ip
20001e8a:	1e7a      	subs	r2, r7, #1
20001e8c:	4197      	sbcs	r7, r2
20001e8e:	431f      	orrs	r7, r3
20001e90:	e0cc      	b.n	2000202c <__aeabi_dadd+0x364>
20001e92:	2b00      	cmp	r3, #0
20001e94:	d100      	bne.n	20001e98 <__aeabi_dadd+0x1d0>
20001e96:	e204      	b.n	200022a2 <__aeabi_dadd+0x5da>
20001e98:	4643      	mov	r3, r8
20001e9a:	4313      	orrs	r3, r2
20001e9c:	d100      	bne.n	20001ea0 <__aeabi_dadd+0x1d8>
20001e9e:	e159      	b.n	20002154 <__aeabi_dadd+0x48c>
20001ea0:	074b      	lsls	r3, r1, #29
20001ea2:	08c0      	lsrs	r0, r0, #3
20001ea4:	4318      	orrs	r0, r3
20001ea6:	2380      	movs	r3, #128	; 0x80
20001ea8:	08c9      	lsrs	r1, r1, #3
20001eaa:	031b      	lsls	r3, r3, #12
20001eac:	4219      	tst	r1, r3
20001eae:	d008      	beq.n	20001ec2 <__aeabi_dadd+0x1fa>
20001eb0:	4645      	mov	r5, r8
20001eb2:	08ed      	lsrs	r5, r5, #3
20001eb4:	421d      	tst	r5, r3
20001eb6:	d104      	bne.n	20001ec2 <__aeabi_dadd+0x1fa>
20001eb8:	4643      	mov	r3, r8
20001eba:	08d0      	lsrs	r0, r2, #3
20001ebc:	0759      	lsls	r1, r3, #29
20001ebe:	4308      	orrs	r0, r1
20001ec0:	0029      	movs	r1, r5
20001ec2:	0f42      	lsrs	r2, r0, #29
20001ec4:	00c9      	lsls	r1, r1, #3
20001ec6:	4d7f      	ldr	r5, [pc, #508]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001ec8:	4311      	orrs	r1, r2
20001eca:	00c0      	lsls	r0, r0, #3
20001ecc:	074b      	lsls	r3, r1, #29
20001ece:	08ca      	lsrs	r2, r1, #3
20001ed0:	497c      	ldr	r1, [pc, #496]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001ed2:	08c0      	lsrs	r0, r0, #3
20001ed4:	4303      	orrs	r3, r0
20001ed6:	428d      	cmp	r5, r1
20001ed8:	d068      	beq.n	20001fac <__aeabi_dadd+0x2e4>
20001eda:	0312      	lsls	r2, r2, #12
20001edc:	056d      	lsls	r5, r5, #21
20001ede:	0b12      	lsrs	r2, r2, #12
20001ee0:	0d6d      	lsrs	r5, r5, #21
20001ee2:	2100      	movs	r1, #0
20001ee4:	0312      	lsls	r2, r2, #12
20001ee6:	0018      	movs	r0, r3
20001ee8:	0b13      	lsrs	r3, r2, #12
20001eea:	0d0a      	lsrs	r2, r1, #20
20001eec:	0512      	lsls	r2, r2, #20
20001eee:	431a      	orrs	r2, r3
20001ef0:	4b76      	ldr	r3, [pc, #472]	; (200020cc <__aeabi_dadd+0x404>)
20001ef2:	052d      	lsls	r5, r5, #20
20001ef4:	4013      	ands	r3, r2
20001ef6:	432b      	orrs	r3, r5
20001ef8:	005b      	lsls	r3, r3, #1
20001efa:	07e4      	lsls	r4, r4, #31
20001efc:	085b      	lsrs	r3, r3, #1
20001efe:	4323      	orrs	r3, r4
20001f00:	0019      	movs	r1, r3
20001f02:	bc1c      	pop	{r2, r3, r4}
20001f04:	4690      	mov	r8, r2
20001f06:	4699      	mov	r9, r3
20001f08:	46a2      	mov	sl, r4
20001f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001f0c:	003e      	movs	r6, r7
20001f0e:	4316      	orrs	r6, r2
20001f10:	d012      	beq.n	20001f38 <__aeabi_dadd+0x270>
20001f12:	1e5e      	subs	r6, r3, #1
20001f14:	2e00      	cmp	r6, #0
20001f16:	d000      	beq.n	20001f1a <__aeabi_dadd+0x252>
20001f18:	e100      	b.n	2000211c <__aeabi_dadd+0x454>
20001f1a:	1887      	adds	r7, r0, r2
20001f1c:	4287      	cmp	r7, r0
20001f1e:	4180      	sbcs	r0, r0
20001f20:	4441      	add	r1, r8
20001f22:	4240      	negs	r0, r0
20001f24:	1809      	adds	r1, r1, r0
20001f26:	2501      	movs	r5, #1
20001f28:	020b      	lsls	r3, r1, #8
20001f2a:	d533      	bpl.n	20001f94 <__aeabi_dadd+0x2cc>
20001f2c:	2502      	movs	r5, #2
20001f2e:	e785      	b.n	20001e3c <__aeabi_dadd+0x174>
20001f30:	4664      	mov	r4, ip
20001f32:	0033      	movs	r3, r6
20001f34:	4641      	mov	r1, r8
20001f36:	0010      	movs	r0, r2
20001f38:	001d      	movs	r5, r3
20001f3a:	e7c7      	b.n	20001ecc <__aeabi_dadd+0x204>
20001f3c:	2d00      	cmp	r5, #0
20001f3e:	d000      	beq.n	20001f42 <__aeabi_dadd+0x27a>
20001f40:	e0da      	b.n	200020f8 <__aeabi_dadd+0x430>
20001f42:	000c      	movs	r4, r1
20001f44:	4304      	orrs	r4, r0
20001f46:	d0f3      	beq.n	20001f30 <__aeabi_dadd+0x268>
20001f48:	1c5c      	adds	r4, r3, #1
20001f4a:	d100      	bne.n	20001f4e <__aeabi_dadd+0x286>
20001f4c:	e19f      	b.n	2000228e <__aeabi_dadd+0x5c6>
20001f4e:	4c5d      	ldr	r4, [pc, #372]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001f50:	42a6      	cmp	r6, r4
20001f52:	d100      	bne.n	20001f56 <__aeabi_dadd+0x28e>
20001f54:	e12f      	b.n	200021b6 <__aeabi_dadd+0x4ee>
20001f56:	43db      	mvns	r3, r3
20001f58:	2b38      	cmp	r3, #56	; 0x38
20001f5a:	dd00      	ble.n	20001f5e <__aeabi_dadd+0x296>
20001f5c:	e166      	b.n	2000222c <__aeabi_dadd+0x564>
20001f5e:	2b1f      	cmp	r3, #31
20001f60:	dd00      	ble.n	20001f64 <__aeabi_dadd+0x29c>
20001f62:	e183      	b.n	2000226c <__aeabi_dadd+0x5a4>
20001f64:	2420      	movs	r4, #32
20001f66:	0005      	movs	r5, r0
20001f68:	1ae4      	subs	r4, r4, r3
20001f6a:	000f      	movs	r7, r1
20001f6c:	40dd      	lsrs	r5, r3
20001f6e:	40d9      	lsrs	r1, r3
20001f70:	40a0      	lsls	r0, r4
20001f72:	4643      	mov	r3, r8
20001f74:	40a7      	lsls	r7, r4
20001f76:	1a5b      	subs	r3, r3, r1
20001f78:	1e44      	subs	r4, r0, #1
20001f7a:	41a0      	sbcs	r0, r4
20001f7c:	4698      	mov	r8, r3
20001f7e:	432f      	orrs	r7, r5
20001f80:	4338      	orrs	r0, r7
20001f82:	1a17      	subs	r7, r2, r0
20001f84:	42ba      	cmp	r2, r7
20001f86:	4192      	sbcs	r2, r2
20001f88:	4643      	mov	r3, r8
20001f8a:	4252      	negs	r2, r2
20001f8c:	1a99      	subs	r1, r3, r2
20001f8e:	4664      	mov	r4, ip
20001f90:	0035      	movs	r5, r6
20001f92:	e6ca      	b.n	20001d2a <__aeabi_dadd+0x62>
20001f94:	2207      	movs	r2, #7
20001f96:	403a      	ands	r2, r7
20001f98:	2a00      	cmp	r2, #0
20001f9a:	d000      	beq.n	20001f9e <__aeabi_dadd+0x2d6>
20001f9c:	e6f6      	b.n	20001d8c <__aeabi_dadd+0xc4>
20001f9e:	074b      	lsls	r3, r1, #29
20001fa0:	08ca      	lsrs	r2, r1, #3
20001fa2:	4948      	ldr	r1, [pc, #288]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001fa4:	08ff      	lsrs	r7, r7, #3
20001fa6:	433b      	orrs	r3, r7
20001fa8:	428d      	cmp	r5, r1
20001faa:	d196      	bne.n	20001eda <__aeabi_dadd+0x212>
20001fac:	0019      	movs	r1, r3
20001fae:	4311      	orrs	r1, r2
20001fb0:	d100      	bne.n	20001fb4 <__aeabi_dadd+0x2ec>
20001fb2:	e19e      	b.n	200022f2 <__aeabi_dadd+0x62a>
20001fb4:	2180      	movs	r1, #128	; 0x80
20001fb6:	0309      	lsls	r1, r1, #12
20001fb8:	430a      	orrs	r2, r1
20001fba:	0312      	lsls	r2, r2, #12
20001fbc:	0b12      	lsrs	r2, r2, #12
20001fbe:	4d41      	ldr	r5, [pc, #260]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001fc0:	e78f      	b.n	20001ee2 <__aeabi_dadd+0x21a>
20001fc2:	0015      	movs	r5, r2
20001fc4:	2200      	movs	r2, #0
20001fc6:	2300      	movs	r3, #0
20001fc8:	e78b      	b.n	20001ee2 <__aeabi_dadd+0x21a>
20001fca:	2b00      	cmp	r3, #0
20001fcc:	d000      	beq.n	20001fd0 <__aeabi_dadd+0x308>
20001fce:	e0c7      	b.n	20002160 <__aeabi_dadd+0x498>
20001fd0:	1c6b      	adds	r3, r5, #1
20001fd2:	055f      	lsls	r7, r3, #21
20001fd4:	0d7f      	lsrs	r7, r7, #21
20001fd6:	2f01      	cmp	r7, #1
20001fd8:	dc00      	bgt.n	20001fdc <__aeabi_dadd+0x314>
20001fda:	e0f1      	b.n	200021c0 <__aeabi_dadd+0x4f8>
20001fdc:	4d39      	ldr	r5, [pc, #228]	; (200020c4 <__aeabi_dadd+0x3fc>)
20001fde:	42ab      	cmp	r3, r5
20001fe0:	d100      	bne.n	20001fe4 <__aeabi_dadd+0x31c>
20001fe2:	e0b9      	b.n	20002158 <__aeabi_dadd+0x490>
20001fe4:	1885      	adds	r5, r0, r2
20001fe6:	000a      	movs	r2, r1
20001fe8:	4285      	cmp	r5, r0
20001fea:	4189      	sbcs	r1, r1
20001fec:	4442      	add	r2, r8
20001fee:	4249      	negs	r1, r1
20001ff0:	1851      	adds	r1, r2, r1
20001ff2:	2207      	movs	r2, #7
20001ff4:	07cf      	lsls	r7, r1, #31
20001ff6:	086d      	lsrs	r5, r5, #1
20001ff8:	432f      	orrs	r7, r5
20001ffa:	0849      	lsrs	r1, r1, #1
20001ffc:	403a      	ands	r2, r7
20001ffe:	001d      	movs	r5, r3
20002000:	e6c2      	b.n	20001d88 <__aeabi_dadd+0xc0>
20002002:	2207      	movs	r2, #7
20002004:	4930      	ldr	r1, [pc, #192]	; (200020c8 <__aeabi_dadd+0x400>)
20002006:	1aed      	subs	r5, r5, r3
20002008:	4031      	ands	r1, r6
2000200a:	403a      	ands	r2, r7
2000200c:	e6bc      	b.n	20001d88 <__aeabi_dadd+0xc0>
2000200e:	003e      	movs	r6, r7
20002010:	3828      	subs	r0, #40	; 0x28
20002012:	4086      	lsls	r6, r0
20002014:	2700      	movs	r7, #0
20002016:	e69f      	b.n	20001d58 <__aeabi_dadd+0x90>
20002018:	0038      	movs	r0, r7
2000201a:	f000 fdf7 	bl	20002c0c <__clzsi2>
2000201e:	3020      	adds	r0, #32
20002020:	e68e      	b.n	20001d40 <__aeabi_dadd+0x78>
20002022:	4643      	mov	r3, r8
20002024:	4313      	orrs	r3, r2
20002026:	001f      	movs	r7, r3
20002028:	1e7a      	subs	r2, r7, #1
2000202a:	4197      	sbcs	r7, r2
2000202c:	1bc7      	subs	r7, r0, r7
2000202e:	42b8      	cmp	r0, r7
20002030:	4180      	sbcs	r0, r0
20002032:	4240      	negs	r0, r0
20002034:	1a09      	subs	r1, r1, r0
20002036:	e678      	b.n	20001d2a <__aeabi_dadd+0x62>
20002038:	000e      	movs	r6, r1
2000203a:	003b      	movs	r3, r7
2000203c:	4306      	orrs	r6, r0
2000203e:	4313      	orrs	r3, r2
20002040:	2d00      	cmp	r5, #0
20002042:	d161      	bne.n	20002108 <__aeabi_dadd+0x440>
20002044:	2e00      	cmp	r6, #0
20002046:	d000      	beq.n	2000204a <__aeabi_dadd+0x382>
20002048:	e0f4      	b.n	20002234 <__aeabi_dadd+0x56c>
2000204a:	2b00      	cmp	r3, #0
2000204c:	d100      	bne.n	20002050 <__aeabi_dadd+0x388>
2000204e:	e11b      	b.n	20002288 <__aeabi_dadd+0x5c0>
20002050:	4664      	mov	r4, ip
20002052:	0039      	movs	r1, r7
20002054:	0010      	movs	r0, r2
20002056:	e739      	b.n	20001ecc <__aeabi_dadd+0x204>
20002058:	4f1a      	ldr	r7, [pc, #104]	; (200020c4 <__aeabi_dadd+0x3fc>)
2000205a:	42bb      	cmp	r3, r7
2000205c:	d07a      	beq.n	20002154 <__aeabi_dadd+0x48c>
2000205e:	0033      	movs	r3, r6
20002060:	e6ff      	b.n	20001e62 <__aeabi_dadd+0x19a>
20002062:	0030      	movs	r0, r6
20002064:	3d1f      	subs	r5, #31
20002066:	40e8      	lsrs	r0, r5
20002068:	2b20      	cmp	r3, #32
2000206a:	d003      	beq.n	20002074 <__aeabi_dadd+0x3ac>
2000206c:	2140      	movs	r1, #64	; 0x40
2000206e:	1acb      	subs	r3, r1, r3
20002070:	409e      	lsls	r6, r3
20002072:	4337      	orrs	r7, r6
20002074:	1e7b      	subs	r3, r7, #1
20002076:	419f      	sbcs	r7, r3
20002078:	2207      	movs	r2, #7
2000207a:	4307      	orrs	r7, r0
2000207c:	403a      	ands	r2, r7
2000207e:	2100      	movs	r1, #0
20002080:	2500      	movs	r5, #0
20002082:	e789      	b.n	20001f98 <__aeabi_dadd+0x2d0>
20002084:	1a17      	subs	r7, r2, r0
20002086:	4643      	mov	r3, r8
20002088:	42ba      	cmp	r2, r7
2000208a:	41b6      	sbcs	r6, r6
2000208c:	1a59      	subs	r1, r3, r1
2000208e:	4276      	negs	r6, r6
20002090:	1b8e      	subs	r6, r1, r6
20002092:	4664      	mov	r4, ip
20002094:	e64e      	b.n	20001d34 <__aeabi_dadd+0x6c>
20002096:	2b1f      	cmp	r3, #31
20002098:	dd00      	ble.n	2000209c <__aeabi_dadd+0x3d4>
2000209a:	e0ad      	b.n	200021f8 <__aeabi_dadd+0x530>
2000209c:	2620      	movs	r6, #32
2000209e:	4647      	mov	r7, r8
200020a0:	1af6      	subs	r6, r6, r3
200020a2:	40b7      	lsls	r7, r6
200020a4:	46b9      	mov	r9, r7
200020a6:	0017      	movs	r7, r2
200020a8:	46b2      	mov	sl, r6
200020aa:	40df      	lsrs	r7, r3
200020ac:	464e      	mov	r6, r9
200020ae:	433e      	orrs	r6, r7
200020b0:	0037      	movs	r7, r6
200020b2:	4656      	mov	r6, sl
200020b4:	40b2      	lsls	r2, r6
200020b6:	1e56      	subs	r6, r2, #1
200020b8:	41b2      	sbcs	r2, r6
200020ba:	4317      	orrs	r7, r2
200020bc:	4642      	mov	r2, r8
200020be:	40da      	lsrs	r2, r3
200020c0:	1889      	adds	r1, r1, r2
200020c2:	e6ae      	b.n	20001e22 <__aeabi_dadd+0x15a>
200020c4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200020c8:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
200020cc:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
200020d0:	2620      	movs	r6, #32
200020d2:	4647      	mov	r7, r8
200020d4:	1af6      	subs	r6, r6, r3
200020d6:	40b7      	lsls	r7, r6
200020d8:	46b9      	mov	r9, r7
200020da:	0017      	movs	r7, r2
200020dc:	46b2      	mov	sl, r6
200020de:	40df      	lsrs	r7, r3
200020e0:	464e      	mov	r6, r9
200020e2:	433e      	orrs	r6, r7
200020e4:	0037      	movs	r7, r6
200020e6:	4656      	mov	r6, sl
200020e8:	40b2      	lsls	r2, r6
200020ea:	1e56      	subs	r6, r2, #1
200020ec:	41b2      	sbcs	r2, r6
200020ee:	4317      	orrs	r7, r2
200020f0:	4642      	mov	r2, r8
200020f2:	40da      	lsrs	r2, r3
200020f4:	1a89      	subs	r1, r1, r2
200020f6:	e799      	b.n	2000202c <__aeabi_dadd+0x364>
200020f8:	4c7f      	ldr	r4, [pc, #508]	; (200022f8 <__aeabi_dadd+0x630>)
200020fa:	42a6      	cmp	r6, r4
200020fc:	d05b      	beq.n	200021b6 <__aeabi_dadd+0x4ee>
200020fe:	2480      	movs	r4, #128	; 0x80
20002100:	0424      	lsls	r4, r4, #16
20002102:	425b      	negs	r3, r3
20002104:	4321      	orrs	r1, r4
20002106:	e727      	b.n	20001f58 <__aeabi_dadd+0x290>
20002108:	2e00      	cmp	r6, #0
2000210a:	d10c      	bne.n	20002126 <__aeabi_dadd+0x45e>
2000210c:	2b00      	cmp	r3, #0
2000210e:	d100      	bne.n	20002112 <__aeabi_dadd+0x44a>
20002110:	e0cb      	b.n	200022aa <__aeabi_dadd+0x5e2>
20002112:	4664      	mov	r4, ip
20002114:	0039      	movs	r1, r7
20002116:	0010      	movs	r0, r2
20002118:	4d77      	ldr	r5, [pc, #476]	; (200022f8 <__aeabi_dadd+0x630>)
2000211a:	e6d7      	b.n	20001ecc <__aeabi_dadd+0x204>
2000211c:	4f76      	ldr	r7, [pc, #472]	; (200022f8 <__aeabi_dadd+0x630>)
2000211e:	42bb      	cmp	r3, r7
20002120:	d018      	beq.n	20002154 <__aeabi_dadd+0x48c>
20002122:	0033      	movs	r3, r6
20002124:	e675      	b.n	20001e12 <__aeabi_dadd+0x14a>
20002126:	2b00      	cmp	r3, #0
20002128:	d014      	beq.n	20002154 <__aeabi_dadd+0x48c>
2000212a:	074b      	lsls	r3, r1, #29
2000212c:	08c0      	lsrs	r0, r0, #3
2000212e:	4318      	orrs	r0, r3
20002130:	2380      	movs	r3, #128	; 0x80
20002132:	08c9      	lsrs	r1, r1, #3
20002134:	031b      	lsls	r3, r3, #12
20002136:	4219      	tst	r1, r3
20002138:	d007      	beq.n	2000214a <__aeabi_dadd+0x482>
2000213a:	08fc      	lsrs	r4, r7, #3
2000213c:	421c      	tst	r4, r3
2000213e:	d104      	bne.n	2000214a <__aeabi_dadd+0x482>
20002140:	0779      	lsls	r1, r7, #29
20002142:	08d0      	lsrs	r0, r2, #3
20002144:	4308      	orrs	r0, r1
20002146:	46e1      	mov	r9, ip
20002148:	0021      	movs	r1, r4
2000214a:	464c      	mov	r4, r9
2000214c:	0f42      	lsrs	r2, r0, #29
2000214e:	00c9      	lsls	r1, r1, #3
20002150:	4311      	orrs	r1, r2
20002152:	00c0      	lsls	r0, r0, #3
20002154:	4d68      	ldr	r5, [pc, #416]	; (200022f8 <__aeabi_dadd+0x630>)
20002156:	e6b9      	b.n	20001ecc <__aeabi_dadd+0x204>
20002158:	001d      	movs	r5, r3
2000215a:	2200      	movs	r2, #0
2000215c:	2300      	movs	r3, #0
2000215e:	e6c0      	b.n	20001ee2 <__aeabi_dadd+0x21a>
20002160:	2d00      	cmp	r5, #0
20002162:	d15b      	bne.n	2000221c <__aeabi_dadd+0x554>
20002164:	000d      	movs	r5, r1
20002166:	4305      	orrs	r5, r0
20002168:	d100      	bne.n	2000216c <__aeabi_dadd+0x4a4>
2000216a:	e6e2      	b.n	20001f32 <__aeabi_dadd+0x26a>
2000216c:	1c5d      	adds	r5, r3, #1
2000216e:	d100      	bne.n	20002172 <__aeabi_dadd+0x4aa>
20002170:	e0b0      	b.n	200022d4 <__aeabi_dadd+0x60c>
20002172:	4d61      	ldr	r5, [pc, #388]	; (200022f8 <__aeabi_dadd+0x630>)
20002174:	42ae      	cmp	r6, r5
20002176:	d01f      	beq.n	200021b8 <__aeabi_dadd+0x4f0>
20002178:	43db      	mvns	r3, r3
2000217a:	2b38      	cmp	r3, #56	; 0x38
2000217c:	dc71      	bgt.n	20002262 <__aeabi_dadd+0x59a>
2000217e:	2b1f      	cmp	r3, #31
20002180:	dd00      	ble.n	20002184 <__aeabi_dadd+0x4bc>
20002182:	e096      	b.n	200022b2 <__aeabi_dadd+0x5ea>
20002184:	2520      	movs	r5, #32
20002186:	000f      	movs	r7, r1
20002188:	1aed      	subs	r5, r5, r3
2000218a:	40af      	lsls	r7, r5
2000218c:	46b9      	mov	r9, r7
2000218e:	0007      	movs	r7, r0
20002190:	46aa      	mov	sl, r5
20002192:	40df      	lsrs	r7, r3
20002194:	464d      	mov	r5, r9
20002196:	433d      	orrs	r5, r7
20002198:	002f      	movs	r7, r5
2000219a:	4655      	mov	r5, sl
2000219c:	40a8      	lsls	r0, r5
2000219e:	40d9      	lsrs	r1, r3
200021a0:	1e45      	subs	r5, r0, #1
200021a2:	41a8      	sbcs	r0, r5
200021a4:	4488      	add	r8, r1
200021a6:	4307      	orrs	r7, r0
200021a8:	18bf      	adds	r7, r7, r2
200021aa:	4297      	cmp	r7, r2
200021ac:	4192      	sbcs	r2, r2
200021ae:	4251      	negs	r1, r2
200021b0:	4441      	add	r1, r8
200021b2:	0035      	movs	r5, r6
200021b4:	e63a      	b.n	20001e2c <__aeabi_dadd+0x164>
200021b6:	4664      	mov	r4, ip
200021b8:	0035      	movs	r5, r6
200021ba:	4641      	mov	r1, r8
200021bc:	0010      	movs	r0, r2
200021be:	e685      	b.n	20001ecc <__aeabi_dadd+0x204>
200021c0:	000b      	movs	r3, r1
200021c2:	4303      	orrs	r3, r0
200021c4:	2d00      	cmp	r5, #0
200021c6:	d000      	beq.n	200021ca <__aeabi_dadd+0x502>
200021c8:	e663      	b.n	20001e92 <__aeabi_dadd+0x1ca>
200021ca:	2b00      	cmp	r3, #0
200021cc:	d0f5      	beq.n	200021ba <__aeabi_dadd+0x4f2>
200021ce:	4643      	mov	r3, r8
200021d0:	4313      	orrs	r3, r2
200021d2:	d100      	bne.n	200021d6 <__aeabi_dadd+0x50e>
200021d4:	e67a      	b.n	20001ecc <__aeabi_dadd+0x204>
200021d6:	1887      	adds	r7, r0, r2
200021d8:	4287      	cmp	r7, r0
200021da:	4180      	sbcs	r0, r0
200021dc:	2207      	movs	r2, #7
200021de:	4441      	add	r1, r8
200021e0:	4240      	negs	r0, r0
200021e2:	1809      	adds	r1, r1, r0
200021e4:	403a      	ands	r2, r7
200021e6:	020b      	lsls	r3, r1, #8
200021e8:	d400      	bmi.n	200021ec <__aeabi_dadd+0x524>
200021ea:	e6d5      	b.n	20001f98 <__aeabi_dadd+0x2d0>
200021ec:	4b43      	ldr	r3, [pc, #268]	; (200022fc <__aeabi_dadd+0x634>)
200021ee:	3501      	adds	r5, #1
200021f0:	4019      	ands	r1, r3
200021f2:	e5c9      	b.n	20001d88 <__aeabi_dadd+0xc0>
200021f4:	0038      	movs	r0, r7
200021f6:	e669      	b.n	20001ecc <__aeabi_dadd+0x204>
200021f8:	001e      	movs	r6, r3
200021fa:	4647      	mov	r7, r8
200021fc:	3e20      	subs	r6, #32
200021fe:	40f7      	lsrs	r7, r6
20002200:	46bc      	mov	ip, r7
20002202:	2b20      	cmp	r3, #32
20002204:	d004      	beq.n	20002210 <__aeabi_dadd+0x548>
20002206:	2640      	movs	r6, #64	; 0x40
20002208:	1af3      	subs	r3, r6, r3
2000220a:	4646      	mov	r6, r8
2000220c:	409e      	lsls	r6, r3
2000220e:	4332      	orrs	r2, r6
20002210:	0017      	movs	r7, r2
20002212:	4663      	mov	r3, ip
20002214:	1e7a      	subs	r2, r7, #1
20002216:	4197      	sbcs	r7, r2
20002218:	431f      	orrs	r7, r3
2000221a:	e602      	b.n	20001e22 <__aeabi_dadd+0x15a>
2000221c:	4d36      	ldr	r5, [pc, #216]	; (200022f8 <__aeabi_dadd+0x630>)
2000221e:	42ae      	cmp	r6, r5
20002220:	d0ca      	beq.n	200021b8 <__aeabi_dadd+0x4f0>
20002222:	2580      	movs	r5, #128	; 0x80
20002224:	042d      	lsls	r5, r5, #16
20002226:	425b      	negs	r3, r3
20002228:	4329      	orrs	r1, r5
2000222a:	e7a6      	b.n	2000217a <__aeabi_dadd+0x4b2>
2000222c:	4308      	orrs	r0, r1
2000222e:	1e41      	subs	r1, r0, #1
20002230:	4188      	sbcs	r0, r1
20002232:	e6a6      	b.n	20001f82 <__aeabi_dadd+0x2ba>
20002234:	2b00      	cmp	r3, #0
20002236:	d100      	bne.n	2000223a <__aeabi_dadd+0x572>
20002238:	e648      	b.n	20001ecc <__aeabi_dadd+0x204>
2000223a:	1a87      	subs	r7, r0, r2
2000223c:	4643      	mov	r3, r8
2000223e:	42b8      	cmp	r0, r7
20002240:	41b6      	sbcs	r6, r6
20002242:	1acb      	subs	r3, r1, r3
20002244:	4276      	negs	r6, r6
20002246:	1b9e      	subs	r6, r3, r6
20002248:	0233      	lsls	r3, r6, #8
2000224a:	d54b      	bpl.n	200022e4 <__aeabi_dadd+0x61c>
2000224c:	1a17      	subs	r7, r2, r0
2000224e:	4643      	mov	r3, r8
20002250:	42ba      	cmp	r2, r7
20002252:	4192      	sbcs	r2, r2
20002254:	1a59      	subs	r1, r3, r1
20002256:	4252      	negs	r2, r2
20002258:	1a89      	subs	r1, r1, r2
2000225a:	2207      	movs	r2, #7
2000225c:	4664      	mov	r4, ip
2000225e:	403a      	ands	r2, r7
20002260:	e592      	b.n	20001d88 <__aeabi_dadd+0xc0>
20002262:	4301      	orrs	r1, r0
20002264:	000f      	movs	r7, r1
20002266:	1e79      	subs	r1, r7, #1
20002268:	418f      	sbcs	r7, r1
2000226a:	e79d      	b.n	200021a8 <__aeabi_dadd+0x4e0>
2000226c:	001c      	movs	r4, r3
2000226e:	000f      	movs	r7, r1
20002270:	3c20      	subs	r4, #32
20002272:	40e7      	lsrs	r7, r4
20002274:	2b20      	cmp	r3, #32
20002276:	d003      	beq.n	20002280 <__aeabi_dadd+0x5b8>
20002278:	2440      	movs	r4, #64	; 0x40
2000227a:	1ae3      	subs	r3, r4, r3
2000227c:	4099      	lsls	r1, r3
2000227e:	4308      	orrs	r0, r1
20002280:	1e41      	subs	r1, r0, #1
20002282:	4188      	sbcs	r0, r1
20002284:	4338      	orrs	r0, r7
20002286:	e67c      	b.n	20001f82 <__aeabi_dadd+0x2ba>
20002288:	2200      	movs	r2, #0
2000228a:	2400      	movs	r4, #0
2000228c:	e625      	b.n	20001eda <__aeabi_dadd+0x212>
2000228e:	1a17      	subs	r7, r2, r0
20002290:	4643      	mov	r3, r8
20002292:	42ba      	cmp	r2, r7
20002294:	4192      	sbcs	r2, r2
20002296:	1a59      	subs	r1, r3, r1
20002298:	4252      	negs	r2, r2
2000229a:	1a89      	subs	r1, r1, r2
2000229c:	4664      	mov	r4, ip
2000229e:	0035      	movs	r5, r6
200022a0:	e543      	b.n	20001d2a <__aeabi_dadd+0x62>
200022a2:	4641      	mov	r1, r8
200022a4:	0010      	movs	r0, r2
200022a6:	4d14      	ldr	r5, [pc, #80]	; (200022f8 <__aeabi_dadd+0x630>)
200022a8:	e610      	b.n	20001ecc <__aeabi_dadd+0x204>
200022aa:	2280      	movs	r2, #128	; 0x80
200022ac:	2400      	movs	r4, #0
200022ae:	0312      	lsls	r2, r2, #12
200022b0:	e680      	b.n	20001fb4 <__aeabi_dadd+0x2ec>
200022b2:	001d      	movs	r5, r3
200022b4:	000f      	movs	r7, r1
200022b6:	3d20      	subs	r5, #32
200022b8:	40ef      	lsrs	r7, r5
200022ba:	46bc      	mov	ip, r7
200022bc:	2b20      	cmp	r3, #32
200022be:	d003      	beq.n	200022c8 <__aeabi_dadd+0x600>
200022c0:	2540      	movs	r5, #64	; 0x40
200022c2:	1aeb      	subs	r3, r5, r3
200022c4:	4099      	lsls	r1, r3
200022c6:	4308      	orrs	r0, r1
200022c8:	0007      	movs	r7, r0
200022ca:	4663      	mov	r3, ip
200022cc:	1e78      	subs	r0, r7, #1
200022ce:	4187      	sbcs	r7, r0
200022d0:	431f      	orrs	r7, r3
200022d2:	e769      	b.n	200021a8 <__aeabi_dadd+0x4e0>
200022d4:	1887      	adds	r7, r0, r2
200022d6:	4297      	cmp	r7, r2
200022d8:	419b      	sbcs	r3, r3
200022da:	4441      	add	r1, r8
200022dc:	425b      	negs	r3, r3
200022de:	18c9      	adds	r1, r1, r3
200022e0:	0035      	movs	r5, r6
200022e2:	e5a3      	b.n	20001e2c <__aeabi_dadd+0x164>
200022e4:	003b      	movs	r3, r7
200022e6:	4333      	orrs	r3, r6
200022e8:	d0ce      	beq.n	20002288 <__aeabi_dadd+0x5c0>
200022ea:	2207      	movs	r2, #7
200022ec:	0031      	movs	r1, r6
200022ee:	403a      	ands	r2, r7
200022f0:	e652      	b.n	20001f98 <__aeabi_dadd+0x2d0>
200022f2:	2300      	movs	r3, #0
200022f4:	001a      	movs	r2, r3
200022f6:	e5f4      	b.n	20001ee2 <__aeabi_dadd+0x21a>
200022f8:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
200022fc:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20002300 <__eqdf2>:
20002300:	b5f0      	push	{r4, r5, r6, r7, lr}
20002302:	464f      	mov	r7, r9
20002304:	4646      	mov	r6, r8
20002306:	46d6      	mov	lr, sl
20002308:	4684      	mov	ip, r0
2000230a:	b5c0      	push	{r6, r7, lr}
2000230c:	4680      	mov	r8, r0
2000230e:	4e19      	ldr	r6, [pc, #100]	; (20002374 <__eqdf2+0x74>)
20002310:	0318      	lsls	r0, r3, #12
20002312:	030f      	lsls	r7, r1, #12
20002314:	004d      	lsls	r5, r1, #1
20002316:	0b00      	lsrs	r0, r0, #12
20002318:	005c      	lsls	r4, r3, #1
2000231a:	4682      	mov	sl, r0
2000231c:	0b3f      	lsrs	r7, r7, #12
2000231e:	0d6d      	lsrs	r5, r5, #21
20002320:	0fc9      	lsrs	r1, r1, #31
20002322:	4691      	mov	r9, r2
20002324:	0d64      	lsrs	r4, r4, #21
20002326:	0fdb      	lsrs	r3, r3, #31
20002328:	2001      	movs	r0, #1
2000232a:	42b5      	cmp	r5, r6
2000232c:	d00a      	beq.n	20002344 <__eqdf2+0x44>
2000232e:	42b4      	cmp	r4, r6
20002330:	d003      	beq.n	2000233a <__eqdf2+0x3a>
20002332:	42a5      	cmp	r5, r4
20002334:	d101      	bne.n	2000233a <__eqdf2+0x3a>
20002336:	4557      	cmp	r7, sl
20002338:	d00c      	beq.n	20002354 <__eqdf2+0x54>
2000233a:	bc1c      	pop	{r2, r3, r4}
2000233c:	4690      	mov	r8, r2
2000233e:	4699      	mov	r9, r3
20002340:	46a2      	mov	sl, r4
20002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002344:	4666      	mov	r6, ip
20002346:	433e      	orrs	r6, r7
20002348:	d1f7      	bne.n	2000233a <__eqdf2+0x3a>
2000234a:	42ac      	cmp	r4, r5
2000234c:	d1f5      	bne.n	2000233a <__eqdf2+0x3a>
2000234e:	4654      	mov	r4, sl
20002350:	4314      	orrs	r4, r2
20002352:	d1f2      	bne.n	2000233a <__eqdf2+0x3a>
20002354:	2001      	movs	r0, #1
20002356:	45c8      	cmp	r8, r9
20002358:	d1ef      	bne.n	2000233a <__eqdf2+0x3a>
2000235a:	4299      	cmp	r1, r3
2000235c:	d007      	beq.n	2000236e <__eqdf2+0x6e>
2000235e:	2d00      	cmp	r5, #0
20002360:	d1eb      	bne.n	2000233a <__eqdf2+0x3a>
20002362:	4663      	mov	r3, ip
20002364:	431f      	orrs	r7, r3
20002366:	0038      	movs	r0, r7
20002368:	1e47      	subs	r7, r0, #1
2000236a:	41b8      	sbcs	r0, r7
2000236c:	e7e5      	b.n	2000233a <__eqdf2+0x3a>
2000236e:	2000      	movs	r0, #0
20002370:	e7e3      	b.n	2000233a <__eqdf2+0x3a>
20002372:	46c0      	nop			; (mov r8, r8)
20002374:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002378 <__gedf2>:
20002378:	b5f0      	push	{r4, r5, r6, r7, lr}
2000237a:	464f      	mov	r7, r9
2000237c:	4646      	mov	r6, r8
2000237e:	46d6      	mov	lr, sl
20002380:	004d      	lsls	r5, r1, #1
20002382:	b5c0      	push	{r6, r7, lr}
20002384:	030e      	lsls	r6, r1, #12
20002386:	0fc9      	lsrs	r1, r1, #31
20002388:	468a      	mov	sl, r1
2000238a:	492c      	ldr	r1, [pc, #176]	; (2000243c <__gedf2+0xc4>)
2000238c:	031f      	lsls	r7, r3, #12
2000238e:	005c      	lsls	r4, r3, #1
20002390:	4680      	mov	r8, r0
20002392:	0b36      	lsrs	r6, r6, #12
20002394:	0d6d      	lsrs	r5, r5, #21
20002396:	4691      	mov	r9, r2
20002398:	0b3f      	lsrs	r7, r7, #12
2000239a:	0d64      	lsrs	r4, r4, #21
2000239c:	0fdb      	lsrs	r3, r3, #31
2000239e:	428d      	cmp	r5, r1
200023a0:	d01e      	beq.n	200023e0 <__gedf2+0x68>
200023a2:	428c      	cmp	r4, r1
200023a4:	d016      	beq.n	200023d4 <__gedf2+0x5c>
200023a6:	2d00      	cmp	r5, #0
200023a8:	d11e      	bne.n	200023e8 <__gedf2+0x70>
200023aa:	4330      	orrs	r0, r6
200023ac:	4684      	mov	ip, r0
200023ae:	2c00      	cmp	r4, #0
200023b0:	d101      	bne.n	200023b6 <__gedf2+0x3e>
200023b2:	433a      	orrs	r2, r7
200023b4:	d023      	beq.n	200023fe <__gedf2+0x86>
200023b6:	4662      	mov	r2, ip
200023b8:	2a00      	cmp	r2, #0
200023ba:	d01a      	beq.n	200023f2 <__gedf2+0x7a>
200023bc:	459a      	cmp	sl, r3
200023be:	d029      	beq.n	20002414 <__gedf2+0x9c>
200023c0:	4651      	mov	r1, sl
200023c2:	2002      	movs	r0, #2
200023c4:	3901      	subs	r1, #1
200023c6:	4008      	ands	r0, r1
200023c8:	3801      	subs	r0, #1
200023ca:	bc1c      	pop	{r2, r3, r4}
200023cc:	4690      	mov	r8, r2
200023ce:	4699      	mov	r9, r3
200023d0:	46a2      	mov	sl, r4
200023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200023d4:	0039      	movs	r1, r7
200023d6:	4311      	orrs	r1, r2
200023d8:	d0e5      	beq.n	200023a6 <__gedf2+0x2e>
200023da:	2002      	movs	r0, #2
200023dc:	4240      	negs	r0, r0
200023de:	e7f4      	b.n	200023ca <__gedf2+0x52>
200023e0:	4330      	orrs	r0, r6
200023e2:	d1fa      	bne.n	200023da <__gedf2+0x62>
200023e4:	42ac      	cmp	r4, r5
200023e6:	d00f      	beq.n	20002408 <__gedf2+0x90>
200023e8:	2c00      	cmp	r4, #0
200023ea:	d10f      	bne.n	2000240c <__gedf2+0x94>
200023ec:	433a      	orrs	r2, r7
200023ee:	d0e7      	beq.n	200023c0 <__gedf2+0x48>
200023f0:	e00c      	b.n	2000240c <__gedf2+0x94>
200023f2:	2201      	movs	r2, #1
200023f4:	3b01      	subs	r3, #1
200023f6:	4393      	bics	r3, r2
200023f8:	0018      	movs	r0, r3
200023fa:	3001      	adds	r0, #1
200023fc:	e7e5      	b.n	200023ca <__gedf2+0x52>
200023fe:	4663      	mov	r3, ip
20002400:	2000      	movs	r0, #0
20002402:	2b00      	cmp	r3, #0
20002404:	d0e1      	beq.n	200023ca <__gedf2+0x52>
20002406:	e7db      	b.n	200023c0 <__gedf2+0x48>
20002408:	433a      	orrs	r2, r7
2000240a:	d1e6      	bne.n	200023da <__gedf2+0x62>
2000240c:	459a      	cmp	sl, r3
2000240e:	d1d7      	bne.n	200023c0 <__gedf2+0x48>
20002410:	42a5      	cmp	r5, r4
20002412:	dcd5      	bgt.n	200023c0 <__gedf2+0x48>
20002414:	42a5      	cmp	r5, r4
20002416:	db05      	blt.n	20002424 <__gedf2+0xac>
20002418:	42be      	cmp	r6, r7
2000241a:	d8d1      	bhi.n	200023c0 <__gedf2+0x48>
2000241c:	d008      	beq.n	20002430 <__gedf2+0xb8>
2000241e:	2000      	movs	r0, #0
20002420:	42be      	cmp	r6, r7
20002422:	d2d2      	bcs.n	200023ca <__gedf2+0x52>
20002424:	4650      	mov	r0, sl
20002426:	2301      	movs	r3, #1
20002428:	3801      	subs	r0, #1
2000242a:	4398      	bics	r0, r3
2000242c:	3001      	adds	r0, #1
2000242e:	e7cc      	b.n	200023ca <__gedf2+0x52>
20002430:	45c8      	cmp	r8, r9
20002432:	d8c5      	bhi.n	200023c0 <__gedf2+0x48>
20002434:	2000      	movs	r0, #0
20002436:	45c8      	cmp	r8, r9
20002438:	d3f4      	bcc.n	20002424 <__gedf2+0xac>
2000243a:	e7c6      	b.n	200023ca <__gedf2+0x52>
2000243c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002440 <__ledf2>:
20002440:	b5f0      	push	{r4, r5, r6, r7, lr}
20002442:	464f      	mov	r7, r9
20002444:	4646      	mov	r6, r8
20002446:	46d6      	mov	lr, sl
20002448:	004d      	lsls	r5, r1, #1
2000244a:	b5c0      	push	{r6, r7, lr}
2000244c:	030e      	lsls	r6, r1, #12
2000244e:	0fc9      	lsrs	r1, r1, #31
20002450:	468a      	mov	sl, r1
20002452:	492e      	ldr	r1, [pc, #184]	; (2000250c <__ledf2+0xcc>)
20002454:	031f      	lsls	r7, r3, #12
20002456:	005c      	lsls	r4, r3, #1
20002458:	4680      	mov	r8, r0
2000245a:	0b36      	lsrs	r6, r6, #12
2000245c:	0d6d      	lsrs	r5, r5, #21
2000245e:	4691      	mov	r9, r2
20002460:	0b3f      	lsrs	r7, r7, #12
20002462:	0d64      	lsrs	r4, r4, #21
20002464:	0fdb      	lsrs	r3, r3, #31
20002466:	428d      	cmp	r5, r1
20002468:	d018      	beq.n	2000249c <__ledf2+0x5c>
2000246a:	428c      	cmp	r4, r1
2000246c:	d011      	beq.n	20002492 <__ledf2+0x52>
2000246e:	2d00      	cmp	r5, #0
20002470:	d118      	bne.n	200024a4 <__ledf2+0x64>
20002472:	4330      	orrs	r0, r6
20002474:	4684      	mov	ip, r0
20002476:	2c00      	cmp	r4, #0
20002478:	d11e      	bne.n	200024b8 <__ledf2+0x78>
2000247a:	433a      	orrs	r2, r7
2000247c:	d11c      	bne.n	200024b8 <__ledf2+0x78>
2000247e:	4663      	mov	r3, ip
20002480:	2000      	movs	r0, #0
20002482:	2b00      	cmp	r3, #0
20002484:	d030      	beq.n	200024e8 <__ledf2+0xa8>
20002486:	4651      	mov	r1, sl
20002488:	2002      	movs	r0, #2
2000248a:	3901      	subs	r1, #1
2000248c:	4008      	ands	r0, r1
2000248e:	3801      	subs	r0, #1
20002490:	e02a      	b.n	200024e8 <__ledf2+0xa8>
20002492:	0039      	movs	r1, r7
20002494:	4311      	orrs	r1, r2
20002496:	d0ea      	beq.n	2000246e <__ledf2+0x2e>
20002498:	2002      	movs	r0, #2
2000249a:	e025      	b.n	200024e8 <__ledf2+0xa8>
2000249c:	4330      	orrs	r0, r6
2000249e:	d1fb      	bne.n	20002498 <__ledf2+0x58>
200024a0:	42ac      	cmp	r4, r5
200024a2:	d026      	beq.n	200024f2 <__ledf2+0xb2>
200024a4:	2c00      	cmp	r4, #0
200024a6:	d126      	bne.n	200024f6 <__ledf2+0xb6>
200024a8:	433a      	orrs	r2, r7
200024aa:	d124      	bne.n	200024f6 <__ledf2+0xb6>
200024ac:	4651      	mov	r1, sl
200024ae:	2002      	movs	r0, #2
200024b0:	3901      	subs	r1, #1
200024b2:	4008      	ands	r0, r1
200024b4:	3801      	subs	r0, #1
200024b6:	e017      	b.n	200024e8 <__ledf2+0xa8>
200024b8:	4662      	mov	r2, ip
200024ba:	2a00      	cmp	r2, #0
200024bc:	d00f      	beq.n	200024de <__ledf2+0x9e>
200024be:	459a      	cmp	sl, r3
200024c0:	d1e1      	bne.n	20002486 <__ledf2+0x46>
200024c2:	42a5      	cmp	r5, r4
200024c4:	db05      	blt.n	200024d2 <__ledf2+0x92>
200024c6:	42be      	cmp	r6, r7
200024c8:	d8dd      	bhi.n	20002486 <__ledf2+0x46>
200024ca:	d019      	beq.n	20002500 <__ledf2+0xc0>
200024cc:	2000      	movs	r0, #0
200024ce:	42be      	cmp	r6, r7
200024d0:	d20a      	bcs.n	200024e8 <__ledf2+0xa8>
200024d2:	4650      	mov	r0, sl
200024d4:	2301      	movs	r3, #1
200024d6:	3801      	subs	r0, #1
200024d8:	4398      	bics	r0, r3
200024da:	3001      	adds	r0, #1
200024dc:	e004      	b.n	200024e8 <__ledf2+0xa8>
200024de:	2201      	movs	r2, #1
200024e0:	3b01      	subs	r3, #1
200024e2:	4393      	bics	r3, r2
200024e4:	0018      	movs	r0, r3
200024e6:	3001      	adds	r0, #1
200024e8:	bc1c      	pop	{r2, r3, r4}
200024ea:	4690      	mov	r8, r2
200024ec:	4699      	mov	r9, r3
200024ee:	46a2      	mov	sl, r4
200024f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
200024f2:	433a      	orrs	r2, r7
200024f4:	d1d0      	bne.n	20002498 <__ledf2+0x58>
200024f6:	459a      	cmp	sl, r3
200024f8:	d1c5      	bne.n	20002486 <__ledf2+0x46>
200024fa:	42a5      	cmp	r5, r4
200024fc:	dcc3      	bgt.n	20002486 <__ledf2+0x46>
200024fe:	e7e0      	b.n	200024c2 <__ledf2+0x82>
20002500:	45c8      	cmp	r8, r9
20002502:	d8c0      	bhi.n	20002486 <__ledf2+0x46>
20002504:	2000      	movs	r0, #0
20002506:	45c8      	cmp	r8, r9
20002508:	d3e3      	bcc.n	200024d2 <__ledf2+0x92>
2000250a:	e7ed      	b.n	200024e8 <__ledf2+0xa8>
2000250c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>

20002510 <__aeabi_dsub>:
20002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002512:	4657      	mov	r7, sl
20002514:	464e      	mov	r6, r9
20002516:	4645      	mov	r5, r8
20002518:	46de      	mov	lr, fp
2000251a:	000c      	movs	r4, r1
2000251c:	0309      	lsls	r1, r1, #12
2000251e:	b5e0      	push	{r5, r6, r7, lr}
20002520:	0a49      	lsrs	r1, r1, #9
20002522:	0f46      	lsrs	r6, r0, #29
20002524:	005f      	lsls	r7, r3, #1
20002526:	4331      	orrs	r1, r6
20002528:	031e      	lsls	r6, r3, #12
2000252a:	0fdb      	lsrs	r3, r3, #31
2000252c:	0a76      	lsrs	r6, r6, #9
2000252e:	469b      	mov	fp, r3
20002530:	0f53      	lsrs	r3, r2, #29
20002532:	4333      	orrs	r3, r6
20002534:	4ec8      	ldr	r6, [pc, #800]	; (20002858 <__aeabi_dsub+0x348>)
20002536:	0065      	lsls	r5, r4, #1
20002538:	00c0      	lsls	r0, r0, #3
2000253a:	0fe4      	lsrs	r4, r4, #31
2000253c:	00d2      	lsls	r2, r2, #3
2000253e:	0d6d      	lsrs	r5, r5, #21
20002540:	46a2      	mov	sl, r4
20002542:	4681      	mov	r9, r0
20002544:	0d7f      	lsrs	r7, r7, #21
20002546:	469c      	mov	ip, r3
20002548:	4690      	mov	r8, r2
2000254a:	42b7      	cmp	r7, r6
2000254c:	d100      	bne.n	20002550 <__aeabi_dsub+0x40>
2000254e:	e0b9      	b.n	200026c4 <__aeabi_dsub+0x1b4>
20002550:	465b      	mov	r3, fp
20002552:	2601      	movs	r6, #1
20002554:	4073      	eors	r3, r6
20002556:	469b      	mov	fp, r3
20002558:	1bee      	subs	r6, r5, r7
2000255a:	45a3      	cmp	fp, r4
2000255c:	d100      	bne.n	20002560 <__aeabi_dsub+0x50>
2000255e:	e083      	b.n	20002668 <__aeabi_dsub+0x158>
20002560:	2e00      	cmp	r6, #0
20002562:	dd63      	ble.n	2000262c <__aeabi_dsub+0x11c>
20002564:	2f00      	cmp	r7, #0
20002566:	d000      	beq.n	2000256a <__aeabi_dsub+0x5a>
20002568:	e0b1      	b.n	200026ce <__aeabi_dsub+0x1be>
2000256a:	4663      	mov	r3, ip
2000256c:	4313      	orrs	r3, r2
2000256e:	d100      	bne.n	20002572 <__aeabi_dsub+0x62>
20002570:	e123      	b.n	200027ba <__aeabi_dsub+0x2aa>
20002572:	1e73      	subs	r3, r6, #1
20002574:	2b00      	cmp	r3, #0
20002576:	d000      	beq.n	2000257a <__aeabi_dsub+0x6a>
20002578:	e1ba      	b.n	200028f0 <__aeabi_dsub+0x3e0>
2000257a:	1a86      	subs	r6, r0, r2
2000257c:	4663      	mov	r3, ip
2000257e:	42b0      	cmp	r0, r6
20002580:	4180      	sbcs	r0, r0
20002582:	2501      	movs	r5, #1
20002584:	1ac9      	subs	r1, r1, r3
20002586:	4240      	negs	r0, r0
20002588:	1a09      	subs	r1, r1, r0
2000258a:	020b      	lsls	r3, r1, #8
2000258c:	d400      	bmi.n	20002590 <__aeabi_dsub+0x80>
2000258e:	e147      	b.n	20002820 <__aeabi_dsub+0x310>
20002590:	0249      	lsls	r1, r1, #9
20002592:	0a4b      	lsrs	r3, r1, #9
20002594:	4698      	mov	r8, r3
20002596:	4643      	mov	r3, r8
20002598:	2b00      	cmp	r3, #0
2000259a:	d100      	bne.n	2000259e <__aeabi_dsub+0x8e>
2000259c:	e189      	b.n	200028b2 <__aeabi_dsub+0x3a2>
2000259e:	4640      	mov	r0, r8
200025a0:	f000 fb34 	bl	20002c0c <__clzsi2>
200025a4:	0003      	movs	r3, r0
200025a6:	3b08      	subs	r3, #8
200025a8:	2b1f      	cmp	r3, #31
200025aa:	dd00      	ble.n	200025ae <__aeabi_dsub+0x9e>
200025ac:	e17c      	b.n	200028a8 <__aeabi_dsub+0x398>
200025ae:	2220      	movs	r2, #32
200025b0:	0030      	movs	r0, r6
200025b2:	1ad2      	subs	r2, r2, r3
200025b4:	4641      	mov	r1, r8
200025b6:	40d0      	lsrs	r0, r2
200025b8:	4099      	lsls	r1, r3
200025ba:	0002      	movs	r2, r0
200025bc:	409e      	lsls	r6, r3
200025be:	430a      	orrs	r2, r1
200025c0:	429d      	cmp	r5, r3
200025c2:	dd00      	ble.n	200025c6 <__aeabi_dsub+0xb6>
200025c4:	e16a      	b.n	2000289c <__aeabi_dsub+0x38c>
200025c6:	1b5d      	subs	r5, r3, r5
200025c8:	1c6b      	adds	r3, r5, #1
200025ca:	2b1f      	cmp	r3, #31
200025cc:	dd00      	ble.n	200025d0 <__aeabi_dsub+0xc0>
200025ce:	e194      	b.n	200028fa <__aeabi_dsub+0x3ea>
200025d0:	2120      	movs	r1, #32
200025d2:	0010      	movs	r0, r2
200025d4:	0035      	movs	r5, r6
200025d6:	1ac9      	subs	r1, r1, r3
200025d8:	408e      	lsls	r6, r1
200025da:	40da      	lsrs	r2, r3
200025dc:	4088      	lsls	r0, r1
200025de:	40dd      	lsrs	r5, r3
200025e0:	1e71      	subs	r1, r6, #1
200025e2:	418e      	sbcs	r6, r1
200025e4:	0011      	movs	r1, r2
200025e6:	2207      	movs	r2, #7
200025e8:	4328      	orrs	r0, r5
200025ea:	2500      	movs	r5, #0
200025ec:	4306      	orrs	r6, r0
200025ee:	4032      	ands	r2, r6
200025f0:	2a00      	cmp	r2, #0
200025f2:	d009      	beq.n	20002608 <__aeabi_dsub+0xf8>
200025f4:	230f      	movs	r3, #15
200025f6:	4033      	ands	r3, r6
200025f8:	2b04      	cmp	r3, #4
200025fa:	d005      	beq.n	20002608 <__aeabi_dsub+0xf8>
200025fc:	1d33      	adds	r3, r6, #4
200025fe:	42b3      	cmp	r3, r6
20002600:	41b6      	sbcs	r6, r6
20002602:	4276      	negs	r6, r6
20002604:	1989      	adds	r1, r1, r6
20002606:	001e      	movs	r6, r3
20002608:	020b      	lsls	r3, r1, #8
2000260a:	d400      	bmi.n	2000260e <__aeabi_dsub+0xfe>
2000260c:	e23d      	b.n	20002a8a <__aeabi_dsub+0x57a>
2000260e:	1c6a      	adds	r2, r5, #1
20002610:	4b91      	ldr	r3, [pc, #580]	; (20002858 <__aeabi_dsub+0x348>)
20002612:	0555      	lsls	r5, r2, #21
20002614:	0d6d      	lsrs	r5, r5, #21
20002616:	429a      	cmp	r2, r3
20002618:	d100      	bne.n	2000261c <__aeabi_dsub+0x10c>
2000261a:	e119      	b.n	20002850 <__aeabi_dsub+0x340>
2000261c:	4a8f      	ldr	r2, [pc, #572]	; (2000285c <__aeabi_dsub+0x34c>)
2000261e:	08f6      	lsrs	r6, r6, #3
20002620:	400a      	ands	r2, r1
20002622:	0757      	lsls	r7, r2, #29
20002624:	0252      	lsls	r2, r2, #9
20002626:	4337      	orrs	r7, r6
20002628:	0b12      	lsrs	r2, r2, #12
2000262a:	e09b      	b.n	20002764 <__aeabi_dsub+0x254>
2000262c:	2e00      	cmp	r6, #0
2000262e:	d000      	beq.n	20002632 <__aeabi_dsub+0x122>
20002630:	e0c5      	b.n	200027be <__aeabi_dsub+0x2ae>
20002632:	1c6e      	adds	r6, r5, #1
20002634:	0576      	lsls	r6, r6, #21
20002636:	0d76      	lsrs	r6, r6, #21
20002638:	2e01      	cmp	r6, #1
2000263a:	dc00      	bgt.n	2000263e <__aeabi_dsub+0x12e>
2000263c:	e148      	b.n	200028d0 <__aeabi_dsub+0x3c0>
2000263e:	4667      	mov	r7, ip
20002640:	1a86      	subs	r6, r0, r2
20002642:	1bcb      	subs	r3, r1, r7
20002644:	42b0      	cmp	r0, r6
20002646:	41bf      	sbcs	r7, r7
20002648:	427f      	negs	r7, r7
2000264a:	46b8      	mov	r8, r7
2000264c:	001f      	movs	r7, r3
2000264e:	4643      	mov	r3, r8
20002650:	1aff      	subs	r7, r7, r3
20002652:	003b      	movs	r3, r7
20002654:	46b8      	mov	r8, r7
20002656:	021b      	lsls	r3, r3, #8
20002658:	d500      	bpl.n	2000265c <__aeabi_dsub+0x14c>
2000265a:	e15f      	b.n	2000291c <__aeabi_dsub+0x40c>
2000265c:	4337      	orrs	r7, r6
2000265e:	d19a      	bne.n	20002596 <__aeabi_dsub+0x86>
20002660:	2200      	movs	r2, #0
20002662:	2400      	movs	r4, #0
20002664:	2500      	movs	r5, #0
20002666:	e079      	b.n	2000275c <__aeabi_dsub+0x24c>
20002668:	2e00      	cmp	r6, #0
2000266a:	dc00      	bgt.n	2000266e <__aeabi_dsub+0x15e>
2000266c:	e0fa      	b.n	20002864 <__aeabi_dsub+0x354>
2000266e:	2f00      	cmp	r7, #0
20002670:	d100      	bne.n	20002674 <__aeabi_dsub+0x164>
20002672:	e08d      	b.n	20002790 <__aeabi_dsub+0x280>
20002674:	4b78      	ldr	r3, [pc, #480]	; (20002858 <__aeabi_dsub+0x348>)
20002676:	429d      	cmp	r5, r3
20002678:	d067      	beq.n	2000274a <__aeabi_dsub+0x23a>
2000267a:	2380      	movs	r3, #128	; 0x80
2000267c:	4667      	mov	r7, ip
2000267e:	041b      	lsls	r3, r3, #16
20002680:	431f      	orrs	r7, r3
20002682:	46bc      	mov	ip, r7
20002684:	2e38      	cmp	r6, #56	; 0x38
20002686:	dc00      	bgt.n	2000268a <__aeabi_dsub+0x17a>
20002688:	e152      	b.n	20002930 <__aeabi_dsub+0x420>
2000268a:	4663      	mov	r3, ip
2000268c:	4313      	orrs	r3, r2
2000268e:	1e5a      	subs	r2, r3, #1
20002690:	4193      	sbcs	r3, r2
20002692:	181e      	adds	r6, r3, r0
20002694:	4286      	cmp	r6, r0
20002696:	4180      	sbcs	r0, r0
20002698:	4240      	negs	r0, r0
2000269a:	1809      	adds	r1, r1, r0
2000269c:	020b      	lsls	r3, r1, #8
2000269e:	d400      	bmi.n	200026a2 <__aeabi_dsub+0x192>
200026a0:	e0be      	b.n	20002820 <__aeabi_dsub+0x310>
200026a2:	4b6d      	ldr	r3, [pc, #436]	; (20002858 <__aeabi_dsub+0x348>)
200026a4:	3501      	adds	r5, #1
200026a6:	429d      	cmp	r5, r3
200026a8:	d100      	bne.n	200026ac <__aeabi_dsub+0x19c>
200026aa:	e0d2      	b.n	20002852 <__aeabi_dsub+0x342>
200026ac:	4a6b      	ldr	r2, [pc, #428]	; (2000285c <__aeabi_dsub+0x34c>)
200026ae:	0873      	lsrs	r3, r6, #1
200026b0:	400a      	ands	r2, r1
200026b2:	2101      	movs	r1, #1
200026b4:	400e      	ands	r6, r1
200026b6:	431e      	orrs	r6, r3
200026b8:	0851      	lsrs	r1, r2, #1
200026ba:	07d3      	lsls	r3, r2, #31
200026bc:	2207      	movs	r2, #7
200026be:	431e      	orrs	r6, r3
200026c0:	4032      	ands	r2, r6
200026c2:	e795      	b.n	200025f0 <__aeabi_dsub+0xe0>
200026c4:	001e      	movs	r6, r3
200026c6:	4316      	orrs	r6, r2
200026c8:	d000      	beq.n	200026cc <__aeabi_dsub+0x1bc>
200026ca:	e745      	b.n	20002558 <__aeabi_dsub+0x48>
200026cc:	e740      	b.n	20002550 <__aeabi_dsub+0x40>
200026ce:	4b62      	ldr	r3, [pc, #392]	; (20002858 <__aeabi_dsub+0x348>)
200026d0:	429d      	cmp	r5, r3
200026d2:	d03a      	beq.n	2000274a <__aeabi_dsub+0x23a>
200026d4:	2380      	movs	r3, #128	; 0x80
200026d6:	4667      	mov	r7, ip
200026d8:	041b      	lsls	r3, r3, #16
200026da:	431f      	orrs	r7, r3
200026dc:	46bc      	mov	ip, r7
200026de:	2e38      	cmp	r6, #56	; 0x38
200026e0:	dd00      	ble.n	200026e4 <__aeabi_dsub+0x1d4>
200026e2:	e0eb      	b.n	200028bc <__aeabi_dsub+0x3ac>
200026e4:	2e1f      	cmp	r6, #31
200026e6:	dc00      	bgt.n	200026ea <__aeabi_dsub+0x1da>
200026e8:	e13a      	b.n	20002960 <__aeabi_dsub+0x450>
200026ea:	0033      	movs	r3, r6
200026ec:	4667      	mov	r7, ip
200026ee:	3b20      	subs	r3, #32
200026f0:	40df      	lsrs	r7, r3
200026f2:	003b      	movs	r3, r7
200026f4:	2e20      	cmp	r6, #32
200026f6:	d005      	beq.n	20002704 <__aeabi_dsub+0x1f4>
200026f8:	2740      	movs	r7, #64	; 0x40
200026fa:	1bbf      	subs	r7, r7, r6
200026fc:	4666      	mov	r6, ip
200026fe:	40be      	lsls	r6, r7
20002700:	4332      	orrs	r2, r6
20002702:	4690      	mov	r8, r2
20002704:	4646      	mov	r6, r8
20002706:	1e72      	subs	r2, r6, #1
20002708:	4196      	sbcs	r6, r2
2000270a:	4333      	orrs	r3, r6
2000270c:	e0da      	b.n	200028c4 <__aeabi_dsub+0x3b4>
2000270e:	2b00      	cmp	r3, #0
20002710:	d100      	bne.n	20002714 <__aeabi_dsub+0x204>
20002712:	e214      	b.n	20002b3e <__aeabi_dsub+0x62e>
20002714:	4663      	mov	r3, ip
20002716:	4313      	orrs	r3, r2
20002718:	d100      	bne.n	2000271c <__aeabi_dsub+0x20c>
2000271a:	e168      	b.n	200029ee <__aeabi_dsub+0x4de>
2000271c:	2380      	movs	r3, #128	; 0x80
2000271e:	074e      	lsls	r6, r1, #29
20002720:	08c0      	lsrs	r0, r0, #3
20002722:	08c9      	lsrs	r1, r1, #3
20002724:	031b      	lsls	r3, r3, #12
20002726:	4306      	orrs	r6, r0
20002728:	4219      	tst	r1, r3
2000272a:	d008      	beq.n	2000273e <__aeabi_dsub+0x22e>
2000272c:	4660      	mov	r0, ip
2000272e:	08c0      	lsrs	r0, r0, #3
20002730:	4218      	tst	r0, r3
20002732:	d104      	bne.n	2000273e <__aeabi_dsub+0x22e>
20002734:	4663      	mov	r3, ip
20002736:	0001      	movs	r1, r0
20002738:	08d2      	lsrs	r2, r2, #3
2000273a:	075e      	lsls	r6, r3, #29
2000273c:	4316      	orrs	r6, r2
2000273e:	00f3      	lsls	r3, r6, #3
20002740:	4699      	mov	r9, r3
20002742:	00c9      	lsls	r1, r1, #3
20002744:	0f72      	lsrs	r2, r6, #29
20002746:	4d44      	ldr	r5, [pc, #272]	; (20002858 <__aeabi_dsub+0x348>)
20002748:	4311      	orrs	r1, r2
2000274a:	464b      	mov	r3, r9
2000274c:	08de      	lsrs	r6, r3, #3
2000274e:	4b42      	ldr	r3, [pc, #264]	; (20002858 <__aeabi_dsub+0x348>)
20002750:	074f      	lsls	r7, r1, #29
20002752:	4337      	orrs	r7, r6
20002754:	08ca      	lsrs	r2, r1, #3
20002756:	429d      	cmp	r5, r3
20002758:	d100      	bne.n	2000275c <__aeabi_dsub+0x24c>
2000275a:	e06e      	b.n	2000283a <__aeabi_dsub+0x32a>
2000275c:	0312      	lsls	r2, r2, #12
2000275e:	056d      	lsls	r5, r5, #21
20002760:	0b12      	lsrs	r2, r2, #12
20002762:	0d6d      	lsrs	r5, r5, #21
20002764:	2100      	movs	r1, #0
20002766:	0312      	lsls	r2, r2, #12
20002768:	0b13      	lsrs	r3, r2, #12
2000276a:	0d0a      	lsrs	r2, r1, #20
2000276c:	0512      	lsls	r2, r2, #20
2000276e:	431a      	orrs	r2, r3
20002770:	4b3b      	ldr	r3, [pc, #236]	; (20002860 <__aeabi_dsub+0x350>)
20002772:	052d      	lsls	r5, r5, #20
20002774:	4013      	ands	r3, r2
20002776:	432b      	orrs	r3, r5
20002778:	005b      	lsls	r3, r3, #1
2000277a:	07e4      	lsls	r4, r4, #31
2000277c:	085b      	lsrs	r3, r3, #1
2000277e:	4323      	orrs	r3, r4
20002780:	0038      	movs	r0, r7
20002782:	0019      	movs	r1, r3
20002784:	bc3c      	pop	{r2, r3, r4, r5}
20002786:	4690      	mov	r8, r2
20002788:	4699      	mov	r9, r3
2000278a:	46a2      	mov	sl, r4
2000278c:	46ab      	mov	fp, r5
2000278e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20002790:	4663      	mov	r3, ip
20002792:	4313      	orrs	r3, r2
20002794:	d011      	beq.n	200027ba <__aeabi_dsub+0x2aa>
20002796:	1e73      	subs	r3, r6, #1
20002798:	2b00      	cmp	r3, #0
2000279a:	d000      	beq.n	2000279e <__aeabi_dsub+0x28e>
2000279c:	e107      	b.n	200029ae <__aeabi_dsub+0x49e>
2000279e:	1886      	adds	r6, r0, r2
200027a0:	4286      	cmp	r6, r0
200027a2:	4180      	sbcs	r0, r0
200027a4:	4461      	add	r1, ip
200027a6:	4240      	negs	r0, r0
200027a8:	1809      	adds	r1, r1, r0
200027aa:	2501      	movs	r5, #1
200027ac:	020b      	lsls	r3, r1, #8
200027ae:	d537      	bpl.n	20002820 <__aeabi_dsub+0x310>
200027b0:	2502      	movs	r5, #2
200027b2:	e77b      	b.n	200026ac <__aeabi_dsub+0x19c>
200027b4:	003e      	movs	r6, r7
200027b6:	4661      	mov	r1, ip
200027b8:	4691      	mov	r9, r2
200027ba:	0035      	movs	r5, r6
200027bc:	e7c5      	b.n	2000274a <__aeabi_dsub+0x23a>
200027be:	465c      	mov	r4, fp
200027c0:	2d00      	cmp	r5, #0
200027c2:	d000      	beq.n	200027c6 <__aeabi_dsub+0x2b6>
200027c4:	e0e1      	b.n	2000298a <__aeabi_dsub+0x47a>
200027c6:	000b      	movs	r3, r1
200027c8:	4303      	orrs	r3, r0
200027ca:	d0f3      	beq.n	200027b4 <__aeabi_dsub+0x2a4>
200027cc:	1c73      	adds	r3, r6, #1
200027ce:	d100      	bne.n	200027d2 <__aeabi_dsub+0x2c2>
200027d0:	e1ac      	b.n	20002b2c <__aeabi_dsub+0x61c>
200027d2:	4b21      	ldr	r3, [pc, #132]	; (20002858 <__aeabi_dsub+0x348>)
200027d4:	429f      	cmp	r7, r3
200027d6:	d100      	bne.n	200027da <__aeabi_dsub+0x2ca>
200027d8:	e13a      	b.n	20002a50 <__aeabi_dsub+0x540>
200027da:	43f3      	mvns	r3, r6
200027dc:	2b38      	cmp	r3, #56	; 0x38
200027de:	dd00      	ble.n	200027e2 <__aeabi_dsub+0x2d2>
200027e0:	e16f      	b.n	20002ac2 <__aeabi_dsub+0x5b2>
200027e2:	2b1f      	cmp	r3, #31
200027e4:	dd00      	ble.n	200027e8 <__aeabi_dsub+0x2d8>
200027e6:	e18c      	b.n	20002b02 <__aeabi_dsub+0x5f2>
200027e8:	2520      	movs	r5, #32
200027ea:	000e      	movs	r6, r1
200027ec:	1aed      	subs	r5, r5, r3
200027ee:	40ae      	lsls	r6, r5
200027f0:	46b0      	mov	r8, r6
200027f2:	0006      	movs	r6, r0
200027f4:	46aa      	mov	sl, r5
200027f6:	40de      	lsrs	r6, r3
200027f8:	4645      	mov	r5, r8
200027fa:	4335      	orrs	r5, r6
200027fc:	002e      	movs	r6, r5
200027fe:	4655      	mov	r5, sl
20002800:	40d9      	lsrs	r1, r3
20002802:	40a8      	lsls	r0, r5
20002804:	4663      	mov	r3, ip
20002806:	1e45      	subs	r5, r0, #1
20002808:	41a8      	sbcs	r0, r5
2000280a:	1a5b      	subs	r3, r3, r1
2000280c:	469c      	mov	ip, r3
2000280e:	4330      	orrs	r0, r6
20002810:	1a16      	subs	r6, r2, r0
20002812:	42b2      	cmp	r2, r6
20002814:	4192      	sbcs	r2, r2
20002816:	4663      	mov	r3, ip
20002818:	4252      	negs	r2, r2
2000281a:	1a99      	subs	r1, r3, r2
2000281c:	003d      	movs	r5, r7
2000281e:	e6b4      	b.n	2000258a <__aeabi_dsub+0x7a>
20002820:	2207      	movs	r2, #7
20002822:	4032      	ands	r2, r6
20002824:	2a00      	cmp	r2, #0
20002826:	d000      	beq.n	2000282a <__aeabi_dsub+0x31a>
20002828:	e6e4      	b.n	200025f4 <__aeabi_dsub+0xe4>
2000282a:	4b0b      	ldr	r3, [pc, #44]	; (20002858 <__aeabi_dsub+0x348>)
2000282c:	08f6      	lsrs	r6, r6, #3
2000282e:	074f      	lsls	r7, r1, #29
20002830:	4337      	orrs	r7, r6
20002832:	08ca      	lsrs	r2, r1, #3
20002834:	429d      	cmp	r5, r3
20002836:	d000      	beq.n	2000283a <__aeabi_dsub+0x32a>
20002838:	e790      	b.n	2000275c <__aeabi_dsub+0x24c>
2000283a:	003b      	movs	r3, r7
2000283c:	4313      	orrs	r3, r2
2000283e:	d100      	bne.n	20002842 <__aeabi_dsub+0x332>
20002840:	e1a6      	b.n	20002b90 <__aeabi_dsub+0x680>
20002842:	2380      	movs	r3, #128	; 0x80
20002844:	031b      	lsls	r3, r3, #12
20002846:	431a      	orrs	r2, r3
20002848:	0312      	lsls	r2, r2, #12
2000284a:	0b12      	lsrs	r2, r2, #12
2000284c:	4d02      	ldr	r5, [pc, #8]	; (20002858 <__aeabi_dsub+0x348>)
2000284e:	e789      	b.n	20002764 <__aeabi_dsub+0x254>
20002850:	0015      	movs	r5, r2
20002852:	2200      	movs	r2, #0
20002854:	2700      	movs	r7, #0
20002856:	e785      	b.n	20002764 <__aeabi_dsub+0x254>
20002858:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000285c:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff
20002860:	800fffff 	strdhi	pc, [pc], -pc	; <UNPREDICTABLE>
20002864:	2e00      	cmp	r6, #0
20002866:	d000      	beq.n	2000286a <__aeabi_dsub+0x35a>
20002868:	e0c7      	b.n	200029fa <__aeabi_dsub+0x4ea>
2000286a:	1c6b      	adds	r3, r5, #1
2000286c:	055e      	lsls	r6, r3, #21
2000286e:	0d76      	lsrs	r6, r6, #21
20002870:	2e01      	cmp	r6, #1
20002872:	dc00      	bgt.n	20002876 <__aeabi_dsub+0x366>
20002874:	e0f0      	b.n	20002a58 <__aeabi_dsub+0x548>
20002876:	4dc8      	ldr	r5, [pc, #800]	; (20002b98 <__aeabi_dsub+0x688>)
20002878:	42ab      	cmp	r3, r5
2000287a:	d100      	bne.n	2000287e <__aeabi_dsub+0x36e>
2000287c:	e0b9      	b.n	200029f2 <__aeabi_dsub+0x4e2>
2000287e:	1885      	adds	r5, r0, r2
20002880:	000a      	movs	r2, r1
20002882:	4285      	cmp	r5, r0
20002884:	4189      	sbcs	r1, r1
20002886:	4462      	add	r2, ip
20002888:	4249      	negs	r1, r1
2000288a:	1851      	adds	r1, r2, r1
2000288c:	2207      	movs	r2, #7
2000288e:	07ce      	lsls	r6, r1, #31
20002890:	086d      	lsrs	r5, r5, #1
20002892:	432e      	orrs	r6, r5
20002894:	0849      	lsrs	r1, r1, #1
20002896:	4032      	ands	r2, r6
20002898:	001d      	movs	r5, r3
2000289a:	e6a9      	b.n	200025f0 <__aeabi_dsub+0xe0>
2000289c:	49bf      	ldr	r1, [pc, #764]	; (20002b9c <__aeabi_dsub+0x68c>)
2000289e:	1aed      	subs	r5, r5, r3
200028a0:	4011      	ands	r1, r2
200028a2:	2207      	movs	r2, #7
200028a4:	4032      	ands	r2, r6
200028a6:	e6a3      	b.n	200025f0 <__aeabi_dsub+0xe0>
200028a8:	0032      	movs	r2, r6
200028aa:	3828      	subs	r0, #40	; 0x28
200028ac:	4082      	lsls	r2, r0
200028ae:	2600      	movs	r6, #0
200028b0:	e686      	b.n	200025c0 <__aeabi_dsub+0xb0>
200028b2:	0030      	movs	r0, r6
200028b4:	f000 f9aa 	bl	20002c0c <__clzsi2>
200028b8:	3020      	adds	r0, #32
200028ba:	e673      	b.n	200025a4 <__aeabi_dsub+0x94>
200028bc:	4663      	mov	r3, ip
200028be:	4313      	orrs	r3, r2
200028c0:	1e5a      	subs	r2, r3, #1
200028c2:	4193      	sbcs	r3, r2
200028c4:	1ac6      	subs	r6, r0, r3
200028c6:	42b0      	cmp	r0, r6
200028c8:	4180      	sbcs	r0, r0
200028ca:	4240      	negs	r0, r0
200028cc:	1a09      	subs	r1, r1, r0
200028ce:	e65c      	b.n	2000258a <__aeabi_dsub+0x7a>
200028d0:	000e      	movs	r6, r1
200028d2:	4667      	mov	r7, ip
200028d4:	4306      	orrs	r6, r0
200028d6:	4317      	orrs	r7, r2
200028d8:	2d00      	cmp	r5, #0
200028da:	d15e      	bne.n	2000299a <__aeabi_dsub+0x48a>
200028dc:	2e00      	cmp	r6, #0
200028de:	d000      	beq.n	200028e2 <__aeabi_dsub+0x3d2>
200028e0:	e0f3      	b.n	20002aca <__aeabi_dsub+0x5ba>
200028e2:	2f00      	cmp	r7, #0
200028e4:	d100      	bne.n	200028e8 <__aeabi_dsub+0x3d8>
200028e6:	e11e      	b.n	20002b26 <__aeabi_dsub+0x616>
200028e8:	465c      	mov	r4, fp
200028ea:	4661      	mov	r1, ip
200028ec:	4691      	mov	r9, r2
200028ee:	e72c      	b.n	2000274a <__aeabi_dsub+0x23a>
200028f0:	4fa9      	ldr	r7, [pc, #676]	; (20002b98 <__aeabi_dsub+0x688>)
200028f2:	42be      	cmp	r6, r7
200028f4:	d07b      	beq.n	200029ee <__aeabi_dsub+0x4de>
200028f6:	001e      	movs	r6, r3
200028f8:	e6f1      	b.n	200026de <__aeabi_dsub+0x1ce>
200028fa:	0010      	movs	r0, r2
200028fc:	3d1f      	subs	r5, #31
200028fe:	40e8      	lsrs	r0, r5
20002900:	2b20      	cmp	r3, #32
20002902:	d003      	beq.n	2000290c <__aeabi_dsub+0x3fc>
20002904:	2140      	movs	r1, #64	; 0x40
20002906:	1acb      	subs	r3, r1, r3
20002908:	409a      	lsls	r2, r3
2000290a:	4316      	orrs	r6, r2
2000290c:	1e73      	subs	r3, r6, #1
2000290e:	419e      	sbcs	r6, r3
20002910:	2207      	movs	r2, #7
20002912:	4306      	orrs	r6, r0
20002914:	4032      	ands	r2, r6
20002916:	2100      	movs	r1, #0
20002918:	2500      	movs	r5, #0
2000291a:	e783      	b.n	20002824 <__aeabi_dsub+0x314>
2000291c:	1a16      	subs	r6, r2, r0
2000291e:	4663      	mov	r3, ip
20002920:	42b2      	cmp	r2, r6
20002922:	4180      	sbcs	r0, r0
20002924:	1a59      	subs	r1, r3, r1
20002926:	4240      	negs	r0, r0
20002928:	1a0b      	subs	r3, r1, r0
2000292a:	4698      	mov	r8, r3
2000292c:	465c      	mov	r4, fp
2000292e:	e632      	b.n	20002596 <__aeabi_dsub+0x86>
20002930:	2e1f      	cmp	r6, #31
20002932:	dd00      	ble.n	20002936 <__aeabi_dsub+0x426>
20002934:	e0ab      	b.n	20002a8e <__aeabi_dsub+0x57e>
20002936:	2720      	movs	r7, #32
20002938:	1bbb      	subs	r3, r7, r6
2000293a:	469a      	mov	sl, r3
2000293c:	4663      	mov	r3, ip
2000293e:	4657      	mov	r7, sl
20002940:	40bb      	lsls	r3, r7
20002942:	4699      	mov	r9, r3
20002944:	0013      	movs	r3, r2
20002946:	464f      	mov	r7, r9
20002948:	40f3      	lsrs	r3, r6
2000294a:	431f      	orrs	r7, r3
2000294c:	003b      	movs	r3, r7
2000294e:	4657      	mov	r7, sl
20002950:	40ba      	lsls	r2, r7
20002952:	1e57      	subs	r7, r2, #1
20002954:	41ba      	sbcs	r2, r7
20002956:	4313      	orrs	r3, r2
20002958:	4662      	mov	r2, ip
2000295a:	40f2      	lsrs	r2, r6
2000295c:	1889      	adds	r1, r1, r2
2000295e:	e698      	b.n	20002692 <__aeabi_dsub+0x182>
20002960:	2720      	movs	r7, #32
20002962:	1bbb      	subs	r3, r7, r6
20002964:	469a      	mov	sl, r3
20002966:	4663      	mov	r3, ip
20002968:	4657      	mov	r7, sl
2000296a:	40bb      	lsls	r3, r7
2000296c:	4699      	mov	r9, r3
2000296e:	0013      	movs	r3, r2
20002970:	464f      	mov	r7, r9
20002972:	40f3      	lsrs	r3, r6
20002974:	431f      	orrs	r7, r3
20002976:	003b      	movs	r3, r7
20002978:	4657      	mov	r7, sl
2000297a:	40ba      	lsls	r2, r7
2000297c:	1e57      	subs	r7, r2, #1
2000297e:	41ba      	sbcs	r2, r7
20002980:	4313      	orrs	r3, r2
20002982:	4662      	mov	r2, ip
20002984:	40f2      	lsrs	r2, r6
20002986:	1a89      	subs	r1, r1, r2
20002988:	e79c      	b.n	200028c4 <__aeabi_dsub+0x3b4>
2000298a:	4b83      	ldr	r3, [pc, #524]	; (20002b98 <__aeabi_dsub+0x688>)
2000298c:	429f      	cmp	r7, r3
2000298e:	d05f      	beq.n	20002a50 <__aeabi_dsub+0x540>
20002990:	2580      	movs	r5, #128	; 0x80
20002992:	042d      	lsls	r5, r5, #16
20002994:	4273      	negs	r3, r6
20002996:	4329      	orrs	r1, r5
20002998:	e720      	b.n	200027dc <__aeabi_dsub+0x2cc>
2000299a:	2e00      	cmp	r6, #0
2000299c:	d10c      	bne.n	200029b8 <__aeabi_dsub+0x4a8>
2000299e:	2f00      	cmp	r7, #0
200029a0:	d100      	bne.n	200029a4 <__aeabi_dsub+0x494>
200029a2:	e0d0      	b.n	20002b46 <__aeabi_dsub+0x636>
200029a4:	465c      	mov	r4, fp
200029a6:	4661      	mov	r1, ip
200029a8:	4691      	mov	r9, r2
200029aa:	4d7b      	ldr	r5, [pc, #492]	; (20002b98 <__aeabi_dsub+0x688>)
200029ac:	e6cd      	b.n	2000274a <__aeabi_dsub+0x23a>
200029ae:	4f7a      	ldr	r7, [pc, #488]	; (20002b98 <__aeabi_dsub+0x688>)
200029b0:	42be      	cmp	r6, r7
200029b2:	d01c      	beq.n	200029ee <__aeabi_dsub+0x4de>
200029b4:	001e      	movs	r6, r3
200029b6:	e665      	b.n	20002684 <__aeabi_dsub+0x174>
200029b8:	2f00      	cmp	r7, #0
200029ba:	d018      	beq.n	200029ee <__aeabi_dsub+0x4de>
200029bc:	08c0      	lsrs	r0, r0, #3
200029be:	074e      	lsls	r6, r1, #29
200029c0:	4306      	orrs	r6, r0
200029c2:	2080      	movs	r0, #128	; 0x80
200029c4:	08c9      	lsrs	r1, r1, #3
200029c6:	0300      	lsls	r0, r0, #12
200029c8:	4201      	tst	r1, r0
200029ca:	d008      	beq.n	200029de <__aeabi_dsub+0x4ce>
200029cc:	4663      	mov	r3, ip
200029ce:	08dc      	lsrs	r4, r3, #3
200029d0:	4204      	tst	r4, r0
200029d2:	d104      	bne.n	200029de <__aeabi_dsub+0x4ce>
200029d4:	0021      	movs	r1, r4
200029d6:	46da      	mov	sl, fp
200029d8:	08d2      	lsrs	r2, r2, #3
200029da:	075e      	lsls	r6, r3, #29
200029dc:	4316      	orrs	r6, r2
200029de:	00f3      	lsls	r3, r6, #3
200029e0:	4699      	mov	r9, r3
200029e2:	2401      	movs	r4, #1
200029e4:	4653      	mov	r3, sl
200029e6:	00c9      	lsls	r1, r1, #3
200029e8:	0f72      	lsrs	r2, r6, #29
200029ea:	4311      	orrs	r1, r2
200029ec:	401c      	ands	r4, r3
200029ee:	4d6a      	ldr	r5, [pc, #424]	; (20002b98 <__aeabi_dsub+0x688>)
200029f0:	e6ab      	b.n	2000274a <__aeabi_dsub+0x23a>
200029f2:	001d      	movs	r5, r3
200029f4:	2200      	movs	r2, #0
200029f6:	2700      	movs	r7, #0
200029f8:	e6b4      	b.n	20002764 <__aeabi_dsub+0x254>
200029fa:	2d00      	cmp	r5, #0
200029fc:	d159      	bne.n	20002ab2 <__aeabi_dsub+0x5a2>
200029fe:	000b      	movs	r3, r1
20002a00:	4303      	orrs	r3, r0
20002a02:	d100      	bne.n	20002a06 <__aeabi_dsub+0x4f6>
20002a04:	e6d6      	b.n	200027b4 <__aeabi_dsub+0x2a4>
20002a06:	1c73      	adds	r3, r6, #1
20002a08:	d100      	bne.n	20002a0c <__aeabi_dsub+0x4fc>
20002a0a:	e0b2      	b.n	20002b72 <__aeabi_dsub+0x662>
20002a0c:	4b62      	ldr	r3, [pc, #392]	; (20002b98 <__aeabi_dsub+0x688>)
20002a0e:	429f      	cmp	r7, r3
20002a10:	d01e      	beq.n	20002a50 <__aeabi_dsub+0x540>
20002a12:	43f3      	mvns	r3, r6
20002a14:	2b38      	cmp	r3, #56	; 0x38
20002a16:	dc6f      	bgt.n	20002af8 <__aeabi_dsub+0x5e8>
20002a18:	2b1f      	cmp	r3, #31
20002a1a:	dd00      	ble.n	20002a1e <__aeabi_dsub+0x50e>
20002a1c:	e097      	b.n	20002b4e <__aeabi_dsub+0x63e>
20002a1e:	2520      	movs	r5, #32
20002a20:	000e      	movs	r6, r1
20002a22:	1aed      	subs	r5, r5, r3
20002a24:	40ae      	lsls	r6, r5
20002a26:	46b0      	mov	r8, r6
20002a28:	0006      	movs	r6, r0
20002a2a:	46aa      	mov	sl, r5
20002a2c:	40de      	lsrs	r6, r3
20002a2e:	4645      	mov	r5, r8
20002a30:	4335      	orrs	r5, r6
20002a32:	002e      	movs	r6, r5
20002a34:	4655      	mov	r5, sl
20002a36:	40a8      	lsls	r0, r5
20002a38:	40d9      	lsrs	r1, r3
20002a3a:	1e45      	subs	r5, r0, #1
20002a3c:	41a8      	sbcs	r0, r5
20002a3e:	448c      	add	ip, r1
20002a40:	4306      	orrs	r6, r0
20002a42:	18b6      	adds	r6, r6, r2
20002a44:	4296      	cmp	r6, r2
20002a46:	4192      	sbcs	r2, r2
20002a48:	4251      	negs	r1, r2
20002a4a:	4461      	add	r1, ip
20002a4c:	003d      	movs	r5, r7
20002a4e:	e625      	b.n	2000269c <__aeabi_dsub+0x18c>
20002a50:	003d      	movs	r5, r7
20002a52:	4661      	mov	r1, ip
20002a54:	4691      	mov	r9, r2
20002a56:	e678      	b.n	2000274a <__aeabi_dsub+0x23a>
20002a58:	000b      	movs	r3, r1
20002a5a:	4303      	orrs	r3, r0
20002a5c:	2d00      	cmp	r5, #0
20002a5e:	d000      	beq.n	20002a62 <__aeabi_dsub+0x552>
20002a60:	e655      	b.n	2000270e <__aeabi_dsub+0x1fe>
20002a62:	2b00      	cmp	r3, #0
20002a64:	d0f5      	beq.n	20002a52 <__aeabi_dsub+0x542>
20002a66:	4663      	mov	r3, ip
20002a68:	4313      	orrs	r3, r2
20002a6a:	d100      	bne.n	20002a6e <__aeabi_dsub+0x55e>
20002a6c:	e66d      	b.n	2000274a <__aeabi_dsub+0x23a>
20002a6e:	1886      	adds	r6, r0, r2
20002a70:	4286      	cmp	r6, r0
20002a72:	4180      	sbcs	r0, r0
20002a74:	4461      	add	r1, ip
20002a76:	4240      	negs	r0, r0
20002a78:	1809      	adds	r1, r1, r0
20002a7a:	2200      	movs	r2, #0
20002a7c:	020b      	lsls	r3, r1, #8
20002a7e:	d400      	bmi.n	20002a82 <__aeabi_dsub+0x572>
20002a80:	e6d0      	b.n	20002824 <__aeabi_dsub+0x314>
20002a82:	4b46      	ldr	r3, [pc, #280]	; (20002b9c <__aeabi_dsub+0x68c>)
20002a84:	3501      	adds	r5, #1
20002a86:	4019      	ands	r1, r3
20002a88:	e5b2      	b.n	200025f0 <__aeabi_dsub+0xe0>
20002a8a:	46b1      	mov	r9, r6
20002a8c:	e65d      	b.n	2000274a <__aeabi_dsub+0x23a>
20002a8e:	0033      	movs	r3, r6
20002a90:	4667      	mov	r7, ip
20002a92:	3b20      	subs	r3, #32
20002a94:	40df      	lsrs	r7, r3
20002a96:	003b      	movs	r3, r7
20002a98:	2e20      	cmp	r6, #32
20002a9a:	d005      	beq.n	20002aa8 <__aeabi_dsub+0x598>
20002a9c:	2740      	movs	r7, #64	; 0x40
20002a9e:	1bbf      	subs	r7, r7, r6
20002aa0:	4666      	mov	r6, ip
20002aa2:	40be      	lsls	r6, r7
20002aa4:	4332      	orrs	r2, r6
20002aa6:	4690      	mov	r8, r2
20002aa8:	4646      	mov	r6, r8
20002aaa:	1e72      	subs	r2, r6, #1
20002aac:	4196      	sbcs	r6, r2
20002aae:	4333      	orrs	r3, r6
20002ab0:	e5ef      	b.n	20002692 <__aeabi_dsub+0x182>
20002ab2:	4b39      	ldr	r3, [pc, #228]	; (20002b98 <__aeabi_dsub+0x688>)
20002ab4:	429f      	cmp	r7, r3
20002ab6:	d0cb      	beq.n	20002a50 <__aeabi_dsub+0x540>
20002ab8:	2580      	movs	r5, #128	; 0x80
20002aba:	042d      	lsls	r5, r5, #16
20002abc:	4273      	negs	r3, r6
20002abe:	4329      	orrs	r1, r5
20002ac0:	e7a8      	b.n	20002a14 <__aeabi_dsub+0x504>
20002ac2:	4308      	orrs	r0, r1
20002ac4:	1e41      	subs	r1, r0, #1
20002ac6:	4188      	sbcs	r0, r1
20002ac8:	e6a2      	b.n	20002810 <__aeabi_dsub+0x300>
20002aca:	2f00      	cmp	r7, #0
20002acc:	d100      	bne.n	20002ad0 <__aeabi_dsub+0x5c0>
20002ace:	e63c      	b.n	2000274a <__aeabi_dsub+0x23a>
20002ad0:	4663      	mov	r3, ip
20002ad2:	1a86      	subs	r6, r0, r2
20002ad4:	1acf      	subs	r7, r1, r3
20002ad6:	42b0      	cmp	r0, r6
20002ad8:	419b      	sbcs	r3, r3
20002ada:	425b      	negs	r3, r3
20002adc:	1afb      	subs	r3, r7, r3
20002ade:	4698      	mov	r8, r3
20002ae0:	021b      	lsls	r3, r3, #8
20002ae2:	d54e      	bpl.n	20002b82 <__aeabi_dsub+0x672>
20002ae4:	1a16      	subs	r6, r2, r0
20002ae6:	4663      	mov	r3, ip
20002ae8:	42b2      	cmp	r2, r6
20002aea:	4192      	sbcs	r2, r2
20002aec:	1a59      	subs	r1, r3, r1
20002aee:	4252      	negs	r2, r2
20002af0:	1a89      	subs	r1, r1, r2
20002af2:	465c      	mov	r4, fp
20002af4:	2200      	movs	r2, #0
20002af6:	e57b      	b.n	200025f0 <__aeabi_dsub+0xe0>
20002af8:	4301      	orrs	r1, r0
20002afa:	000e      	movs	r6, r1
20002afc:	1e71      	subs	r1, r6, #1
20002afe:	418e      	sbcs	r6, r1
20002b00:	e79f      	b.n	20002a42 <__aeabi_dsub+0x532>
20002b02:	001d      	movs	r5, r3
20002b04:	000e      	movs	r6, r1
20002b06:	3d20      	subs	r5, #32
20002b08:	40ee      	lsrs	r6, r5
20002b0a:	46b0      	mov	r8, r6
20002b0c:	2b20      	cmp	r3, #32
20002b0e:	d004      	beq.n	20002b1a <__aeabi_dsub+0x60a>
20002b10:	2540      	movs	r5, #64	; 0x40
20002b12:	1aeb      	subs	r3, r5, r3
20002b14:	4099      	lsls	r1, r3
20002b16:	4308      	orrs	r0, r1
20002b18:	4681      	mov	r9, r0
20002b1a:	4648      	mov	r0, r9
20002b1c:	4643      	mov	r3, r8
20002b1e:	1e41      	subs	r1, r0, #1
20002b20:	4188      	sbcs	r0, r1
20002b22:	4318      	orrs	r0, r3
20002b24:	e674      	b.n	20002810 <__aeabi_dsub+0x300>
20002b26:	2200      	movs	r2, #0
20002b28:	2400      	movs	r4, #0
20002b2a:	e617      	b.n	2000275c <__aeabi_dsub+0x24c>
20002b2c:	1a16      	subs	r6, r2, r0
20002b2e:	4663      	mov	r3, ip
20002b30:	42b2      	cmp	r2, r6
20002b32:	4192      	sbcs	r2, r2
20002b34:	1a59      	subs	r1, r3, r1
20002b36:	4252      	negs	r2, r2
20002b38:	1a89      	subs	r1, r1, r2
20002b3a:	003d      	movs	r5, r7
20002b3c:	e525      	b.n	2000258a <__aeabi_dsub+0x7a>
20002b3e:	4661      	mov	r1, ip
20002b40:	4691      	mov	r9, r2
20002b42:	4d15      	ldr	r5, [pc, #84]	; (20002b98 <__aeabi_dsub+0x688>)
20002b44:	e601      	b.n	2000274a <__aeabi_dsub+0x23a>
20002b46:	2280      	movs	r2, #128	; 0x80
20002b48:	2400      	movs	r4, #0
20002b4a:	0312      	lsls	r2, r2, #12
20002b4c:	e679      	b.n	20002842 <__aeabi_dsub+0x332>
20002b4e:	001d      	movs	r5, r3
20002b50:	000e      	movs	r6, r1
20002b52:	3d20      	subs	r5, #32
20002b54:	40ee      	lsrs	r6, r5
20002b56:	46b0      	mov	r8, r6
20002b58:	2b20      	cmp	r3, #32
20002b5a:	d004      	beq.n	20002b66 <__aeabi_dsub+0x656>
20002b5c:	2540      	movs	r5, #64	; 0x40
20002b5e:	1aeb      	subs	r3, r5, r3
20002b60:	4099      	lsls	r1, r3
20002b62:	4308      	orrs	r0, r1
20002b64:	4681      	mov	r9, r0
20002b66:	464e      	mov	r6, r9
20002b68:	4643      	mov	r3, r8
20002b6a:	1e71      	subs	r1, r6, #1
20002b6c:	418e      	sbcs	r6, r1
20002b6e:	431e      	orrs	r6, r3
20002b70:	e767      	b.n	20002a42 <__aeabi_dsub+0x532>
20002b72:	1886      	adds	r6, r0, r2
20002b74:	4296      	cmp	r6, r2
20002b76:	419b      	sbcs	r3, r3
20002b78:	4461      	add	r1, ip
20002b7a:	425b      	negs	r3, r3
20002b7c:	18c9      	adds	r1, r1, r3
20002b7e:	003d      	movs	r5, r7
20002b80:	e58c      	b.n	2000269c <__aeabi_dsub+0x18c>
20002b82:	4647      	mov	r7, r8
20002b84:	4337      	orrs	r7, r6
20002b86:	d0ce      	beq.n	20002b26 <__aeabi_dsub+0x616>
20002b88:	2207      	movs	r2, #7
20002b8a:	4641      	mov	r1, r8
20002b8c:	4032      	ands	r2, r6
20002b8e:	e649      	b.n	20002824 <__aeabi_dsub+0x314>
20002b90:	2700      	movs	r7, #0
20002b92:	003a      	movs	r2, r7
20002b94:	e5e6      	b.n	20002764 <__aeabi_dsub+0x254>
20002b96:	46c0      	nop			; (mov r8, r8)
20002b98:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
20002b9c:	ff7fffff 			; <UNDEFINED> instruction: 0xff7fffff

20002ba0 <__aeabi_d2iz>:
20002ba0:	b530      	push	{r4, r5, lr}
20002ba2:	4d14      	ldr	r5, [pc, #80]	; (20002bf4 <__aeabi_d2iz+0x54>)
20002ba4:	030a      	lsls	r2, r1, #12
20002ba6:	004b      	lsls	r3, r1, #1
20002ba8:	0b12      	lsrs	r2, r2, #12
20002baa:	0d5b      	lsrs	r3, r3, #21
20002bac:	0fc9      	lsrs	r1, r1, #31
20002bae:	2400      	movs	r4, #0
20002bb0:	42ab      	cmp	r3, r5
20002bb2:	dd11      	ble.n	20002bd8 <__aeabi_d2iz+0x38>
20002bb4:	4c10      	ldr	r4, [pc, #64]	; (20002bf8 <__aeabi_d2iz+0x58>)
20002bb6:	42a3      	cmp	r3, r4
20002bb8:	dc10      	bgt.n	20002bdc <__aeabi_d2iz+0x3c>
20002bba:	2480      	movs	r4, #128	; 0x80
20002bbc:	0364      	lsls	r4, r4, #13
20002bbe:	4322      	orrs	r2, r4
20002bc0:	4c0e      	ldr	r4, [pc, #56]	; (20002bfc <__aeabi_d2iz+0x5c>)
20002bc2:	1ae4      	subs	r4, r4, r3
20002bc4:	2c1f      	cmp	r4, #31
20002bc6:	dd0c      	ble.n	20002be2 <__aeabi_d2iz+0x42>
20002bc8:	480d      	ldr	r0, [pc, #52]	; (20002c00 <__aeabi_d2iz+0x60>)
20002bca:	1ac3      	subs	r3, r0, r3
20002bcc:	40da      	lsrs	r2, r3
20002bce:	0013      	movs	r3, r2
20002bd0:	425c      	negs	r4, r3
20002bd2:	2900      	cmp	r1, #0
20002bd4:	d100      	bne.n	20002bd8 <__aeabi_d2iz+0x38>
20002bd6:	001c      	movs	r4, r3
20002bd8:	0020      	movs	r0, r4
20002bda:	bd30      	pop	{r4, r5, pc}
20002bdc:	4b09      	ldr	r3, [pc, #36]	; (20002c04 <__aeabi_d2iz+0x64>)
20002bde:	18cc      	adds	r4, r1, r3
20002be0:	e7fa      	b.n	20002bd8 <__aeabi_d2iz+0x38>
20002be2:	4d09      	ldr	r5, [pc, #36]	; (20002c08 <__aeabi_d2iz+0x68>)
20002be4:	40e0      	lsrs	r0, r4
20002be6:	46ac      	mov	ip, r5
20002be8:	4463      	add	r3, ip
20002bea:	409a      	lsls	r2, r3
20002bec:	0013      	movs	r3, r2
20002bee:	4303      	orrs	r3, r0
20002bf0:	e7ee      	b.n	20002bd0 <__aeabi_d2iz+0x30>
20002bf2:	46c0      	nop			; (mov r8, r8)
20002bf4:	000003fe 	strdeq	r0, [r0], -lr
20002bf8:	0000041d 	andeq	r0, r0, sp, lsl r4
20002bfc:	00000433 	andeq	r0, r0, r3, lsr r4
20002c00:	00000413 	andeq	r0, r0, r3, lsl r4
20002c04:	7fffffff 	svcvc	0x00ffffff
20002c08:	fffffbed 			; <UNDEFINED> instruction: 0xfffffbed

20002c0c <__clzsi2>:
20002c0c:	211c      	movs	r1, #28
20002c0e:	2301      	movs	r3, #1
20002c10:	041b      	lsls	r3, r3, #16
20002c12:	4298      	cmp	r0, r3
20002c14:	d301      	bcc.n	20002c1a <__clzsi2+0xe>
20002c16:	0c00      	lsrs	r0, r0, #16
20002c18:	3910      	subs	r1, #16
20002c1a:	0a1b      	lsrs	r3, r3, #8
20002c1c:	4298      	cmp	r0, r3
20002c1e:	d301      	bcc.n	20002c24 <__clzsi2+0x18>
20002c20:	0a00      	lsrs	r0, r0, #8
20002c22:	3908      	subs	r1, #8
20002c24:	091b      	lsrs	r3, r3, #4
20002c26:	4298      	cmp	r0, r3
20002c28:	d301      	bcc.n	20002c2e <__clzsi2+0x22>
20002c2a:	0900      	lsrs	r0, r0, #4
20002c2c:	3904      	subs	r1, #4
20002c2e:	a202      	add	r2, pc, #8	; (adr r2, 20002c38 <__clzsi2+0x2c>)
20002c30:	5c10      	ldrb	r0, [r2, r0]
20002c32:	1840      	adds	r0, r0, r1
20002c34:	4770      	bx	lr
20002c36:	46c0      	nop			; (mov r8, r8)
20002c38:	02020304 	andeq	r0, r2, #4, 6	; 0x10000000
20002c3c:	01010101 	tsteq	r1, r1, lsl #2
	...

20002c48 <__itoa>:
20002c48:	1e93      	subs	r3, r2, #2
20002c4a:	b510      	push	{r4, lr}
20002c4c:	000c      	movs	r4, r1
20002c4e:	2b22      	cmp	r3, #34	; 0x22
20002c50:	d904      	bls.n	20002c5c <__itoa+0x14>
20002c52:	2300      	movs	r3, #0
20002c54:	001c      	movs	r4, r3
20002c56:	700b      	strb	r3, [r1, #0]
20002c58:	0020      	movs	r0, r4
20002c5a:	bd10      	pop	{r4, pc}
20002c5c:	2a0a      	cmp	r2, #10
20002c5e:	d109      	bne.n	20002c74 <__itoa+0x2c>
20002c60:	2800      	cmp	r0, #0
20002c62:	da07      	bge.n	20002c74 <__itoa+0x2c>
20002c64:	232d      	movs	r3, #45	; 0x2d
20002c66:	700b      	strb	r3, [r1, #0]
20002c68:	2101      	movs	r1, #1
20002c6a:	4240      	negs	r0, r0
20002c6c:	1861      	adds	r1, r4, r1
20002c6e:	f000 f811 	bl	20002c94 <__utoa>
20002c72:	e7f1      	b.n	20002c58 <__itoa+0x10>
20002c74:	2100      	movs	r1, #0
20002c76:	e7f9      	b.n	20002c6c <__itoa+0x24>

20002c78 <itoa>:
20002c78:	b510      	push	{r4, lr}
20002c7a:	f7ff ffe5 	bl	20002c48 <__itoa>
20002c7e:	bd10      	pop	{r4, pc}

20002c80 <memcpy>:
20002c80:	2300      	movs	r3, #0
20002c82:	b510      	push	{r4, lr}
20002c84:	429a      	cmp	r2, r3
20002c86:	d100      	bne.n	20002c8a <memcpy+0xa>
20002c88:	bd10      	pop	{r4, pc}
20002c8a:	5ccc      	ldrb	r4, [r1, r3]
20002c8c:	54c4      	strb	r4, [r0, r3]
20002c8e:	3301      	adds	r3, #1
20002c90:	e7f8      	b.n	20002c84 <memcpy+0x4>
	...

20002c94 <__utoa>:
20002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
20002c96:	0017      	movs	r7, r2
20002c98:	b08d      	sub	sp, #52	; 0x34
20002c9a:	2225      	movs	r2, #37	; 0x25
20002c9c:	0006      	movs	r6, r0
20002c9e:	000d      	movs	r5, r1
20002ca0:	a802      	add	r0, sp, #8
20002ca2:	4914      	ldr	r1, [pc, #80]	; (20002cf4 <__utoa+0x60>)
20002ca4:	f7ff ffec 	bl	20002c80 <memcpy>
20002ca8:	aa02      	add	r2, sp, #8
20002caa:	1ebb      	subs	r3, r7, #2
20002cac:	2400      	movs	r4, #0
20002cae:	9201      	str	r2, [sp, #4]
20002cb0:	2b22      	cmp	r3, #34	; 0x22
20002cb2:	d905      	bls.n	20002cc0 <__utoa+0x2c>
20002cb4:	702c      	strb	r4, [r5, #0]
20002cb6:	0025      	movs	r5, r4
20002cb8:	0028      	movs	r0, r5
20002cba:	b00d      	add	sp, #52	; 0x34
20002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
20002cbe:	0014      	movs	r4, r2
20002cc0:	0030      	movs	r0, r6
20002cc2:	0039      	movs	r1, r7
20002cc4:	f7fe fed2 	bl	20001a6c <__aeabi_uidivmod>
20002cc8:	4684      	mov	ip, r0
20002cca:	9801      	ldr	r0, [sp, #4]
20002ccc:	1c62      	adds	r2, r4, #1
20002cce:	18ab      	adds	r3, r5, r2
20002cd0:	5c41      	ldrb	r1, [r0, r1]
20002cd2:	1e5e      	subs	r6, r3, #1
20002cd4:	7031      	strb	r1, [r6, #0]
20002cd6:	4666      	mov	r6, ip
20002cd8:	2e00      	cmp	r6, #0
20002cda:	d1f0      	bne.n	20002cbe <__utoa+0x2a>
20002cdc:	701e      	strb	r6, [r3, #0]
20002cde:	002b      	movs	r3, r5
20002ce0:	1b5a      	subs	r2, r3, r5
20002ce2:	4294      	cmp	r4, r2
20002ce4:	dde8      	ble.n	20002cb8 <__utoa+0x24>
20002ce6:	781a      	ldrb	r2, [r3, #0]
20002ce8:	5d29      	ldrb	r1, [r5, r4]
20002cea:	7019      	strb	r1, [r3, #0]
20002cec:	552a      	strb	r2, [r5, r4]
20002cee:	3301      	adds	r3, #1
20002cf0:	3c01      	subs	r4, #1
20002cf2:	e7f5      	b.n	20002ce0 <__utoa+0x4c>
20002cf4:	200037f0 	strdcs	r3, [r0], -r0

20002cf8 <utoa>:
20002cf8:	b510      	push	{r4, lr}
20002cfa:	f7ff ffcb 	bl	20002c94 <__utoa>
20002cfe:	bd10      	pop	{r4, pc}

20002d00 <facingLeft>:
	...

20002d08 <BUF>:
	...

20002da8 <seed>:
20002da8:	00000000 	andeq	r0, r0, r0

20002dac <backBuffer>:
	...

200035b0 <pedro_still>:
200035b0:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
200035b4:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
200035b8:	1f1f7fff 	svcne	0x001f7fff
200035bc:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
200035c0:	00806030 	addeq	r6, r0, r0, lsr r0
200035c4:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
200035c8:	01831f1f 	orreq	r1, r3, pc, lsl pc
200035cc:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
200035d0:	24000004 	strcs	r0, [r0], #-4
200035d4:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
200035d8:	03010000 	movweq	r0, #4096	; 0x1000
200035dc:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
200035e0:	148c8040 	strne	r8, [ip], #64	; 0x40
200035e4:	1a283828 	bne	20a1168c <Pedro+0xa0df9c>
200035e8:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
200035ec:	06000000 	streq	r0, [r0], -r0
200035f0:	a47b0609 	ldrbtge	r0, [fp], #-1545	; 0xfffff9f7
200035f4:	e53ed5a4 	ldr	sp, [lr, #-1444]!	; 0xfffffa5c
200035f8:	0ac6bea5 	beq	1f1b3094 <startup-0xe4cf6c>
200035fc:	00000106 	andeq	r0, r0, r6, lsl #2

20003600 <pedro_jump>:
20003600:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20003604:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20003608:	1f1f7fff 	svcne	0x001f7fff
2000360c:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20003610:	00806030 	addeq	r6, r0, r0, lsr r0
20003614:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20003618:	01831f1f 	orreq	r1, r3, pc, lsl pc
2000361c:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20003620:	24000004 	strcs	r0, [r0], #-4
20003624:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20003628:	03010000 	movweq	r0, #4096	; 0x1000
2000362c:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
20003630:	148c8040 	strne	r8, [ip], #64	; 0x40
20003634:	1a283828 	bne	20a116dc <Pedro+0xa0dfec>
20003638:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
2000363c:	76000000 	strvc	r0, [r0], -r0
20003640:	242b7e49 	strtcs	r7, [fp], #-3657	; 0xfffff1b7
20003644:	150e1514 	strne	r1, [lr, #-1300]	; 0xfffffaec
20003648:	3a2a2615 	bcc	20a8cea4 <Pedro+0xa897b4>
2000364c:	00001d26 	andeq	r1, r0, r6, lsr #26

20003650 <pedro_walk1>:
20003650:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20003654:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20003658:	1f1f7fff 	svcne	0x001f7fff
2000365c:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20003660:	00806030 	addeq	r6, r0, r0, lsr r0
20003664:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20003668:	01831f1f 	orreq	r1, r3, pc, lsl pc
2000366c:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20003670:	24000004 	strcs	r0, [r0], #-4
20003674:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20003678:	83010000 	movwhi	r0, #4096	; 0x1000
2000367c:	22b12c46 	adcscs	r2, r1, #17920	; 0x4600
20003680:	148c8040 	strne	r8, [ip], #64	; 0x40
20003684:	1a283828 	bne	20a1172c <Pedro+0xa0e03c>
20003688:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
2000368c:	07000000 	streq	r0, [r0, -r0]
20003690:	641b050a 	ldrvs	r0, [fp], #-1290	; 0xfffffaf6
20003694:	a5deb5a4 	ldrbge	fp, [lr, #1444]	; 0x5a4
20003698:	0a06ceb5 	beq	201b7174 <Pedro+0x1b3a84>
2000369c:	00000106 	andeq	r0, r0, r6, lsl #2

200036a0 <pedro_walk2>:
200036a0:	f0e0c000 			; <UNDEFINED> instruction: 0xf0e0c000
200036a4:	fefcfcf8 	mrc2	12, 7, pc, cr12, cr8, {7}
200036a8:	3e3efefe 	mrccc	14, 1, APSR_nzcv, cr14, cr14, {7}
200036ac:	30381c1e 	eorscc	r1, r8, lr, lsl ip
200036b0:	0000c060 	andeq	ip, r0, r0, rrx
200036b4:	8fffff3e 	svchi	0x00ffff3e
200036b8:	03073f3f 	movweq	r3, #32575	; 0x7f3f
200036bc:	68480817 	stmdavs	r8, {r0, r1, r2, r4, fp}^
200036c0:	48000008 	stmdami	r0, {r3}
200036c4:	f00f04e4 			; <UNDEFINED> instruction: 0xf00f04e4
200036c8:	07030000 	streq	r0, [r3, -r0]
200036cc:	44a338cc 	strtmi	r3, [r3], #2252	; 0x8cc
200036d0:	28180080 	ldmdacs	r8, {r7}
200036d4:	34507050 	ldrbcc	r7, [r0], #-80	; 0xffffffb0
200036d8:	0ff00304 	svceq	0x00f00304
200036dc:	00000000 	andeq	r0, r0, r0
200036e0:	a5ae7300 	strge	r7, [lr, #768]!	; 0x300
200036e4:	e61d0bd6 			; <UNDEFINED> instruction: 0xe61d0bd6
200036e8:	04c4bca6 	strbeq	fp, [r4], #3238	; 0xca6
200036ec:	00010204 	andeq	r0, r1, r4, lsl #4

200036f0 <Pedro>:
200036f0:	00000020 	andeq	r0, r0, r0, lsr #32
200036f4:	00000014 	andeq	r0, r0, r4, lsl r0
200036f8:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20003724:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
	...
20003730:	00000020 	andeq	r0, r0, r0, lsr #32
20003734:	00000014 	andeq	r0, r0, r4, lsl r0
20003738:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20003764:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
	...
20003770:	0a030201 	beq	200c3f7c <Pedro+0xc088c>
20003774:	0b060504 	bleq	20184b8c <Pedro+0x18149c>
20003778:	0c090807 	stceq	8, cr0, [r9], {7}
2000377c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 2000374c <Pedro+0x5c>
20003780:	1c0c07f8 	stcne	7, cr0, [ip], {248}	; 0xf8
20003784:	e00c3004 	and	r3, ip, r4
20003788:	d81c87e8 	ldmdale	ip, {r3, r5, r6, r7, r8, r9, sl, pc}
2000378c:	20076006 	andcs	r6, r7, r6
20003790:	600b200f 	andvs	r2, fp, pc
20003794:	8fcdd039 	svchi	0x00cdd039
20003798:	6004c004 	andvs	ip, r4, r4
2000379c:	1ff8300c 	svcne	0x00f8300c
200037a0:	5f5f5f5f 	svcpl	0x005f5f5f
200037a4:	5f6f6f5f 	svcpl	0x006f6f5f
200037a8:	5f5f385f 	svcpl	0x005f385f
200037ac:	5f6f6f5f 	svcpl	0x006f6f5f
200037b0:	5f6f5f5f 	svcpl	0x006f5f5f
200037b4:	5f5f6f5f 	svcpl	0x005f6f5f
200037b8:	5f385f5f 	svcpl	0x00385f5f
200037bc:	5f385f5f 	svcpl	0x00385f5f
200037c0:	5f6f5f5f 	svcpl	0x006f5f5f
200037c4:	5f5f5f5f 	svcpl	0x005f5f5f
200037c8:	5f5f5f5f 	svcpl	0x005f5f5f
200037cc:	5f5f6f5f 	svcpl	0x005f6f5f
200037d0:	5f6f5f5f 	svcpl	0x006f5f5f
200037d4:	6f6f5f5f 	svcvs	0x006f5f5f
200037d8:	5f5f385f 	svcpl	0x005f385f
200037dc:	5f5f6f5f 	svcpl	0x005f6f5f
200037e0:	5f6f5f5f 	svcpl	0x006f5f5f
200037e4:	5f5f6f5f 	svcpl	0x005f6f5f
200037e8:	5f6f5f5f 	svcpl	0x006f5f5f
200037ec:	5f5f5f5f 	svcpl	0x005f5f5f
200037f0:	33323130 	teqcc	r2, #48, 2
200037f4:	37363534 			; <UNDEFINED> instruction: 0x37363534
200037f8:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
200037fc:	66656463 	strbtvs	r6, [r5], -r3, ror #8
20003800:	6a696867 	bvs	21a5d9a4 <Pedro+0x1a5a2b4>
20003804:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
20003808:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
2000380c:	76757473 			; <UNDEFINED> instruction: 0x76757473
20003810:	7a797877 	bvc	21e619f4 <Pedro+0x1e5e304>
20003814:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000a9 	andeq	r0, r0, r9, lsr #1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000035 	andeq	r0, r0, r5, lsr r0
      10:	0000cd0c 	andeq	ip, r0, ip, lsl #26
      14:	00000000 	andeq	r0, r0, r0
      18:	00001000 	andeq	r1, r0, r0
      1c:	0000d620 	andeq	sp, r0, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	00f30200 	rscseq	r0, r3, r0, lsl #4
      28:	1f010000 	svcne	0x00010000
      2c:	200000c2 	andcs	r0, r0, r2, asr #1
      30:	00000024 	andeq	r0, r0, r4, lsr #32
      34:	00499c01 	subeq	r9, r9, r1, lsl #24
      38:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	0000491f 	andeq	r4, r0, pc, lsl r9
      44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      50:	00002902 	andeq	r2, r0, r2, lsl #18
      54:	98150100 	ldmdals	r5, {r8}
      58:	2a200000 	bcs	800060 <startup-0x1f7fffa0>
      5c:	01000000 	mrseq	r0, (UNDEF: 0)
      60:	00008a9c 	muleq	r0, ip, sl
      64:	002e0300 	eoreq	r0, lr, r0, lsl #6
      68:	15010000 	strne	r0, [r1, #-0]
      6c:	00000049 	andeq	r0, r0, r9, asr #32
      70:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
      74:	200000a0 	andcs	r0, r0, r0, lsr #1
      78:	0000001a 	andeq	r0, r0, sl, lsl r0
      7c:	01006906 	tsteq	r0, r6, lsl #18
      80:	00004919 	andeq	r4, r0, r9, lsl r9
      84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      88:	1d070000 	stcne	0, cr0, [r7, #-0]
      8c:	01000000 	mrseq	r0, (UNDEF: 0)
      90:	0000540c 	andeq	r5, r0, ip, lsl #8
      94:	00004420 	andeq	r4, r0, r0, lsr #8
      98:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
      9c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      a0:	00100301 	andseq	r0, r0, r1, lsl #6
      a4:	00442000 	subeq	r2, r4, r0
      a8:	9c010000 	stcls	0, cr0, [r1], {-0}
      ac:	00060b00 	andeq	r0, r6, r0, lsl #22
      b0:	76000400 	strvc	r0, [r0], -r0, lsl #8
      b4:	04000000 	streq	r0, [r0], #-0
      b8:	00003501 	andeq	r3, r0, r1, lsl #10
      bc:	01510c00 	cmpeq	r1, r0, lsl #24
      c0:	00000000 	andeq	r0, r0, r0
      c4:	00e80000 	rsceq	r0, r8, r0
      c8:	094c2000 	stmdbeq	ip, {sp}^
      cc:	00870000 	addeq	r0, r7, r0
      d0:	59020000 	stmdbpl	r2, {}	; <UNPREDICTABLE>
      d4:	40000002 	andmi	r0, r0, r2
      d8:	00c20b02 	sbceq	r0, r2, r2, lsl #22
      dc:	2c030000 	stccs	0, cr0, [r3], {-0}
      e0:	02000002 	andeq	r0, r0, #2
      e4:	0000c20c 	andeq	ip, r0, ip, lsl #4
      e8:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
      ec:	02000001 	andeq	r0, r0, #1
      f0:	0000c20d 	andeq	ip, r0, sp, lsl #4
      f4:	16030400 	strne	r0, [r3], -r0, lsl #8
      f8:	02000001 	andeq	r0, r0, #1
      fc:	0000c20e 	andeq	ip, r0, lr, lsl #4
     100:	d0030800 	andle	r0, r3, r0, lsl #16
     104:	02000002 	andeq	r0, r0, #2
     108:	0000c20e 	andeq	ip, r0, lr, lsl #4
     10c:	d7030c00 	strle	r0, [r3, -r0, lsl #24]
     110:	02000001 	andeq	r0, r0, #1
     114:	0000c90f 	andeq	ip, r0, pc, lsl #18
     118:	dc031000 	stcle	0, cr1, [r3], {-0}
     11c:	02000001 	andeq	r0, r0, #1
     120:	0000c90f 	andeq	ip, r0, pc, lsl #18
     124:	94031800 	strls	r1, [r3], #-2048	; 0xfffff800
     128:	02000001 	andeq	r0, r0, #1
     12c:	0000c910 	andeq	ip, r0, r0, lsl r9
     130:	99032000 	stmdbls	r3, {sp}
     134:	02000001 	andeq	r0, r0, #1
     138:	0000c910 	andeq	ip, r0, r0, lsl r9
     13c:	50032800 	andpl	r2, r3, r0, lsl #16
     140:	02000002 	andeq	r0, r0, #2
     144:	0000c211 	andeq	ip, r0, r1, lsl r2
     148:	36033000 	strcc	r3, [r3], -r0
     14c:	02000002 	andeq	r0, r0, #2
     150:	0000d012 	andeq	sp, r0, r2, lsl r0
     154:	89033400 	stmdbhi	r3, {sl, ip, sp}
     158:	02000002 	andeq	r0, r0, #2
     15c:	0000ee13 	andeq	lr, r0, r3, lsl lr
     160:	38033800 	stmdacc	r3, {fp, ip, sp}
     164:	02000001 	andeq	r0, r0, #1
     168:	0000ee14 	andeq	lr, r0, r4, lsl lr
     16c:	04003c00 	streq	r3, [r0], #-3072	; 0xfffff400
     170:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     174:	08050074 	stmdaeq	r5, {r2, r4, r5, r6}
     178:	00028e04 	andeq	r8, r2, r4, lsl #28
     17c:	d6040600 	strle	r0, [r4], -r0, lsl #12
     180:	05000000 	streq	r0, [r0, #-0]
     184:	01fd0801 	mvnseq	r0, r1, lsl #16
     188:	e8070000 	stmda	r7, {}	; <UNPREDICTABLE>
     18c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     190:	000000e8 	andeq	r0, r0, r8, ror #1
     194:	25040600 	strcs	r0, [r4, #-1536]	; 0xfffffa00
     198:	06000000 	streq	r0, [r0], -r0
     19c:	0000dd04 	andeq	sp, r0, r4, lsl #26
     1a0:	02a70900 	adceq	r0, r7, #0, 18
     1a4:	15020000 	strne	r0, [r2, #-0]
     1a8:	00000025 	andeq	r0, r0, r5, lsr #32
     1ac:	f6060105 			; <UNDEFINED> instruction: 0xf6060105
     1b0:	05000001 	streq	r0, [r0, #-1]
     1b4:	01f40801 	mvnseq	r0, r1, lsl #16
     1b8:	060a0000 	streq	r0, [sl], -r0
     1bc:	05000001 	streq	r0, [r0, #-1]
     1c0:	013d0502 	teqeq	sp, r2, lsl #10
     1c4:	02050000 	andeq	r0, r5, #0
     1c8:	00023d07 	andeq	r3, r2, r7, lsl #26
     1cc:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
     1d0:	000001c3 	andeq	r0, r0, r3, asr #3
     1d4:	0c070405 	cfstrseq	mvf0, [r7], {5}
     1d8:	05000002 	streq	r0, [r0, #-2]
     1dc:	01be0508 			; <UNDEFINED> instruction: 0x01be0508
     1e0:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     1e4:	00020707 	andeq	r0, r2, r7, lsl #14
     1e8:	07040500 	streq	r0, [r4, -r0, lsl #10]
     1ec:	00000211 	andeq	r0, r0, r1, lsl r2
     1f0:	5303080b 	movwpl	r0, #14347	; 0x380b
     1f4:	00000160 	andeq	r0, r0, r0, ror #2
     1f8:	676e6c0c 	strbvs	r6, [lr, -ip, lsl #24]!
     1fc:	35540300 	ldrbcc	r0, [r4, #-768]	; 0xfffffd00
     200:	0c000001 	stceq	0, cr0, [r0], {1}
     204:	55030063 	strpl	r0, [r3, #-99]	; 0xffffff9d
     208:	00000160 	andeq	r0, r0, r0, ror #2
     20c:	00d60d00 	sbcseq	r0, r6, r0, lsl #26
     210:	01700000 	cmneq	r0, r0
     214:	3c0e0000 	stccc	0, cr0, [lr], {-0}
     218:	07000001 	streq	r0, [r0, -r1]
     21c:	01760200 	cmneq	r6, r0, lsl #4
     220:	03080000 	movweq	r0, #32768	; 0x8000
     224:	00018352 	andeq	r8, r1, r2, asr r3
     228:	01430f00 	cmpeq	r3, r0, lsl #30
     22c:	00000000 	andeq	r0, r0, r0
     230:	0001700d 	andeq	r7, r1, sp
     234:	00019300 	andeq	r9, r1, r0, lsl #6
     238:	013c0e00 	teqeq	ip, r0, lsl #28
     23c:	00130000 	andseq	r0, r3, r0
     240:	46554210 			; <UNDEFINED> instruction: 0x46554210
     244:	83570300 	cmphi	r7, #0, 6
     248:	05000001 	streq	r0, [r0, #-1]
     24c:	002d0803 	eoreq	r0, sp, r3, lsl #16
     250:	00d60d20 	sbcseq	r0, r6, r0, lsr #26
     254:	01ba0000 			; <UNDEFINED> instruction: 0x01ba0000
     258:	3c0e0000 	stccc	0, cr0, [lr], {-0}
     25c:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     260:	00013c0e 	andeq	r3, r1, lr, lsl #24
     264:	11000700 	tstne	r0, r0, lsl #14
     268:	0000097b 	andeq	r0, r0, fp, ror r9
     26c:	01a40501 			; <UNDEFINED> instruction: 0x01a40501
     270:	0d0d0000 	stceq	0, cr0, [sp, #-0]
     274:	db000001 	blle	280 <startup-0x1ffffd80>
     278:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     27c:	0000013c 	andeq	r0, r0, ip, lsr r1
     280:	013c0e03 	teqeq	ip, r3, lsl #28
     284:	00130000 	andseq	r0, r3, r0
     288:	0001c50a 	andeq	ip, r1, sl, lsl #10
     28c:	027d1200 	rsbseq	r1, sp, #0, 4
     290:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     294:	000001db 	ldrdeq	r0, [r0], -fp
     298:	35b00305 	ldrcc	r0, [r0, #773]!	; 0x305
     29c:	32122000 	andscc	r2, r2, #0
     2a0:	01000001 	tsteq	r0, r1
     2a4:	0001db0c 	andeq	sp, r1, ip, lsl #22
     2a8:	00030500 	andeq	r0, r3, r0, lsl #10
     2ac:	12200036 	eorne	r0, r0, #54	; 0x36
     2b0:	000002e5 	andeq	r0, r0, r5, ror #5
     2b4:	01db1001 	bicseq	r1, fp, r1
     2b8:	03050000 	movweq	r0, #20480	; 0x5000
     2bc:	20003650 	andcs	r3, r0, r0, asr r6
     2c0:	0002f112 	andeq	pc, r2, r2, lsl r1	; <UNPREDICTABLE>
     2c4:	db140100 	blle	5006cc <startup-0x1faff934>
     2c8:	05000001 	streq	r0, [r0, #-1]
     2cc:	0036a003 	eorseq	sl, r6, r3
     2d0:	00171220 	andseq	r1, r7, r0, lsr #4
     2d4:	1b010000 	blne	402dc <startup-0x1ffbfd24>
     2d8:	000000f4 	strdeq	r0, [r0], -r4
     2dc:	36f00305 	ldrbtcc	r0, [r0], r5, lsl #6
     2e0:	89132000 	ldmdbhi	r3, {sp}
     2e4:	01000001 	tsteq	r0, r1
     2e8:	0000d69b 	muleq	r0, fp, r6
     2ec:	00030500 	andeq	r0, r3, r0, lsl #10
     2f0:	1420002d 	strtne	r0, [r0], #-45	; 0xffffffd3
     2f4:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     2f8:	c2012c01 	andgt	r2, r1, #256	; 0x100
     2fc:	14000000 	strne	r0, [r0], #-0
     300:	2020000a 	eorcs	r0, r0, sl
     304:	01000000 	mrseq	r0, (UNDEF: 0)
     308:	02c0159c 	sbceq	r1, r0, #156, 10	; 0x27000000
     30c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
     310:	0000c201 	andeq	ip, r0, r1, lsl #4
     314:	000a0000 	andeq	r0, sl, r0
     318:	00001420 	andeq	r1, r0, r0, lsr #8
     31c:	169c0100 	ldrne	r0, [ip], r0, lsl #2
     320:	00000125 	andeq	r0, r0, r5, lsr #2
     324:	c2011901 	andgt	r1, r1, #16384	; 0x4000
     328:	50000000 	andpl	r0, r0, r0
     32c:	b0200009 	eorlt	r0, r0, r9
     330:	01000000 	mrseq	r0, (UNDEF: 0)
     334:	0002ed9c 	muleq	r2, ip, sp
     338:	02cc1700 	sbceq	r1, ip, #0, 14
     33c:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
     340:	0000c201 	andeq	ip, r0, r1, lsl #4
     344:	5c910200 	lfmpl	f0, 4, [r1], {0}
     348:	6e616d18 	mcrvs	13, 3, r6, cr1, cr8, {0}
     34c:	011a0100 	tsteq	sl, r0, lsl #2
     350:	000002ed 	andeq	r0, r0, sp, ror #5
     354:	186c9102 	stmdane	ip!, {r1, r8, ip, pc}^
     358:	1b010069 	blne	40504 <startup-0x1ffbfafc>
     35c:	00010601 	andeq	r0, r1, r1, lsl #12
     360:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     364:	01007318 	tsteq	r0, r8, lsl r3
     368:	00c2011c 	sbceq	r0, r2, ip, lsl r1
     36c:	91020000 	mrsls	r0, (UNDEF: 2)
     370:	096c1970 	stmdbeq	ip!, {r4, r5, r6, r8, fp, ip}^
     374:	00582000 	subseq	r2, r8, r0
     378:	021a0000 	andseq	r0, sl, #0
     37c:	01000002 	tsteq	r0, r2
     380:	0106011e 	tsteq	r6, lr, lsl r1
     384:	91020000 	mrsls	r0, (UNDEF: 2)
     388:	01cc1a6b 	biceq	r1, ip, fp, ror #20
     38c:	1f010000 	svcne	0x00010000
     390:	0000c201 	andeq	ip, r0, r1, lsl #4
     394:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     398:	04060000 	streq	r0, [r6], #-0
     39c:	00000106 	andeq	r0, r0, r6, lsl #2
     3a0:	00021e1b 	andeq	r1, r2, fp, lsl lr
     3a4:	01060100 	mrseq	r0, (UNDEF: 22)
     3a8:	000000d6 	ldrdeq	r0, [r0], -r6
     3ac:	20000884 	andcs	r0, r0, r4, lsl #17
     3b0:	000000cc 	andeq	r0, r0, ip, asr #1
     3b4:	036b9c01 	cmneq	fp, #256	; 0x100
     3b8:	691a0000 	ldmdbvs	sl, {}	; <UNPREDICTABLE>
     3bc:	01000002 	tsteq	r0, r2
     3c0:	013c010a 	teqeq	ip, sl, lsl #2
     3c4:	91020000 	mrsls	r0, (UNDEF: 2)
     3c8:	017f1a74 	cmneq	pc, r4, ror sl	; <UNPREDICTABLE>
     3cc:	11010000 	mrsne	r0, (UNDEF: 1)
     3d0:	0000c201 	andeq	ip, r0, r1, lsl #4
     3d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
     3d8:	00088e19 	andeq	r8, r8, r9, lsl lr
     3dc:	00009620 	andeq	r9, r0, r0, lsr #12
     3e0:	00691800 	rsbeq	r1, r9, r0, lsl #16
     3e4:	c2010b01 	andgt	r0, r1, #1024	; 0x400
     3e8:	02000000 	andeq	r0, r0, #0
     3ec:	94197091 	ldrls	r7, [r9], #-145	; 0xffffff6f
     3f0:	84200008 	strthi	r0, [r0], #-8
     3f4:	1a000000 	bne	3fc <startup-0x1ffffc04>
     3f8:	000001cc 	andeq	r0, r0, ip, asr #3
     3fc:	d6010c01 	strle	r0, [r1], -r1, lsl #24
     400:	02000000 	andeq	r0, r0, #0
     404:	a21a6b91 	andsge	r6, sl, #148480	; 0x24400
     408:	01000002 	tsteq	r0, r2
     40c:	00d6010d 	sbcseq	r0, r6, sp, lsl #2
     410:	91020000 	mrsls	r0, (UNDEF: 2)
     414:	0000006a 	andeq	r0, r0, sl, rrx
     418:	7362611c 	cmnvc	r2, #28, 2
     41c:	c2fd0100 	rscsgt	r0, sp, #0, 2
     420:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     424:	1c200008 	stcne	0, cr0, [r0], #-32	; 0xffffffe0
     428:	01000000 	mrseq	r0, (UNDEF: 0)
     42c:	0003919c 	muleq	r3, ip, r1
     430:	00781d00 	rsbseq	r1, r8, r0, lsl #26
     434:	00c2fd01 	sbceq	pc, r2, r1, lsl #26
     438:	91020000 	mrsls	r0, (UNDEF: 2)
     43c:	b81e0074 	ldmdalt	lr, {r2, r4, r5, r6}
     440:	01000002 	tsteq	r0, r2
     444:	0007a0f0 	strdeq	sl, [r7], -r0
     448:	0000c820 	andeq	ip, r0, r0, lsr #16
     44c:	e49c0100 	ldr	r0, [ip], #256	; 0x100
     450:	1f000003 	svcne	0x00000003
     454:	f2010069 	vhadd.s8	q0, <illegal reg q0.5>, <illegal reg q12.5>
     458:	00000106 	andeq	r0, r0, r6, lsl #2
     45c:	1f779102 	svcne	0x00779102
     460:	f201006a 	vhadd.s8	q0, <illegal reg q0.5>, q13
     464:	00000106 	andeq	r0, r0, r6, lsl #2
     468:	1f769102 	svcne	0x00769102
     46c:	006e616d 	rsbeq	r6, lr, sp, ror #2
     470:	02edf301 	rsceq	pc, sp, #67108864	; 0x4000000
     474:	91020000 	mrsls	r0, (UNDEF: 2)
     478:	07b41970 			; <UNDEFINED> instruction: 0x07b41970
     47c:	008a2000 	addeq	r2, sl, r0
     480:	61200000 			; <UNDEFINED> instruction: 0x61200000
     484:	04007362 	streq	r7, [r0], #-866	; 0xfffffc9e
     488:	0000c200 	andeq	ip, r0, r0, lsl #4
     48c:	00002100 	andeq	r2, r0, r0, lsl #2
     490:	02891e00 	addeq	r1, r9, #0, 28
     494:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
     498:	20000558 	andcs	r0, r0, r8, asr r5
     49c:	00000248 	andeq	r0, r0, r8, asr #4
     4a0:	04a49c01 	strteq	r9, [r4], #3073	; 0xc01
     4a4:	33120000 	tstcc	r2, #0
     4a8:	01000002 	tsteq	r0, r2
     4ac:	0000d6ca 	andeq	sp, r0, sl, asr #13
     4b0:	6c910200 	lfmvs	f0, 4, [r1], {0}
     4b4:	0100691f 	tsteq	r0, pc, lsl r9
     4b8:	000106cd 	andeq	r0, r1, sp, asr #13
     4bc:	6f910200 	svcvs	0x00910200
     4c0:	01006a1f 	tsteq	r0, pc, lsl sl
     4c4:	000106cd 	andeq	r0, r1, sp, asr #13
     4c8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
     4cc:	6e616d1f 	mcrvs	13, 3, r6, cr1, cr15, {0}
     4d0:	edce0100 	stfe	f0, [lr]
     4d4:	02000002 	andeq	r0, r0, #2
     4d8:	d1126891 			; <UNDEFINED> instruction: 0xd1126891
     4dc:	01000001 	tsteq	r0, r1
     4e0:	0000c2cf 	andeq	ip, r0, pc, asr #5
     4e4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     4e8:	00061622 	andeq	r1, r6, r2, lsr #12
     4ec:	00004020 	andeq	r4, r0, r0, lsr #32
     4f0:	00046500 	andeq	r6, r4, r0, lsl #10
     4f4:	02761200 	rsbseq	r1, r6, #0, 4
     4f8:	d7010000 	strle	r0, [r1, -r0]
     4fc:	000002ed 	andeq	r0, r0, sp, ror #5
     500:	12589102 	subsne	r9, r8, #-2147483648	; 0x80000000
     504:	0000029d 	muleq	r0, sp, r2
     508:	0106d801 	tsteq	r6, r1, lsl #16
     50c:	91020000 	mrsls	r0, (UNDEF: 2)
     510:	58190057 	ldmdapl	r9, {r0, r1, r2, r4, r6}
     514:	f0200006 			; <UNDEFINED> instruction: 0xf0200006
     518:	12000000 	andne	r0, r0, #0
     51c:	00000276 	andeq	r0, r0, r6, ror r2
     520:	02eddd01 	rsceq	sp, sp, #1, 26	; 0x40
     524:	91020000 	mrsls	r0, (UNDEF: 2)
     528:	029d1260 	addseq	r1, sp, #96, 4
     52c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
     530:	00000106 	andeq	r0, r0, r6, lsl #2
     534:	196d9102 	stmdbne	sp!, {r1, r8, ip, pc}^
     538:	200006a0 	andcs	r0, r0, r0, lsr #13
     53c:	00000050 	andeq	r0, r0, r0, asr r0
     540:	00019e12 	andeq	r9, r1, r2, lsl lr
     544:	06e10100 	strbteq	r0, [r1], r0, lsl #2
     548:	02000001 	andeq	r0, r0, #1
     54c:	00005f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
     550:	01e11e00 	mvneq	r1, r0, lsl #28
     554:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
     558:	20000498 	mulcs	r0, r8, r4
     55c:	000000c0 	andeq	r0, r0, r0, asr #1
     560:	050e9c01 	streq	r9, [lr, #-3073]	; 0xfffff3ff
     564:	33120000 	tstcc	r2, #0
     568:	01000002 	tsteq	r0, r2
     56c:	0000d6ba 			; <UNDEFINED> instruction: 0x0000d6ba
     570:	5b910200 	blpl	fe440d78 <Pedro+0xde43d688>
     574:	0004a822 	andeq	sl, r4, r2, lsr #16
     578:	00004a20 	andeq	r4, r0, r0, lsr #20
     57c:	0004f700 	andeq	pc, r4, r0, lsl #14
     580:	00691f00 	rsbeq	r1, r9, r0, lsl #30
     584:	00c2bc01 	sbceq	fp, r2, r1, lsl #24
     588:	91020000 	mrsls	r0, (UNDEF: 2)
     58c:	04ae1964 	strteq	r1, [lr], #2404	; 0x964
     590:	00382000 	eorseq	r2, r8, r0
     594:	6a1f0000 	bvs	7c059c <startup-0x1f83fa64>
     598:	c2bd0100 	adcsgt	r0, sp, #0, 2
     59c:	02000000 	andeq	r0, r0, #0
     5a0:	00006091 	muleq	r0, r1, r0
     5a4:	0004f219 	andeq	pc, r4, r9, lsl r2	; <UNPREDICTABLE>
     5a8:	00005620 	andeq	r5, r0, r0, lsr #12
     5ac:	00691f00 	rsbeq	r1, r9, r0, lsl #30
     5b0:	00c2c201 	sbceq	ip, r2, r1, lsl #4
     5b4:	91020000 	mrsls	r0, (UNDEF: 2)
     5b8:	2300005c 	movwcs	r0, #92	; 0x5c
     5bc:	000002ae 	andeq	r0, r0, lr, lsr #5
     5c0:	00d69c01 	sbcseq	r9, r6, r1, lsl #24
     5c4:	03cc0000 	biceq	r0, ip, #0
     5c8:	00cc2000 	sbceq	r2, ip, r0
     5cc:	9c010000 	stcls	0, cr0, [r1], {-0}
     5d0:	00000536 	andeq	r0, r0, r6, lsr r5
     5d4:	00010b12 	andeq	r0, r1, r2, lsl fp
     5d8:	d09d0100 	addsle	r0, sp, r0, lsl #2
     5dc:	02000000 	andeq	r0, r0, #0
     5e0:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
     5e4:	00000147 	andeq	r0, r0, r7, asr #2
     5e8:	00d69501 	sbcseq	r9, r6, r1, lsl #10
     5ec:	039c0000 	orrseq	r0, ip, #0
     5f0:	00302000 	eorseq	r2, r0, r0
     5f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     5f8:	0001e725 	andeq	lr, r1, r5, lsr #14
     5fc:	388c0100 	stmcc	ip, {r8}
     600:	64200003 	strtvs	r0, [r0], #-3
     604:	01000000 	mrseq	r0, (UNDEF: 0)
     608:	011b1e9c 			; <UNDEFINED> instruction: 0x011b1e9c
     60c:	5a010000 	bpl	40614 <startup-0x1ffbf9ec>
     610:	200001e0 	andcs	r0, r0, r0, ror #3
     614:	00000158 	andeq	r0, r0, r8, asr r1
     618:	05b59c01 	ldreq	r9, [r5, #3073]!	; 0xc01
     61c:	e4220000 	strt	r0, [r2], #-0
     620:	d4200001 	strtle	r0, [r0], #-1
     624:	9d000000 	stcls	0, cr0, [r0, #-0]
     628:	26000005 	strcs	r0, [r0], -r5
     62c:	000002d5 	ldrdeq	r0, [r0], -r5
     630:	00c25b01 	sbceq	r5, r2, r1, lsl #22
     634:	058f0000 	streq	r0, [pc]	; 63c <startup-0x1ffff9c4>
     638:	00210000 	eoreq	r0, r1, r0
     63c:	0001a627 	andeq	sl, r1, r7, lsr #12
     640:	c25b0100 	subsgt	r0, fp, #0, 2
     644:	21000000 	mrscs	r0, (UNDEF: 0)
     648:	ee190000 	cdp	0, 1, cr0, cr9, cr0, {0}
     64c:	22200002 	eorcs	r0, r0, #2
     650:	27000000 	strcs	r0, [r0, -r0]
     654:	00000295 	muleq	r0, r5, r2
     658:	00c28301 	sbceq	r8, r2, r1, lsl #6
     65c:	00210000 	eoreq	r0, r1, r0
     660:	e01e0000 	ands	r0, lr, r0
     664:	01000002 	tsteq	r0, r2
     668:	00010c3f 	andeq	r0, r1, pc, lsr ip
     66c:	0000d420 	andeq	sp, r0, r0, lsr #8
     670:	fd9c0100 	ldc2	1, cr0, [ip]
     674:	22000005 	andcs	r0, r0, #5
     678:	2000012a 	andcs	r0, r0, sl, lsr #2
     67c:	0000002e 	andeq	r0, r0, lr, lsr #32
     680:	000005e5 	andeq	r0, r0, r5, ror #11
     684:	0000f327 	andeq	pc, r0, r7, lsr #6
     688:	c2470100 	subgt	r0, r7, #0, 2
     68c:	21000000 	mrscs	r0, (UNDEF: 0)
     690:	6c190000 	ldcvs	0, cr0, [r9], {-0}
     694:	3a200001 	bcc	8006a0 <startup-0x1f7ff960>
     698:	27000000 	strcs	r0, [r0, -r0]
     69c:	000000f3 	strdeq	r0, [r0], -r3
     6a0:	00c24701 	sbceq	r4, r2, r1, lsl #14
     6a4:	00210000 	eoreq	r0, r1, r0
     6a8:	5e250000 	cdppl	0, 2, cr0, cr5, cr0, {0}
     6ac:	01000002 	tsteq	r0, r2
     6b0:	0000e82c 	andeq	lr, r0, ip, lsr #16
     6b4:	00002420 	andeq	r2, r0, r0, lsr #8
     6b8:	009c0100 	addseq	r0, ip, r0, lsl #2
     6bc:	0000011d 	andeq	r0, r0, sp, lsl r1
     6c0:	02dd0004 	sbcseq	r0, sp, #4
     6c4:	01040000 	mrseq	r0, (UNDEF: 4)
     6c8:	00000035 	andeq	r0, r0, r5, lsr r0
     6cc:	0003220c 	andeq	r2, r3, ip, lsl #4
     6d0:	00000000 	andeq	r0, r0, r0
     6d4:	000a3400 	andeq	r3, sl, r0, lsl #8
     6d8:	0000a820 	andeq	sl, r0, r0, lsr #16
     6dc:	00028900 	andeq	r8, r2, r0, lsl #18
     6e0:	06010200 	streq	r0, [r1], -r0, lsl #4
     6e4:	000001f6 	strdeq	r0, [r0], -r6
     6e8:	f4080102 	vst4.8	{d0,d2,d4,d6}, [r8], r2
     6ec:	02000001 	andeq	r0, r0, #1
     6f0:	013d0502 	teqeq	sp, r2, lsl #10
     6f4:	02020000 	andeq	r0, r2, #0
     6f8:	00023d07 	andeq	r3, r2, r7, lsl #26
     6fc:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     700:	000001c3 	andeq	r0, r0, r3, asr #3
     704:	00030503 	andeq	r0, r3, r3, lsl #10
     708:	534f0200 	movtpl	r0, #61952	; 0xf200
     70c:	02000000 	andeq	r0, r0, #0
     710:	020c0704 	andeq	r0, ip, #4, 14	; 0x100000
     714:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     718:	0001be05 	andeq	fp, r1, r5, lsl #28
     71c:	07080200 	streq	r0, [r8, -r0, lsl #4]
     720:	00000207 	andeq	r0, r0, r7, lsl #4
     724:	69050404 	stmdbvs	r5, {r2, sl}
     728:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     72c:	02110704 	andseq	r0, r1, #4, 14	; 0x100000
     730:	07030000 	streq	r0, [r3, -r0]
     734:	03000003 	movweq	r0, #3
     738:	00004830 	andeq	r4, r0, r0, lsr r8
     73c:	03100300 	tsteq	r0, #0, 6
     740:	07040000 	streq	r0, [r4, -r0]
     744:	00000076 	andeq	r0, r0, r6, ror r0
     748:	00031a05 	andeq	r1, r3, r5, lsl #20
     74c:	810c0100 	mrshi	r0, (UNDEF: 28)
     750:	66000000 	strvs	r0, [r0], -r0
     754:	7620000a 	strtvc	r0, [r0], -sl
     758:	01000000 	mrseq	r0, (UNDEF: 0)
     75c:	0000d69c 	muleq	r0, ip, r6
     760:	06320600 	ldrteq	r0, [r2], -r0, lsl #12
     764:	0c010000 	stceq	0, cr0, [r1], {-0}
     768:	000000d6 	ldrdeq	r0, [r0], -r6
     76c:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
     770:	0e010078 	mcreq	0, 0, r0, cr1, cr8, {3}
     774:	00000081 	andeq	r0, r0, r1, lsl #1
     778:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
     77c:	20000aa4 	andcs	r0, r0, r4, lsr #21
     780:	0000002a 	andeq	r0, r0, sl, lsr #32
     784:	01006907 	tsteq	r0, r7, lsl #18
     788:	0000680f 	andeq	r6, r0, pc, lsl #16
     78c:	70910200 	addsvc	r0, r1, r0, lsl #4
     790:	04090000 	streq	r0, [r9], #-0
     794:	00000081 	andeq	r0, r0, r1, lsl #1
     798:	0002fd0a 	andeq	pc, r2, sl, lsl #26
     79c:	34050100 	strcc	r0, [r5], #-256	; 0xffffff00
     7a0:	3220000a 	eorcc	r0, r0, #10
     7a4:	01000000 	mrseq	r0, (UNDEF: 0)
     7a8:	0632069c 			; <UNDEFINED> instruction: 0x0632069c
     7ac:	05010000 	streq	r0, [r1, #-0]
     7b0:	000000d6 	ldrdeq	r0, [r0], -r6
     7b4:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
     7b8:	000006fe 	strdeq	r0, [r0], -lr
     7bc:	00760501 	rsbseq	r0, r6, r1, lsl #10
     7c0:	91020000 	mrsls	r0, (UNDEF: 2)
     7c4:	0a440868 	beq	110296c <startup-0x1eefd694>
     7c8:	001a2000 	andseq	r2, sl, r0
     7cc:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     7d0:	68070100 	stmdavs	r7, {r8}
     7d4:	02000000 	andeq	r0, r0, #0
     7d8:	00007491 	muleq	r0, r1, r4
     7dc:	0001e300 	andeq	lr, r1, r0, lsl #6
     7e0:	78000400 	stmdavc	r0, {sl}
     7e4:	04000003 	streq	r0, [r0], #-3
     7e8:	00003501 	andeq	r3, r0, r1, lsl #10
     7ec:	034b0c00 	movteq	r0, #48128	; 0xbc00
     7f0:	00000000 	andeq	r0, r0, r0
     7f4:	0adc0000 	beq	ff7007fc <Pedro+0xdf6fd10c>
     7f8:	01c82000 	biceq	r2, r8, r0
     7fc:	03ba0000 			; <UNDEFINED> instruction: 0x03ba0000
     800:	02020000 	andeq	r0, r2, #0
     804:	00460c02 	subeq	r0, r6, r2, lsl #24
     808:	9a030000 	bls	c0810 <startup-0x1ff3f7f0>
     80c:	02000003 	andeq	r0, r0, #3
     810:	0000460d 	andeq	r4, r0, sp, lsl #12
     814:	cd030000 	stcgt	0, cr0, [r3, #-0]
     818:	02000003 	andeq	r0, r0, #3
     81c:	0000460e 	andeq	r4, r0, lr, lsl #12
     820:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
     824:	01f40801 	mvnseq	r0, r1, lsl #16
     828:	04050000 	streq	r0, [r5], #-0
     82c:	00660a02 	rsbeq	r0, r6, r2, lsl #20
     830:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     834:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     838:	0000660b 	andeq	r6, r0, fp, lsl #12
     83c:	00250700 	eoreq	r0, r5, r0, lsl #14
     840:	04000000 	streq	r0, [r0], #-0
     844:	02110704 	andseq	r0, r1, #4, 14	; 0x100000
     848:	02020000 	andeq	r0, r2, #0
     84c:	008e1302 	addeq	r1, lr, r2, lsl #6
     850:	93030000 	movwls	r0, #12288	; 0x3000
     854:	02000003 	andeq	r0, r0, #3
     858:	00004614 	andeq	r4, r0, r4, lsl r6
     85c:	7e030000 	cdpvc	0, 0, cr0, cr3, cr0, {0}
     860:	02000003 	andeq	r0, r0, #3
     864:	00004615 	andeq	r4, r0, r5, lsl r6
     868:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     86c:	a7110204 	ldrge	r0, [r1, -r4, lsl #4]
     870:	06000000 	streq	r0, [r0], -r0
     874:	0072646f 	rsbseq	r6, r2, pc, ror #8
     878:	00661202 	rsbeq	r1, r6, r2, lsl #4
     87c:	6d070000 	stcvs	0, cr0, [r7, #-0]
     880:	00000000 	andeq	r0, r0, r0
     884:	0003b608 	andeq	fp, r3, r8, lsl #12
     888:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     88c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     890:	00037303 	andeq	r7, r3, r3, lsl #6
     894:	66050200 	strvs	r0, [r5], -r0, lsl #4
     898:	00000000 	andeq	r0, r0, r0
     89c:	00038603 	andeq	r8, r3, r3, lsl #12
     8a0:	66060200 	strvs	r0, [r6], -r0, lsl #4
     8a4:	04000000 	streq	r0, [r0], #-0
     8a8:	0003d503 	andeq	sp, r3, r3, lsl #10
     8ac:	66070200 	strvs	r0, [r7], -r0, lsl #4
     8b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     8b4:	00038d03 	andeq	r8, r3, r3, lsl #26
     8b8:	66080200 	strvs	r0, [r8], -r0, lsl #4
     8bc:	0c000000 	stceq	0, cr0, [r0], {-0}
     8c0:	00004d09 	andeq	r4, r0, r9, lsl #26
     8c4:	8e091000 	cdphi	0, 0, cr1, cr9, cr0, {0}
     8c8:	14000000 	strne	r0, [r0], #-0
     8cc:	03c80a00 	biceq	r0, r8, #0, 20
     8d0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     8d4:	000000a7 	andeq	r0, r0, r7, lsr #1
     8d8:	0003790b 	andeq	r7, r3, fp, lsl #18
     8dc:	46500100 	ldrbmi	r0, [r0], -r0, lsl #2
     8e0:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     8e4:	6c20000c 	stcvs	0, cr0, [r0], #-48	; 0xffffffd0
     8e8:	01000000 	mrseq	r0, (UNDEF: 0)
     8ec:	00013f9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
     8f0:	656b0c00 	strbvs	r0, [fp, #-3072]!	; 0xfffff400
     8f4:	51010079 	tstpl	r1, r9, ror r0
     8f8:	0000013f 	andeq	r0, r0, pc, lsr r1
     8fc:	0c589102 	ldfeqp	f1, [r8], {2}
     900:	00776f72 	rsbseq	r6, r7, r2, ror pc
     904:	01565201 	cmpeq	r6, r1, lsl #4
     908:	91020000 	mrsls	r0, (UNDEF: 2)
     90c:	6f630c6c 	svcvs	0x00630c6c
     910:	5301006c 	movwpl	r0, #4204	; 0x106c
     914:	00000156 	andeq	r0, r0, r6, asr r1
     918:	00689102 	rsbeq	r9, r8, r2, lsl #2
     91c:	00014f0d 	andeq	r4, r1, sp, lsl #30
     920:	00014f00 	andeq	r4, r1, r0, lsl #30
     924:	00660e00 	rsbeq	r0, r6, r0, lsl #28
     928:	000f0000 	andeq	r0, pc, r0
     92c:	fd080104 	stc2	1, cr0, [r8, #-16]
     930:	0f000001 	svceq	0x00000001
     934:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     938:	a1100074 	tstge	r0, r4, ror r0
     93c:	01000003 	tsteq	r0, r3
     940:	00014f44 	andeq	r4, r1, r4, asr #30
     944:	000c0c00 	andeq	r0, ip, r0, lsl #24
     948:	00002c20 	andeq	r2, r0, r0, lsr #24
     94c:	109c0100 	addsne	r0, ip, r0, lsl #2
     950:	000001a6 	andeq	r0, r0, r6, lsr #3
     954:	014f3801 	cmpeq	pc, r1, lsl #16
     958:	0be00000 	bleq	ff800960 <Pedro+0xdf7fd270>
     95c:	002c2000 	eoreq	r2, ip, r0
     960:	9c010000 	stcls	0, cr0, [r1], {-0}
     964:	0002d510 	andeq	sp, r2, r0, lsl r5
     968:	4f2e0100 	svcmi	0x002e0100
     96c:	b4000001 	strlt	r0, [r0], #-1
     970:	2c20000b 	stccs	0, cr0, [r0], #-44	; 0xffffffd4
     974:	01000000 	mrseq	r0, (UNDEF: 0)
     978:	0295109c 	addseq	r1, r5, #156	; 0x9c
     97c:	24010000 	strcs	r0, [r1], #-0
     980:	0000014f 	andeq	r0, r0, pc, asr #2
     984:	20000b88 	andcs	r0, r0, r8, lsl #23
     988:	0000002c 	andeq	r0, r0, ip, lsr #32
     98c:	ac119c01 	ldcge	12, cr9, [r1], {1}
     990:	01000003 	tsteq	r0, r3
     994:	00015617 	andeq	r5, r1, r7, lsl r6
     998:	000b3000 	andeq	r3, fp, r0
     99c:	00005820 	andeq	r5, r0, r0, lsr #16
     9a0:	129c0100 	addsne	r0, ip, #0, 2
     9a4:	000003bc 			; <UNDEFINED> instruction: 0x000003bc
     9a8:	0adc0401 	beq	ff7019b4 <Pedro+0xdf6fe2c4>
     9ac:	00542000 	subseq	r2, r4, r0
     9b0:	9c010000 	stcls	0, cr0, [r1], {-0}
     9b4:	776f7213 			; <UNDEFINED> instruction: 0x776f7213
     9b8:	66040100 	strvs	r0, [r4], -r0, lsl #2
     9bc:	02000000 	andeq	r0, r0, #0
     9c0:	00007491 	muleq	r0, r1, r4
     9c4:	00000c71 	andeq	r0, r0, r1, ror ip
     9c8:	04960004 	ldreq	r0, [r6], #4
     9cc:	01040000 	mrseq	r0, (UNDEF: 4)
     9d0:	00000035 	andeq	r0, r0, r5, lsr r0
     9d4:	0005c50c 	andeq	ip, r5, ip, lsl #10
	...
     9e4:	00046900 	andeq	r6, r4, r0, lsl #18
     9e8:	06010200 	streq	r0, [r1], -r0, lsl #4
     9ec:	000001f6 	strdeq	r0, [r0], -r6
     9f0:	f4080102 	vst4.8	{d0,d2,d4,d6}, [r8], r2
     9f4:	02000001 	andeq	r0, r0, #1
     9f8:	013d0502 	teqeq	sp, r2, lsl #10
     9fc:	02020000 	andeq	r0, r2, #0
     a00:	00023d07 	andeq	r3, r2, r7, lsl #26
     a04:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
     a08:	000001c3 	andeq	r0, r0, r3, asr #3
     a0c:	00030503 	andeq	r0, r3, r3, lsl #10
     a10:	534f0200 	movtpl	r0, #61952	; 0xf200
     a14:	02000000 	andeq	r0, r0, #0
     a18:	020c0704 	andeq	r0, ip, #4, 14	; 0x100000
     a1c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     a20:	0001be05 	andeq	fp, r1, r5, lsl #28
     a24:	07080200 	streq	r0, [r8, -r0, lsl #4]
     a28:	00000207 	andeq	r0, r0, r7, lsl #4
     a2c:	69050404 	stmdbvs	r5, {r2, sl}
     a30:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
     a34:	02110704 	andseq	r0, r1, #4, 14	; 0x100000
     a38:	07030000 	streq	r0, [r3, -r0]
     a3c:	03000003 	movweq	r0, #3
     a40:	00004830 	andeq	r4, r0, r0, lsr r8
     a44:	04080500 	streq	r0, [r8], #-1280	; 0xfffffb00
     a48:	00009e53 	andeq	r9, r0, r3, asr lr
     a4c:	6e6c0600 	cdpvs	6, 6, cr0, cr12, cr0, {0}
     a50:	54040067 	strpl	r0, [r4], #-103	; 0xffffff99
     a54:	00000061 	andeq	r0, r0, r1, rrx
     a58:	04006306 	streq	r6, [r0], #-774	; 0xfffffcfa
     a5c:	00009e55 	andeq	r9, r0, r5, asr lr
     a60:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
     a64:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
     a68:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     a6c:	0000006f 	andeq	r0, r0, pc, rrx
     a70:	01020007 	tsteq	r2, r7
     a74:	0001fd08 	andeq	pc, r1, r8, lsl #26
     a78:	00ae0900 	adceq	r0, lr, r0, lsl #18
     a7c:	760a0000 	strvc	r0, [sl], -r0
     a80:	08000001 	stmdaeq	r0, {r0}
     a84:	00cd5204 	sbceq	r5, sp, r4, lsl #4
     a88:	810b0000 	mrshi	r0, (UNDEF: 11)
     a8c:	00000000 	andeq	r0, r0, r0
     a90:	00ba0700 	adcseq	r0, sl, r0, lsl #14
     a94:	00dd0000 	sbcseq	r0, sp, r0
     a98:	6f080000 	svcvs	0x00080000
     a9c:	13000000 	movwne	r0, #0
     aa0:	55420c00 	strbpl	r0, [r2, #-3072]	; 0xfffff400
     aa4:	57040046 	strpl	r0, [r4, -r6, asr #32]
     aa8:	000000cd 	andeq	r0, r0, sp, asr #1
     aac:	2d080305 	stccs	3, cr0, [r8, #-20]	; 0xffffffec
     ab0:	020d2000 	andeq	r2, sp, #0
     ab4:	010f0c05 	tsteq	pc, r5, lsl #24
     ab8:	9a0e0000 	bls	380ac0 <startup-0x1fc7f540>
     abc:	05000003 	streq	r0, [r0, #-3]
     ac0:	00002c0d 	andeq	r2, r0, sp, lsl #24
     ac4:	cd0e0000 	stcgt	0, cr0, [lr, #-0]
     ac8:	05000003 	streq	r0, [r0, #-3]
     acc:	00002c0e 	andeq	r2, r0, lr, lsl #24
     ad0:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
     ad4:	280a0504 	stmdacs	sl, {r2, r8, sl}
     ad8:	06000001 	streq	r0, [r0], -r1
     adc:	00726469 	rsbseq	r6, r2, r9, ror #8
     ae0:	006f0b05 	rsbeq	r0, pc, r5, lsl #22
     ae4:	ee0f0000 	cdp	0, 0, cr0, cr15, cr0, {0}
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	1305020d 	movwne	r0, #21005	; 0x520d
     af0:	00000149 	andeq	r0, r0, r9, asr #2
     af4:	0003930e 	andeq	r9, r3, lr, lsl #6
     af8:	2c140500 	cfldr32cs	mvfx0, [r4], {-0}
     afc:	00000000 	andeq	r0, r0, r0
     b00:	00037e0e 	andeq	r7, r3, lr, lsl #28
     b04:	2c150500 	cfldr32cs	mvfx0, [r5], {-0}
     b08:	01000000 	mrseq	r0, (UNDEF: 0)
     b0c:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
     b10:	00016211 	andeq	r6, r1, r1, lsl r2
     b14:	646f0600 	strbtvs	r0, [pc], #-1536	; b1c <startup-0x1ffff4e4>
     b18:	12050072 	andne	r0, r5, #114	; 0x72
     b1c:	0000006f 	andeq	r0, r0, pc, rrx
     b20:	0001280f 	andeq	r2, r1, pc, lsl #16
     b24:	b60a0000 	strlt	r0, [sl], -r0
     b28:	18000003 	stmdane	r0, {r0, r1}
     b2c:	01ab0405 			; <UNDEFINED> instruction: 0x01ab0405
     b30:	730e0000 	movwvc	r0, #57344	; 0xe000
     b34:	05000003 	streq	r0, [r0, #-3]
     b38:	00006f05 	andeq	r6, r0, r5, lsl #30
     b3c:	860e0000 	strhi	r0, [lr], -r0
     b40:	05000003 	streq	r0, [r0, #-3]
     b44:	00006f06 	andeq	r6, r0, r6, lsl #30
     b48:	d50e0400 	strle	r0, [lr, #-1024]	; 0xfffffc00
     b4c:	05000003 	streq	r0, [r0, #-3]
     b50:	00006f07 	andeq	r6, r0, r7, lsl #30
     b54:	8d0e0800 	stchi	8, cr0, [lr, #-0]
     b58:	05000003 	streq	r0, [r0, #-3]
     b5c:	00006f08 	andeq	r6, r0, r8, lsl #30
     b60:	0f0b0c00 	svceq	0x000b0c00
     b64:	10000001 	andne	r0, r0, r1
     b68:	0001490b 	andeq	r4, r1, fp, lsl #18
     b6c:	03001400 	movweq	r1, #1024	; 0x400
     b70:	000003c8 	andeq	r0, r0, r8, asr #7
     b74:	01621805 	cmneq	r2, r5, lsl #16
     b78:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     b7c:	00028e04 	andeq	r8, r2, r4, lsl #28
     b80:	ae041000 	cdpge	0, 0, cr1, cr4, cr0, {0}
     b84:	03000000 	movweq	r0, #0
     b88:	000005b3 			; <UNDEFINED> instruction: 0x000005b3
     b8c:	01ce2206 	biceq	r2, lr, r6, lsl #4
     b90:	04100000 	ldreq	r0, [r0], #-0
     b94:	000001d4 	ldrdeq	r0, [r0], -r4
     b98:	00070b11 	andeq	r0, r7, r1, lsl fp
     b9c:	060c0300 	streq	r0, [ip], -r0, lsl #6
     ba0:	2c070000 	stccs	0, cr0, [r7], {-0}
     ba4:	00000041 	andeq	r0, r0, r1, asr #32
     ba8:	00071d03 	andeq	r1, r7, r3, lsl #26
     bac:	41720700 	cmnmi	r2, r0, lsl #14
     bb0:	12000000 	andne	r0, r0, #0
     bb4:	00000597 	muleq	r0, r7, r5
     bb8:	6f016508 	svcvs	0x00016508
     bbc:	05000000 	streq	r0, [r0, #-0]
     bc0:	1aa60704 	bne	fe9827d8 <Pedro+0xde97f0e8>
     bc4:	13000002 	movwne	r0, #2
     bc8:	00000591 	muleq	r0, r1, r5
     bcc:	01efa807 	mvneq	sl, r7, lsl #16
     bd0:	30130000 	andscc	r0, r3, r0
     bd4:	07000005 	streq	r0, [r0, -r5]
     bd8:	00021aa9 	andeq	r1, r2, r9, lsr #21
     bdc:	2c070000 	stccs	0, cr0, [r7], {-0}
     be0:	2a000000 	bcs	be8 <startup-0x1ffff418>
     be4:	08000002 	stmdaeq	r0, {r1}
     be8:	0000006f 	andeq	r0, r0, pc, rrx
     bec:	080d0003 	stmdaeq	sp, {r0, r1}
     bf0:	024ba307 	subeq	sl, fp, #469762048	; 0x1c000000
     bf4:	030e0000 	movweq	r0, #57344	; 0xe000
     bf8:	07000007 	streq	r0, [r0, -r7]
     bfc:	000068a5 	andeq	r6, r0, r5, lsr #17
     c00:	770e0000 	strvc	r0, [lr, -r0]
     c04:	07000007 	streq	r0, [r0, -r7]
     c08:	0001fbaa 	andeq	pc, r1, sl, lsr #23
     c0c:	03000400 	movweq	r0, #1024	; 0x400
     c10:	00000685 	andeq	r0, r0, r5, lsl #13
     c14:	022aab07 	eoreq	sl, sl, #7168	; 0x1c00
     c18:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
     c1c:	07000004 	streq	r0, [r0, -r4]
     c20:	0001c3af 	andeq	ip, r1, pc, lsr #7
     c24:	03041400 	movweq	r1, #17408	; 0x4400
     c28:	0000078d 	andeq	r0, r0, sp, lsl #15
     c2c:	00531609 	subseq	r1, r3, r9, lsl #12
     c30:	0a0a0000 	beq	280c38 <startup-0x1fd7f3c8>
     c34:	18000005 	stmdane	r0, {r0, r2}
     c38:	02c12f09 	sbceq	r2, r1, #9, 30	; 0x24
     c3c:	a60e0000 	strge	r0, [lr], -r0
     c40:	09000006 	stmdbeq	r0, {r1, r2}
     c44:	0002c131 	andeq	ip, r2, r1, lsr r1
     c48:	5f150000 	svcpl	0x00150000
     c4c:	3209006b 	andcc	r0, r9, #107	; 0x6b
     c50:	00000068 	andeq	r0, r0, r8, rrx
     c54:	06ee0e04 	strbteq	r0, [lr], r4, lsl #28
     c58:	32090000 	andcc	r0, r9, #0
     c5c:	00000068 	andeq	r0, r0, r8, rrx
     c60:	04f30e08 	ldrbteq	r0, [r3], #3592	; 0xe08
     c64:	32090000 	andcc	r0, r9, #0
     c68:	00000068 	andeq	r0, r0, r8, rrx
     c6c:	07c20e0c 	strbeq	r0, [r2, ip, lsl #28]
     c70:	32090000 	andcc	r0, r9, #0
     c74:	00000068 	andeq	r0, r0, r8, rrx
     c78:	785f1510 	ldmdavc	pc, {r4, r8, sl, ip}^	; <UNPREDICTABLE>
     c7c:	c7330900 	ldrgt	r0, [r3, -r0, lsl #18]!
     c80:	14000002 	strne	r0, [r0], #-2
     c84:	6e041000 	cdpvs	0, 0, cr1, cr4, cr0, {0}
     c88:	07000002 	streq	r0, [r0, -r2]
     c8c:	00000263 	andeq	r0, r0, r3, ror #4
     c90:	000002d7 	ldrdeq	r0, [r0], -r7
     c94:	00006f08 	andeq	r6, r0, r8, lsl #30
     c98:	0a000000 	beq	ca0 <startup-0x1ffff360>
     c9c:	0000052b 	andeq	r0, r0, fp, lsr #10
     ca0:	50370924 	eorspl	r0, r7, r4, lsr #18
     ca4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
     ca8:	0000045f 	andeq	r0, r0, pc, asr r4
     cac:	00683909 	rsbeq	r3, r8, r9, lsl #18
     cb0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     cb4:	00000733 	andeq	r0, r0, r3, lsr r7
     cb8:	00683a09 	rsbeq	r3, r8, r9, lsl #20
     cbc:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
     cc0:	00000479 	andeq	r0, r0, r9, ror r4
     cc4:	00683b09 	rsbeq	r3, r8, r9, lsl #22
     cc8:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     ccc:	00000853 	andeq	r0, r0, r3, asr r8
     cd0:	00683c09 	rsbeq	r3, r8, r9, lsl #24
     cd4:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     cd8:	000005f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     cdc:	00683d09 	rsbeq	r3, r8, r9, lsl #26
     ce0:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     ce4:	000005bb 			; <UNDEFINED> instruction: 0x000005bb
     ce8:	00683e09 	rsbeq	r3, r8, r9, lsl #28
     cec:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
     cf0:	000007c7 	andeq	r0, r0, r7, asr #15
     cf4:	00683f09 	rsbeq	r3, r8, r9, lsl #30
     cf8:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     cfc:	00000667 	andeq	r0, r0, r7, ror #12
     d00:	00684009 	rsbeq	r4, r8, r9
     d04:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     d08:	00000802 	andeq	r0, r0, r2, lsl #16
     d0c:	00684109 	rsbeq	r4, r8, r9, lsl #2
     d10:	00200000 	eoreq	r0, r0, r0
     d14:	00072516 	andeq	r2, r7, r6, lsl r5
     d18:	09010800 	stmdbeq	r1, {fp}
     d1c:	0003904a 	andeq	r9, r3, sl, asr #32
     d20:	04e60e00 	strbteq	r0, [r6], #3584	; 0xe00
     d24:	4b090000 	blmi	240d2c <startup-0x1fdbf2d4>
     d28:	00000390 	muleq	r0, r0, r3
     d2c:	03dd0e00 	bicseq	r0, sp, #0, 28
     d30:	4c090000 	stcmi	0, cr0, [r9], {-0}
     d34:	00000390 	muleq	r0, r0, r3
     d38:	077f1780 	ldrbeq	r1, [pc, -r0, lsl #15]!
     d3c:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
     d40:	00000263 	andeq	r0, r0, r3, ror #4
     d44:	9f170100 	svcls	0x00170100
     d48:	09000004 	stmdbeq	r0, {r2}
     d4c:	00026351 	andeq	r6, r2, r1, asr r3
     d50:	00010400 	andeq	r0, r1, r0, lsl #8
     d54:	00026107 	andeq	r6, r2, r7, lsl #2
     d58:	0003a000 	andeq	sl, r3, r0
     d5c:	006f0800 	rsbeq	r0, pc, r0, lsl #16
     d60:	001f0000 	andseq	r0, pc, r0
     d64:	0005f916 	andeq	pc, r5, r6, lsl r9	; <UNPREDICTABLE>
     d68:	09019000 	stmdbeq	r1, {ip, pc}
     d6c:	0003de5d 	andeq	sp, r3, sp, asr lr
     d70:	06a60e00 	strteq	r0, [r6], r0, lsl #28
     d74:	5e090000 	cdppl	0, 0, cr0, cr9, cr0, {0}
     d78:	000003de 	ldrdeq	r0, [r0], -lr
     d7c:	06be0e00 	ldrteq	r0, [lr], r0, lsl #28
     d80:	5f090000 	svcpl	0x00090000
     d84:	00000068 	andeq	r0, r0, r8, rrx
     d88:	04ee0e04 	strbteq	r0, [lr], #3588	; 0xe04
     d8c:	61090000 	mrsvs	r0, (UNDEF: 9)
     d90:	000003e4 	andeq	r0, r0, r4, ror #7
     d94:	07250e08 	streq	r0, [r5, -r8, lsl #28]!
     d98:	62090000 	andvs	r0, r9, #0
     d9c:	00000350 	andeq	r0, r0, r0, asr r3
     da0:	04100088 	ldreq	r0, [r0], #-136	; 0xffffff78
     da4:	000003a0 	andeq	r0, r0, r0, lsr #7
     da8:	0003f407 	andeq	pc, r3, r7, lsl #8
     dac:	0003f400 	andeq	pc, r3, r0, lsl #8
     db0:	006f0800 	rsbeq	r0, pc, r0, lsl #16
     db4:	001f0000 	andseq	r0, pc, r0
     db8:	03fa0410 	mvnseq	r0, #16, 8	; 0x10000000
     dbc:	0a180000 	beq	600dc4 <startup-0x1f9ff23c>
     dc0:	00000671 	andeq	r0, r0, r1, ror r6
     dc4:	20750908 	rsbscs	r0, r5, r8, lsl #18
     dc8:	0e000004 	cdpeq	0, 0, cr0, cr0, cr4, {0}
     dcc:	00000473 	andeq	r0, r0, r3, ror r4
     dd0:	04207609 	strteq	r7, [r0], #-1545	; 0xfffff9f7
     dd4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     dd8:	000003e9 	andeq	r0, r0, r9, ror #7
     ddc:	00687709 	rsbeq	r7, r8, r9, lsl #14
     de0:	00040000 	andeq	r0, r4, r0
     de4:	002c0410 	eoreq	r0, ip, r0, lsl r4
     de8:	900a0000 	andls	r0, sl, r0
     dec:	68000006 	stmdavs	r0, {r1, r2}
     df0:	0550b509 	ldrbeq	fp, [r0, #-1289]	; 0xfffffaf7
     df4:	5f150000 	svcpl	0x00150000
     df8:	b6090070 			; <UNDEFINED> instruction: 0xb6090070
     dfc:	00000420 	andeq	r0, r0, r0, lsr #8
     e00:	725f1500 	subsvc	r1, pc, #0, 10
     e04:	68b70900 	ldmvs	r7!, {r8, fp}
     e08:	04000000 	streq	r0, [r0], #-0
     e0c:	00775f15 	rsbseq	r5, r7, r5, lsl pc
     e10:	0068b809 	rsbeq	fp, r8, r9, lsl #16
     e14:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
     e18:	00000498 	muleq	r0, r8, r4
     e1c:	0033b909 	eorseq	fp, r3, r9, lsl #18
     e20:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
     e24:	0000054f 	andeq	r0, r0, pc, asr #10
     e28:	0033ba09 	eorseq	fp, r3, r9, lsl #20
     e2c:	150e0000 	strne	r0, [lr, #-0]
     e30:	0066625f 	rsbeq	r6, r6, pc, asr r2
     e34:	03fbbb09 	mvnseq	fp, #9216	; 0x2400
     e38:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     e3c:	00000437 	andeq	r0, r0, r7, lsr r4
     e40:	0068bc09 	rsbeq	fp, r8, r9, lsl #24
     e44:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     e48:	00000488 	andeq	r0, r0, r8, lsl #9
     e4c:	0261c309 	rsbeq	ip, r1, #603979776	; 0x24000000
     e50:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
     e54:	000008ef 	andeq	r0, r0, pc, ror #17
     e58:	06abc509 	strteq	ip, [fp], r9, lsl #10
     e5c:	0e200000 	cdpeq	0, 2, cr0, cr0, cr0, {0}
     e60:	0000095b 	andeq	r0, r0, fp, asr r9
     e64:	06d5c709 	ldrbeq	ip, [r5], r9, lsl #14
     e68:	0e240000 	cdpeq	0, 2, cr0, cr4, cr0, {0}
     e6c:	00000712 	andeq	r0, r0, r2, lsl r7
     e70:	06f9ca09 	ldrbteq	ip, [r9], r9, lsl #20
     e74:	0e280000 	cdpeq	0, 2, cr0, cr8, cr0, {0}
     e78:	0000081c 	andeq	r0, r0, ip, lsl r8
     e7c:	0713cb09 	ldreq	ip, [r3, -r9, lsl #22]
     e80:	152c0000 	strne	r0, [ip, #-0]!
     e84:	0062755f 	rsbeq	r7, r2, pc, asr r5
     e88:	03fbce09 	mvnseq	ip, #9, 28	; 0x90
     e8c:	15300000 	ldrne	r0, [r0, #-0]!
     e90:	0070755f 	rsbseq	r7, r0, pc, asr r5
     e94:	0420cf09 	strteq	ip, [r0], #-3849	; 0xfffff0f7
     e98:	15380000 	ldrne	r0, [r8, #-0]!
     e9c:	0072755f 	rsbseq	r7, r2, pc, asr r5
     ea0:	0068d009 	rsbeq	sp, r8, r9
     ea4:	0e3c0000 	cdpeq	0, 3, cr0, cr12, cr0, {0}
     ea8:	0000046d 	andeq	r0, r0, sp, ror #8
     eac:	0719d309 	ldreq	sp, [r9, -r9, lsl #6]
     eb0:	0e400000 	cdpeq	0, 4, cr0, cr0, cr0, {0}
     eb4:	000007f4 	strdeq	r0, [r0], -r4
     eb8:	0729d409 	streq	sp, [r9, -r9, lsl #8]!
     ebc:	15430000 	strbne	r0, [r3, #-0]
     ec0:	00626c5f 	rsbeq	r6, r2, pc, asr ip
     ec4:	03fbd709 	mvnseq	sp, #2359296	; 0x240000
     ec8:	0e440000 	cdpeq	0, 4, cr0, cr4, cr0, {0}
     ecc:	000004ae 	andeq	r0, r0, lr, lsr #9
     ed0:	0068da09 	rsbeq	sp, r8, r9, lsl #20
     ed4:	0e4c0000 	cdpeq	0, 4, cr0, cr12, cr0, {0}
     ed8:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
     edc:	01d9db09 	bicseq	sp, r9, r9, lsl #22
     ee0:	0e500000 	cdpeq	0, 5, cr0, cr0, cr0, {0}
     ee4:	0000090c 	andeq	r0, r0, ip, lsl #18
     ee8:	056ede09 	strbeq	sp, [lr, #-3593]!	; 0xfffff1f7
     eec:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
     ef0:	0000070c 	andeq	r0, r0, ip, lsl #14
     ef4:	0256e209 	subseq	lr, r6, #-1879048192	; 0x90000000
     ef8:	0e580000 	cdpeq	0, 5, cr0, cr8, cr0, {0}
     efc:	00000698 	muleq	r0, r8, r6
     f00:	024be409 	subeq	lr, fp, #150994944	; 0x9000000
     f04:	0e5c0000 	cdpeq	0, 5, cr0, cr12, cr0, {0}
     f08:	0000059e 	muleq	r0, lr, r5
     f0c:	0068e509 	rsbeq	lr, r8, r9, lsl #10
     f10:	00640000 	rsbeq	r0, r4, r0
     f14:	00006819 	andeq	r6, r0, r9, lsl r8
     f18:	00056e00 	andeq	r6, r5, r0, lsl #28
     f1c:	056e1a00 	strbeq	r1, [lr, #-2560]!	; 0xfffff600
     f20:	611a0000 	tstvs	sl, r0
     f24:	1a000002 	bne	f34 <startup-0x1ffff0cc>
     f28:	000001bd 			; <UNDEFINED> instruction: 0x000001bd
     f2c:	0000681a 	andeq	r6, r0, sl, lsl r8
     f30:	04100000 	ldreq	r0, [r0], #-0
     f34:	00000579 	andeq	r0, r0, r9, ror r5
     f38:	00056e09 	andeq	r6, r5, r9, lsl #28
     f3c:	06f61b00 	ldrbteq	r1, [r6], r0, lsl #22
     f40:	04280000 	strteq	r0, [r8], #-0
     f44:	ab023909 	blge	8f370 <startup-0x1ff70c90>
     f48:	1c000006 	stcne	0, cr0, [r0], {6}
     f4c:	00000660 	andeq	r0, r0, r0, ror #12
     f50:	68023b09 	stmdavs	r2, {r0, r3, r8, r9, fp, ip, sp}
     f54:	00000000 	andeq	r0, r0, r0
     f58:	0004a71c 	andeq	sl, r4, ip, lsl r7
     f5c:	02400900 	subeq	r0, r0, #0, 18
     f60:	00000780 	andeq	r0, r0, r0, lsl #15
     f64:	05371c04 	ldreq	r1, [r7, #-3076]!	; 0xfffff3fc
     f68:	40090000 	andmi	r0, r9, r0
     f6c:	00078002 	andeq	r8, r7, r2
     f70:	021c0800 	andseq	r0, ip, #0, 16
     f74:	09000005 	stmdbeq	r0, {r0, r2}
     f78:	07800240 	streq	r0, [r0, r0, asr #4]
     f7c:	1c0c0000 	stcne	0, cr0, [ip], {-0}
     f80:	000006b9 			; <UNDEFINED> instruction: 0x000006b9
     f84:	68024209 	stmdavs	r2, {r0, r3, r9, lr}
     f88:	10000000 	andne	r0, r0, r0
     f8c:	0004071c 	andeq	r0, r4, ip, lsl r7
     f90:	02430900 	subeq	r0, r3, #0, 18
     f94:	00000952 	andeq	r0, r0, r2, asr r9
     f98:	06d51c14 			; <UNDEFINED> instruction: 0x06d51c14
     f9c:	46090000 	strmi	r0, [r9], -r0
     fa0:	00006802 	andeq	r6, r0, r2, lsl #16
     fa4:	c31c3000 	tstgt	ip, #0
     fa8:	09000006 	stmdbeq	r0, {r1, r2}
     fac:	09670247 	stmdbeq	r7!, {r0, r1, r2, r6, r9}^
     fb0:	1c340000 	ldcne	0, cr0, [r4], #-0
     fb4:	00000601 	andeq	r0, r0, r1, lsl #12
     fb8:	68024909 	stmdavs	r2, {r0, r3, r8, fp, lr}
     fbc:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     fc0:	0006cb1c 	andeq	ip, r6, ip, lsl fp
     fc4:	024b0900 	subeq	r0, fp, #0, 18
     fc8:	00000978 	andeq	r0, r0, r8, ror r9
     fcc:	05891c3c 	streq	r1, [r9, #3132]	; 0xc3c
     fd0:	4e090000 	cdpmi	0, 0, cr0, cr9, cr0, {0}
     fd4:	0002c102 	andeq	ip, r2, r2, lsl #2
     fd8:	211c4000 	tstcs	ip, r0
     fdc:	09000005 	stmdbeq	r0, {r0, r2}
     fe0:	0068024f 	rsbeq	r0, r8, pc, asr #4
     fe4:	1c440000 	marne	acc0, r0, r4
     fe8:	00000849 	andeq	r0, r0, r9, asr #16
     fec:	c1025009 	tstgt	r2, r9
     ff0:	48000002 	stmdami	r0, {r1}
     ff4:	0006201c 	andeq	r2, r6, ip, lsl r0
     ff8:	02510900 	subseq	r0, r1, #0, 18
     ffc:	0000097e 	andeq	r0, r0, lr, ror r9
    1000:	053f1c4c 	ldreq	r1, [pc, #-3148]!	; 3bc <startup-0x1ffffc44>
    1004:	54090000 	strpl	r0, [r9], #-0
    1008:	00006802 	andeq	r6, r0, r2, lsl #16
    100c:	b71c5000 	ldrlt	r5, [ip, -r0]
    1010:	09000004 	stmdbeq	r0, {r2}
    1014:	01bd0255 			; <UNDEFINED> instruction: 0x01bd0255
    1018:	1c540000 	mrane	r0, r4, acc0
    101c:	00000659 	andeq	r0, r0, r9, asr r6
    1020:	30027809 	andcc	r7, r2, r9, lsl #16
    1024:	58000009 	stmdapl	r0, {r0, r3}
    1028:	0005f91d 	andeq	pc, r5, sp, lsl r9	; <UNPREDICTABLE>
    102c:	027c0900 	rsbseq	r0, ip, #0, 18
    1030:	000003de 	ldrdeq	r0, [r0], -lr
    1034:	611d0148 	tstvs	sp, r8, asr #2
    1038:	09000005 	stmdbeq	r0, {r0, r2}
    103c:	03a0027d 	moveq	r0, #-805306361	; 0xd0000007
    1040:	014c0000 	mrseq	r0, (UNDEF: 76)
    1044:	0007ea1d 	andeq	lr, r7, sp, lsl sl
    1048:	02810900 	addeq	r0, r1, #0, 18
    104c:	0000098f 	andeq	r0, r0, pc, lsl #19
    1050:	901d02dc 			; <UNDEFINED> instruction: 0x901d02dc
    1054:	09000004 	stmdbeq	r0, {r2}
    1058:	07450286 	strbeq	r0, [r5, -r6, lsl #5]
    105c:	02e00000 	rsceq	r0, r0, #0
    1060:	0004831d 	andeq	r8, r4, sp, lsl r3
    1064:	02880900 	addeq	r0, r8, #0, 18
    1068:	0000099b 	muleq	r0, fp, r9
    106c:	100002ec 	andne	r0, r0, ip, ror #5
    1070:	00055004 	andeq	r5, r5, r4
    1074:	00681900 	rsbeq	r1, r8, r0, lsl #18
    1078:	06cf0000 	strbeq	r0, [pc], r0
    107c:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    1080:	1a000005 	bne	109c <startup-0x1fffef64>
    1084:	00000261 	andeq	r0, r0, r1, ror #4
    1088:	0006cf1a 	andeq	ip, r6, sl, lsl pc
    108c:	00681a00 	rsbeq	r1, r8, r0, lsl #20
    1090:	10000000 	andne	r0, r0, r0
    1094:	0000b504 	andeq	fp, r0, r4, lsl #10
    1098:	b1041000 	mrslt	r1, (UNDEF: 4)
    109c:	19000006 	stmdbne	r0, {r1, r2}
    10a0:	000001e4 	andeq	r0, r0, r4, ror #3
    10a4:	000006f9 	strdeq	r0, [r0], -r9
    10a8:	00056e1a 	andeq	r6, r5, sl, lsl lr
    10ac:	02611a00 	rsbeq	r1, r1, #0, 20
    10b0:	e41a0000 	ldr	r0, [sl], #-0
    10b4:	1a000001 	bne	10c0 <startup-0x1fffef40>
    10b8:	00000068 	andeq	r0, r0, r8, rrx
    10bc:	db041000 	blle	1050c4 <startup-0x1fefaf3c>
    10c0:	19000006 	stmdbne	r0, {r1, r2}
    10c4:	00000068 	andeq	r0, r0, r8, rrx
    10c8:	00000713 	andeq	r0, r0, r3, lsl r7
    10cc:	00056e1a 	andeq	r6, r5, sl, lsl lr
    10d0:	02611a00 	rsbeq	r1, r1, #0, 20
    10d4:	10000000 	andne	r0, r0, r0
    10d8:	0006ff04 	andeq	pc, r6, r4, lsl #30
    10dc:	002c0700 	eoreq	r0, ip, r0, lsl #14
    10e0:	07290000 	streq	r0, [r9, -r0]!
    10e4:	6f080000 	svcvs	0x00080000
    10e8:	02000000 	andeq	r0, r0, #0
    10ec:	002c0700 	eoreq	r0, ip, r0, lsl #14
    10f0:	07390000 	ldreq	r0, [r9, -r0]!
    10f4:	6f080000 	svcvs	0x00080000
    10f8:	00000000 	andeq	r0, r0, r0
    10fc:	067e1200 	ldrbteq	r1, [lr], -r0, lsl #4
    1100:	1f090000 	svcne	0x00090000
    1104:	00042601 	andeq	r2, r4, r1, lsl #12
    1108:	07d11e00 	ldrbeq	r1, [r1, r0, lsl #28]
    110c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    1110:	077a0123 	ldrbeq	r0, [sl, -r3, lsr #2]!
    1114:	a61c0000 	ldrge	r0, [ip], -r0
    1118:	09000006 	stmdbeq	r0, {r1, r2}
    111c:	077a0125 	ldrbeq	r0, [sl, -r5, lsr #2]!
    1120:	1c000000 	stcne	0, cr0, [r0], {-0}
    1124:	0000055a 	andeq	r0, r0, sl, asr r5
    1128:	68012609 	stmdavs	r1, {r0, r3, r9, sl, sp}
    112c:	04000000 	streq	r0, [r0], #-0
    1130:	0006781c 	andeq	r7, r6, ip, lsl r8
    1134:	01270900 			; <UNDEFINED> instruction: 0x01270900
    1138:	00000780 	andeq	r0, r0, r0, lsl #15
    113c:	04100008 	ldreq	r0, [r0], #-8
    1140:	00000745 	andeq	r0, r0, r5, asr #14
    1144:	07390410 			; <UNDEFINED> instruction: 0x07390410
    1148:	ff1e0000 			; <UNDEFINED> instruction: 0xff1e0000
    114c:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    1150:	bb013f09 	bllt	50d7c <startup-0x1ffaf284>
    1154:	1c000007 	stcne	0, cr0, [r0], {7}
    1158:	000006fd 	strdeq	r0, [r0], -sp
    115c:	bb014009 	bllt	51188 <startup-0x1ffaee78>
    1160:	00000007 	andeq	r0, r0, r7
    1164:	00074b1c 	andeq	r4, r7, ip, lsl fp
    1168:	01410900 	cmpeq	r1, r0, lsl #18
    116c:	000007bb 			; <UNDEFINED> instruction: 0x000007bb
    1170:	07881c06 	streq	r1, [r8, r6, lsl #24]
    1174:	42090000 	andmi	r0, r9, #0
    1178:	00003a01 	andeq	r3, r0, r1, lsl #20
    117c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
    1180:	0000003a 	andeq	r0, r0, sl, lsr r0
    1184:	000007cb 	andeq	r0, r0, fp, asr #15
    1188:	00006f08 	andeq	r6, r0, r8, lsl #30
    118c:	1f000200 	svcne	0x00000200
    1190:	025909d0 	subseq	r0, r9, #208, 18	; 0x340000
    1194:	000008cc 	andeq	r0, r0, ip, asr #17
    1198:	0007b51c 	andeq	fp, r7, ip, lsl r5
    119c:	025b0900 	subseq	r0, fp, #0, 18
    11a0:	0000006f 	andeq	r0, r0, pc, rrx
    11a4:	076a1c00 	strbeq	r1, [sl, -r0, lsl #24]!
    11a8:	5c090000 	stcpl	0, cr0, [r9], {-0}
    11ac:	0001bd02 	andeq	fp, r1, r2, lsl #26
    11b0:	761c0400 	ldrvc	r0, [ip], -r0, lsl #8
    11b4:	09000005 	stmdbeq	r0, {r0, r2}
    11b8:	08cc025d 	stmiaeq	ip, {r0, r2, r3, r4, r6, r9}^
    11bc:	1c080000 	stcne	0, cr0, [r8], {-0}
    11c0:	0000080d 	andeq	r0, r0, sp, lsl #16
    11c4:	d7025e09 	strle	r5, [r2, -r9, lsl #28]
    11c8:	24000002 	strcs	r0, [r0], #-2
    11cc:	0005121c 	andeq	r1, r5, ip, lsl r2
    11d0:	025f0900 	subseq	r0, pc, #0, 18
    11d4:	00000068 	andeq	r0, r0, r8, rrx
    11d8:	06a11c48 	strteq	r1, [r1], r8, asr #24
    11dc:	60090000 	andvs	r0, r9, r0
    11e0:	00006102 	andeq	r6, r0, r2, lsl #2
    11e4:	301c5000 	andscc	r5, ip, r0
    11e8:	09000008 	stmdbeq	r0, {r3}
    11ec:	07860261 	streq	r0, [r6, r1, ror #4]
    11f0:	1c580000 	mrane	r0, r8, acc0
    11f4:	000006ac 	andeq	r0, r0, ip, lsr #13
    11f8:	4b026209 	blmi	99a24 <startup-0x1ff665dc>
    11fc:	68000002 	stmdavs	r0, {r1}
    1200:	00083b1c 	andeq	r3, r8, ip, lsl fp
    1204:	02630900 	rsbeq	r0, r3, #0, 18
    1208:	0000024b 	andeq	r0, r0, fp, asr #4
    120c:	062a1c70 			; <UNDEFINED> instruction: 0x062a1c70
    1210:	64090000 	strvs	r0, [r9], #-0
    1214:	00024b02 	andeq	r4, r2, r2, lsl #22
    1218:	e01c7800 	ands	r7, ip, r0, lsl #16
    121c:	09000007 	stmdbeq	r0, {r0, r1, r2}
    1220:	009e0265 	addseq	r0, lr, r5, ror #4
    1224:	1c800000 	stcne	0, cr0, [r0], {0}
    1228:	0000056a 	andeq	r0, r0, sl, ror #10
    122c:	dc026609 	stcle	6, cr6, [r2], {9}
    1230:	88000008 	stmdahi	r0, {r3}
    1234:	0007951c 	andeq	r9, r7, ip, lsl r5
    1238:	02670900 	rsbeq	r0, r7, #0, 18
    123c:	00000068 	andeq	r0, r0, r8, rrx
    1240:	04d81ca0 	ldrbeq	r1, [r8], #3232	; 0xca0
    1244:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    1248:	00024b02 	andeq	r4, r2, r2, lsl #22
    124c:	501ca400 	andspl	sl, ip, r0, lsl #8
    1250:	09000004 	stmdbeq	r0, {r2}
    1254:	024b0269 	subeq	r0, fp, #-1879048186	; 0x90000006
    1258:	1cac0000 	stcne	0, cr0, [ip]
    125c:	000004c7 	andeq	r0, r0, r7, asr #9
    1260:	4b026a09 	blmi	9ba8c <startup-0x1ff64574>
    1264:	b4000002 	strlt	r0, [r0], #-2
    1268:	0004171c 	andeq	r1, r4, ip, lsl r7
    126c:	026b0900 	rsbeq	r0, fp, #0, 18
    1270:	0000024b 	andeq	r0, r0, fp, asr #4
    1274:	04261cbc 	strteq	r1, [r6], #-3260	; 0xfffff344
    1278:	6c090000 	stcvs	0, cr0, [r9], {-0}
    127c:	00024b02 	andeq	r4, r2, r2, lsl #22
    1280:	5e1cc400 	cfmulspl	mvf12, mvf12, mvf0
    1284:	09000006 	stmdbeq	r0, {r1, r2}
    1288:	0068026d 	rsbeq	r0, r8, sp, ror #4
    128c:	00cc0000 	sbceq	r0, ip, r0
    1290:	0000ae07 	andeq	sl, r0, r7, lsl #28
    1294:	0008dc00 	andeq	sp, r8, r0, lsl #24
    1298:	006f0800 	rsbeq	r0, pc, r0, lsl #16
    129c:	00190000 	andseq	r0, r9, r0
    12a0:	0000ae07 	andeq	sl, r0, r7, lsl #28
    12a4:	0008ec00 	andeq	lr, r8, r0, lsl #24
    12a8:	006f0800 	rsbeq	r0, pc, r0, lsl #16
    12ac:	00170000 	andseq	r0, r7, r0
    12b0:	7209f01f 	andvc	pc, r9, #31
    12b4:	00091002 	andeq	r1, r9, r2
    12b8:	05e91c00 	strbeq	r1, [r9, #3072]!	; 0xc00
    12bc:	75090000 	strvc	r0, [r9, #-0]
    12c0:	00091002 	andeq	r1, r9, r2
    12c4:	d71c0000 	ldrle	r0, [ip, -r0]
    12c8:	09000007 	stmdbeq	r0, {r0, r1, r2}
    12cc:	09200276 	stmdbeq	r0!, {r1, r2, r4, r5, r6, r9}
    12d0:	00780000 	rsbseq	r0, r8, r0
    12d4:	00042007 	andeq	r2, r4, r7
    12d8:	00092000 	andeq	r2, r9, r0
    12dc:	006f0800 	rsbeq	r0, pc, r0, lsl #16
    12e0:	001d0000 	andseq	r0, sp, r0
    12e4:	00006f07 	andeq	r6, r0, r7, lsl #30
    12e8:	00093000 	andeq	r3, r9, r0
    12ec:	006f0800 	rsbeq	r0, pc, r0, lsl #16
    12f0:	001d0000 	andseq	r0, sp, r0
    12f4:	5709f020 	strpl	pc, [r9, -r0, lsr #32]
    12f8:	00095202 	andeq	r5, r9, r2, lsl #4
    12fc:	06f62100 	ldrbteq	r2, [r6], r0, lsl #2
    1300:	6e090000 	cdpvs	0, 0, cr0, cr9, cr0, {0}
    1304:	0007cb02 	andeq	ip, r7, r2, lsl #22
    1308:	07fa2100 	ldrbeq	r2, [sl, r0, lsl #2]!
    130c:	77090000 	strvc	r0, [r9, -r0]
    1310:	0008ec02 	andeq	lr, r8, r2, lsl #24
    1314:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
    1318:	62000000 	andvs	r0, r0, #0
    131c:	08000009 	stmdaeq	r0, {r0, r3}
    1320:	0000006f 	andeq	r0, r0, pc, rrx
    1324:	45110018 	ldrmi	r0, [r1, #-24]	; 0xffffffe8
    1328:	10000004 	andne	r0, r0, r4
    132c:	00096204 	andeq	r6, r9, r4, lsl #4
    1330:	09782200 	ldmdbeq	r8!, {r9, sp}^
    1334:	6e1a0000 	cdpvs	0, 1, cr0, cr10, cr0, {0}
    1338:	00000005 	andeq	r0, r0, r5
    133c:	096d0410 	stmdbeq	sp!, {r4, sl}^
    1340:	04100000 	ldreq	r0, [r0], #-0
    1344:	000002c1 	andeq	r0, r0, r1, asr #5
    1348:	00098f22 	andeq	r8, r9, r2, lsr #30
    134c:	00681a00 	rsbeq	r1, r8, r0, lsl #20
    1350:	10000000 	andne	r0, r0, r0
    1354:	00099504 	andeq	r9, r9, r4, lsl #10
    1358:	84041000 	strhi	r1, [r4], #-0
    135c:	07000009 	streq	r0, [r0, -r9]
    1360:	00000739 	andeq	r0, r0, r9, lsr r7
    1364:	000009ab 	andeq	r0, r0, fp, lsr #19
    1368:	00006f08 	andeq	r6, r0, r8, lsl #30
    136c:	23000200 	movwcs	r0, #512	; 0x200
    1370:	000007a9 	andeq	r0, r0, r9, lsr #15
    1374:	6e030709 	cdpvs	7, 0, cr0, cr3, cr9, {0}
    1378:	23000005 	movwcs	r0, #5
    137c:	000007a2 	andeq	r0, r0, r2, lsr #15
    1380:	74030809 	strvc	r0, [r3], #-2057	; 0xfffff7f7
    1384:	07000005 	streq	r0, [r0, -r5]
    1388:	000000ae 	andeq	r0, r0, lr, lsr #1
    138c:	000009d9 	ldrdeq	r0, [r0], -r9
    1390:	00006f08 	andeq	r6, r0, r8, lsl #30
    1394:	6f08ff00 	svcvs	0x0008ff00
    1398:	07000000 	streq	r0, [r0, -r0]
    139c:	097b2400 	ldmdbeq	fp!, {sl, sp}^
    13a0:	3b010000 	blcc	413a8 <startup-0x1ffbec58>
    13a4:	000009c3 	andeq	r0, r0, r3, asr #19
    13a8:	0006fe25 	andeq	pc, r6, r5, lsr #28
    13ac:	763c0100 	ldrtvc	r0, [ip], -r0, lsl #2
    13b0:	05000000 	streq	r0, [r0, #-0]
    13b4:	002da803 	eoreq	sl, sp, r3, lsl #16
    13b8:	084e2620 	stmdaeq	lr, {r5, r9, sl, sp}^
    13bc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    13c0:	000f3801 	andeq	r3, pc, r1, lsl #16
    13c4:	00000e20 	andeq	r0, r0, r0, lsr #28
    13c8:	279c0100 	ldrcs	r0, [ip, r0, lsl #2]
    13cc:	000005a6 	andeq	r0, r0, r6, lsr #11
    13d0:	0eeaf901 	vfmaeq.f16	s31, s20, s2	; <UNPREDICTABLE>
    13d4:	004e2000 	subeq	r2, lr, r0
    13d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    13dc:	00000a5f 	andeq	r0, r0, pc, asr sl
    13e0:	00074428 	andeq	r4, r7, r8, lsr #8
    13e4:	5ffa0100 	svcpl	0x00fa0100
    13e8:	0200000a 	andeq	r0, r0, #10
    13ec:	64295c91 	strtvs	r5, [r9], #-3217	; 0xfffff36f
    13f0:	68ff0100 	ldmvs	pc!, {r8}^	; <UNPREDICTABLE>
    13f4:	02000000 	andeq	r0, r0, #0
    13f8:	182a7091 	stmdane	sl!, {r0, r4, r7, ip, sp, lr}
    13fc:	01000007 	tsteq	r0, r7
    1400:	00680100 	rsbeq	r0, r8, r0, lsl #2
    1404:	0a480000 	beq	120140c <startup-0x1edfebf4>
    1408:	002b0000 	eoreq	r0, fp, r0
    140c:	000ef02c 	andeq	pc, lr, ip, lsr #32
    1410:	00001c20 	andeq	r1, r0, r0, lsr #24
    1414:	00692900 	rsbeq	r2, r9, r0, lsl #18
    1418:	0068fb01 	rsbeq	pc, r8, r1, lsl #22
    141c:	91020000 	mrsls	r0, (UNDEF: 2)
    1420:	07000074 	smlsdxeq	r0, r4, r0, r0
    1424:	000000ae 	andeq	r0, r0, lr, lsr #1
    1428:	00000a6f 	andeq	r0, r0, pc, ror #20
    142c:	00006f08 	andeq	r6, r0, r8, lsl #30
    1430:	2d001300 	stccs	3, cr1, [r0, #-0]
    1434:	00000583 	andeq	r0, r0, r3, lsl #11
    1438:	0ee0f301 	cdpeq	3, 14, cr15, cr0, cr1, {0}
    143c:	000a2000 	andeq	r2, sl, r0
    1440:	9c010000 	stcls	0, cr0, [r1], {-0}
    1444:	0005472e 	andeq	r4, r5, lr, lsr #14
    1448:	70db0100 	sbcsvc	r0, fp, r0, lsl #2
    144c:	7020000e 	eorvc	r0, r0, lr
    1450:	01000000 	mrseq	r0, (UNDEF: 0)
    1454:	000ad89c 	muleq	sl, ip, r8
    1458:	08352f00 	ldmdaeq	r5!, {r8, r9, sl, fp, sp}
    145c:	db010000 	blle	41464 <startup-0x1ffbeb9c>
    1460:	00000068 	andeq	r0, r0, r8, rrx
    1464:	7f9c9103 	svcvc	0x009c9103
    1468:	0007bd28 	andeq	fp, r7, r8, lsr #26
    146c:	68dd0100 	ldmvs	sp, {r8}^
    1470:	02000000 	andeq	r0, r0, #0
    1474:	13287091 			; <UNDEFINED> instruction: 0x13287091
    1478:	01000006 	tsteq	r0, r6
    147c:	000ad8df 	ldrdeq	sp, [sl], -pc	; <UNPREDICTABLE>
    1480:	a0910300 	addsge	r0, r1, r0, lsl #6
    1484:	0ea02c7f 	mcreq	12, 5, r2, cr0, cr15, {3}
    1488:	00302000 	eorseq	r2, r0, r0
    148c:	69290000 	stmdbvs	r9!, {}	; <UNPREDICTABLE>
    1490:	68e20100 	stmiavs	r2!, {r8}^
    1494:	02000000 	andeq	r0, r0, #0
    1498:	00007491 	muleq	r0, r1, r4
    149c:	0000ae07 	andeq	sl, r0, r7, lsl #28
    14a0:	000aee00 	andeq	lr, sl, r0, lsl #28
    14a4:	006f0800 	rsbeq	r0, pc, r0, lsl #16
    14a8:	08130000 	ldmdaeq	r3, {}	; <UNPREDICTABLE>
    14ac:	0000006f 	andeq	r0, r0, pc, rrx
    14b0:	ef2e0003 	svc	0x002e0003
    14b4:	01000003 	tsteq	r0, r3
    14b8:	000e24ca 	andeq	r2, lr, sl, asr #9
    14bc:	00004c20 	andeq	r4, r0, r0, lsr #24
    14c0:	209c0100 	addscs	r0, ip, r0, lsl #2
    14c4:	2f00000b 	svccs	0x0000000b
    14c8:	00000835 	andeq	r0, r0, r5, lsr r8
    14cc:	0068ca01 	rsbeq	ip, r8, r1, lsl #20
    14d0:	91020000 	mrsls	r0, (UNDEF: 2)
    14d4:	04122f74 	ldreq	r2, [r2], #-3956	; 0xfffff08c
    14d8:	ca010000 	bgt	414e0 <startup-0x1ffbeb20>
    14dc:	000000ae 	andeq	r0, r0, lr, lsr #1
    14e0:	00739102 	rsbseq	r9, r3, r2, lsl #2
    14e4:	0008232e 	andeq	r2, r8, lr, lsr #6
    14e8:	b4ac0100 	strtlt	r0, [ip], #256	; 0x100
    14ec:	7020000d 	eorvc	r0, r0, sp
    14f0:	01000000 	mrseq	r0, (UNDEF: 0)
    14f4:	000b8a9c 	muleq	fp, ip, sl
    14f8:	04402f00 	strbeq	r2, [r0], #-3840	; 0xfffff100
    14fc:	ac010000 	stcge	0, cr0, [r1], {-0}
    1500:	00000068 	andeq	r0, r0, r8, rrx
    1504:	2f449102 	svccs	0x00449102
    1508:	00000555 	andeq	r0, r0, r5, asr r5
    150c:	0068ac01 	rsbeq	sl, r8, r1, lsl #24
    1510:	91020000 	mrsls	r0, (UNDEF: 2)
    1514:	00622940 	rsbeq	r2, r2, r0, asr #18
    1518:	0b8aad01 	bleq	fe2ac924 <Pedro+0xde2a9234>
    151c:	91020000 	mrsls	r0, (UNDEF: 2)
    1520:	0dd02c48 	ldcleq	12, cr2, [r0, #288]	; 0x120
    1524:	00462000 	subeq	r2, r6, r0
    1528:	6a290000 	bvs	a41530 <startup-0x1f5bead0>
    152c:	68c10100 	stmiavs	r1, {r8}^
    1530:	02000000 	andeq	r0, r0, #0
    1534:	d62c6c91 			; <UNDEFINED> instruction: 0xd62c6c91
    1538:	3420000d 	strtcc	r0, [r0], #-13
    153c:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1540:	c2010069 	andgt	r0, r1, #105	; 0x69
    1544:	00000068 	andeq	r0, r0, r8, rrx
    1548:	00689102 	rsbeq	r9, r8, r2, lsl #2
    154c:	ae070000 	cdpge	0, 0, cr0, cr7, cr0, {0}
    1550:	a0000000 	andge	r0, r0, r0
    1554:	0800000b 	stmdaeq	r0, {r0, r1, r3}
    1558:	0000006f 	andeq	r0, r0, pc, rrx
    155c:	006f080f 	rsbeq	r0, pc, pc, lsl #16
    1560:	00010000 	andeq	r0, r1, r0
    1564:	00075127 	andeq	r5, r7, r7, lsr #2
    1568:	a4a60100 	strtge	r0, [r6], #256	; 0x100
    156c:	1020000d 	eorne	r0, r0, sp
    1570:	01000000 	mrseq	r0, (UNDEF: 0)
    1574:	000bc39c 	muleq	fp, ip, r3
    1578:	05473000 	strbeq	r3, [r7, #-0]
    157c:	a3010000 	movwge	r0, #4096	; 0x1000
    1580:	00000068 	andeq	r0, r0, r8, rrx
    1584:	2700002b 	strcs	r0, [r0, -fp, lsr #32]
    1588:	00000638 	andeq	r0, r0, r8, lsr r6
    158c:	0d94a201 	lfmeq	f2, 1, [r4, #4]
    1590:	00102000 	andseq	r2, r0, r0
    1594:	9c010000 	stcls	0, cr0, [r1], {-0}
    1598:	00000be6 	andeq	r0, r0, r6, ror #23
    159c:	00054730 	andeq	r4, r5, r0, lsr r7
    15a0:	68a30100 	stmiavs	r3!, {r8}
    15a4:	2b000000 	blcs	15ac <startup-0x1fffea54>
    15a8:	68270000 	stmdavs	r7!, {}	; <UNPREDICTABLE>
    15ac:	01000004 	tsteq	r0, r4
    15b0:	000d4070 	andeq	r4, sp, r0, ror r0
    15b4:	00005420 	andeq	r5, r0, r0, lsr #8
    15b8:	419c0100 	orrsmi	r0, ip, r0, lsl #2
    15bc:	3100000c 	tstcc	r0, ip
    15c0:	00000c0e 	andeq	r0, r0, lr, lsl #24
    15c4:	00063830 	andeq	r3, r6, r0, lsr r8
    15c8:	68820100 	stmvs	r2, {r8}
    15cc:	2b000000 	blcs	15d4 <startup-0x1fffea2c>
    15d0:	56320000 	ldrtpl	r0, [r2], -r0
    15d4:	0420000d 	strteq	r0, [r0], #-13
    15d8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    15dc:	3000000c 	andcc	r0, r0, ip
    15e0:	00000751 	andeq	r0, r0, r1, asr r7
    15e4:	00688501 	rsbeq	r8, r8, r1, lsl #10
    15e8:	002b0000 	eoreq	r0, fp, r0
    15ec:	0d662c00 	stcleq	12, cr2, [r6, #-0]
    15f0:	00042000 	andeq	r2, r4, r0
    15f4:	a6300000 	ldrtge	r0, [r0], -r0
    15f8:	01000005 	tsteq	r0, r5
    15fc:	0000688b 	andeq	r6, r0, fp, lsl #17
    1600:	00002b00 	andeq	r2, r0, r0, lsl #22
    1604:	08fb3300 	ldmeq	fp!, {r8, r9, ip, sp}^
    1608:	50010000 	andpl	r0, r1, r0
    160c:	20000d04 	andcs	r0, r0, r4, lsl #26
    1610:	0000003c 	andeq	r0, r0, ip, lsr r0
    1614:	502d9c01 	eorpl	r9, sp, r1, lsl #24
    1618:	01000006 	tsteq	r0, r6
    161c:	000ca441 	andeq	sl, ip, r1, asr #8
    1620:	00006020 	andeq	r6, r0, r0, lsr #32
    1624:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    1628:	0000073c 	andeq	r0, r0, ip, lsr r7
    162c:	00002f01 	andeq	r2, r0, r1, lsl #30
    1630:	000c2000 	andeq	r2, ip, r0
    1634:	9c010000 	stcls	0, cr0, [r1], {-0}
    1638:	00090c00 	andeq	r0, r9, r0, lsl #24
    163c:	63000400 	movwvs	r0, #1024	; 0x400
    1640:	04000007 	streq	r0, [r0], #-7
    1644:	00003501 	andeq	r3, r0, r1, lsl #10
    1648:	0a500c00 	beq	1404650 <startup-0x1ebfb9b0>
    164c:	00000000 	andeq	r0, r0, r0
    1650:	0f480000 	svceq	0x00480000
    1654:	0a182000 	beq	60965c <startup-0x1f9f69a4>
    1658:	068f0000 	streq	r0, [pc], r0
    165c:	01020000 	mrseq	r0, (UNDEF: 2)
    1660:	0001f606 	andeq	pc, r1, r6, lsl #12
    1664:	09120300 	ldmdbeq	r2, {r8, r9}
    1668:	2b020000 	blcs	81670 <startup-0x1ff7e990>
    166c:	00000037 	andeq	r0, r0, r7, lsr r0
    1670:	f4080102 	vst4.8	{d0,d2,d4,d6}, [r8], r2
    1674:	02000001 	andeq	r0, r0, #1
    1678:	013d0502 	teqeq	sp, r2, lsl #10
    167c:	02020000 	andeq	r0, r2, #0
    1680:	00023d07 	andeq	r3, r2, r7, lsl #26
    1684:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1688:	000001c3 	andeq	r0, r0, r3, asr #3
    168c:	0c070402 	cfstrseq	mvf0, [r7], {2}
    1690:	02000002 	andeq	r0, r0, #2
    1694:	01be0508 			; <UNDEFINED> instruction: 0x01be0508
    1698:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    169c:	00020707 	andeq	r0, r2, r7, lsl #14
    16a0:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    16a4:	00746e69 	rsbseq	r6, r4, r9, ror #28
    16a8:	11070402 	tstne	r7, r2, lsl #8
    16ac:	03000002 	movweq	r0, #2
    16b0:	00000914 	andeq	r0, r0, r4, lsl r9
    16b4:	002c1803 	eoreq	r1, ip, r3, lsl #16
    16b8:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
    16bc:	009e5304 	addseq	r5, lr, r4, lsl #6
    16c0:	6c060000 	stcvs	0, cr0, [r6], {-0}
    16c4:	0400676e 	streq	r6, [r0], #-1902	; 0xfffff892
    16c8:	00006154 	andeq	r6, r0, r4, asr r1
    16cc:	00630600 	rsbeq	r0, r3, r0, lsl #12
    16d0:	009e5504 	addseq	r5, lr, r4, lsl #10
    16d4:	07000000 	streq	r0, [r0, -r0]
    16d8:	000000ae 	andeq	r0, r0, lr, lsr #1
    16dc:	000000ae 	andeq	r0, r0, lr, lsr #1
    16e0:	00006f08 	andeq	r6, r0, r8, lsl #30
    16e4:	02000700 	andeq	r0, r0, #0, 14
    16e8:	01fd0801 	mvnseq	r0, r1, lsl #16
    16ec:	76090000 	strvc	r0, [r9], -r0
    16f0:	08000001 	stmdaeq	r0, {r0}
    16f4:	00c85204 	sbceq	r5, r8, r4, lsl #4
    16f8:	810a0000 	mrshi	r0, (UNDEF: 10)
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	00b50700 	adcseq	r0, r5, r0, lsl #14
    1704:	00d80000 	sbcseq	r0, r8, r0
    1708:	6f080000 	svcvs	0x00080000
    170c:	13000000 	movwne	r0, #0
    1710:	55420b00 	strbpl	r0, [r2, #-2816]	; 0xfffff500
    1714:	57040046 	strpl	r0, [r4, -r6, asr #32]
    1718:	000000c8 	andeq	r0, r0, r8, asr #1
    171c:	2d080305 	stccs	3, cr0, [r8, #-20]	; 0xffffffec
    1720:	020c2000 	andeq	r2, ip, #0
    1724:	010a0c05 	tsteq	sl, r5, lsl #24
    1728:	9a0d0000 	bls	341730 <startup-0x1fcbe8d0>
    172c:	05000003 	streq	r0, [r0, #-3]
    1730:	0000370d 	andeq	r3, r0, sp, lsl #14
    1734:	cd0d0000 	stcgt	0, cr0, [sp, #-0]
    1738:	05000003 	streq	r0, [r0, #-3]
    173c:	0000370e 	andeq	r3, r0, lr, lsl #14
    1740:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    1744:	230a0504 	movwcs	r0, #42244	; 0xa504
    1748:	06000001 	streq	r0, [r0], -r1
    174c:	00726469 	rsbseq	r6, r2, r9, ror #8
    1750:	006f0b05 	rsbeq	r0, pc, r5, lsl #22
    1754:	e90e0000 	stmdb	lr, {}	; <UNPREDICTABLE>
    1758:	00000000 	andeq	r0, r0, r0
    175c:	1305020c 	movwne	r0, #21004	; 0x520c
    1760:	00000144 	andeq	r0, r0, r4, asr #2
    1764:	0003930d 	andeq	r9, r3, sp, lsl #6
    1768:	37140500 	ldrcc	r0, [r4, -r0, lsl #10]
    176c:	00000000 	andeq	r0, r0, r0
    1770:	00037e0d 	andeq	r7, r3, sp, lsl #28
    1774:	37150500 	ldrcc	r0, [r5, -r0, lsl #10]
    1778:	01000000 	mrseq	r0, (UNDEF: 0)
    177c:	05040500 	streq	r0, [r4, #-1280]	; 0xfffffb00
    1780:	00015d11 	andeq	r5, r1, r1, lsl sp
    1784:	646f0600 	strbtvs	r0, [pc], #-1536	; 178c <startup-0x1fffe874>
    1788:	12050072 	andne	r0, r5, #114	; 0x72
    178c:	0000006f 	andeq	r0, r0, pc, rrx
    1790:	0001230e 	andeq	r2, r1, lr, lsl #6
    1794:	b6090000 	strlt	r0, [r9], -r0
    1798:	18000003 	stmdane	r0, {r0, r1}
    179c:	01a60405 			; <UNDEFINED> instruction: 0x01a60405
    17a0:	730d0000 	movwvc	r0, #53248	; 0xd000
    17a4:	05000003 	streq	r0, [r0, #-3]
    17a8:	00006f05 	andeq	r6, r0, r5, lsl #30
    17ac:	860d0000 	strhi	r0, [sp], -r0
    17b0:	05000003 	streq	r0, [r0, #-3]
    17b4:	00006f06 	andeq	r6, r0, r6, lsl #30
    17b8:	d50d0400 	strle	r0, [sp, #-1024]	; 0xfffffc00
    17bc:	05000003 	streq	r0, [r0, #-3]
    17c0:	00006f07 	andeq	r6, r0, r7, lsl #30
    17c4:	8d0d0800 	stchi	8, cr0, [sp, #-0]
    17c8:	05000003 	streq	r0, [r0, #-3]
    17cc:	00006f08 	andeq	r6, r0, r8, lsl #30
    17d0:	0a0a0c00 	beq	2847d8 <startup-0x1fd7b828>
    17d4:	10000001 	andne	r0, r0, r1
    17d8:	0001440a 	andeq	r4, r1, sl, lsl #8
    17dc:	03001400 	movweq	r1, #1024	; 0x400
    17e0:	000003c8 	andeq	r0, r0, r8, asr #7
    17e4:	015d1805 	cmpeq	sp, r5, lsl #16
    17e8:	76070000 	strvc	r0, [r7], -r0
    17ec:	c7000000 	strgt	r0, [r0, -r0]
    17f0:	08000001 	stmdaeq	r0, {r0}
    17f4:	0000006f 	andeq	r0, r0, pc, rrx
    17f8:	006f08ff 	strdeq	r0, [pc], #-143	; <UNPREDICTABLE>
    17fc:	00070000 	andeq	r0, r7, r0
    1800:	00097b0f 	andeq	r7, r9, pc, lsl #22
    1804:	b1060100 	mrslt	r0, (UNDEF: 22)
    1808:	05000001 	streq	r0, [r0, #-1]
    180c:	002dac03 	eoreq	sl, sp, r3, lsl #24
    1810:	0a951020 	beq	fe545898 <Pedro+0xde5421a8>
    1814:	6c010000 	stcvs	0, cr0, [r1], {-0}
    1818:	00190c01 	andseq	r0, r9, r1, lsl #24
    181c:	00005420 	andeq	r5, r0, r0, lsr #8
    1820:	299c0100 	ldmibcs	ip, {r8}
    1824:	11000002 	tstne	r0, r2
    1828:	00727473 	rsbseq	r7, r2, r3, ror r4
    182c:	29016c01 	stmdbcs	r1, {r0, sl, fp, sp, lr}
    1830:	02000002 	andeq	r0, r0, #2
    1834:	63116c91 	tstvs	r1, #37120	; 0x9100
    1838:	01006c6f 	tsteq	r0, pc, ror #24
    183c:	0068016c 	rsbeq	r0, r8, ip, ror #2
    1840:	91020000 	mrsls	r0, (UNDEF: 2)
    1844:	6f721168 	svcvs	0x00721168
    1848:	6c010077 	stcvs	0, cr0, [r1], {119}	; 0x77
    184c:	00006801 	andeq	r6, r0, r1, lsl #16
    1850:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1854:	01007312 	tsteq	r0, r2, lsl r3
    1858:	02290170 	eoreq	r0, r9, #112, 2
    185c:	91020000 	mrsls	r0, (UNDEF: 2)
    1860:	04130074 	ldreq	r0, [r3], #-116	; 0xffffff8c
    1864:	000000ae 	andeq	r0, r0, lr, lsr #1
    1868:	0008db10 	andeq	sp, r8, r0, lsl fp
    186c:	01620100 	cmneq	r2, r0, lsl #2
    1870:	200018be 			; <UNDEFINED> instruction: 0x200018be
    1874:	0000004e 	andeq	r0, r0, lr, asr #32
    1878:	027d9c01 	rsbseq	r9, sp, #256	; 0x100
    187c:	63140000 	tstvs	r4, #0
    1880:	01000008 	tsteq	r0, r8
    1884:	00680162 	rsbeq	r0, r8, r2, ror #2
    1888:	91020000 	mrsls	r0, (UNDEF: 2)
    188c:	6f72116c 	svcvs	0x0072116c
    1890:	62010077 	andvs	r0, r1, #119	; 0x77
    1894:	00006801 	andeq	r6, r0, r1, lsl #16
    1898:	68910200 	ldmvs	r1, {r9}
    189c:	0018e015 	andseq	lr, r8, r5, lsl r0
    18a0:	00002420 	andeq	r2, r0, r0, lsr #8
    18a4:	02761600 	rsbseq	r1, r6, #0, 12
    18a8:	64010000 	strvs	r0, [r1], #-0
    18ac:	00006f01 	andeq	r6, r0, r1, lsl #30
    18b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    18b4:	b7100000 	ldrlt	r0, [r0, -r0]
    18b8:	01000009 	tsteq	r0, r9
    18bc:	1882015b 	stmne	r2, {r0, r1, r3, r4, r6, r8}
    18c0:	003c2000 	eorseq	r2, ip, r0
    18c4:	9c010000 	stcls	0, cr0, [r1], {-0}
    18c8:	000002bf 			; <UNDEFINED> instruction: 0x000002bf
    18cc:	01006311 	tsteq	r0, r1, lsl r3
    18d0:	0037015b 	eorseq	r0, r7, fp, asr r1
    18d4:	91020000 	mrsls	r0, (UNDEF: 2)
    18d8:	00291777 	eoreq	r1, r9, r7, ror r7
    18dc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    18e0:	00000068 	andeq	r0, r0, r8, rrx
    18e4:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
    18e8:	f3190018 	vqadd.u16	d0, d9, d8
    18ec:	01000000 	mrseq	r0, (UNDEF: 0)
    18f0:	00006830 	andeq	r6, r0, r0, lsr r8
    18f4:	00001800 	andeq	r1, r0, r0, lsl #16
    18f8:	0009911a 	andeq	r9, r9, sl, lsl r1
    18fc:	01550100 	cmpeq	r5, r0, lsl #2
    1900:	20001866 	andcs	r1, r0, r6, ror #16
    1904:	0000001c 	andeq	r0, r0, ip, lsl r0
    1908:	02f49c01 	rscseq	r9, r4, #256	; 0x100
    190c:	29170000 	ldmdbcs	r7, {}	; <UNPREDICTABLE>
    1910:	01000000 	mrseq	r0, (UNDEF: 0)
    1914:	0000682e 	andeq	r6, r0, lr, lsr #16
    1918:	0002e600 	andeq	lr, r2, r0, lsl #12
    191c:	19001800 	stmdbne	r0, {fp, ip}
    1920:	000000f3 	strdeq	r0, [r0], -r3
    1924:	00683001 	rsbeq	r3, r8, r1
    1928:	00180000 	andseq	r0, r8, r0
    192c:	08f51000 	ldmeq	r5!, {ip}^
    1930:	43010000 	movwmi	r0, #4096	; 0x1000
    1934:	00181401 	andseq	r1, r8, r1, lsl #8
    1938:	00005220 	andeq	r5, r0, r0, lsr #4
    193c:	189c0100 	ldmne	ip, {r8}
    1940:	19000003 	stmdbne	r0, {r0, r1}
    1944:	00000029 	andeq	r0, r0, r9, lsr #32
    1948:	00682e01 	rsbeq	r2, r8, r1, lsl #28
    194c:	00180000 	andseq	r0, r8, r0
    1950:	092f1000 	stmdbeq	pc!, {ip}	; <UNPREDICTABLE>
    1954:	3c010000 	stccc	0, cr0, [r1], {-0}
    1958:	0017d801 	andseq	sp, r7, r1, lsl #16
    195c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1960:	5c9c0100 	ldfpls	f0, [ip], {0}
    1964:	14000003 	strne	r0, [r0], #-3
    1968:	000008a9 	andeq	r0, r0, r9, lsr #17
    196c:	37013c01 	strcc	r3, [r1, -r1, lsl #24]
    1970:	02000000 	andeq	r0, r0, #0
    1974:	29177791 	ldmdbcs	r7, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
    1978:	01000000 	mrseq	r0, (UNDEF: 0)
    197c:	0000682e 	andeq	r6, r0, lr, lsr #16
    1980:	00034e00 	andeq	r4, r3, r0, lsl #28
    1984:	19001800 	stmdbne	r0, {fp, ip}
    1988:	000000f3 	strdeq	r0, [r0], -r3
    198c:	00683001 	rsbeq	r3, r8, r1
    1990:	00180000 	andseq	r0, r8, r0
    1994:	0a271b00 	beq	9c859c <startup-0x1f637a64>
    1998:	32010000 	andcc	r0, r1, #0
    199c:	00003701 	andeq	r3, r0, r1, lsl #14
    19a0:	00179800 	andseq	r9, r7, r0, lsl #16
    19a4:	00004020 	andeq	r4, r0, r0, lsr #32
    19a8:	849c0100 	ldrhi	r0, [ip], #256	; 0x100
    19ac:	12000003 	andne	r0, r0, #3
    19b0:	33010063 	movwcc	r0, #4195	; 0x1063
    19b4:	00003701 	andeq	r3, r0, r1, lsl #14
    19b8:	6f910200 	svcvs	0x00910200
    19bc:	0a851b00 	beq	fe1485c4 <Pedro+0xde144ed4>
    19c0:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    19c4:	00003701 	andeq	r3, r0, r1, lsl #14
    19c8:	00175c00 	andseq	r5, r7, r0, lsl #24
    19cc:	00003c20 	andeq	r3, r0, r0, lsr #24
    19d0:	ac9c0100 	ldfges	f0, [ip], {0}
    19d4:	12000003 	andne	r0, r0, #3
    19d8:	2a010063 	bcs	41b6c <startup-0x1ffbe494>
    19dc:	00003701 	andeq	r3, r0, r1, lsl #14
    19e0:	6f910200 	svcvs	0x00910200
    19e4:	09c81b00 	stmibeq	r8, {r8, r9, fp, ip}^
    19e8:	1f010000 	svcne	0x00010000
    19ec:	00003701 	andeq	r3, r0, r1, lsl #14
    19f0:	00172a00 	andseq	r2, r7, r0, lsl #20
    19f4:	00003220 	andeq	r3, r0, r0, lsr #4
    19f8:	e29c0100 	adds	r0, ip, #0, 2
    19fc:	12000003 	andne	r0, r0, #3
    1a00:	20010063 	andcs	r0, r1, r3, rrx
    1a04:	00003701 	andeq	r3, r0, r1, lsl #14
    1a08:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1a0c:	0000ff1c 	andeq	pc, r0, ip, lsl pc	; <UNPREDICTABLE>
    1a10:	01100100 	tsteq	r0, r0, lsl #2
    1a14:	00000068 	andeq	r0, r0, r8, rrx
    1a18:	10000018 	andne	r0, r0, r8, lsl r0
    1a1c:	000009de 	ldrdeq	r0, [r0], -lr
    1a20:	00011901 	andeq	r1, r1, r1, lsl #18
    1a24:	2a200017 	bcs	801a88 <startup-0x1f7fe578>
    1a28:	01000000 	mrseq	r0, (UNDEF: 0)
    1a2c:	0004089c 	muleq	r4, ip, r8
    1a30:	090d1400 	stmdbeq	sp, {sl, ip}
    1a34:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1a38:	00003701 	andeq	r3, r0, r1, lsl #14
    1a3c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1a40:	0aa31000 	beq	fe8c5a48 <Pedro+0xde8c2358>
    1a44:	14010000 	strne	r0, [r1], #-0
    1a48:	0016dc01 	andseq	sp, r6, r1, lsl #24
    1a4c:	00002420 	andeq	r2, r0, r0, lsr #8
    1a50:	2e9c0100 	fmlcse	f0, f4, f0
    1a54:	14000004 	strne	r0, [r0], #-4
    1a58:	000008a9 	andeq	r0, r0, r9, lsr #17
    1a5c:	37011401 	strcc	r1, [r1, -r1, lsl #8]
    1a60:	02000000 	andeq	r0, r0, #0
    1a64:	10007791 	mulne	r0, r1, r7
    1a68:	00000a39 	andeq	r0, r0, r9, lsr sl
    1a6c:	ac010d01 	stcge	13, cr0, [r1], {1}
    1a70:	30200016 	eorcc	r0, r0, r6, lsl r0
    1a74:	01000000 	mrseq	r0, (UNDEF: 0)
    1a78:	0004609c 	muleq	r4, ip, r0
    1a7c:	00631100 	rsbeq	r1, r3, r0, lsl #2
    1a80:	37010d01 	strcc	r0, [r1, -r1, lsl #26]
    1a84:	02000000 	andeq	r0, r0, #0
    1a88:	ff1c7791 			; <UNDEFINED> instruction: 0xff1c7791
    1a8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1a90:	00680110 	rsbeq	r0, r8, r0, lsl r1
    1a94:	00180000 	andseq	r0, r8, r0
    1a98:	08b11d00 	ldmeq	r1!, {r8, sl, fp, ip}
    1a9c:	07010000 	streq	r0, [r1, -r0]
    1aa0:	00166401 	andseq	r6, r6, r1, lsl #8
    1aa4:	00004820 	andeq	r4, r0, r0, lsr #16
    1aa8:	919c0100 	orrsls	r0, ip, r0, lsl #2
    1aac:	11000004 	tstne	r0, r4
    1ab0:	07010078 	smlsdxeq	r1, r8, r0, r0
    1ab4:	00003701 	andeq	r3, r0, r1, lsl #14
    1ab8:	6f910200 	svcvs	0x00910200
    1abc:	01006312 	tsteq	r0, r2, lsl r3
    1ac0:	00370108 	eorseq	r0, r7, r8, lsl #2
    1ac4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ac8:	6a1d0077 	bvs	741cac <startup-0x1f8be354>
    1acc:	01000008 	tsteq	r0, r8
    1ad0:	16200101 	strtne	r0, [r0], -r1, lsl #2
    1ad4:	00442000 	subeq	r2, r4, r0
    1ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1adc:	000004c2 	andeq	r0, r0, r2, asr #9
    1ae0:	01007811 	tsteq	r0, r1, lsl r8
    1ae4:	00370101 	eorseq	r0, r7, r1, lsl #2
    1ae8:	91020000 	mrsls	r0, (UNDEF: 2)
    1aec:	0063126f 	rsbeq	r1, r3, pc, ror #4
    1af0:	37010201 	strcc	r0, [r1, -r1, lsl #4]
    1af4:	02000000 	andeq	r0, r0, #0
    1af8:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
    1afc:	0000087d 	andeq	r0, r0, sp, ror r8
    1b00:	15a8f201 	strne	pc, [r8, #513]!	; 0x201
    1b04:	00782000 	rsbseq	r2, r8, r0
    1b08:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b0c:	0000051e 	andeq	r0, r0, lr, lsl r5
    1b10:	0015ae1f 	andseq	sl, r5, pc, lsl lr
    1b14:	00004420 	andeq	r4, r0, r0, lsr #8
    1b18:	00050700 	andeq	r0, r5, r0, lsl #14
    1b1c:	00692000 	rsbeq	r2, r9, r0
    1b20:	0068f301 	rsbeq	pc, r8, r1, lsl #6
    1b24:	91020000 	mrsls	r0, (UNDEF: 2)
    1b28:	15b41574 	ldrne	r1, [r4, #1396]!	; 0x574
    1b2c:	00322000 	eorseq	r2, r2, r0
    1b30:	6a200000 	bvs	801b38 <startup-0x1f7fe4c8>
    1b34:	68f40100 	ldmvs	r4!, {r8}^
    1b38:	02000000 	andeq	r0, r0, #0
    1b3c:	00007091 	muleq	r0, r1, r0
    1b40:	0015f215 	andseq	pc, r5, r5, lsl r2	; <UNPREDICTABLE>
    1b44:	00002220 	andeq	r2, r0, r0, lsr #4
    1b48:	006a2000 	rsbeq	r2, sl, r0
    1b4c:	0068f801 	rsbeq	pc, r8, r1, lsl #16
    1b50:	91020000 	mrsls	r0, (UNDEF: 2)
    1b54:	1e00006c 	cdpne	0, 0, cr0, cr0, cr12, {3}
    1b58:	00000986 	andeq	r0, r0, r6, lsl #19
    1b5c:	1534e801 	ldrne	lr, [r4, #-2049]!	; 0xfffff7ff
    1b60:	00742000 	rsbseq	r2, r4, r0
    1b64:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b68:	0000057a 	andeq	r0, r0, sl, ror r5
    1b6c:	00153a1f 	andseq	r3, r5, pc, lsl sl
    1b70:	00004420 	andeq	r4, r0, r0, lsr #8
    1b74:	00056300 	andeq	r6, r5, r0, lsl #6
    1b78:	00692000 	rsbeq	r2, r9, r0
    1b7c:	0068e901 	rsbeq	lr, r8, r1, lsl #18
    1b80:	91020000 	mrsls	r0, (UNDEF: 2)
    1b84:	15401574 	strbne	r1, [r0, #-1396]	; 0xfffffa8c
    1b88:	00322000 	eorseq	r2, r2, r0
    1b8c:	6a200000 	bvs	801b94 <startup-0x1f7fe46c>
    1b90:	68ea0100 	stmiavs	sl!, {r8}^
    1b94:	02000000 	andeq	r0, r0, #0
    1b98:	00007091 	muleq	r0, r1, r0
    1b9c:	00157e15 	andseq	r7, r5, r5, lsl lr
    1ba0:	00001c20 	andeq	r1, r0, r0, lsr #24
    1ba4:	006a2000 	rsbeq	r2, sl, r0
    1ba8:	0068ee01 	rsbeq	lr, r8, r1, lsl #28
    1bac:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb0:	2100006c 	tstcs	r0, ip, rrx
    1bb4:	00000887 	andeq	r0, r0, r7, lsl #17
    1bb8:	1450b001 	ldrbne	fp, [r0], #-1
    1bbc:	00e42000 	rsceq	r2, r4, r0
    1bc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bc4:	000005da 	ldrdeq	r0, [r0], -sl
    1bc8:	01006920 	tsteq	r0, r0, lsr #18
    1bcc:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    1bd0:	6f910200 	svcvs	0x00910200
    1bd4:	01006a20 	tsteq	r0, r0, lsr #20
    1bd8:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    1bdc:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    1be0:	0009d322 	andeq	sp, r9, r2, lsr #6
    1be4:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    1be8:	02000000 	andeq	r0, r0, #0
    1bec:	63206391 			; <UNDEFINED> instruction: 0x63206391
    1bf0:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    1bf4:	02000000 	andeq	r0, r0, #0
    1bf8:	6b206d91 	blvs	81d244 <startup-0x1f7e2dbc>
    1bfc:	6fb20100 	svcvs	0x00b20100
    1c00:	02000000 	andeq	r0, r0, #0
    1c04:	6d206891 	stcvs	8, cr6, [r0, #-580]!	; 0xfffffdbc
    1c08:	6fb30100 	svcvs	0x00b30100
    1c0c:	02000000 	andeq	r0, r0, #0
    1c10:	23006491 	movwcs	r6, #1169	; 0x491
    1c14:	00000962 	andeq	r0, r0, r2, ror #18
    1c18:	1420ac01 	strtne	sl, [r0], #-3073	; 0xfffff3ff
    1c1c:	00302000 	eorseq	r2, r0, r0
    1c20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c24:	00000618 	andeq	r0, r0, r8, lsl r6
    1c28:	00044024 	andeq	r4, r4, r4, lsr #32
    1c2c:	68ac0100 	stmiavs	ip!, {r8}
    1c30:	02000000 	andeq	r0, r0, #0
    1c34:	55247491 	strpl	r7, [r4, #-1169]!	; 0xfffffb6f
    1c38:	01000005 	tsteq	r0, r5
    1c3c:	000068ac 	andeq	r6, r0, ip, lsr #17
    1c40:	70910200 	addsvc	r0, r1, r0, lsl #4
    1c44:	01006325 	tsteq	r0, r5, lsr #6
    1c48:	0000aeac 	andeq	sl, r0, ip, lsr #29
    1c4c:	6f910200 	svcvs	0x00910200
    1c50:	0a782300 	beq	1e0a858 <startup-0x1e1f57a8>
    1c54:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1c58:	200013f4 	strdcs	r1, [r0], -r4
    1c5c:	0000002c 	andeq	r0, r0, ip, lsr #32
    1c60:	06569c01 	ldrbeq	r9, [r6], -r1, lsl #24
    1c64:	40240000 	eormi	r0, r4, r0
    1c68:	01000004 	tsteq	r0, r4
    1c6c:	000068a9 	andeq	r6, r0, r9, lsr #17
    1c70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1c74:	00055524 	andeq	r5, r5, r4, lsr #10
    1c78:	68a90100 	stmiavs	r9!, {r8}
    1c7c:	02000000 	andeq	r0, r0, #0
    1c80:	63257091 			; <UNDEFINED> instruction: 0x63257091
    1c84:	aea90100 	fdvgee	f0, f1, f0
    1c88:	02000000 	andeq	r0, r0, #0
    1c8c:	23006f91 	movwcs	r6, #3985	; 0xf91
    1c90:	0000085d 	andeq	r0, r0, sp, asr r8
    1c94:	13409d01 	movtne	r9, #3329	; 0xd01
    1c98:	00b42000 	adcseq	r2, r4, r0
    1c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ca0:	000006a0 	andeq	r0, r0, r0, lsr #13
    1ca4:	01007825 	tsteq	r0, r5, lsr #16
    1ca8:	0000689d 	muleq	r0, sp, r8
    1cac:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1cb0:	01007925 	tsteq	r0, r5, lsr #18
    1cb4:	0000689d 	muleq	r0, sp, r8
    1cb8:	68910200 	ldmvs	r1, {r9}
    1cbc:	74657325 	strbtvc	r7, [r5], #-805	; 0xfffffcdb
    1cc0:	689d0100 	ldmvs	sp, {r8}
    1cc4:	02000000 	andeq	r0, r0, #0
    1cc8:	a2226491 	eorge	r6, r2, #-1862270976	; 0x91000000
    1ccc:	01000002 	tsteq	r0, r2
    1cd0:	0000769f 	muleq	r0, pc, r6	; <UNPREDICTABLE>
    1cd4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1cd8:	09751e00 	ldmdbeq	r5!, {r9, sl, fp, ip}^
    1cdc:	96010000 	strls	r0, [r1], -r0
    1ce0:	200012f8 	strdcs	r1, [r0], -r8
    1ce4:	00000048 	andeq	r0, r0, r8, asr #32
    1ce8:	06e29c01 	strbteq	r9, [r2], r1, lsl #24
    1cec:	fe150000 	cdp2	0, 1, cr0, cr5, cr0, {0}
    1cf0:	34200012 	strtcc	r0, [r0], #-18	; 0xffffffee
    1cf4:	20000000 	andcs	r0, r0, r0
    1cf8:	97010069 	strls	r0, [r1, -r9, rrx]
    1cfc:	00000068 	andeq	r0, r0, r8, rrx
    1d00:	15749102 	ldrbne	r9, [r4, #-258]!	; 0xfffffefe
    1d04:	20001304 	andcs	r1, r0, r4, lsl #6
    1d08:	00000022 	andeq	r0, r0, r2, lsr #32
    1d0c:	01006a20 	tsteq	r0, r0, lsr #20
    1d10:	00006898 	muleq	r0, r8, r8
    1d14:	70910200 	addsvc	r0, r1, r0, lsl #4
    1d18:	21000000 	mrscs	r0, (UNDEF: 0)
    1d1c:	000008c6 	andeq	r0, r0, r6, asr #17
    1d20:	12ba8d01 	adcsne	r8, sl, #1, 26	; 0x40
    1d24:	003e2000 	eorseq	r2, lr, r0
    1d28:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d2c:	00000724 	andeq	r0, r0, r4, lsr #14
    1d30:	0012c015 	andseq	ip, r2, r5, lsl r0
    1d34:	00003020 	andeq	r3, r0, r0, lsr #32
    1d38:	00692000 	rsbeq	r2, r9, r0
    1d3c:	00688e01 	rsbeq	r8, r8, r1, lsl #28
    1d40:	91020000 	mrsls	r0, (UNDEF: 2)
    1d44:	12c61574 	sbcne	r1, r6, #116, 10	; 0x1d000000
    1d48:	001e2000 	andseq	r2, lr, r0
    1d4c:	6a200000 	bvs	801d54 <startup-0x1f7fe2ac>
    1d50:	688f0100 	stmvs	pc, {r8}	; <UNPREDICTABLE>
    1d54:	02000000 	andeq	r0, r0, #0
    1d58:	00007091 	muleq	r0, r1, r0
    1d5c:	091c2100 	ldmdbeq	ip, {r8, sp}
    1d60:	86010000 	strhi	r0, [r1], -r0
    1d64:	20001274 	andcs	r1, r0, r4, ror r2
    1d68:	00000046 	andeq	r0, r0, r6, asr #32
    1d6c:	07569c01 	ldrbeq	r9, [r6, -r1, lsl #24]
    1d70:	0d240000 	stceq	0, cr0, [r4, #-0]
    1d74:	01000009 	tsteq	r0, r9
    1d78:	00007686 	andeq	r7, r0, r6, lsl #13
    1d7c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d80:	0009d324 	andeq	sp, r9, r4, lsr #6
    1d84:	76860100 	strvc	r0, [r6], r0, lsl #2
    1d88:	02000000 	andeq	r0, r0, #0
    1d8c:	21007691 			; <UNDEFINED> instruction: 0x21007691
    1d90:	0000089b 	muleq	r0, fp, r8
    1d94:	12348001 	eorsne	r8, r4, #1
    1d98:	00402000 	subeq	r2, r0, r0
    1d9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1da0:	00000788 	andeq	r0, r0, r8, lsl #15
    1da4:	0008a924 	andeq	sl, r8, r4, lsr #18
    1da8:	76800100 	strvc	r0, [r0], r0, lsl #2
    1dac:	02000000 	andeq	r0, r0, #0
    1db0:	d3247791 			; <UNDEFINED> instruction: 0xd3247791
    1db4:	01000009 	tsteq	r0, r9
    1db8:	00007680 	andeq	r7, r0, r0, lsl #13
    1dbc:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    1dc0:	09542100 	ldmdbeq	r4, {r8, sp}^
    1dc4:	6b010000 	blvs	41dcc <startup-0x1ffbe234>
    1dc8:	200011be 			; <UNDEFINED> instruction: 0x200011be
    1dcc:	00000076 	andeq	r0, r0, r6, ror r0
    1dd0:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    1dd4:	79240000 	stmdbvc	r4!, {}	; <UNPREDICTABLE>
    1dd8:	01000007 	tsteq	r0, r7
    1ddc:	0000766b 	andeq	r7, r0, fp, ror #12
    1de0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1de4:	0009d324 	andeq	sp, r9, r4, lsr #6
    1de8:	766b0100 	strbtvc	r0, [fp], -r0, lsl #2
    1dec:	02000000 	andeq	r0, r0, #0
    1df0:	1d197691 	ldcne	6, cr7, [r9, #-580]	; 0xfffffdbc
    1df4:	01000000 	mrseq	r0, (UNDEF: 0)
    1df8:	00006842 	andeq	r6, r0, r2, asr #16
    1dfc:	00001800 	andeq	r1, r0, r0, lsl #16
    1e00:	00090026 	andeq	r0, r9, r6, lsr #32
    1e04:	76660100 	strbtvc	r0, [r6], -r0, lsl #2
    1e08:	94000000 	strls	r0, [r0], #-0
    1e0c:	2a200011 	bcs	801e58 <startup-0x1f7fe1a8>
    1e10:	01000000 	mrseq	r0, (UNDEF: 0)
    1e14:	0007ef9c 	muleq	r7, ip, pc	; <UNPREDICTABLE>
    1e18:	09d32400 	ldmibeq	r3, {sl, sp}^
    1e1c:	66010000 	strvs	r0, [r1], -r0
    1e20:	00000076 	andeq	r0, r0, r6, ror r0
    1e24:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1e28:	0008e826 	andeq	lr, r8, r6, lsr #16
    1e2c:	764e0100 	strbvc	r0, [lr], -r0, lsl #2
    1e30:	04000000 	streq	r0, [r0], #-0
    1e34:	90200011 	eorls	r0, r0, r1, lsl r0
    1e38:	01000000 	mrseq	r0, (UNDEF: 0)
    1e3c:	0008309c 	muleq	r8, ip, r0
    1e40:	09d32400 	ldmibeq	r3, {sl, sp}^
    1e44:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1e48:	00000076 	andeq	r0, r0, r6, ror r0
    1e4c:	206f9102 	rsbcs	r9, pc, r2, lsl #2
    1e50:	4f010063 	svcmi	0x00010063
    1e54:	00000076 	andeq	r0, r0, r6, ror r0
    1e58:	19779102 	ldmdbne	r7!, {r1, r8, ip, pc}^
    1e5c:	0000001d 	andeq	r0, r0, sp, lsl r0
    1e60:	00684201 	rsbeq	r4, r8, r1, lsl #4
    1e64:	00180000 	andseq	r0, r8, r0
    1e68:	09ef2700 	stmibeq	pc!, {r8, r9, sl, sp}^	; <UNPREDICTABLE>
    1e6c:	3c010000 	stccc	0, cr0, [r1], {-0}
    1e70:	2000109a 	mulcs	r0, sl, r0
    1e74:	0000006a 	andeq	r0, r0, sl, rrx
    1e78:	085f9c01 	ldmdaeq	pc, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    1e7c:	63200000 	nopvs	{0}	; <UNPREDICTABLE>
    1e80:	763d0100 	ldrtvc	r0, [sp], -r0, lsl #2
    1e84:	02000000 	andeq	r0, r0, #0
    1e88:	1d197791 	ldcne	7, cr7, [r9, #-580]	; 0xfffffdbc
    1e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    1e90:	00006842 	andeq	r6, r0, r2, asr #16
    1e94:	00001800 	andeq	r1, r0, r0, lsl #16
    1e98:	000a1421 	andeq	r1, sl, r1, lsr #8
    1e9c:	362c0100 	strtcc	r0, [ip], -r0, lsl #2
    1ea0:	64200010 	strtvs	r0, [r0], #-16
    1ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ea8:	0008939c 	muleq	r8, ip, r3
    1eac:	00291700 	eoreq	r1, r9, r0, lsl #14
    1eb0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1eb4:	00000068 	andeq	r0, r0, r8, rrx
    1eb8:	00000885 	andeq	r0, r0, r5, lsl #17
    1ebc:	f3190018 	vqadd.u16	d0, d9, d8
    1ec0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ec4:	00006830 	andeq	r6, r0, r0, lsr r8
    1ec8:	00001800 	andeq	r1, r0, r0, lsl #16
    1ecc:	000a0227 	andeq	r0, sl, r7, lsr #4
    1ed0:	dc190100 	ldfles	f0, [r9], {-0}
    1ed4:	5a20000f 	bpl	801f18 <startup-0x1f7fe0e8>
    1ed8:	01000000 	mrseq	r0, (UNDEF: 0)
    1edc:	0008b79c 	muleq	r8, ip, r7
    1ee0:	09d32400 	ldmibeq	r3, {sl, sp}^
    1ee4:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1ee8:	00000076 	andeq	r0, r0, r6, ror r0
    1eec:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1ef0:	00093d28 	andeq	r3, r9, r8, lsr #26
    1ef4:	8c110100 	ldfhis	f0, [r1], {-0}
    1ef8:	5020000f 	eorpl	r0, r0, pc
    1efc:	01000000 	mrseq	r0, (UNDEF: 0)
    1f00:	0008e59c 	muleq	r8, ip, r5
    1f04:	00782500 	rsbseq	r2, r8, r0, lsl #10
    1f08:	00371101 	eorseq	r1, r7, r1, lsl #2
    1f0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1f10:	0063206f 	rsbeq	r2, r3, pc, rrx
    1f14:	00ae1201 	adceq	r1, lr, r1, lsl #4
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	a2290077 	eorge	r0, r9, #119	; 0x77
    1f20:	01000009 	tsteq	r0, r9
    1f24:	000f4809 	andeq	r4, pc, r9, lsl #16
    1f28:	00004420 	andeq	r4, r0, r0, lsr #8
    1f2c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1f30:	09010078 	stmdbeq	r1, {r3, r4, r5, r6}
    1f34:	00000037 	andeq	r0, r0, r7, lsr r0
    1f38:	206f9102 	rsbcs	r9, pc, r2, lsl #2
    1f3c:	0a010063 	beq	420d0 <startup-0x1ffbdf30>
    1f40:	000000ae 	andeq	r0, r0, lr, lsr #1
    1f44:	00779102 	rsbseq	r9, r7, r2, lsl #2
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00050300 	andeq	r0, r5, r0, lsl #6
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	0b002404 	bleq	9054 <startup-0x1fff6fac>
  40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  44:	05000008 	streq	r0, [r0, #-8]
  48:	0111010b 	tsteq	r1, fp, lsl #2
  4c:	00000612 	andeq	r0, r0, r2, lsl r6
  50:	03003406 	movweq	r3, #1030	; 0x406
  54:	3b0b3a08 	blcc	2ce87c <startup-0x1fd31784>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	07000018 	smladeq	r0, r8, r0, r0
  60:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	01110b3b 	tsteq	r1, fp, lsr fp
  6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  70:	00194297 	mulseq	r9, r7, r2
  74:	11010000 	mrsne	r0, (UNDEF: 1)
  78:	130e2501 	movwne	r2, #58625	; 0xe501
  7c:	1b0e030b 	blne	380cb0 <startup-0x1fc7f350>
  80:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  84:	00171006 	andseq	r1, r7, r6
  88:	01130200 	tsteq	r3, r0, lsl #4
  8c:	0b0b0e03 	bleq	2c38a0 <startup-0x1fd3c760>
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	03000d03 	movweq	r0, #3331	; 0xd03
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  a4:	0400000b 	streq	r0, [r0], #-11
  a8:	0b0b0024 	bleq	2c0140 <startup-0x1fd3fec0>
  ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  b0:	24050000 	strcs	r0, [r5], #-0
  b4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b8:	000e030b 	andeq	r0, lr, fp, lsl #6
  bc:	000f0600 	andeq	r0, pc, r0, lsl #12
  c0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  c4:	15070000 	strne	r0, [r7, #-0]
  c8:	01192701 	tsteq	r9, r1, lsl #14
  cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
  d0:	13490005 	movtne	r0, #36869	; 0x9005
  d4:	16090000 	strne	r0, [r9], -r0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0a000013 	beq	134 <startup-0x1ffffecc>
  e4:	13490035 	movtne	r0, #36917	; 0x9035
  e8:	170b0000 	strne	r0, [fp, -r0]
  ec:	3a0b0b01 	bcc	2c2cf8 <startup-0x1fd3d308>
  f0:	010b3b0b 	tsteq	fp, fp, lsl #22
  f4:	0c000013 	stceq	0, cr0, [r0], {19}
  f8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  fc:	0b3b0b3a 	bleq	ec2dec <startup-0x1f13d214>
 100:	00001349 	andeq	r1, r0, r9, asr #6
 104:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
 108:	00130113 	andseq	r0, r3, r3, lsl r1
 10c:	00210e00 	eoreq	r0, r1, r0, lsl #28
 110:	0b2f1349 	bleq	bc4e3c <startup-0x1f43b1c4>
 114:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; 11c <startup-0x1ffffee4>
 118:	38134900 	ldmdacc	r3, {r8, fp, lr}
 11c:	1000000b 	andne	r0, r0, fp
 120:	08030034 	stmdaeq	r3, {r2, r4, r5}
 124:	0b3b0b3a 	bleq	ec2e14 <startup-0x1f13d1ec>
 128:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 12c:	00001802 	andeq	r1, r0, r2, lsl #16
 130:	03003411 	movweq	r3, #1041	; 0x411
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	3f13490b 	svccc	0x0013490b
 13c:	00193c19 	andseq	r3, r9, r9, lsl ip
 140:	00341200 	eorseq	r1, r4, r0, lsl #4
 144:	0b3a0e03 	bleq	e83958 <startup-0x1f17c6a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003413 	movweq	r3, #1043	; 0x413
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	3f13490b 	svccc	0x0013490b
 15c:	00180219 	andseq	r0, r8, r9, lsl r2
 160:	002e1400 	eoreq	r1, lr, r0, lsl #8
 164:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 168:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 16c:	01111349 	tsteq	r1, r9, asr #6
 170:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 174:	00194296 	mulseq	r9, r6, r2
 178:	002e1500 	eoreq	r1, lr, r0, lsl #10
 17c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 180:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 184:	01111349 	tsteq	r1, r9, asr #6
 188:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 18c:	00194297 	mulseq	r9, r7, r2
 190:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 194:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 198:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 19c:	13491927 	movtne	r1, #39207	; 0x9927
 1a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1a8:	00130119 	andseq	r0, r3, r9, lsl r1
 1ac:	00051700 	andeq	r1, r5, r0, lsl #14
 1b0:	0b3a0e03 	bleq	e839c4 <startup-0x1f17c63c>
 1b4:	1349053b 	movtne	r0, #38203	; 0x953b
 1b8:	00001802 	andeq	r1, r0, r2, lsl #16
 1bc:	03003418 	movweq	r3, #1048	; 0x418
 1c0:	3b0b3a08 	blcc	2ce9e8 <startup-0x1fd31618>
 1c4:	02134905 	andseq	r4, r3, #81920	; 0x14000
 1c8:	19000018 	stmdbne	r0, {r3, r4}
 1cc:	0111010b 	tsteq	r1, fp, lsl #2
 1d0:	00000612 	andeq	r0, r0, r2, lsl r6
 1d4:	0300341a 	movweq	r3, #1050	; 0x41a
 1d8:	3b0b3a0e 	blcc	2cea18 <startup-0x1fd315e8>
 1dc:	02134905 	andseq	r4, r3, #81920	; 0x14000
 1e0:	1b000018 	blne	248 <startup-0x1ffffdb8>
 1e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1e8:	0b3a0e03 	bleq	e839fc <startup-0x1f17c604>
 1ec:	1349053b 	movtne	r0, #38203	; 0x953b
 1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1f8:	00130119 	andseq	r0, r3, r9, lsl r1
 1fc:	012e1c00 			; <UNDEFINED> instruction: 0x012e1c00
 200:	0803193f 	stmdaeq	r3, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 204:	0b3b0b3a 	bleq	ec2ef4 <startup-0x1f13d10c>
 208:	13491927 	movtne	r1, #39207	; 0x9927
 20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 214:	00130119 	andseq	r0, r3, r9, lsl r1
 218:	00051d00 	andeq	r1, r5, r0, lsl #26
 21c:	0b3a0803 	bleq	e82230 <startup-0x1f17ddd0>
 220:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 224:	00001802 	andeq	r1, r0, r2, lsl #16
 228:	3f012e1e 	svccc	0x00012e1e
 22c:	3a0e0319 	bcc	380e98 <startup-0x1fc7f168>
 230:	110b3b0b 	tstne	fp, fp, lsl #22
 234:	40061201 	andmi	r1, r6, r1, lsl #4
 238:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 23c:	00001301 	andeq	r1, r0, r1, lsl #6
 240:	0300341f 	movweq	r3, #1055	; 0x41f
 244:	3b0b3a08 	blcc	2cea6c <startup-0x1fd31594>
 248:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 24c:	20000018 	andcs	r0, r0, r8, lsl r0
 250:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 254:	0b3a0803 	bleq	e82268 <startup-0x1f17dd98>
 258:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 25c:	0000193c 	andeq	r1, r0, ip, lsr r9
 260:	00001821 	andeq	r1, r0, r1, lsr #16
 264:	010b2200 	mrseq	r2, R11_fiq
 268:	06120111 			; <UNDEFINED> instruction: 0x06120111
 26c:	00001301 	andeq	r1, r0, r1, lsl #6
 270:	3f012e23 	svccc	0x00012e23
 274:	3a0e0319 	bcc	380ee0 <startup-0x1fc7f120>
 278:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 27c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 280:	96184006 	ldrls	r4, [r8], -r6
 284:	13011942 	movwne	r1, #6466	; 0x1942
 288:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 28c:	03193f00 	tsteq	r9, #0, 30
 290:	3b0b3a0e 	blcc	2cead0 <startup-0x1fd31530>
 294:	1113490b 	tstne	r3, fp, lsl #18
 298:	40061201 	andmi	r1, r6, r1, lsl #4
 29c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2a0:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 2a4:	03193f00 	tsteq	r9, #0, 30
 2a8:	3b0b3a0e 	blcc	2ceae8 <startup-0x1fd31518>
 2ac:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 2b0:	96184006 	ldrls	r4, [r8], -r6
 2b4:	00001942 	andeq	r1, r0, r2, asr #18
 2b8:	3f012e26 	svccc	0x00012e26
 2bc:	3a0e0319 	bcc	380f28 <startup-0x1fc7f0d8>
 2c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	01193c13 	tsteq	r9, r3, lsl ip
 2c8:	27000013 	smladcs	r0, r3, r0, r0
 2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2d0:	0b3a0e03 	bleq	e83ae4 <startup-0x1f17c51c>
 2d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2d8:	0000193c 	andeq	r1, r0, ip, lsr r9
 2dc:	01110100 	tsteq	r1, r0, lsl #2
 2e0:	0b130e25 	bleq	4c3b7c <startup-0x1fb3c484>
 2e4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 2e8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2ec:	00001710 	andeq	r1, r0, r0, lsl r7
 2f0:	0b002402 	bleq	9300 <startup-0x1fff6d00>
 2f4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2f8:	0300000e 	movweq	r0, #14
 2fc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	00001349 	andeq	r1, r0, r9, asr #6
 308:	0b002404 	bleq	9320 <startup-0x1fff6ce0>
 30c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 310:	05000008 	streq	r0, [r0, #-8]
 314:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 318:	0b3a0e03 	bleq	e83b2c <startup-0x1f17c4d4>
 31c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 320:	01111349 	tsteq	r1, r9, asr #6
 324:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 328:	01194297 			; <UNDEFINED> instruction: 0x01194297
 32c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 330:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 334:	0b3b0b3a 	bleq	ec3024 <startup-0x1f13cfdc>
 338:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 33c:	34070000 	strcc	r0, [r7], #-0
 340:	3a080300 	bcc	200f48 <startup-0x1fdff0b8>
 344:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 348:	00180213 	andseq	r0, r8, r3, lsl r2
 34c:	010b0800 	tsteq	fp, r0, lsl #16
 350:	06120111 			; <UNDEFINED> instruction: 0x06120111
 354:	0f090000 	svceq	0x00090000
 358:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 35c:	0a000013 	beq	3b0 <startup-0x1ffffc50>
 360:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 364:	0b3a0e03 	bleq	e83b78 <startup-0x1f17c488>
 368:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 36c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 370:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 374:	00000019 	andeq	r0, r0, r9, lsl r0
 378:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 37c:	030b130e 	movweq	r1, #45838	; 0xb30e
 380:	110e1b0e 	tstne	lr, lr, lsl #22
 384:	10061201 	andne	r1, r6, r1, lsl #4
 388:	02000017 	andeq	r0, r0, #23
 38c:	0b0b0113 	bleq	2c07e0 <startup-0x1fd3f820>
 390:	0b3b0b3a 	bleq	ec3080 <startup-0x1f13cf80>
 394:	00001301 	andeq	r1, r0, r1, lsl #6
 398:	03000d03 	movweq	r0, #3331	; 0xd03
 39c:	3b0b3a0e 	blcc	2cebdc <startup-0x1fd31424>
 3a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3a4:	0400000b 	streq	r0, [r0], #-11
 3a8:	0b0b0024 	bleq	2c0440 <startup-0x1fd3fbc0>
 3ac:	0e030b3e 	vmoveq.16	d3[0], r0
 3b0:	17050000 	strne	r0, [r5, -r0]
 3b4:	3a0b0b01 	bcc	2c2fc0 <startup-0x1fd3d040>
 3b8:	010b3b0b 	tsteq	fp, fp, lsl #22
 3bc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 3c0:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 3c4:	0b3b0b3a 	bleq	ec30b4 <startup-0x1f13cf4c>
 3c8:	00001349 	andeq	r1, r0, r9, asr #6
 3cc:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 3d0:	08000013 	stmdaeq	r0, {r0, r1, r4}
 3d4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 3d8:	0b3a0b0b 	bleq	e8300c <startup-0x1f17cff4>
 3dc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3e0:	0d090000 	stceq	0, cr0, [r9, #-0]
 3e4:	38134900 	ldmdacc	r3, {r8, fp, lr}
 3e8:	0a00000b 	beq	41c <startup-0x1ffffbe4>
 3ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3f0:	0b3b0b3a 	bleq	ec30e0 <startup-0x1f13cf20>
 3f4:	00001349 	andeq	r1, r0, r9, asr #6
 3f8:	3f012e0b 	svccc	0x00012e0b
 3fc:	3a0e0319 	bcc	381068 <startup-0x1fc7ef98>
 400:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 404:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 408:	96184006 	ldrls	r4, [r8], -r6
 40c:	13011942 	movwne	r1, #6466	; 0x1942
 410:	340c0000 	strcc	r0, [ip], #-0
 414:	3a080300 	bcc	20101c <startup-0x1fdfefe4>
 418:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 41c:	00180213 	andseq	r0, r8, r3, lsl r2
 420:	01010d00 	tsteq	r1, r0, lsl #26
 424:	13011349 	movwne	r1, #4937	; 0x1349
 428:	210e0000 	mrscs	r0, (UNDEF: 14)
 42c:	2f134900 	svccs	0x00134900
 430:	0f00000b 	svceq	0x0000000b
 434:	0b0b0024 	bleq	2c04cc <startup-0x1fd3fb34>
 438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 43c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 440:	03193f00 	tsteq	r9, #0, 30
 444:	3b0b3a0e 	blcc	2cec84 <startup-0x1fd3137c>
 448:	1113490b 	tstne	r3, fp, lsl #18
 44c:	40061201 	andmi	r1, r6, r1, lsl #4
 450:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 454:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 458:	03193f00 	tsteq	r9, #0, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	1113490b 	tstne	r3, fp, lsl #18
 464:	40061201 	andmi	r1, r6, r1, lsl #4
 468:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 46c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 470:	03193f01 	tsteq	r9, #1, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	1119270b 	tstne	r9, fp, lsl #14
 47c:	40061201 	andmi	r1, r6, r1, lsl #4
 480:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 484:	05130000 	ldreq	r0, [r3, #-0]
 488:	3a080300 	bcc	201090 <startup-0x1fdfef70>
 48c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 490:	00180213 	andseq	r0, r8, r3, lsl r2
 494:	11010000 	mrsne	r0, (UNDEF: 1)
 498:	130e2501 	movwne	r2, #58625	; 0xe501
 49c:	1b0e030b 	blne	3810d0 <startup-0x1fc7ef30>
 4a0:	1117550e 	tstne	r7, lr, lsl #10
 4a4:	00171001 	andseq	r1, r7, r1
 4a8:	00240200 	eoreq	r0, r4, r0, lsl #4
 4ac:	0b3e0b0b 	bleq	f830e0 <startup-0x1f07cf20>
 4b0:	00000e03 	andeq	r0, r0, r3, lsl #28
 4b4:	03001603 	movweq	r1, #1539	; 0x603
 4b8:	3b0b3a0e 	blcc	2cecf8 <startup-0x1fd31308>
 4bc:	0013490b 	andseq	r4, r3, fp, lsl #18
 4c0:	00240400 	eoreq	r0, r4, r0, lsl #8
 4c4:	0b3e0b0b 	bleq	f830f8 <startup-0x1f07cf08>
 4c8:	00000803 	andeq	r0, r0, r3, lsl #16
 4cc:	0b011705 	bleq	460e8 <startup-0x1ffb9f18>
 4d0:	3b0b3a0b 	blcc	2ced04 <startup-0x1fd312fc>
 4d4:	0013010b 	andseq	r0, r3, fp, lsl #2
 4d8:	000d0600 	andeq	r0, sp, r0, lsl #12
 4dc:	0b3a0803 	bleq	e824f0 <startup-0x1f17db10>
 4e0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4e4:	01070000 	mrseq	r0, (UNDEF: 7)
 4e8:	01134901 	tsteq	r3, r1, lsl #18
 4ec:	08000013 	stmdaeq	r0, {r0, r1, r4}
 4f0:	13490021 	movtne	r0, #36897	; 0x9021
 4f4:	00000b2f 	andeq	r0, r0, pc, lsr #22
 4f8:	49002609 	stmdbmi	r0, {r0, r3, r9, sl, sp}
 4fc:	0a000013 	beq	550 <startup-0x1ffffab0>
 500:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 504:	0b3a0b0b 	bleq	e83138 <startup-0x1f17cec8>
 508:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 50c:	0d0b0000 	stceq	0, cr0, [fp, #-0]
 510:	38134900 	ldmdacc	r3, {r8, fp, lr}
 514:	0c00000b 	stceq	0, cr0, [r0], {11}
 518:	08030034 	stmdaeq	r3, {r2, r4, r5}
 51c:	0b3b0b3a 	bleq	ec320c <startup-0x1f13cdf4>
 520:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 524:	00001802 	andeq	r1, r0, r2, lsl #16
 528:	0b01130d 	bleq	45164 <startup-0x1ffbae9c>
 52c:	3b0b3a0b 	blcc	2ced60 <startup-0x1fd312a0>
 530:	0013010b 	andseq	r0, r3, fp, lsl #2
 534:	000d0e00 	andeq	r0, sp, r0, lsl #28
 538:	0b3a0e03 	bleq	e83d4c <startup-0x1f17c2b4>
 53c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 540:	00000b38 	andeq	r0, r0, r8, lsr fp
 544:	49000d0f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl, fp}
 548:	10000013 	andne	r0, r0, r3, lsl r0
 54c:	0b0b000f 	bleq	2c0590 <startup-0x1fd3fa70>
 550:	00001349 	andeq	r1, r0, r9, asr #6
 554:	03001311 	movweq	r1, #785	; 0x311
 558:	00193c0e 	andseq	r3, r9, lr, lsl #24
 55c:	00161200 	andseq	r1, r6, r0, lsl #4
 560:	0b3a0e03 	bleq	e83d74 <startup-0x1f17c28c>
 564:	1349053b 	movtne	r0, #38203	; 0x953b
 568:	0d130000 	ldceq	0, cr0, [r3, #-0]
 56c:	3a0e0300 	bcc	381174 <startup-0x1fc7ee8c>
 570:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 574:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 578:	0b0b000f 	bleq	2c05bc <startup-0x1fd3fa44>
 57c:	0d150000 	ldceq	0, cr0, [r5, #-0]
 580:	3a080300 	bcc	201188 <startup-0x1fdfee78>
 584:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 588:	000b3813 	andeq	r3, fp, r3, lsl r8
 58c:	01131600 	tsteq	r3, r0, lsl #12
 590:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 594:	0b3b0b3a 	bleq	ec3284 <startup-0x1f13cd7c>
 598:	00001301 	andeq	r1, r0, r1, lsl #6
 59c:	03000d17 	movweq	r0, #3351	; 0xd17
 5a0:	3b0b3a0e 	blcc	2cede0 <startup-0x1fd31220>
 5a4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 5a8:	18000005 	stmdane	r0, {r0, r2}
 5ac:	19270015 	stmdbne	r7!, {r0, r2, r4}
 5b0:	15190000 	ldrne	r0, [r9, #-0]
 5b4:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 5b8:	00130113 	andseq	r0, r3, r3, lsl r1
 5bc:	00051a00 	andeq	r1, r5, r0, lsl #20
 5c0:	00001349 	andeq	r1, r0, r9, asr #6
 5c4:	0301131b 	movweq	r1, #4891	; 0x131b
 5c8:	3a050b0e 	bcc	143208 <startup-0x1febcdf8>
 5cc:	01053b0b 	tsteq	r5, fp, lsl #22
 5d0:	1c000013 	stcne	0, cr0, [r0], {19}
 5d4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 5d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5dc:	0b381349 	bleq	e05308 <startup-0x1f1facf8>
 5e0:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 5e4:	3a0e0300 	bcc	3811ec <startup-0x1fc7ee14>
 5e8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 5ec:	00053813 	andeq	r3, r5, r3, lsl r8
 5f0:	01131e00 	tsteq	r3, r0, lsl #28
 5f4:	0b0b0e03 	bleq	2c3e08 <startup-0x1fd3c1f8>
 5f8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5fc:	00001301 	andeq	r1, r0, r1, lsl #6
 600:	0b01131f 	bleq	45284 <startup-0x1ffbad7c>
 604:	3b0b3a0b 	blcc	2cee38 <startup-0x1fd311c8>
 608:	00130105 	andseq	r0, r3, r5, lsl #2
 60c:	01172000 	tsteq	r7, r0
 610:	0b3a0b0b 	bleq	e83244 <startup-0x1f17cdbc>
 614:	1301053b 	movwne	r0, #5435	; 0x153b
 618:	0d210000 	stceq	0, cr0, [r1, #-0]
 61c:	3a0e0300 	bcc	381224 <startup-0x1fc7eddc>
 620:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 624:	22000013 	andcs	r0, r0, #19
 628:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 62c:	00001301 	andeq	r1, r0, r1, lsl #6
 630:	03003423 	movweq	r3, #1059	; 0x423
 634:	3b0b3a0e 	blcc	2cee74 <startup-0x1fd3118c>
 638:	3f134905 	svccc	0x00134905
 63c:	00193c19 	andseq	r3, r9, r9, lsl ip
 640:	00342400 	eorseq	r2, r4, r0, lsl #8
 644:	0b3a0e03 	bleq	e83e58 <startup-0x1f17c1a8>
 648:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 64c:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 650:	34250000 	strtcc	r0, [r5], #-0
 654:	3a0e0300 	bcc	38125c <startup-0x1fc7eda4>
 658:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 65c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
 660:	26000018 			; <UNDEFINED> instruction: 0x26000018
 664:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 668:	0b3a0e03 	bleq	e83e7c <startup-0x1f17c184>
 66c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 670:	06120111 			; <UNDEFINED> instruction: 0x06120111
 674:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 678:	27000019 	smladcs	r0, r9, r0, r0
 67c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 680:	0b3a0e03 	bleq	e83e94 <startup-0x1f17c16c>
 684:	01110b3b 	tsteq	r1, fp, lsr fp
 688:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 68c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 690:	28000013 	stmdacs	r0, {r0, r1, r4}
 694:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
 69c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 6a0:	34290000 	strtcc	r0, [r9], #-0
 6a4:	3a080300 	bcc	2012ac <startup-0x1fdfed54>
 6a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ac:	00180213 	andseq	r0, r8, r3, lsl r2
 6b0:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 6b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 6b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 6bc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 6c0:	00001301 	andeq	r1, r0, r1, lsl #6
 6c4:	0000182b 	andeq	r1, r0, fp, lsr #16
 6c8:	010b2c00 	tsteq	fp, r0, lsl #24
 6cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6d0:	2e2d0000 	cdpcs	0, 2, cr0, cr13, cr0, {0}
 6d4:	03193f00 	tsteq	r9, #0, 30
 6d8:	3b0b3a0e 	blcc	2cef18 <startup-0x1fd310e8>
 6dc:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 6e0:	97184006 	ldrls	r4, [r8, -r6]
 6e4:	00001942 	andeq	r1, r0, r2, asr #18
 6e8:	3f012e2e 	svccc	0x00012e2e
 6ec:	3a0e0319 	bcc	381358 <startup-0x1fc7eca8>
 6f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 6f8:	96184006 	ldrls	r4, [r8], -r6
 6fc:	13011942 	movwne	r1, #6466	; 0x1942
 700:	052f0000 	streq	r0, [pc, #-0]!	; 708 <startup-0x1ffff8f8>
 704:	3a0e0300 	bcc	38130c <startup-0x1fc7ecf4>
 708:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 70c:	00180213 	andseq	r0, r8, r3, lsl r2
 710:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 714:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 718:	0b3b0b3a 	bleq	ec3408 <startup-0x1f13cbf8>
 71c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 720:	0b310000 	bleq	c40728 <startup-0x1f3bf8d8>
 724:	00130101 	andseq	r0, r3, r1, lsl #2
 728:	010b3200 	mrseq	r3, R11_fiq
 72c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 730:	00001301 	andeq	r1, r0, r1, lsl #6
 734:	3f002e33 	svccc	0x00002e33
 738:	3a0e0319 	bcc	3813a4 <startup-0x1fc7ec5c>
 73c:	110b3b0b 	tstne	fp, fp, lsl #22
 740:	40061201 	andmi	r1, r6, r1, lsl #4
 744:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 748:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
 74c:	03193f00 	tsteq	r9, #0, 30
 750:	3b0b3a0e 	blcc	2cef90 <startup-0x1fd31070>
 754:	1119270b 	tstne	r9, fp, lsl #14
 758:	40061201 	andmi	r1, r6, r1, lsl #4
 75c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 760:	01000000 	mrseq	r0, (UNDEF: 0)
 764:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 768:	0e030b13 	vmoveq.32	d3[0], r0
 76c:	01110e1b 	tsteq	r1, fp, lsl lr
 770:	17100612 			; <UNDEFINED> instruction: 0x17100612
 774:	24020000 	strcs	r0, [r2], #-0
 778:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 77c:	000e030b 	andeq	r0, lr, fp, lsl #6
 780:	00160300 	andseq	r0, r6, r0, lsl #6
 784:	0b3a0e03 	bleq	e83f98 <startup-0x1f17c068>
 788:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 78c:	24040000 	strcs	r0, [r4], #-0
 790:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 794:	0008030b 	andeq	r0, r8, fp, lsl #6
 798:	01170500 	tsteq	r7, r0, lsl #10
 79c:	0b3a0b0b 	bleq	e833d0 <startup-0x1f17cc30>
 7a0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 7a4:	0d060000 	stceq	0, cr0, [r6, #-0]
 7a8:	3a080300 	bcc	2013b0 <startup-0x1fdfec50>
 7ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 7b0:	07000013 	smladeq	r0, r3, r0, r0
 7b4:	13490101 	movtne	r0, #37121	; 0x9101
 7b8:	00001301 	andeq	r1, r0, r1, lsl #6
 7bc:	49002108 	stmdbmi	r0, {r3, r8, sp}
 7c0:	000b2f13 	andeq	r2, fp, r3, lsl pc
 7c4:	01130900 	tsteq	r3, r0, lsl #18
 7c8:	0b0b0e03 	bleq	2c3fdc <startup-0x1fd3c024>
 7cc:	0b3b0b3a 	bleq	ec34bc <startup-0x1f13cb44>
 7d0:	00001301 	andeq	r1, r0, r1, lsl #6
 7d4:	49000d0a 	stmdbmi	r0, {r1, r3, r8, sl, fp}
 7d8:	000b3813 	andeq	r3, fp, r3, lsl r8
 7dc:	00340b00 	eorseq	r0, r4, r0, lsl #22
 7e0:	0b3a0803 	bleq	e827f4 <startup-0x1f17d80c>
 7e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7e8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 7ec:	130c0000 	movwne	r0, #49152	; 0xc000
 7f0:	3a0b0b01 	bcc	2c33fc <startup-0x1fd3cc04>
 7f4:	010b3b0b 	tsteq	fp, fp, lsl #22
 7f8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7fc:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 800:	0b3b0b3a 	bleq	ec34f0 <startup-0x1f13cb10>
 804:	0b381349 	bleq	e05530 <startup-0x1f1faad0>
 808:	0d0e0000 	stceq	0, cr0, [lr, #-0]
 80c:	00134900 	andseq	r4, r3, r0, lsl #18
 810:	00340f00 	eorseq	r0, r4, r0, lsl #30
 814:	0b3a0e03 	bleq	e84028 <startup-0x1f17bfd8>
 818:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 81c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 820:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 824:	03193f01 	tsteq	r9, #1, 30
 828:	3b0b3a0e 	blcc	2cf068 <startup-0x1fd30f98>
 82c:	11192705 	tstne	r9, r5, lsl #14
 830:	40061201 	andmi	r1, r6, r1, lsl #4
 834:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 838:	00001301 	andeq	r1, r0, r1, lsl #6
 83c:	03000511 	movweq	r0, #1297	; 0x511
 840:	3b0b3a08 	blcc	2cf068 <startup-0x1fd30f98>
 844:	02134905 	andseq	r4, r3, #81920	; 0x14000
 848:	12000018 	andne	r0, r0, #24
 84c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 850:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 854:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 858:	0f130000 	svceq	0x00130000
 85c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 860:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 864:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 868:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 86c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 870:	0b150000 	bleq	540878 <startup-0x1fabf788>
 874:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 878:	16000006 	strne	r0, [r0], -r6
 87c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 880:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 884:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 888:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 88c:	03193f01 	tsteq	r9, #1, 30
 890:	3b0b3a0e 	blcc	2cf0d0 <startup-0x1fd30f30>
 894:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 898:	00130119 	andseq	r0, r3, r9, lsl r1
 89c:	00181800 	andseq	r1, r8, r0, lsl #16
 8a0:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 8a4:	03193f01 	tsteq	r9, #1, 30
 8a8:	3b0b3a0e 	blcc	2cf0e8 <startup-0x1fd30f18>
 8ac:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 8b0:	1a000019 	bne	91c <startup-0x1ffff6e4>
 8b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8b8:	0b3a0e03 	bleq	e840cc <startup-0x1f17bf34>
 8bc:	0111053b 	tsteq	r1, fp, lsr r5
 8c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8c4:	01194296 			; <UNDEFINED> instruction: 0x01194296
 8c8:	1b000013 	blne	91c <startup-0x1ffff6e4>
 8cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8d0:	0b3a0e03 	bleq	e840e4 <startup-0x1f17bf1c>
 8d4:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 8d8:	01111349 	tsteq	r1, r9, asr #6
 8dc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8e0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 8e4:	1c000013 	stcne	0, cr0, [r0], {19}
 8e8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8ec:	0b3a0e03 	bleq	e84100 <startup-0x1f17bf00>
 8f0:	1349053b 	movtne	r0, #38203	; 0x953b
 8f4:	0000193c 	andeq	r1, r0, ip, lsr r9
 8f8:	3f012e1d 	svccc	0x00012e1d
 8fc:	3a0e0319 	bcc	381568 <startup-0x1fc7ea98>
 900:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 904:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 908:	97184006 	ldrls	r4, [r8, -r6]
 90c:	13011942 	movwne	r1, #6466	; 0x1942
 910:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 914:	03193f01 	tsteq	r9, #1, 30
 918:	3b0b3a0e 	blcc	2cf158 <startup-0x1fd30ea8>
 91c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 920:	97184006 	ldrls	r4, [r8, -r6]
 924:	13011942 	movwne	r1, #6466	; 0x1942
 928:	0b1f0000 	bleq	7c0930 <startup-0x1f83f6d0>
 92c:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 930:	00130106 	andseq	r0, r3, r6, lsl #2
 934:	00342000 	eorseq	r2, r4, r0
 938:	0b3a0803 	bleq	e8294c <startup-0x1f17d6b4>
 93c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 940:	00001802 	andeq	r1, r0, r2, lsl #16
 944:	3f012e21 	svccc	0x00012e21
 948:	3a0e0319 	bcc	3815b4 <startup-0x1fc7ea4c>
 94c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 950:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 954:	96184006 	ldrls	r4, [r8], -r6
 958:	13011942 	movwne	r1, #6466	; 0x1942
 95c:	34220000 	strtcc	r0, [r2], #-0
 960:	3a0e0300 	bcc	381568 <startup-0x1fc7ea98>
 964:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 968:	00180213 	andseq	r0, r8, r3, lsl r2
 96c:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 970:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 974:	0b3b0b3a 	bleq	ec3664 <startup-0x1f13c99c>
 978:	01111927 	tsteq	r1, r7, lsr #18
 97c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 980:	01194297 			; <UNDEFINED> instruction: 0x01194297
 984:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 988:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 98c:	0b3b0b3a 	bleq	ec367c <startup-0x1f13c984>
 990:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 994:	05250000 	streq	r0, [r5, #-0]!
 998:	3a080300 	bcc	2015a0 <startup-0x1fdfea60>
 99c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 9a0:	00180213 	andseq	r0, r8, r3, lsl r2
 9a4:	012e2600 			; <UNDEFINED> instruction: 0x012e2600
 9a8:	0b3a0e03 	bleq	e841bc <startup-0x1f17be44>
 9ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 9b0:	01111349 	tsteq	r1, r9, asr #6
 9b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 9bc:	27000013 	smladcs	r0, r3, r0, r0
 9c0:	0e03012e 	adfeqsp	f0, f3, #0.5
 9c4:	0b3b0b3a 	bleq	ec36b4 <startup-0x1f13c94c>
 9c8:	01111927 	tsteq	r1, r7, lsr #18
 9cc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9d0:	01194296 			; <UNDEFINED> instruction: 0x01194296
 9d4:	28000013 	stmdacs	r0, {r0, r1, r4}
 9d8:	0e03012e 	adfeqsp	f0, f3, #0.5
 9dc:	0b3b0b3a 	bleq	ec36cc <startup-0x1f13c934>
 9e0:	01111927 	tsteq	r1, r7, lsr #18
 9e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 9e8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 9ec:	29000013 	stmdbcs	r0, {r0, r1, r4}
 9f0:	0e03012e 	adfeqsp	f0, f3, #0.5
 9f4:	0b3b0b3a 	bleq	ec36e4 <startup-0x1f13c91c>
 9f8:	01111927 	tsteq	r1, r7, lsr #18
 9fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 a00:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000d6 	ldrdeq	r0, [r0], -r6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00ad0002 	adceq	r0, sp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000e8 	andcs	r0, r0, r8, ror #1
  34:	0000094c 	andeq	r0, r0, ip, asr #18
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	06bc0002 	ldrteq	r0, [ip], r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000a34 	andcs	r0, r0, r4, lsr sl
  54:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	07dd0002 	ldrbeq	r0, [sp, r2]
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	20000adc 	ldrdcs	r0, [r0], -ip
  74:	000001c8 	andeq	r0, r0, r8, asr #3
	...
  80:	00000024 	andeq	r0, r0, r4, lsr #32
  84:	09c40002 	stmibeq	r4, {r1}^
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000ca4 	andcs	r0, r0, r4, lsr #25
  94:	000002a2 	andeq	r0, r0, r2, lsr #5
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	16390002 	ldrtne	r0, [r9], -r2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000f48 	andcs	r0, r0, r8, asr #30
  bc:	00000a18 	andeq	r0, r0, r8, lsl sl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000083 	andeq	r0, r0, r3, lsl #1
   4:	003c0002 	eorseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
  24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  2c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
  30:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
  34:	006f7264 	rsbeq	r7, pc, r4, ror #4
  38:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  3c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
  40:	00010063 	andeq	r0, r1, r3, rrx
  44:	05000000 	streq	r0, [r0, #-0]
  48:	00001002 	andeq	r1, r0, r2
  4c:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; ffffffd4 <Pedro+0xdfffc8e4>
  50:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  54:	06010402 	streq	r0, [r1], -r2, lsl #8
  58:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  5c:	3d3d2fa0 	ldccc	15, cr2, [sp, #-640]!	; 0xfffffd80
  60:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  64:	20060104 	andcs	r0, r6, r4, lsl #2
  68:	a03d6706 	eorsge	r6, sp, r6, lsl #14
  6c:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
  70:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  74:	002d0304 	eoreq	r0, sp, r4, lsl #6
  78:	06010402 	streq	r0, [r1], -r2, lsl #8
  7c:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
  80:	04029f4b 	streq	r9, [r2], #-3915	; 0xfffff0b5
  84:	fe010100 	cdp2	1, 0, cr0, cr1, cr0, {0}
  88:	02000001 	andeq	r0, r0, #1
  8c:	00006200 	andeq	r6, r0, r0, lsl #4
  90:	fb010200 	blx	4089a <startup-0x1ffbf766>
  94:	01000d0e 	tsteq	r0, lr, lsl #26
  98:	00010101 	andeq	r0, r1, r1, lsl #2
  9c:	00010000 	andeq	r0, r1, r0
  a0:	3a5a0100 	bcc	16804a8 <startup-0x1e97fb58>
  a4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  a8:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
  ac:	2f65646f 	svccs	0x0065646f
  b0:	2f706f6d 	svccs	0x00706f6d
  b4:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
  b8:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
  bc:	00006f72 	andeq	r6, r0, r2, ror pc
  c0:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  c4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
  c8:	70000001 	andvc	r0, r0, r1
  cc:	6f726465 	svcvs	0x00726465
  d0:	0100682e 	tsteq	r0, lr, lsr #16
  d4:	634c0000 	movtvs	r0, #49152	; 0xc000
  d8:	63734164 	cmnvs	r3, #100, 2
  dc:	682e6969 	stmdavs	lr!, {r0, r3, r5, r6, r8, fp, sp, lr}
  e0:	00000100 	andeq	r0, r0, r0, lsl #2
  e4:	6975623c 	ldmdbvs	r5!, {r2, r3, r4, r5, r9, sp, lr}^
  e8:	692d746c 	pushvs	{r2, r3, r5, r6, sl, ip, sp, lr}
  ec:	00003e6e 	andeq	r3, r0, lr, ror #28
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00e80205 	rsceq	r0, r8, r5, lsl #4
  f8:	2b032000 	blcs	c8100 <startup-0x1ff37f00>
  fc:	0f032f01 	svceq	0x00032f01
 100:	30308582 	eorscc	r8, r0, r2, lsl #11
 104:	f32f9130 	vbit	d9, d15, d16
 108:	082f9168 	stmdaeq	pc!, {r3, r5, r6, r8, ip, pc}	; <UNPREDICTABLE>
 10c:	02005c59 	andeq	r5, r0, #22784	; 0x5900
 110:	90060104 	andls	r0, r6, r4, lsl #2
 114:	01040200 	mrseq	r0, R12_usr
 118:	2f1c9606 	svccs	0x001c9606
 11c:	002f6931 	eoreq	r6, pc, r1, lsr r9	; <UNPREDICTABLE>
 120:	06010402 	streq	r0, [r1], -r2, lsl #8
 124:	914b064a 	cmpls	fp, sl, asr #12
 128:	27542457 			; <UNDEFINED> instruction: 0x27542457
 12c:	01040200 	mrseq	r0, R12_usr
 130:	4c064a06 			; <UNDEFINED> instruction: 0x4c064a06
 134:	5424579f 	strtpl	r5, [r4], #-1951	; 0xfffff861
 138:	59200903 	stmdbpl	r0!, {r0, r1, r8, fp}
 13c:	be91bc91 	mrclt	12, 4, fp, cr1, cr1, {4}
 140:	5c3d594b 			; <UNDEFINED> instruction: 0x5c3d594b
 144:	580b034b 	stmdapl	fp, {r0, r1, r3, r6, r8, r9}
 148:	4b207903 	blmi	81e55c <startup-0x1f7e1aa4>
 14c:	08405959 	stmdaeq	r0, {r0, r3, r4, r6, r8, fp, ip, lr}^
 150:	e5e6303e 	strb	r3, [r6, #62]!	; 0x3e
 154:	002f5aca 	eoreq	r5, pc, sl, asr #21
 158:	06020402 	streq	r0, [r2], -r2, lsl #8
 15c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 160:	02009003 	andeq	r9, r0, #3
 164:	002e0404 	eoreq	r0, lr, r4, lsl #8
 168:	20060402 	andcs	r0, r6, r2, lsl #8
 16c:	06040200 	streq	r0, [r4], -r0, lsl #4
 170:	3d5d2106 	ldfcce	f2, [sp, #-24]	; 0xffffffe8
 174:	913e913d 	teqls	lr, sp, lsr r1
 178:	914c4b3e 	cmpls	ip, lr, lsr fp
 17c:	3e4d9f4c 	cdpcc	15, 4, cr9, cr13, cr12, {2}
 180:	01040200 	mrseq	r0, R12_usr
 184:	91065806 	tstls	r6, r6, lsl #16
 188:	15082231 	strne	r2, [r8, #-561]	; 0xfffffdcf
 18c:	003d5a3d 	eorseq	r5, sp, sp, lsr sl
 190:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 194:	03040200 	movweq	r0, #16896	; 0x4200
 198:	02002d08 	andeq	r2, r0, #8, 26	; 0x200
 19c:	3c060104 	stfccs	f0, [r6], {4}
 1a0:	02040200 	andeq	r0, r4, #0, 4
 1a4:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 1a8:	3c060104 	stfccs	f0, [r6], {4}
 1ac:	02004206 	andeq	r4, r0, #1610612736	; 0x60000000
 1b0:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1b4:	08030402 	stmdaeq	r3, {r1, sl}
 1b8:	040200ff 	streq	r0, [r2], #-255	; 0xffffff01
 1bc:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1c0:	6a3e8440 	bvs	fa12c8 <startup-0x1f05ed38>
 1c4:	0059ad3d 	subseq	sl, r9, sp, lsr sp
 1c8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1cc:	08ca0674 	stmiaeq	sl, {r2, r4, r5, r6, r9, sl}^
 1d0:	5959ad91 	ldmdbpl	r9, {r0, r4, r7, r8, sl, fp, sp, pc}^
 1d4:	77834bd7 			; <UNDEFINED> instruction: 0x77834bd7
 1d8:	9f6759e5 	svcls	0x006759e5
 1dc:	8483e591 	strhi	lr, [r3], #1425	; 0x591
 1e0:	009208ad 	addseq	r0, r2, sp, lsr #17
 1e4:	03020402 	movweq	r0, #9218	; 0x2402
 1e8:	0200746c 	andeq	r7, r0, #108, 8	; 0x6c000000
 1ec:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1f0:	02040200 	andeq	r0, r4, #0, 4
 1f4:	02007d06 	andeq	r7, r0, #384	; 0x180
 1f8:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1fc:	c81e0306 	ldmdagt	lr, {r1, r2, r8, r9}
 200:	4b3d3eaf 	blmi	f4fcc4 <startup-0x1f0b033c>
 204:	00ad9f08 	adceq	r9, sp, r8, lsl #30
 208:	4b030402 	blmi	c1218 <startup-0x1ff3ede8>
 20c:	03040200 	movweq	r0, #16896	; 0x4200
 210:	040200f1 	streq	r0, [r2], #-241	; 0xffffff0f
 214:	00580601 	subseq	r0, r8, r1, lsl #12
 218:	06020402 	streq	r0, [r2], -r2, lsl #8
 21c:	04020063 	streq	r0, [r2], #-99	; 0xffffff9d
 220:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 224:	3d4b68a5 	stclcc	8, cr6, [fp, #-660]	; 0xfffffd6c
 228:	404c2231 	submi	r2, ip, r1, lsr r2
 22c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 230:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 234:	3d080304 	stccc	3, cr0, [r8, #-16]
 238:	03040200 	movweq	r0, #16896	; 0x4200
 23c:	02001308 	andeq	r1, r0, #8, 6	; 0x20000000
 240:	00750304 	rsbseq	r0, r5, r4, lsl #6
 244:	08030402 	stmdaeq	r3, {r1, sl}
 248:	04020054 	streq	r0, [r2], #-84	; 0xffffffac
 24c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 250:	304b5942 	subcc	r5, fp, r2, asr #18
 254:	3e4ba022 	cdpcc	0, 4, cr10, cr11, cr2, {1}
 258:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 25c:	02005903 	andeq	r5, r0, #49152	; 0xc000
 260:	4b080304 	blmi	200e78 <startup-0x1fdff188>
 264:	03040200 	movweq	r0, #16896	; 0x4200
 268:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 26c:	02008303 	andeq	r8, r0, #201326592	; 0xc000000
 270:	00b60304 	adcseq	r0, r6, r4, lsl #6
 274:	06010402 	streq	r0, [r1], -r2, lsl #8
 278:	4b7a0658 	blmi	1e81be0 <startup-0x1e17e420>
 27c:	2f682176 	svccs	0x00682176
 280:	832f672f 			; <UNDEFINED> instruction: 0x832f672f
 284:	01000602 	tsteq	r0, r2, lsl #12
 288:	00012d01 	andeq	r2, r1, r1, lsl #26
 28c:	e9000200 	stmdb	r0, {r9}
 290:	02000000 	andeq	r0, r0, #0
 294:	0d0efb01 	vstreq	d15, [lr, #-4]
 298:	01010100 	mrseq	r0, (UNDEF: 17)
 29c:	00000001 	andeq	r0, r0, r1
 2a0:	01000001 	tsteq	r0, r1
 2a4:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 2a8:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 2ac:	646f632d 	strbtvs	r6, [pc], #-813	; 2b4 <startup-0x1ffffd4c>
 2b0:	6f6d2f65 	svcvs	0x006d2f65
 2b4:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 2b8:	50726570 	rsbspl	r6, r2, r0, ror r5
 2bc:	6f726465 	svcvs	0x00726465
 2c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 2c4:	61657363 	cmnvs	r5, r3, ror #6
 2c8:	635c7070 	cmpvs	ip, #112	; 0x70
 2cc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 2d0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 2d4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 10c <startup-0x1ffffef4>
 2d8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 2dc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 2e0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 2e4:	6f6e2d6d 	svcvs	0x006e2d6d
 2e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 2ec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 2f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 2f4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 2f8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 2fc:	00656e69 	rsbeq	r6, r5, r9, ror #28
 300:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 304:	70616573 	rsbvc	r6, r1, r3, ror r5
 308:	6f635c70 	svcvs	0x00635c70
 30c:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 310:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 314:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 318:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 31c:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 320:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 324:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 328:	61652d65 	cmnvs	r5, r5, ror #26
 32c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 330:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 334:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 338:	00007379 	andeq	r7, r0, r9, ror r3
 33c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 340:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
 344:	00632e6d 	rsbeq	r2, r3, sp, ror #28
 348:	5f000001 	svcpl	0x00000001
 34c:	61666564 	cmnvs	r6, r4, ror #10
 350:	5f746c75 	svcpl	0x00746c75
 354:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 358:	00682e73 	rsbeq	r2, r8, r3, ror lr
 35c:	5f000002 	svcpl	0x00000002
 360:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 364:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 368:	00000300 	andeq	r0, r0, r0, lsl #6
 36c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 370:	754e6d6f 	strbvc	r6, [lr, #-3439]	; 0xfffff291
 374:	00682e6d 	rsbeq	r2, r8, sp, ror #28
 378:	00000001 	andeq	r0, r0, r1
 37c:	34020500 	strcc	r0, [r2], #-1280	; 0xfffffb00
 380:	1620000a 	strtne	r0, [r0], -sl
 384:	02003d59 	andeq	r3, r0, #5696	; 0x1640
 388:	003d0304 	eorseq	r0, sp, r4, lsl #6
 38c:	49030402 	stmdbmi	r3, {r1, sl}
 390:	01040200 	mrseq	r0, R12_usr
 394:	3f063c06 	svccc	0x00063c06
 398:	75084b4c 	strvc	r4, [r8, #-2892]	; 0xfffff4b4
 39c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 3a0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 3a4:	00830304 	addeq	r0, r3, r4, lsl #6
 3a8:	48030402 	stmdami	r3, {r1, sl}
 3ac:	01040200 	mrseq	r0, R12_usr
 3b0:	40063c06 	andmi	r3, r6, r6, lsl #24
 3b4:	00060221 	andeq	r0, r6, r1, lsr #4
 3b8:	00ab0101 	adceq	r0, fp, r1, lsl #2
 3bc:	00020000 	andeq	r0, r2, r0
 3c0:	00000048 	andeq	r0, r0, r8, asr #32
 3c4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3c8:	0101000d 	tsteq	r1, sp
 3cc:	00000101 	andeq	r0, r0, r1, lsl #2
 3d0:	00000100 	andeq	r0, r0, r0, lsl #2
 3d4:	2f3a5a01 	svccs	0x003a5a01
 3d8:	2f504f4d 	svccs	0x00504f4d
 3dc:	6f632d63 	svcvs	0x00632d63
 3e0:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 258 <startup-0x1ffffda8>
 3e4:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 3e8:	72657075 	rsbvc	r7, r5, #117	; 0x75
 3ec:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 3f0:	6b00006f 	blvs	5b4 <startup-0x1ffffa4c>
 3f4:	75467965 	strbvc	r7, [r6, #-2405]	; 0xfffff69b
 3f8:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
 3fc:	00010063 	andeq	r0, r1, r3, rrx
 400:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 404:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 408:	00000001 	andeq	r0, r0, r1
 40c:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
 410:	1520000a 	strne	r0, [r0, #-10]!
 414:	223dbc4b 	eorscs	fp, sp, #19200	; 0x4b00
 418:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 41c:	763e223d 			; <UNDEFINED> instruction: 0x763e223d
 420:	752f752f 	strvc	r7, [pc, #-1327]!	; fffffef9 <Pedro+0xdfffc809>
 424:	752f752f 	strvc	r7, [pc, #-1327]!	; fffffefd <Pedro+0xdfffc80d>
 428:	2f5b212f 	svccs	0x005b212f
 42c:	303d593e 	eorscc	r5, sp, lr, lsr r9
 430:	2f3d213d 	svccs	0x003d213d
 434:	303d593d 	eorscc	r5, sp, sp, lsr r9
 438:	2f3d223d 	svccs	0x003d223d
 43c:	303d593d 	eorscc	r5, sp, sp, lsr r9
 440:	2f3f223d 	svccs	0x003f223d
 444:	303d593d 	eorscc	r5, sp, sp, lsr r9
 448:	3d40213d 	stfcce	f2, [r0, #-244]	; 0xffffff0c
 44c:	4b3d3068 	blmi	f4c5f4 <startup-0x1f0b3a0c>
 450:	02003d75 	andeq	r3, r0, #7488	; 0x1d40
 454:	00b60204 	adcseq	r0, r6, r4, lsl #4
 458:	06010402 	streq	r0, [r1], -r2, lsl #8
 45c:	0043063c 	subeq	r0, r3, ip, lsr r6
 460:	21010402 	tstcs	r1, r2, lsl #8
 464:	01000702 	tsteq	r0, r2, lsl #14
 468:	00022201 	andeq	r2, r2, r1, lsl #4
 46c:	5f000200 	svcpl	0x00000200
 470:	02000001 	andeq	r0, r0, #1
 474:	0d0efb01 	vstreq	d15, [lr, #-4]
 478:	01010100 	mrseq	r0, (UNDEF: 17)
 47c:	00000001 	andeq	r0, r0, r1
 480:	01000001 	tsteq	r0, r1
 484:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 488:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 48c:	646f632d 	strbtvs	r6, [pc], #-813	; 494 <startup-0x1ffffb6c>
 490:	6f6d2f65 	svcvs	0x006d2f65
 494:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 498:	50726570 	rsbspl	r6, r2, r0, ror r5
 49c:	6f726465 	svcvs	0x00726465
 4a0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 4a4:	61657363 	cmnvs	r5, r3, ror #6
 4a8:	635c7070 	cmpvs	ip, #112	; 0x70
 4ac:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 4b0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 4b4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 2ec <startup-0x1ffffd14>
 4b8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 4bc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 4c0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 4c4:	6f6e2d6d 	svcvs	0x006e2d6d
 4c8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 4cc:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 4d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4d4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 4d8:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 4dc:	00656e69 	rsbeq	r6, r5, r9, ror #28
 4e0:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 4e4:	70616573 	rsbvc	r6, r1, r3, ror r5
 4e8:	6f635c70 	svcvs	0x00635c70
 4ec:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 4f0:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 4f4:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 4f8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 4fc:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 500:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 504:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 508:	61652d65 	cmnvs	r5, r5, ror #26
 50c:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 510:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 514:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
 518:	63007379 	movwvs	r7, #889	; 0x379
 51c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 520:	70706165 	rsbsvc	r6, r0, r5, ror #2
 524:	646f635c 	strbtvs	r6, [pc], #-860	; 52c <startup-0x1ffffad4>
 528:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 52c:	6f745c65 	svcvs	0x00745c65
 530:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 534:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 538:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 53c:	5c62696c 			; <UNDEFINED> instruction: 0x5c62696c
 540:	5c636367 	stclpl	3, cr6, [r3], #-412	; 0xfffffe64
 544:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 548:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 54c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 550:	2e375c69 	cdpcs	12, 3, cr5, cr7, cr9, {3}
 554:	5c312e32 	ldcpl	14, cr2, [r1], #-200	; 0xffffff38
 558:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 55c:	00656475 	rsbeq	r6, r5, r5, ror r4
 560:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 564:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 568:	5f000001 	svcpl	0x00000001
 56c:	61666564 	cmnvs	r6, r4, ror #10
 570:	5f746c75 	svcpl	0x00746c75
 574:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 578:	00682e73 	rsbeq	r2, r8, r3, ror lr
 57c:	5f000002 	svcpl	0x00000002
 580:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 584:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 588:	00000300 	andeq	r0, r0, r0, lsl #6
 58c:	6164636c 	cmnvs	r4, ip, ror #6
 590:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 594:	0100682e 	tsteq	r0, lr, lsr #16
 598:	70670000 	rsbvc	r0, r7, r0
 59c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 5a0:	00000100 	andeq	r0, r0, r0, lsl #2
 5a4:	6b636f6c 	blvs	18dc35c <startup-0x1e723ca4>
 5a8:	0300682e 	movweq	r6, #2094	; 0x82e
 5ac:	745f0000 	ldrbvc	r0, [pc], #-0	; 5b4 <startup-0x1ffffa4c>
 5b0:	73657079 	cmnvc	r5, #121	; 0x79
 5b4:	0300682e 	movweq	r6, #2094	; 0x82e
 5b8:	74730000 	ldrbtvc	r0, [r3], #-0
 5bc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 5c0:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 5c4:	65720000 	ldrbvs	r0, [r2, #-0]!
 5c8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 5cc:	00030068 	andeq	r0, r3, r8, rrx
 5d0:	05000000 	streq	r0, [r0, #-0]
 5d4:	00000002 	andeq	r0, r0, r2
 5d8:	012f0320 			; <UNDEFINED> instruction: 0x012f0320
 5dc:	03025e13 	movweq	r5, #11795	; 0x2e13
 5e0:	00010100 	andeq	r0, r1, r0, lsl #2
 5e4:	0ca40205 	sfmeq	f0, 4, [r4], #20
 5e8:	c0032000 	andgt	r2, r3, r0
 5ec:	3d300100 	ldfccs	f0, [r0, #-0]
 5f0:	6776673e 			; <UNDEFINED> instruction: 0x6776673e
 5f4:	3036e868 	eorscc	lr, r6, r8, ror #16
 5f8:	763d3030 			; <UNDEFINED> instruction: 0x763d3030
 5fc:	0c03302f 	stceq	0, cr3, [r3], {47}	; 0x2f
 600:	2e110382 	cdpcs	3, 1, cr0, cr1, cr2, {4}
 604:	30317531 	eorscc	r7, r1, r1, lsr r5
 608:	2f4b334b 	svccs	0x004b334b
 60c:	2f2f5930 	svccs	0x002f5930
 610:	3d2f4027 	stccc	0, cr4, [pc, #-156]!	; 57c <startup-0x1ffffa84>
 614:	403d2f3e 	eorsmi	r2, sp, lr, lsr pc
 618:	90140359 	andsls	r0, r4, r9, asr r3
 61c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 620:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 624:	00ff0304 	rscseq	r0, pc, r4, lsl #6
 628:	06010402 	streq	r0, [r1], -r2, lsl #8
 62c:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 630:	003b0602 	eorseq	r0, fp, r2, lsl #12
 634:	06010402 	streq	r0, [r1], -r2, lsl #8
 638:	7841063c 	stmdavc	r1, {r2, r3, r4, r5, r9, sl}^
 63c:	820c0376 	andhi	r0, ip, #-671088639	; 0xd8000001
 640:	59207803 	stmdbpl	r0!, {r0, r1, fp, ip, sp, lr}
 644:	03595922 	cmpeq	r9, #557056	; 0x88000
 648:	0a032079 	beq	c8834 <startup-0x1ff377cc>
 64c:	ae4c4d20 	cdpge	13, 4, cr4, cr12, cr0, {1}
 650:	04020093 	streq	r0, [r2], #-147	; 0xffffff6d
 654:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 658:	00e30304 	rsceq	r0, r3, r4, lsl #6
 65c:	06010402 	streq	r0, [r1], -r2, lsl #8
 660:	0341063c 	movteq	r0, #5692	; 0x163c
 664:	4030820c 	eorsmi	r8, r0, ip, lsl #4
 668:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
 66c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 670:	00570304 	subseq	r0, r7, r4, lsl #6
 674:	06010402 	streq	r0, [r1], -r2, lsl #8
 678:	4b40063c 	blmi	1001f70 <startup-0x1effe090>
 67c:	03682f67 	cmneq	r8, #412	; 0x19c
 680:	002f4a15 	eoreq	r4, pc, r5, lsl sl	; <UNPREDICTABLE>
 684:	03010402 	movweq	r0, #5122	; 0x1402
 688:	03022e11 	movweq	r2, #11793	; 0x2e11
 68c:	01010100 	mrseq	r0, (UNDEF: 17)
 690:	02000003 	andeq	r0, r0, #3
 694:	0000f100 	andeq	pc, r0, r0, lsl #2
 698:	fb010200 	blx	40ea2 <startup-0x1ffbf15e>
 69c:	01000d0e 	tsteq	r0, lr, lsl #26
 6a0:	00010101 	andeq	r0, r1, r1, lsl #2
 6a4:	00010000 	andeq	r0, r1, r0
 6a8:	3a5a0100 	bcc	1680ab0 <startup-0x1e97f550>
 6ac:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 6b0:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 6b4:	2f65646f 	svccs	0x0065646f
 6b8:	2f706f6d 	svccs	0x00706f6d
 6bc:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 6c0:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 6c4:	63006f72 	movwvs	r6, #3954	; 0xf72
 6c8:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 6cc:	70706165 	rsbsvc	r6, r0, r5, ror #2
 6d0:	646f635c 	strbtvs	r6, [pc], #-860	; 6d8 <startup-0x1ffff928>
 6d4:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 6d8:	6f745c65 	svcvs	0x00745c65
 6dc:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 6e0:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 6e4:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 6e8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 6ec:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 6f0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 6f4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 6f8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 6fc:	616d5c65 	cmnvs	sp, r5, ror #24
 700:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 704:	3a630065 	bcc	18c08a0 <startup-0x1e73f760>
 708:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 70c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 710:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 714:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 718:	6f6f745c 	svcvs	0x006f745c
 71c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 720:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 724:	615c6d72 	cmpvs	ip, r2, ror sp
 728:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 72c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 730:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 734:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 738:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 73c:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 740:	634c0000 	movtvs	r0, #49152	; 0xc000
 744:	63734164 	cmnvs	r3, #100, 2
 748:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 74c:	00000100 	andeq	r0, r0, r0, lsl #2
 750:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 754:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 758:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 75c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 760:	00000200 	andeq	r0, r0, r0, lsl #4
 764:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 768:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 76c:	00030068 	andeq	r0, r3, r8, rrx
 770:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
 774:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 778:	00682e69 	rsbeq	r2, r8, r9, ror #28
 77c:	67000001 	strvs	r0, [r0, -r1]
 780:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 784:	00010068 	andeq	r0, r1, r8, rrx
 788:	05000000 	streq	r0, [r0, #-0]
 78c:	000f4802 	andeq	r4, pc, r2, lsl #16
 790:	59681a20 	stmdbpl	r8!, {r5, r9, fp, ip}^
 794:	684b6775 	stmdavs	fp, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
 798:	75bb5968 	ldrvc	r5, [fp, #2408]!	; 0x968
 79c:	0367684b 	cmneq	r7, #4915200	; 0x4b0000
 7a0:	70037410 	andvc	r7, r3, r0, lsl r4
 7a4:	4a100320 	bmi	40142c <startup-0x1fbfebd4>
 7a8:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 7ac:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 7b0:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 7b4:	3d2f4c22 	stccc	12, cr4, [pc, #-136]!	; 734 <startup-0x1ffff8cc>
 7b8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 7bc:	4b4b4b3d 	blmi	12d34b8 <startup-0x1ed2cb48>
 7c0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 7c4:	3d3d3e3e 	ldccc	14, cr3, [sp, #-248]!	; 0xffffff08
 7c8:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
 7cc:	2f3d752f 	svccs	0x003d752f
 7d0:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 7d4:	3d3d68a0 	ldccc	8, cr6, [sp, #-640]!	; 0xfffffd80
 7d8:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 7dc:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 7e0:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 7e4:	ae3d303d 	mrcge	0, 1, r3, cr13, cr13, {1}
 7e8:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 7ec:	3d2f4b91 	fstmdbxcc	pc!, {d4-d75}	;@ Deprecated
 7f0:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 7f4:	313d5930 	teqcc	sp, r0, lsr r9
 7f8:	753e3d3d 	ldrvc	r3, [lr, #-3389]!	; 0xfffff2c3
 7fc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 800:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
 804:	833d3d59 	teqhi	sp, #5696	; 0x1640
 808:	003d3d4b 	eorseq	r3, sp, fp, asr #26
 80c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 810:	03040200 	movweq	r0, #16896	; 0x4200
 814:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 818:	003c0601 	eorseq	r0, ip, r1, lsl #12
 81c:	06020402 	streq	r0, [r2], -r2, lsl #8
 820:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
 824:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 828:	3d3d4d41 	ldccc	13, cr4, [sp, #-260]!	; 0xfffffefc
 82c:	03040200 	movweq	r0, #16896	; 0x4200
 830:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 834:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
 838:	3c060104 	stfccs	f0, [r6], {4}
 83c:	02040200 	andeq	r0, r4, #0, 4
 840:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 844:	3c060104 	stfccs	f0, [r6], {4}
 848:	68764006 	ldmdavs	r6!, {r1, r2, lr}^
 84c:	083d1408 	ldmdaeq	sp!, {r3, sl, ip}
 850:	ca081e87 	bgt	208274 <startup-0x1fdf7d8c>
 854:	67917584 	ldrvs	r7, [r1, r4, lsl #11]
 858:	3e769f75 	mrccc	15, 3, r9, cr6, cr5, {3}
 85c:	00592f2f 	subseq	r2, r9, pc, lsr #30
 860:	06010402 	streq	r0, [r1], -r2, lsl #8
 864:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 868:	02002e02 	andeq	r2, r0, #2, 28
 86c:	00200404 	eoreq	r0, r0, r4, lsl #8
 870:	06040402 	streq	r0, [r4], -r2, lsl #8
 874:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 878:	03040200 	movweq	r0, #16896	; 0x4200
 87c:	04020060 	streq	r0, [r2], #-96	; 0xffffffa0
 880:	08780303 	ldmdaeq	r8!, {r0, r1, r8, r9}^
 884:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 888:	00820601 	addeq	r0, r2, r1, lsl #12
 88c:	06020402 	streq	r0, [r2], -r2, lsl #8
 890:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
 894:	00660601 	rsbeq	r0, r6, r1, lsl #12
 898:	06020402 	streq	r0, [r2], -r2, lsl #8
 89c:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
 8a0:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 8a4:	03581103 	cmpeq	r8, #-1073741824	; 0xc0000000
 8a8:	3d3d6623 	ldccc	6, cr6, [sp, #-140]!	; 0xffffff74
 8ac:	03040200 	movweq	r0, #16896	; 0x4200
 8b0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 8b4:	0200f103 	andeq	pc, r0, #-1073741824	; 0xc0000000
 8b8:	3c060104 	stfccs	f0, [r6], {4}
 8bc:	02040200 	andeq	r0, r4, #0, 4
 8c0:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 8c4:	3c060104 	stfccs	f0, [r6], {4}
 8c8:	02004106 	andeq	r4, r0, #-2147483647	; 0x80000001
 8cc:	003d0304 	eorseq	r0, sp, r4, lsl #6
 8d0:	57030402 	strpl	r0, [r3, -r2, lsl #8]
 8d4:	01040200 	mrseq	r0, R12_usr
 8d8:	3f063c06 	svccc	0x00063c06
 8dc:	003d3d75 	eorseq	r3, sp, r5, ror sp
 8e0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 8e4:	03040200 	movweq	r0, #16896	; 0x4200
 8e8:	040200f1 	streq	r0, [r2], #-241	; 0xffffff0f
 8ec:	003c0601 	eorseq	r0, ip, r1, lsl #12
 8f0:	06020402 	streq	r0, [r2], -r2, lsl #8
 8f4:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
 8f8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 8fc:	04020041 	streq	r0, [r2], #-65	; 0xffffffbf
 900:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 904:	00810304 	addeq	r0, r1, r4, lsl #6
 908:	06010402 	streq	r0, [r1], -r2, lsl #8
 90c:	6c3f063c 	ldcvs	6, cr0, [pc], #-240	; 824 <startup-0x1ffff7dc>
 910:	59ad5967 	stmibpl	sp!, {r0, r1, r2, r5, r6, r8, fp, ip, lr}
 914:	bb596776 	bllt	165a6f4 <startup-0x1e9a590c>
 918:	3d676875 	stclcc	8, cr6, [r7, #-468]!	; 0xfffffe2c
 91c:	683d2f4b 	ldmdavs	sp!, {r0, r1, r3, r6, r8, r9, sl, fp, sp}
 920:	4c593d67 	mrrcmi	13, 6, r3, r9, cr7
 924:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 928:	2f3d3e4c 	svccs	0x003d3e4c
 92c:	2f3d4b2f 	svccs	0x003d4b2f
 930:	3d3d3e68 	ldccc	14, cr3, [sp, #-416]!	; 0xfffffe60
 934:	ae2f3d59 	mcrge	13, 1, r3, cr15, cr9, {2}
 938:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 93c:	a02f3d59 	eorge	r3, pc, r9, asr sp	; <UNPREDICTABLE>
 940:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 944:	06200601 	strteq	r0, [r0], -r1, lsl #12
 948:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
 94c:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 950:	3e3d3d3e 	mrccc	13, 1, r3, cr13, cr14, {1}
 954:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
 958:	2f3e3d3d 	svccs	0x003e3d3d
 95c:	3e3d3d3d 	mrccc	13, 1, r3, cr13, cr13, {1}
 960:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 964:	06200601 	strteq	r0, [r0], -r1, lsl #12
 968:	3d593d83 	ldclcc	13, cr3, [r9, #-524]	; 0xfffffdf4
 96c:	0200594c 	andeq	r5, r0, #76, 18	; 0x130000
 970:	3c060104 	stfccs	f0, [r6], {4}
 974:	02040200 	andeq	r0, r4, #0, 4
 978:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 97c:	3d063c03 	stccc	12, cr3, [r6, #-12]
 980:	923e3d3d 	eorsls	r3, lr, #3904	; 0xf40
 984:	3f3d674c 	svccc	0x003d674c
 988:	73212f67 			; <UNDEFINED> instruction: 0x73212f67
 98c:	023d3d4d 	eorseq	r3, sp, #4928	; 0x1340
 990:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4d5c3a5a 	vldrmi	s7, [ip, #-360]	; 0xfffffe98
   4:	635c504f 	cmpvs	ip, #79	; 0x4f
   8:	646f632d 	strbtvs	r6, [pc], #-813	; 10 <startup-0x1ffffff0>
   c:	6f6d5c65 	svcvs	0x006d5c65
  10:	75535c70 	ldrbvc	r5, [r3, #-3184]	; 0xfffff390
  14:	50726570 	rsbspl	r6, r2, r0, ror r5
  18:	6f726465 	svcvs	0x00726465
  1c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  20:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff6c7 <Pedro+0xdfffbfd7>
  24:	736e3030 	cmnvc	lr, #48	; 0x30
  28:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  2c:	696d7961 	stmdbvs	sp!, {r0, r5, r6, r8, fp, ip, sp, lr}^
  30:	736f7263 	cmnvc	pc, #805306374	; 0x30000006
  34:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  38:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffbc1e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  80:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  84:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  94:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  98:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  9c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  a4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  ac:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	2f3a5a00 	svccs	0x003a5a00
  d0:	2f504f4d 	svccs	0x00504f4d
  d4:	6f632d63 	svcvs	0x00632d63
  d8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffff50 <Pedro+0xdfffc860>
  dc:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
  e0:	72657075 	rsbvc	r7, r5, #117	; 0x75
  e4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  e8:	65642f6f 	strbvs	r2, [r4, #-3951]!	; 0xfffff091
  ec:	7379616c 	cmnvc	r9, #108, 2
  f0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
  f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  f8:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  fc:	64007369 	strvs	r7, [r0], #-873	; 0xfffffc97
 100:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 104:	3035325f 	eorscc	r3, r5, pc, asr r2
 108:	6c00736e 	stcvs	3, cr7, [r0], {110}	; 0x6e
 10c:	53747361 	cmnpl	r4, #-2080374783	; 0x84000001
 110:	74697270 	strbtvc	r7, [r9], #-624	; 0xfffffd90
 114:	6f700065 	svcvs	0x00700065
 118:	63007873 	movwvs	r7, #2163	; 0x873
 11c:	6b636568 	blvs	18d96c4 <startup-0x1e72693c>
 120:	7379654b 	cmnvc	r9, #314572800	; 0x12c00000
 124:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 128:	74746f42 	ldrbtvc	r6, [r4], #-3906	; 0xfffff0be
 12c:	6f526d6f 	svcvs	0x00526d6f
 130:	65700077 	ldrbvs	r0, [r0, #-119]!	; 0xffffff89
 134:	5f6f7264 	svcpl	0x006f7264
 138:	706d756a 	rsbvc	r7, sp, sl, ror #10
 13c:	6f687300 	svcvs	0x00687300
 140:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
 144:	6900746e 	stmdbvs	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 148:	6d754a73 	vldmdbvs	r5!, {s9-s123}
 14c:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 150:	2f3a5a00 	svccs	0x003a5a00
 154:	2f504f4d 	svccs	0x00504f4d
 158:	6f632d63 	svcvs	0x00632d63
 15c:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffffd4 <Pedro+0xdfffc8e4>
 160:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 164:	72657075 	rsbvc	r7, r5, #117	; 0x75
 168:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 16c:	65502f6f 	ldrbvs	r2, [r0, #-3951]	; 0xfffff091
 170:	2e6f7264 	cdpcs	2, 6, cr7, cr15, cr4, {3}
 174:	45500063 	ldrbmi	r0, [r0, #-99]	; 0xffffff9d
 178:	424f5244 	submi	r5, pc, #68, 4	; 0x40000004
 17c:	62004655 	andvs	r4, r0, #89128960	; 0x5500000
 180:	6f74746f 	svcvs	0x0074746f
 184:	776f526d 	strbvc	r5, [pc, -sp, ror #4]!
 188:	63616600 	cmnvs	r1, #0, 12
 18c:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
 190:	00746665 	rsbseq	r6, r4, r5, ror #12
 194:	78636361 	stmdavc	r3!, {r0, r5, r6, r8, r9, sp, lr}^
 198:	63636100 	cmnvs	r3, #0, 2
 19c:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
 1a0:	67616c6c 	strbvs	r6, [r1, -ip, ror #24]!
 1a4:	73690067 	cmnvc	r9, #103	; 0x67
 1a8:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 1ac:	0079654b 	rsbseq	r6, r9, fp, asr #10
 1b0:	56746567 	ldrbtpl	r6, [r4], -r7, ror #10
 1b4:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1b8:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1bc:	6f6c0068 	svcvs	0x006c0068
 1c0:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1c4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1cc:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
 1d0:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 1d4:	76007466 	strvc	r7, [r0], -r6, ror #8
 1d8:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1dc:	796c6576 	stmdbvc	ip!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 1e0:	61726400 	cmnvs	r2, r0, lsl #8
 1e4:	61003277 	tstvs	r0, r7, ror r2
 1e8:	796c7070 	stmdbvc	ip!, {r4, r5, r6, ip, sp, lr}^
 1ec:	73796850 	cmnvc	r9, #80, 16	; 0x500000
 1f0:	00736369 	rsbseq	r6, r3, r9, ror #6
 1f4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1f8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 1fc:	61686320 	cmnvs	r8, r0, lsr #6
 200:	61740072 	cmnvs	r4, r2, ror r0
 204:	6c00656b 	cfstr32vs	mvfx6, [r0], {107}	; 0x6b
 208:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 20c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 210:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 214:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 218:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 21c:	6f740074 	svcvs	0x00740074
 220:	65686375 	strbvs	r6, [r8, #-885]!	; 0xfffffc8b
 224:	70655073 	rsbvc	r5, r5, r3, ror r0
 228:	00726570 	rsbseq	r6, r2, r0, ror r5
 22c:	67696568 	strbvs	r6, [r9, -r8, ror #10]!
 230:	6e007468 	cdpvs	4, 0, cr7, cr0, cr8, {3}
 234:	70737765 	rsbsvc	r7, r3, r5, ror #14
 238:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 23c:	6f687300 	svcvs	0x00687300
 240:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 244:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 248:	2064656e 	rsbcs	r6, r4, lr, ror #10
 24c:	00746e69 	rsbseq	r6, r4, r9, ror #28
 250:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
 254:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 258:	624f7400 	subvs	r7, pc, #0, 8
 25c:	6572006a 	ldrbvs	r0, [r2, #-106]!	; 0xffffff96
 260:	50746573 	rsbspl	r6, r4, r3, ror r5
 264:	6f726465 	svcvs	0x00726465
 268:	70657000 	rsbvc	r7, r5, r0
 26c:	53726570 	cmnpl	r2, #112, 10	; 0x1c000000
 270:	70697274 	rsbvc	r7, r9, r4, ror r2
 274:	64610065 	strbtvs	r0, [r1], #-101	; 0xffffff9b
 278:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 27c:	64657000 	strbtvs	r7, [r5], #-0
 280:	735f6f72 	cmpvc	pc, #456	; 0x1c8
 284:	6c6c6974 			; <UNDEFINED> instruction: 0x6c6c6974
 288:	61726400 	cmnvs	r2, r0, lsl #8
 28c:	6f640077 	svcvs	0x00640077
 290:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
 294:	55736900 	ldrbpl	r6, [r3, #-2304]!	; 0xfffff700
 298:	79654b70 	stmdbvc	r5!, {r4, r5, r6, r8, r9, fp, lr}^
 29c:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 2a0:	616d0065 	cmnvs	sp, r5, rrx
 2a4:	4f006b73 	svcmi	0x00006b73
 2a8:	43454a42 	movtmi	r4, #23106	; 0x5a42
 2ac:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
 2b0:	72705374 	rsbsvc	r5, r0, #116, 6	; 0xd0000001
 2b4:	00657469 	rsbeq	r7, r5, r9, ror #8
 2b8:	44646c6f 	strbtmi	r6, [r4], #-3183	; 0xfffff391
 2bc:	00776172 	rsbseq	r6, r7, r2, ror r1
 2c0:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
 2c4:	61747369 	cmnvs	r4, r9, ror #6
 2c8:	0065636e 	rsbeq	r6, r5, lr, ror #6
 2cc:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2d0:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2d4:	52736900 	rsbspl	r6, r3, #0, 18
 2d8:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 2dc:	0079654b 	rsbseq	r6, r9, fp, asr #10
 2e0:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 2e4:	64657000 	strbtvs	r7, [r5], #-0
 2e8:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2ec:	316b6c61 	cmncc	fp, r1, ror #24
 2f0:	64657000 	strbtvs	r7, [r5], #-0
 2f4:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2f8:	326b6c61 	rsbcc	r6, fp, #24832	; 0x6100
 2fc:	65657300 	strbvs	r7, [r5, #-768]!	; 0xfffffd00
 300:	676e5264 	strbvs	r5, [lr, -r4, ror #4]!
 304:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff40c <Pedro+0xdfffbd1c>
 308:	33746e69 	cmncc	r4, #1680	; 0x690
 30c:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 310:	77676e72 			; <UNDEFINED> instruction: 0x77676e72
 314:	5f64726f 	svcpl	0x0064726f
 318:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 31c:	6e527478 	mrcvs	4, 2, r7, cr2, cr8, {3}
 320:	3a5a0064 	bcc	16804b8 <startup-0x1e97fb48>
 324:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 328:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 32c:	2f65646f 	svccs	0x0065646f
 330:	2f706f6d 	svccs	0x00706f6d
 334:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 338:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 33c:	722f6f72 	eorvc	r6, pc, #456	; 0x1c8
 340:	6f646e61 	svcvs	0x00646e61
 344:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
 348:	5a00632e 	bpl	19008 <startup-0x1ffe6ff8>
 34c:	4f4d2f3a 	svcmi	0x004d2f3a
 350:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 354:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 358:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 35c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 360:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 364:	2f6f7264 	svccs	0x006f7264
 368:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
 36c:	73636e75 	cmnvc	r3, #1872	; 0x750
 370:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 374:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 378:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 37c:	646f0062 	strbtvs	r0, [pc], #-98	; 384 <startup-0x1ffffc7c>
 380:	67694872 			; <UNDEFINED> instruction: 0x67694872
 384:	746f0068 	strbtvc	r0, [pc], #-104	; 38c <startup-0x1ffffc74>
 388:	72657079 	rsbvc	r7, r5, #121	; 0x79
 38c:	70757000 	rsbsvc	r7, r5, r0
 390:	6f007264 	svcvs	0x00007264
 394:	6f4c7264 	svcvs	0x004c7264
 398:	64690077 	strbtvs	r0, [r9], #-119	; 0xffffff89
 39c:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 3a0:	52736900 	rsbspl	r6, r3, #0, 18
 3a4:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 3a8:	0079654b 	rsbseq	r6, r9, fp, asr #10
 3ac:	4764626b 	strbmi	r6, [r4, -fp, ror #4]!
 3b0:	6f437465 	svcvs	0x00437465
 3b4:	675f006c 	ldrbvs	r0, [pc, -ip, rrx]
 3b8:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 3bc:	4164626b 	cmnmi	r4, fp, ror #4
 3c0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 3c4:	00657461 	rsbeq	r7, r5, r1, ror #8
 3c8:	4f495047 	svcmi	0x00495047
 3cc:	72646900 	rsbvc	r6, r4, #0, 18
 3d0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 3d4:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 3d8:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 3dc:	73645f00 	cmnvc	r4, #0, 30
 3e0:	61685f6f 	cmnvs	r8, pc, ror #30
 3e4:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 3e8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 3ec:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
 3f0:	5064616f 	rsbpl	r6, r4, pc, ror #2
 3f4:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 3f8:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
 3fc:	5f007069 	svcpl	0x00007069
 400:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 404:	5f003834 	svcpl	0x00003834
 408:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
 40c:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
 410:	79740079 	ldmdbvc	r4!, {r0, r3, r4, r5, r6}^
 414:	5f006570 	svcpl	0x00006570
 418:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
 41c:	5f626d6f 	svcpl	0x00626d6f
 420:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 424:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
 428:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
 42c:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 430:	6174735f 	cmnvs	r4, pc, asr r3
 434:	5f006574 	svcpl	0x00006574
 438:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
 43c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 440:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 444:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 448:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 44c:	00745f65 	rsbseq	r5, r4, r5, ror #30
 450:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 454:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 458:	6174735f 	cmnvs	r4, pc, asr r3
 45c:	5f006574 	svcpl	0x00006574
 460:	5f6d745f 	svcpl	0x006d745f
 464:	00636573 	rsbeq	r6, r3, r3, ror r5
 468:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 46c:	62755f00 	rsbsvs	r5, r5, #0, 30
 470:	5f006675 	svcpl	0x00006675
 474:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 478:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 480 <startup-0x1ffffb80>
 47c:	6f685f6d 	svcvs	0x00685f6d
 480:	5f007275 	svcpl	0x00007275
 484:	0066735f 	rsbeq	r7, r6, pc, asr r3
 488:	6f6f635f 	svcvs	0x006f635f
 48c:	0065696b 	rsbeq	r6, r5, fp, ror #18
 490:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 494:	0065756c 	rsbeq	r7, r5, ip, ror #10
 498:	616c665f 	cmnvs	ip, pc, asr r6
 49c:	5f007367 	svcpl	0x00007367
 4a0:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 4a4:	5f006178 	svcpl	0x00006178
 4a8:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 4ac:	625f006e 	subsvs	r0, pc, #110	; 0x6e
 4b0:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 4b4:	5f00657a 	svcpl	0x0000657a
 4b8:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
 4bc:	5f006675 	svcpl	0x00006675
 4c0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 4c4:	5f007465 	svcpl	0x00007465
 4c8:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
 4cc:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 4d0:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 4d4:	00657461 	rsbeq	r7, r5, r1, ror #8
 4d8:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 4dc:	5f6e656c 	svcpl	0x006e656c
 4e0:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 4e4:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 4e8:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 4ec:	665f0073 			; <UNDEFINED> instruction: 0x665f0073
 4f0:	5f00736e 	svcpl	0x0000736e
 4f4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 4f8:	6c665f00 	stclvs	15, cr5, [r6], #-0
 4fc:	5f6b636f 	svcpl	0x006b636f
 500:	735f0074 	cmpvc	pc, #116	; 0x74
 504:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
 508:	425f0072 	subsmi	r0, pc, #114	; 0x72
 50c:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
 510:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 514:	616d6d61 	cmnvs	sp, r1, ror #26
 518:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 51c:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
 520:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 524:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 528:	5f006b5f 	svcpl	0x00006b5f
 52c:	006d745f 	rsbeq	r7, sp, pc, asr r4
 530:	63775f5f 	cmnvs	r7, #380	; 0x17c
 534:	5f006268 	svcpl	0x00006268
 538:	6f647473 	svcvs	0x00647473
 53c:	5f007475 	svcpl	0x00007475
 540:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
 544:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
 548:	4c64616f 	stfmie	f6, [r4], #-444	; 0xfffffe44
 54c:	5f006c76 	svcpl	0x00006c76
 550:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 554:	67617000 	strbvs	r7, [r1, -r0]!
 558:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 55c:	73626f69 	cmnvc	r2, #420	; 0x1a4
 560:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 564:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 568:	735f0030 	cmpvc	pc, #48	; 0x30
 56c:	616e6769 	cmnvs	lr, r9, ror #14
 570:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 574:	615f0066 	cmpvs	pc, r6, rrx
 578:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 57c:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 580:	6f006675 	svcvs	0x00006675
 584:	6e69576e 	cdpvs	7, 6, cr5, cr9, cr14, {3}
 588:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 58c:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 590:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 594:	77006863 	strvc	r6, [r0, -r3, ror #16]
 598:	5f746e69 	svcpl	0x00746e69
 59c:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 5a0:	7367616c 	cmnvc	r7, #108, 2
 5a4:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
 5a8:	6944776f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
 5ac:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
 5b0:	5f006563 	svcpl	0x00006563
 5b4:	4b434f4c 	blmi	10d42ec <startup-0x1ef2bd14>
 5b8:	5f00545f 	svcpl	0x0000545f
 5bc:	5f6d745f 	svcpl	0x006d745f
 5c0:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
 5c4:	2f3a5a00 	svccs	0x003a5a00
 5c8:	2f504f4d 	svccs	0x00504f4d
 5cc:	6f632d63 	svcvs	0x00632d63
 5d0:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 448 <startup-0x1ffffbb8>
 5d4:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 5d8:	72657075 	rsbvc	r7, r5, #117	; 0x75
 5dc:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 5e0:	616d2f6f 	cmnvs	sp, pc, ror #30
 5e4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 5e8:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 5ec:	00667478 	rsbeq	r7, r6, r8, ror r4
 5f0:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 5f4:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
 5f8:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 5fc:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 600:	735f5f00 	cmpvc	pc, #0, 30
 604:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 608:	0074696e 	rsbseq	r6, r4, lr, ror #18
 60c:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 610:	5000745f 	andpl	r7, r0, pc, asr r4
 614:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 618:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
 61c:	00737069 	rsbseq	r7, r3, r9, rrx
 620:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
 624:	73696c65 	cmnvc	r9, #25856	; 0x6500
 628:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 62c:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 4a8 <startup-0x1ffffb58>
 630:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 634:	00657461 	rsbeq	r7, r5, r1, ror #8
 638:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 63c:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
 640:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 644:	6d676553 	cfstr64vs	mvdx6, [r7, #-332]!	; 0xfffffeb4
 648:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
 64c:	00746665 	rsbseq	r6, r4, r5, ror #12
 650:	6f697067 	svcvs	0x00697067
 654:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 658:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 65c:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
 660:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 664:	5f006f6e 	svcpl	0x00006f6e
 668:	5f6d745f 	svcpl	0x006d745f
 66c:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 670:	735f5f00 	cmpvc	pc, #0, 30
 674:	00667562 	rsbeq	r7, r6, r2, ror #10
 678:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 67c:	5f5f0073 	svcpl	0x005f0073
 680:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 684:	626d5f00 	rsbvs	r5, sp, #0, 30
 688:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 68c:	00745f65 	rsbseq	r5, r4, r5, ror #30
 690:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
 694:	00454c49 	subeq	r4, r5, r9, asr #24
 698:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 69c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 6a0:	61725f00 	cmnvs	r2, r0, lsl #30
 6a4:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 6a8:	00747865 	rsbseq	r7, r4, r5, ror #16
 6ac:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 6b0:	735f6e65 	cmpvc	pc, #1616	; 0x650
 6b4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 6b8:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 6bc:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 6c0:	5f00646e 	svcpl	0x0000646e
 6c4:	61636f6c 	cmnvs	r3, ip, ror #30
 6c8:	5f00656c 	svcpl	0x0000656c
 6cc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 6d0:	70756e61 	rsbsvc	r6, r5, r1, ror #28
 6d4:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 6d8:	63657073 	cmnvs	r5, #115	; 0x73
 6dc:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 6e0:	6f6c5f64 	svcvs	0x006c5f64
 6e4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 6e8:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 6ec:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 538 <startup-0x1ffffac8>
 6f0:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
 6f4:	725f0073 	subsvc	r0, pc, #115	; 0x73
 6f8:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 6fc:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 700:	5f006465 	svcpl	0x00006465
 704:	756f635f 	strbvc	r6, [pc, #-863]!	; 3ad <startup-0x1ffffc53>
 708:	5f00746e 	svcpl	0x0000746e
 70c:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 710:	735f006b 	cmpvc	pc, #107	; 0x6b
 714:	006b6565 	rsbeq	r6, fp, r5, ror #10
 718:	616f7469 	cmnvs	pc, r9, ror #8
 71c:	70665f00 	rsbvc	r5, r6, r0, lsl #30
 720:	745f736f 	ldrbvc	r7, [pc], #-879	; 728 <startup-0x1ffff8d8>
 724:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
 728:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 72c:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
 730:	5f007367 	svcpl	0x00007367
 734:	5f6d745f 	svcpl	0x006d745f
 738:	006e696d 	rsbeq	r6, lr, sp, ror #18
 73c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 740:	00707574 	rsbseq	r7, r0, r4, ror r5
 744:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 748:	5f007265 	svcpl	0x00007265
 74c:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 750:	616f6c00 	cmnvs	pc, r0, lsl #24
 754:	77654e64 	strbvc	r4, [r5, -r4, ror #28]!
 758:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
 75c:	6765536c 	strbvs	r5, [r5, -ip, ror #6]!
 760:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 764:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 768:	735f0074 	cmpvc	pc, #116	; 0x74
 76c:	6f747274 	svcvs	0x00747274
 770:	616c5f6b 	cmnvs	ip, fp, ror #30
 774:	5f007473 	svcpl	0x00007473
 778:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 77c:	5f006575 	svcpl	0x00006575
 780:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 784:	00736570 	rsbseq	r6, r3, r0, ror r5
 788:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 78c:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff894 <Pedro+0xdfffc1a4>
 790:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 794:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
 798:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
 79c:	72655f65 	rsbvc	r5, r5, #404	; 0x194
 7a0:	675f0072 			; <UNDEFINED> instruction: 0x675f0072
 7a4:	61626f6c 	cmnvs	r2, ip, ror #30
 7a8:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 7ac:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 7b0:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 7b4:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 7b8:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 7bc:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 7c0:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
 7c4:	5f007364 	svcpl	0x00007364
 7c8:	5f6d745f 	svcpl	0x006d745f
 7cc:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
 7d0:	6c675f00 	stclvs	15, cr5, [r7], #-0
 7d4:	5f006575 	svcpl	0x00006575
 7d8:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 7dc:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 7e0:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 7e4:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 7e8:	735f0066 	cmpvc	pc, #102	; 0x66
 7ec:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 7f0:	00636e75 	rsbeq	r6, r3, r5, ror lr
 7f4:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
 7f8:	755f0066 	ldrbvc	r0, [pc, #-102]	; 79a <startup-0x1ffff866>
 7fc:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 800:	5f5f0064 	svcpl	0x005f0064
 804:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 808:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 80c:	6f6c5f00 	svcvs	0x006c5f00
 810:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 814:	5f656d69 	svcpl	0x00656d69
 818:	00667562 	rsbeq	r7, r6, r2, ror #10
 81c:	6f6c635f 	svcvs	0x006c635f
 820:	6c006573 	cfstr32vs	mvfx6, [r0], {115}	; 0x73
 824:	5064616f 	rsbpl	r6, r4, pc, ror #2
 828:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 82c:	00744172 	rsbseq	r4, r4, r2, ror r1
 830:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
 834:	61747300 	cmnvs	r4, r0, lsl #6
 838:	5f007472 	svcpl	0x00007472
 83c:	6f74626d 	svcvs	0x0074626d
 840:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 844:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 848:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
 84c:	616d0073 	smcvs	53251	; 0xd003
 850:	5f006e69 	svcpl	0x00006e69
 854:	5f6d745f 	svcpl	0x006d745f
 858:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
 85c:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 860:	63006c65 	movwvs	r6, #3173	; 0xc65
 864:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 868:	7361006e 	cmnvc	r1, #110	; 0x6e
 86c:	5f696963 	svcpl	0x00696963
 870:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 874:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 878:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 87c:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 880:	654c7466 	strbvs	r7, [ip, #-1126]	; 0xfffffb9a
 884:	67007466 	strvs	r7, [r0, -r6, ror #8]
 888:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 88c:	645f6369 	ldrbvs	r6, [pc], #-873	; 894 <startup-0x1ffff76c>
 890:	5f776172 	svcpl	0x00776172
 894:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 898:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 89c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 8a0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 8a4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 8a8:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 734 <startup-0x1ffff8cc>
 8ac:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 8b0:	63736100 	cmnvs	r3, #0, 2
 8b4:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 8b8:	5f6c7274 	svcpl	0x006c7274
 8bc:	5f746962 	svcpl	0x00746962
 8c0:	61656c63 	cmnvs	r5, r3, ror #24
 8c4:	72670072 	rsbvc	r0, r7, #114	; 0x72
 8c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8cc:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 8d0:	5f726165 	svcpl	0x00726165
 8d4:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 8d8:	61006e65 	tstvs	r0, r5, ror #28
 8dc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 8e0:	746f675f 	strbtvc	r6, [pc], #-1887	; 8e8 <startup-0x1ffff718>
 8e4:	0079786f 	rsbseq	r7, r9, pc, ror #16
 8e8:	70617267 	rsbvc	r7, r1, r7, ror #4
 8ec:	5f636968 	svcpl	0x00636968
 8f0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8f4:	63736100 	cmnvs	r3, #0, 2
 8f8:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 8fc:	0074696e 	rsbseq	r6, r4, lr, ror #18
 900:	70617267 	rsbvc	r7, r1, r7, ror #4
 904:	5f636968 	svcpl	0x00636968
 908:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 90c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 910:	5f5f0061 	svcpl	0x005f0061
 914:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 918:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 91c:	70617267 	rsbvc	r7, r1, r7, ror #4
 920:	5f636968 	svcpl	0x00636968
 924:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 928:	61645f65 	cmnvs	r4, r5, ror #30
 92c:	61006174 	tstvs	r0, r4, ror r1
 930:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 934:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 7c0 <startup-0x1ffff840>
 938:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 93c:	61726700 	cmnvs	r2, r0, lsl #14
 940:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 944:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 948:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 94c:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 950:	00726165 	rsbseq	r6, r2, r5, ror #2
 954:	70617267 	rsbvc	r7, r1, r7, ror #4
 958:	5f636968 	svcpl	0x00636968
 95c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 960:	79620065 	stmdbvc	r2!, {r0, r2, r5, r6}^
 964:	6f546574 	svcvs	0x00546574
 968:	65726353 	ldrbvs	r6, [r2, #-851]!	; 0xfffffcad
 96c:	75426e65 	strbvc	r6, [r2, #-3685]	; 0xfffff19b
 970:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 974:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 978:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 97c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 980:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 984:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
 988:	52746669 	rsbspl	r6, r4, #110100480	; 0x6900000
 98c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 990:	63736100 	cmnvs	r3, #0, 2
 994:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 998:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 99c:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 9a0:	72670070 	rsbvc	r0, r7, #112	; 0x70
 9a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 9a8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 9ac:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 9b0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 9b4:	61007465 	tstvs	r0, r5, ror #8
 9b8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 9bc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 9c0:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 9c4:	00726168 	rsbseq	r6, r2, r8, ror #2
 9c8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 9cc:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 9d0:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 9d4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 9d8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 9dc:	73610072 	cmnvc	r1, #114	; 0x72
 9e0:	5f696963 	svcpl	0x00696963
 9e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 9e8:	61645f65 	cmnvs	r4, r5, ror #30
 9ec:	67006174 	smlsdxvs	r0, r4, r1, r6
 9f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 9f4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 9f8:	5f746961 	svcpl	0x00746961
 9fc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 a00:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 a04:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 a08:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 a0c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 844 <startup-0x1ffff7bc>
 a10:	0072656c 	rsbseq	r6, r2, ip, ror #10
 a14:	70617267 	rsbvc	r7, r1, r7, ror #4
 a18:	5f636968 	svcpl	0x00636968
 a1c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 a20:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 a24:	6100657a 	tstvs	r0, sl, ror r5
 a28:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 a2c:	6165725f 	cmnvs	r5, pc, asr r2
 a30:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 a34:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 a38:	63736100 	cmnvs	r3, #0, 2
 a3c:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 a40:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a44:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 a48:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 880 <startup-0x1ffff780>
 a4c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 a50:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 a54:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 a58:	646f632d 	strbtvs	r6, [pc], #-813	; a60 <startup-0x1ffff5a0>
 a5c:	6f6d2f65 	svcvs	0x006d2f65
 a60:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 a64:	50726570 	rsbspl	r6, r2, r0, ror r5
 a68:	6f726465 	svcvs	0x00726465
 a6c:	64634c2f 	strbtvs	r4, [r3], #-3119	; 0xfffff3d1
 a70:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 a74:	00632e69 	rsbeq	r2, r3, r9, ror #28
 a78:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 a7c:	75426f54 	strbvc	r6, [r2, #-3924]	; 0xfffff0ac
 a80:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a84:	63736100 	cmnvs	r3, #0, 2
 a88:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 a8c:	5f646165 	svcpl	0x00646165
 a90:	61746164 	cmnvs	r4, r4, ror #2
 a94:	72747300 	rsbsvc	r7, r4, #0, 6
 a98:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
 a9c:	6373416f 	cmnvs	r3, #-1073741797	; 0xc000001b
 aa0:	61006969 	tstvs	r0, r9, ror #18
 aa4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 aa8:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 aac:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 ab0:	Address 0x00000ab0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffbc1e>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	00000044 	andeq	r0, r0, r4, asr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000098 	mulcs	r0, r8, r0
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
  58:	40080e41 	andmi	r0, r8, r1, asr #28
  5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  60:	180e4101 	stmdane	lr, {r0, r8, lr}
  64:	00070d41 	andeq	r0, r7, r1, asr #26
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200000c2 	andcs	r0, r0, r2, asr #1
  74:	00000024 	andeq	r0, r0, r4, lsr #32
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	00000018 	andeq	r0, r0, r8, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000e8 	andcs	r0, r0, r8, ror #1
  a4:	00000024 	andeq	r0, r0, r4, lsr #32
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  b4:	00000024 	andeq	r0, r0, r4, lsr #32
  b8:	00000088 	andeq	r0, r0, r8, lsl #1
  bc:	2000010c 	andcs	r0, r0, ip, lsl #2
  c0:	000000d4 	ldrdeq	r0, [r0], -r4
  c4:	40180e41 	andsmi	r0, r8, r1, asr #28
  c8:	84400683 	strbhi	r0, [r0], #-1667	; 0xfffff97d
  cc:	04854005 	streq	r4, [r5], #5
  d0:	40038640 	andmi	r8, r3, r0, asr #12
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  dc:	00000020 	andeq	r0, r0, r0, lsr #32
  e0:	00000088 	andeq	r0, r0, r8, lsl #1
  e4:	200001e0 	andcs	r0, r0, r0, ror #3
  e8:	00000158 	andeq	r0, r0, r8, asr r1
  ec:	40100e41 	andsmi	r0, r0, r1, asr #28
  f0:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
  f4:	02874003 	addeq	r4, r7, #3
  f8:	41018e40 	tstmi	r1, r0, asr #28
  fc:	0000070d 	andeq	r0, r0, sp, lsl #14
 100:	00000020 	andeq	r0, r0, r0, lsr #32
 104:	00000088 	andeq	r0, r0, r8, lsl #1
 108:	20000338 	andcs	r0, r0, r8, lsr r3
 10c:	00000064 	andeq	r0, r0, r4, rrx
 110:	40100e41 	andsmi	r0, r0, r1, asr #28
 114:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 118:	02874003 	addeq	r4, r7, #3
 11c:	41018e40 	tstmi	r1, r0, asr #28
 120:	0000070d 	andeq	r0, r0, sp, lsl #14
 124:	00000018 	andeq	r0, r0, r8, lsl r0
 128:	00000088 	andeq	r0, r0, r8, lsl #1
 12c:	2000039c 	mulcs	r0, ip, r3
 130:	00000030 	andeq	r0, r0, r0, lsr r0
 134:	40080e41 	andmi	r0, r8, r1, asr #28
 138:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 13c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000088 	andeq	r0, r0, r8, lsl #1
 148:	200003cc 	andcs	r0, r0, ip, asr #7
 14c:	000000cc 	andeq	r0, r0, ip, asr #1
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	00000024 	andeq	r0, r0, r4, lsr #32
 164:	00000088 	andeq	r0, r0, r8, lsl #1
 168:	20000498 	mulcs	r0, r8, r4
 16c:	000000c0 	andeq	r0, r0, r0, asr #1
 170:	40140e41 	andsmi	r0, r4, r1, asr #28
 174:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 178:	03864004 	orreq	r4, r6, #4
 17c:	40028740 	andmi	r8, r2, r0, asr #14
 180:	0e41018e 	dvfeqd	f0, f1, #0.5
 184:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 188:	00000020 	andeq	r0, r0, r0, lsr #32
 18c:	00000088 	andeq	r0, r0, r8, lsl #1
 190:	20000558 	andcs	r0, r0, r8, asr r5
 194:	00000248 	andeq	r0, r0, r8, asr #4
 198:	400c0e41 	andmi	r0, ip, r1, asr #28
 19c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1a0:	018e4002 	orreq	r4, lr, r2
 1a4:	41300e41 	teqmi	r0, r1, asr #28
 1a8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	00000088 	andeq	r0, r0, r8, lsl #1
 1b4:	200007a0 	andcs	r0, r0, r0, lsr #15
 1b8:	000000c8 	andeq	r0, r0, r8, asr #1
 1bc:	40080e41 	andmi	r0, r8, r1, asr #28
 1c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1c4:	100e4101 	andne	r4, lr, r1, lsl #2
 1c8:	00070d41 	andeq	r0, r7, r1, asr #26
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	00000088 	andeq	r0, r0, r8, lsl #1
 1d4:	20000868 	andcs	r0, r0, r8, ror #16
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	100e4101 	andne	r4, lr, r1, lsl #2
 1e8:	00070d41 	andeq	r0, r7, r1, asr #26
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000088 	andeq	r0, r0, r8, lsl #1
 1f4:	20000884 	andcs	r0, r0, r4, lsl #17
 1f8:	000000cc 	andeq	r0, r0, ip, asr #1
 1fc:	40080e41 	andmi	r0, r8, r1, asr #28
 200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 204:	180e4101 	stmdane	lr, {r0, r8, lr}
 208:	00070d41 	andeq	r0, r7, r1, asr #26
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	00000088 	andeq	r0, r0, r8, lsl #1
 214:	20000950 	andcs	r0, r0, r0, asr r9
 218:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 21c:	40080e41 	andmi	r0, r8, r1, asr #28
 220:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 224:	280e4101 	stmdacs	lr, {r0, r8, lr}
 228:	00070d41 	andeq	r0, r7, r1, asr #26
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	00000088 	andeq	r0, r0, r8, lsl #1
 234:	20000a00 	andcs	r0, r0, r0, lsl #20
 238:	00000014 	andeq	r0, r0, r4, lsl r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 248:	00000020 	andeq	r0, r0, r0, lsr #32
 24c:	00000088 	andeq	r0, r0, r8, lsl #1
 250:	20000a14 	andcs	r0, r0, r4, lsl sl
 254:	00000020 	andeq	r0, r0, r0, lsr #32
 258:	40100e41 	andsmi	r0, r0, r1, asr #28
 25c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 260:	02874003 	addeq	r4, r7, #3
 264:	41018e40 	tstmi	r1, r0, asr #28
 268:	0000070d 	andeq	r0, r0, sp, lsl #14
 26c:	0000000c 	andeq	r0, r0, ip
 270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 274:	7c020001 	stcvc	0, cr0, [r2], {1}
 278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000026c 	andeq	r0, r0, ip, ror #4
 284:	20000a34 	andcs	r0, r0, r4, lsr sl
 288:	00000032 	andeq	r0, r0, r2, lsr r0
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000026c 	andeq	r0, r0, ip, ror #4
 2a4:	20000a66 	andcs	r0, r0, r6, ror #20
 2a8:	00000076 	andeq	r0, r0, r6, ror r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2b8:	00070d41 	andeq	r0, r7, r1, asr #26
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2c4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2c8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2d4:	20000adc 	ldrdcs	r0, [r0], -ip
 2d8:	00000054 	andeq	r0, r0, r4, asr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	100e4101 	andne	r4, lr, r1, lsl #2
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	00000018 	andeq	r0, r0, r8, lsl r0
 2f0:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 2f4:	20000b30 	andcs	r0, r0, r0, lsr fp
 2f8:	00000058 	andeq	r0, r0, r8, asr r0
 2fc:	40080e41 	andmi	r0, r8, r1, asr #28
 300:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 304:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 308:	00000018 	andeq	r0, r0, r8, lsl r0
 30c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 310:	20000b88 	andcs	r0, r0, r8, lsl #23
 314:	0000002c 	andeq	r0, r0, ip, lsr #32
 318:	40080e41 	andmi	r0, r8, r1, asr #28
 31c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 320:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 324:	00000018 	andeq	r0, r0, r8, lsl r0
 328:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 32c:	20000bb4 			; <UNDEFINED> instruction: 0x20000bb4
 330:	0000002c 	andeq	r0, r0, ip, lsr #32
 334:	40080e41 	andmi	r0, r8, r1, asr #28
 338:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 33c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 340:	00000018 	andeq	r0, r0, r8, lsl r0
 344:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 348:	20000be0 	andcs	r0, r0, r0, ror #23
 34c:	0000002c 	andeq	r0, r0, ip, lsr #32
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 364:	20000c0c 	andcs	r0, r0, ip, lsl #24
 368:	0000002c 	andeq	r0, r0, ip, lsr #32
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 378:	00000020 	andeq	r0, r0, r0, lsr #32
 37c:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 380:	20000c38 	andcs	r0, r0, r8, lsr ip
 384:	0000006c 	andeq	r0, r0, ip, rrx
 388:	400c0e41 	andmi	r0, ip, r1, asr #28
 38c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 390:	018e4002 	orreq	r4, lr, r2
 394:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 398:	0000070d 	andeq	r0, r0, sp, lsl #14
 39c:	0000000c 	andeq	r0, r0, ip
 3a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 3a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3ac:	0000000c 	andeq	r0, r0, ip
 3b0:	0000039c 	muleq	r0, ip, r3
 3b4:	20000000 	andcs	r0, r0, r0
 3b8:	0000000c 	andeq	r0, r0, ip
 3bc:	00000018 	andeq	r0, r0, r8, lsl r0
 3c0:	0000039c 	muleq	r0, ip, r3
 3c4:	20000ca4 	andcs	r0, r0, r4, lsr #25
 3c8:	00000060 	andeq	r0, r0, r0, rrx
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3d8:	00000018 	andeq	r0, r0, r8, lsl r0
 3dc:	0000039c 	muleq	r0, ip, r3
 3e0:	20000d04 	andcs	r0, r0, r4, lsl #26
 3e4:	0000003c 	andeq	r0, r0, ip, lsr r0
 3e8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3f4:	00000018 	andeq	r0, r0, r8, lsl r0
 3f8:	0000039c 	muleq	r0, ip, r3
 3fc:	20000d40 	andcs	r0, r0, r0, asr #26
 400:	00000054 	andeq	r0, r0, r4, asr r0
 404:	40080e41 	andmi	r0, r8, r1, asr #28
 408:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 40c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 410:	00000018 	andeq	r0, r0, r8, lsl r0
 414:	0000039c 	muleq	r0, ip, r3
 418:	20000d94 	mulcs	r0, r4, sp
 41c:	00000010 	andeq	r0, r0, r0, lsl r0
 420:	40080e41 	andmi	r0, r8, r1, asr #28
 424:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 428:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 42c:	00000018 	andeq	r0, r0, r8, lsl r0
 430:	0000039c 	muleq	r0, ip, r3
 434:	20000da4 	andcs	r0, r0, r4, lsr #27
 438:	00000010 	andeq	r0, r0, r0, lsl r0
 43c:	40080e41 	andmi	r0, r8, r1, asr #28
 440:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 444:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 448:	00000020 	andeq	r0, r0, r0, lsr #32
 44c:	0000039c 	muleq	r0, ip, r3
 450:	20000db4 			; <UNDEFINED> instruction: 0x20000db4
 454:	00000070 	andeq	r0, r0, r0, ror r0
 458:	400c0e41 	andmi	r0, ip, r1, asr #28
 45c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 460:	018e4002 	orreq	r4, lr, r2
 464:	41400e41 	cmpmi	r0, r1, asr #28
 468:	0000070d 	andeq	r0, r0, sp, lsl #14
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	0000039c 	muleq	r0, ip, r3
 474:	20000e24 	andcs	r0, r0, r4, lsr #28
 478:	0000004c 	andeq	r0, r0, ip, asr #32
 47c:	40080e41 	andmi	r0, r8, r1, asr #28
 480:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 484:	100e4101 	andne	r4, lr, r1, lsl #2
 488:	00070d41 	andeq	r0, r7, r1, asr #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	0000039c 	muleq	r0, ip, r3
 494:	20000e70 	andcs	r0, r0, r0, ror lr
 498:	00000070 	andeq	r0, r0, r0, ror r0
 49c:	40080e41 	andmi	r0, r8, r1, asr #28
 4a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4a4:	680e4101 	stmdavs	lr, {r0, r8, lr}
 4a8:	00070d41 	andeq	r0, r7, r1, asr #26
 4ac:	00000018 	andeq	r0, r0, r8, lsl r0
 4b0:	0000039c 	muleq	r0, ip, r3
 4b4:	20000ee0 	andcs	r0, r0, r0, ror #29
 4b8:	0000000a 	andeq	r0, r0, sl
 4bc:	40080e41 	andmi	r0, r8, r1, asr #28
 4c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4c4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	0000039c 	muleq	r0, ip, r3
 4d0:	20000eea 	andcs	r0, r0, sl, ror #29
 4d4:	0000004e 	andeq	r0, r0, lr, asr #32
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 4e4:	00070d41 	andeq	r0, r7, r1, asr #26
 4e8:	00000018 	andeq	r0, r0, r8, lsl r0
 4ec:	0000039c 	muleq	r0, ip, r3
 4f0:	20000f38 	andcs	r0, r0, r8, lsr pc
 4f4:	0000000e 	andeq	r0, r0, lr
 4f8:	40080e41 	andmi	r0, r8, r1, asr #28
 4fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 500:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 504:	0000000c 	andeq	r0, r0, ip
 508:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 50c:	7c020001 	stcvc	0, cr0, [r2], {1}
 510:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 514:	0000001c 	andeq	r0, r0, ip, lsl r0
 518:	00000504 	andeq	r0, r0, r4, lsl #10
 51c:	20000f48 	andcs	r0, r0, r8, asr #30
 520:	00000044 	andeq	r0, r0, r4, asr #32
 524:	40080e41 	andmi	r0, r8, r1, asr #28
 528:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 52c:	180e4101 	stmdane	lr, {r0, r8, lr}
 530:	00070d41 	andeq	r0, r7, r1, asr #26
 534:	0000001c 	andeq	r0, r0, ip, lsl r0
 538:	00000504 	andeq	r0, r0, r4, lsl #10
 53c:	20000f8c 	andcs	r0, r0, ip, lsl #31
 540:	00000050 	andeq	r0, r0, r0, asr r0
 544:	40080e41 	andmi	r0, r8, r1, asr #28
 548:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 54c:	180e4101 	stmdane	lr, {r0, r8, lr}
 550:	00070d41 	andeq	r0, r7, r1, asr #26
 554:	0000001c 	andeq	r0, r0, ip, lsl r0
 558:	00000504 	andeq	r0, r0, r4, lsl #10
 55c:	20000fdc 	ldrdcs	r0, [r0], -ip
 560:	0000005a 	andeq	r0, r0, sl, asr r0
 564:	40080e41 	andmi	r0, r8, r1, asr #28
 568:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 56c:	100e4101 	andne	r4, lr, r1, lsl #2
 570:	00070d41 	andeq	r0, r7, r1, asr #26
 574:	00000018 	andeq	r0, r0, r8, lsl r0
 578:	00000504 	andeq	r0, r0, r4, lsl #10
 57c:	20001036 	andcs	r1, r0, r6, lsr r0
 580:	00000064 	andeq	r0, r0, r4, rrx
 584:	40080e41 	andmi	r0, r8, r1, asr #28
 588:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 58c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 590:	0000001c 	andeq	r0, r0, ip, lsl r0
 594:	00000504 	andeq	r0, r0, r4, lsl #10
 598:	2000109a 	mulcs	r0, sl, r0
 59c:	0000006a 	andeq	r0, r0, sl, rrx
 5a0:	40080e41 	andmi	r0, r8, r1, asr #28
 5a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5a8:	100e4101 	andne	r4, lr, r1, lsl #2
 5ac:	00070d41 	andeq	r0, r7, r1, asr #26
 5b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5b4:	00000504 	andeq	r0, r0, r4, lsl #10
 5b8:	20001104 	andcs	r1, r0, r4, lsl #2
 5bc:	00000090 	muleq	r0, r0, r0
 5c0:	40080e41 	andmi	r0, r8, r1, asr #28
 5c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 5cc:	00070d41 	andeq	r0, r7, r1, asr #26
 5d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5d4:	00000504 	andeq	r0, r0, r4, lsl #10
 5d8:	20001194 	mulcs	r0, r4, r1
 5dc:	0000002a 	andeq	r0, r0, sl, lsr #32
 5e0:	40080e41 	andmi	r0, r8, r1, asr #28
 5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e8:	100e4101 	andne	r4, lr, r1, lsl #2
 5ec:	00070d41 	andeq	r0, r7, r1, asr #26
 5f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5f4:	00000504 	andeq	r0, r0, r4, lsl #10
 5f8:	200011be 			; <UNDEFINED> instruction: 0x200011be
 5fc:	00000076 	andeq	r0, r0, r6, ror r0
 600:	40080e41 	andmi	r0, r8, r1, asr #28
 604:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 608:	100e4101 	andne	r4, lr, r1, lsl #2
 60c:	00070d41 	andeq	r0, r7, r1, asr #26
 610:	0000001c 	andeq	r0, r0, ip, lsl r0
 614:	00000504 	andeq	r0, r0, r4, lsl #10
 618:	20001234 	andcs	r1, r0, r4, lsr r2
 61c:	00000040 	andeq	r0, r0, r0, asr #32
 620:	40080e41 	andmi	r0, r8, r1, asr #28
 624:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 628:	100e4101 	andne	r4, lr, r1, lsl #2
 62c:	00070d41 	andeq	r0, r7, r1, asr #26
 630:	0000001c 	andeq	r0, r0, ip, lsl r0
 634:	00000504 	andeq	r0, r0, r4, lsl #10
 638:	20001274 	andcs	r1, r0, r4, ror r2
 63c:	00000046 	andeq	r0, r0, r6, asr #32
 640:	40080e41 	andmi	r0, r8, r1, asr #28
 644:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 648:	100e4101 	andne	r4, lr, r1, lsl #2
 64c:	00070d41 	andeq	r0, r7, r1, asr #26
 650:	0000001c 	andeq	r0, r0, ip, lsl r0
 654:	00000504 	andeq	r0, r0, r4, lsl #10
 658:	200012ba 			; <UNDEFINED> instruction: 0x200012ba
 65c:	0000003e 	andeq	r0, r0, lr, lsr r0
 660:	40080e41 	andmi	r0, r8, r1, asr #28
 664:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 668:	100e4101 	andne	r4, lr, r1, lsl #2
 66c:	00070d41 	andeq	r0, r7, r1, asr #26
 670:	0000001c 	andeq	r0, r0, ip, lsl r0
 674:	00000504 	andeq	r0, r0, r4, lsl #10
 678:	200012f8 	strdcs	r1, [r0], -r8
 67c:	00000048 	andeq	r0, r0, r8, asr #32
 680:	40080e41 	andmi	r0, r8, r1, asr #28
 684:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 688:	100e4101 	andne	r4, lr, r1, lsl #2
 68c:	00070d41 	andeq	r0, r7, r1, asr #26
 690:	0000001c 	andeq	r0, r0, ip, lsl r0
 694:	00000504 	andeq	r0, r0, r4, lsl #10
 698:	20001340 	andcs	r1, r0, r0, asr #6
 69c:	000000b4 	strheq	r0, [r0], -r4
 6a0:	40080e41 	andmi	r0, r8, r1, asr #28
 6a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6a8:	200e4101 	andcs	r4, lr, r1, lsl #2
 6ac:	00070d41 	andeq	r0, r7, r1, asr #26
 6b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6b4:	00000504 	andeq	r0, r0, r4, lsl #10
 6b8:	200013f4 	strdcs	r1, [r0], -r4
 6bc:	0000002c 	andeq	r0, r0, ip, lsr #32
 6c0:	40080e41 	andmi	r0, r8, r1, asr #28
 6c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6c8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6cc:	00070d41 	andeq	r0, r7, r1, asr #26
 6d0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6d4:	00000504 	andeq	r0, r0, r4, lsl #10
 6d8:	20001420 	andcs	r1, r0, r0, lsr #8
 6dc:	00000030 	andeq	r0, r0, r0, lsr r0
 6e0:	40080e41 	andmi	r0, r8, r1, asr #28
 6e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e8:	180e4101 	stmdane	lr, {r0, r8, lr}
 6ec:	00070d41 	andeq	r0, r7, r1, asr #26
 6f0:	00000020 	andeq	r0, r0, r0, lsr #32
 6f4:	00000504 	andeq	r0, r0, r4, lsl #10
 6f8:	20001450 	andcs	r1, r0, r0, asr r4
 6fc:	000000e4 	andeq	r0, r0, r4, ror #1
 700:	400c0e41 	andmi	r0, ip, r1, asr #28
 704:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 708:	018e4002 	orreq	r4, lr, r2
 70c:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 710:	0000070d 	andeq	r0, r0, sp, lsl #14
 714:	0000001c 	andeq	r0, r0, ip, lsl r0
 718:	00000504 	andeq	r0, r0, r4, lsl #10
 71c:	20001534 	andcs	r1, r0, r4, lsr r5
 720:	00000074 	andeq	r0, r0, r4, ror r0
 724:	40080e41 	andmi	r0, r8, r1, asr #28
 728:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 72c:	180e4101 	stmdane	lr, {r0, r8, lr}
 730:	00070d41 	andeq	r0, r7, r1, asr #26
 734:	0000001c 	andeq	r0, r0, ip, lsl r0
 738:	00000504 	andeq	r0, r0, r4, lsl #10
 73c:	200015a8 	andcs	r1, r0, r8, lsr #11
 740:	00000078 	andeq	r0, r0, r8, ror r0
 744:	40080e41 	andmi	r0, r8, r1, asr #28
 748:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 74c:	180e4101 	stmdane	lr, {r0, r8, lr}
 750:	00070d41 	andeq	r0, r7, r1, asr #26
 754:	0000001c 	andeq	r0, r0, ip, lsl r0
 758:	00000504 	andeq	r0, r0, r4, lsl #10
 75c:	20001620 	andcs	r1, r0, r0, lsr #12
 760:	00000044 	andeq	r0, r0, r4, asr #32
 764:	40080e41 	andmi	r0, r8, r1, asr #28
 768:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 76c:	180e4101 	stmdane	lr, {r0, r8, lr}
 770:	00070d41 	andeq	r0, r7, r1, asr #26
 774:	0000001c 	andeq	r0, r0, ip, lsl r0
 778:	00000504 	andeq	r0, r0, r4, lsl #10
 77c:	20001664 	andcs	r1, r0, r4, ror #12
 780:	00000048 	andeq	r0, r0, r8, asr #32
 784:	40080e41 	andmi	r0, r8, r1, asr #28
 788:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 78c:	180e4101 	stmdane	lr, {r0, r8, lr}
 790:	00070d41 	andeq	r0, r7, r1, asr #26
 794:	0000001c 	andeq	r0, r0, ip, lsl r0
 798:	00000504 	andeq	r0, r0, r4, lsl #10
 79c:	200016ac 	andcs	r1, r0, ip, lsr #13
 7a0:	00000030 	andeq	r0, r0, r0, lsr r0
 7a4:	40080e41 	andmi	r0, r8, r1, asr #28
 7a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ac:	100e4101 	andne	r4, lr, r1, lsl #2
 7b0:	00070d41 	andeq	r0, r7, r1, asr #26
 7b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7b8:	00000504 	andeq	r0, r0, r4, lsl #10
 7bc:	200016dc 	ldrdcs	r1, [r0], -ip
 7c0:	00000024 	andeq	r0, r0, r4, lsr #32
 7c4:	40080e41 	andmi	r0, r8, r1, asr #28
 7c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7cc:	100e4101 	andne	r4, lr, r1, lsl #2
 7d0:	00070d41 	andeq	r0, r7, r1, asr #26
 7d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7d8:	00000504 	andeq	r0, r0, r4, lsl #10
 7dc:	20001700 	andcs	r1, r0, r0, lsl #14
 7e0:	0000002a 	andeq	r0, r0, sl, lsr #32
 7e4:	40080e41 	andmi	r0, r8, r1, asr #28
 7e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7ec:	100e4101 	andne	r4, lr, r1, lsl #2
 7f0:	00070d41 	andeq	r0, r7, r1, asr #26
 7f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 7f8:	00000504 	andeq	r0, r0, r4, lsl #10
 7fc:	2000172a 	andcs	r1, r0, sl, lsr #14
 800:	00000032 	andeq	r0, r0, r2, lsr r0
 804:	40080e41 	andmi	r0, r8, r1, asr #28
 808:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 80c:	100e4101 	andne	r4, lr, r1, lsl #2
 810:	00070d41 	andeq	r0, r7, r1, asr #26
 814:	00000020 	andeq	r0, r0, r0, lsr #32
 818:	00000504 	andeq	r0, r0, r4, lsl #10
 81c:	2000175c 	andcs	r1, r0, ip, asr r7
 820:	0000003c 	andeq	r0, r0, ip, lsr r0
 824:	400c0e41 	andmi	r0, ip, r1, asr #28
 828:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 82c:	018e4002 	orreq	r4, lr, r2
 830:	41180e41 	tstmi	r8, r1, asr #28
 834:	0000070d 	andeq	r0, r0, sp, lsl #14
 838:	00000020 	andeq	r0, r0, r0, lsr #32
 83c:	00000504 	andeq	r0, r0, r4, lsl #10
 840:	20001798 	mulcs	r0, r8, r7
 844:	00000040 	andeq	r0, r0, r0, asr #32
 848:	400c0e41 	andmi	r0, ip, r1, asr #28
 84c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 850:	018e4002 	orreq	r4, lr, r2
 854:	41180e41 	tstmi	r8, r1, asr #28
 858:	0000070d 	andeq	r0, r0, sp, lsl #14
 85c:	0000001c 	andeq	r0, r0, ip, lsl r0
 860:	00000504 	andeq	r0, r0, r4, lsl #10
 864:	200017d8 	ldrdcs	r1, [r0], -r8
 868:	0000003c 	andeq	r0, r0, ip, lsr r0
 86c:	40080e41 	andmi	r0, r8, r1, asr #28
 870:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 874:	100e4101 	andne	r4, lr, r1, lsl #2
 878:	00070d41 	andeq	r0, r7, r1, asr #26
 87c:	00000018 	andeq	r0, r0, r8, lsl r0
 880:	00000504 	andeq	r0, r0, r4, lsl #10
 884:	20001814 	andcs	r1, r0, r4, lsl r8
 888:	00000052 	andeq	r0, r0, r2, asr r0
 88c:	40080e41 	andmi	r0, r8, r1, asr #28
 890:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 894:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 898:	00000018 	andeq	r0, r0, r8, lsl r0
 89c:	00000504 	andeq	r0, r0, r4, lsl #10
 8a0:	20001866 	andcs	r1, r0, r6, ror #16
 8a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a8:	40080e41 	andmi	r0, r8, r1, asr #28
 8ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 8b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8b8:	00000504 	andeq	r0, r0, r4, lsl #10
 8bc:	20001882 	andcs	r1, r0, r2, lsl #17
 8c0:	0000003c 	andeq	r0, r0, ip, lsr r0
 8c4:	40080e41 	andmi	r0, r8, r1, asr #28
 8c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8cc:	100e4101 	andne	r4, lr, r1, lsl #2
 8d0:	00070d41 	andeq	r0, r7, r1, asr #26
 8d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8d8:	00000504 	andeq	r0, r0, r4, lsl #10
 8dc:	200018be 			; <UNDEFINED> instruction: 0x200018be
 8e0:	0000004e 	andeq	r0, r0, lr, asr #32
 8e4:	40080e41 	andmi	r0, r8, r1, asr #28
 8e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 8f0:	00070d41 	andeq	r0, r7, r1, asr #26
 8f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 8f8:	00000504 	andeq	r0, r0, r4, lsl #10
 8fc:	2000190c 	andcs	r1, r0, ip, lsl #18
 900:	00000054 	andeq	r0, r0, r4, asr r0
 904:	40080e41 	andmi	r0, r8, r1, asr #28
 908:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 90c:	200e4101 	andcs	r4, lr, r1, lsl #2
 910:	00070d41 	andeq	r0, r7, r1, asr #26
 914:	0000000c 	andeq	r0, r0, ip
 918:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 91c:	7c010001 	stcvc	0, cr0, [r1], {1}
 920:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 924:	0000000c 	andeq	r0, r0, ip
 928:	00000914 	andeq	r0, r0, r4, lsl r9
 92c:	20001961 	andcs	r1, r0, r1, ror #18
 930:	0000010a 	andeq	r0, r0, sl, lsl #2
 934:	0000000c 	andeq	r0, r0, ip
 938:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 93c:	7c010001 	stcvc	0, cr0, [r1], {1}
 940:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 944:	0000000c 	andeq	r0, r0, ip
 948:	00000934 	andeq	r0, r0, r4, lsr r9
 94c:	20001a75 	andcs	r1, r0, r5, ror sl
 950:	000001cc 	andeq	r0, r0, ip, asr #3
 954:	0000000c 	andeq	r0, r0, ip
 958:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 95c:	7c020001 	stcvc	0, cr0, [r2], {1}
 960:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 964:	00000024 	andeq	r0, r0, r4, lsr #32
 968:	00000954 	andeq	r0, r0, r4, asr r9
 96c:	20001cc8 	andcs	r1, r0, r8, asr #25
 970:	00000638 	andeq	r0, r0, r8, lsr r6
 974:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 978:	86048505 	strhi	r8, [r4], -r5, lsl #10
 97c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 980:	200e4601 	andcs	r4, lr, r1, lsl #12
 984:	07890888 	streq	r0, [r9, r8, lsl #17]
 988:	0000068a 	andeq	r0, r0, sl, lsl #13
 98c:	0000000c 	andeq	r0, r0, ip
 990:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 994:	7c020001 	stcvc	0, cr0, [r2], {1}
 998:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 99c:	00000024 	andeq	r0, r0, r4, lsr #32
 9a0:	0000098c 	andeq	r0, r0, ip, lsl #19
 9a4:	20002300 	andcs	r2, r0, r0, lsl #6
 9a8:	00000078 	andeq	r0, r0, r8, ror r0
 9ac:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 9b0:	86048505 	strhi	r8, [r4], -r5, lsl #10
 9b4:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 9b8:	200e4501 	andcs	r4, lr, r1, lsl #10
 9bc:	07890888 	streq	r0, [r9, r8, lsl #17]
 9c0:	0000068a 	andeq	r0, r0, sl, lsl #13
 9c4:	0000000c 	andeq	r0, r0, ip
 9c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9cc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9d4:	00000024 	andeq	r0, r0, r4, lsr #32
 9d8:	000009c4 	andeq	r0, r0, r4, asr #19
 9dc:	20002378 	andcs	r2, r0, r8, ror r3
 9e0:	000000c8 	andeq	r0, r0, r8, asr #1
 9e4:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 9e8:	86048505 	strhi	r8, [r4], -r5, lsl #10
 9ec:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 9f0:	200e4501 	andcs	r4, lr, r1, lsl #10
 9f4:	07890888 	streq	r0, [r9, r8, lsl #17]
 9f8:	0000068a 	andeq	r0, r0, sl, lsl #13
 9fc:	0000000c 	andeq	r0, r0, ip
 a00:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a04:	7c020001 	stcvc	0, cr0, [r2], {1}
 a08:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a0c:	00000024 	andeq	r0, r0, r4, lsr #32
 a10:	000009fc 	strdeq	r0, [r0], -ip
 a14:	20002440 	andcs	r2, r0, r0, asr #8
 a18:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 a1c:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 a20:	86048505 	strhi	r8, [r4], -r5, lsl #10
 a24:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 a28:	200e4501 	andcs	r4, lr, r1, lsl #10
 a2c:	07890888 	streq	r0, [r9, r8, lsl #17]
 a30:	0000068a 	andeq	r0, r0, sl, lsl #13
 a34:	0000000c 	andeq	r0, r0, ip
 a38:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a3c:	7c020001 	stcvc	0, cr0, [r2], {1}
 a40:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a44:	00000028 	andeq	r0, r0, r8, lsr #32
 a48:	00000a34 	andeq	r0, r0, r4, lsr sl
 a4c:	20002510 	andcs	r2, r0, r0, lsl r5
 a50:	00000690 	muleq	r0, r0, r6
 a54:	83180e41 	tsthi	r8, #1040	; 0x410
 a58:	85058406 	strhi	r8, [r5, #-1030]	; 0xfffffbfa
 a5c:	87038604 	strhi	r8, [r3, -r4, lsl #12]
 a60:	47018e02 	strmi	r8, [r1, -r2, lsl #28]
 a64:	0a88280e 	beq	fe20aaa4 <Pedro+0xde2073b4>
 a68:	088a0989 	stmeq	sl, {r0, r3, r7, r8, fp}
 a6c:	0000078b 	andeq	r0, r0, fp, lsl #15
 a70:	0000000c 	andeq	r0, r0, ip
 a74:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a78:	7c020001 	stcvc	0, cr0, [r2], {1}
 a7c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a80:	00000018 	andeq	r0, r0, r8, lsl r0
 a84:	00000a70 	andeq	r0, r0, r0, ror sl
 a88:	20002ba0 	andcs	r2, r0, r0, lsr #23
 a8c:	0000006c 	andeq	r0, r0, ip, rrx
 a90:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 a94:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 a98:	00000001 	andeq	r0, r0, r1
 a9c:	0000000c 	andeq	r0, r0, ip
 aa0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 aa4:	7c020001 	stcvc	0, cr0, [r2], {1}
 aa8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 aac:	00000014 	andeq	r0, r0, r4, lsl r0
 ab0:	00000a9c 	muleq	r0, ip, sl
 ab4:	20002c48 	andcs	r2, r0, r8, asr #24
 ab8:	00000030 	andeq	r0, r0, r0, lsr r0
 abc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 ac0:	00018e02 	andeq	r8, r1, r2, lsl #28
 ac4:	00000014 	andeq	r0, r0, r4, lsl r0
 ac8:	00000a9c 	muleq	r0, ip, sl
 acc:	20002c78 	andcs	r2, r0, r8, ror ip
 ad0:	00000008 	andeq	r0, r0, r8
 ad4:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 ad8:	00018e02 	andeq	r8, r1, r2, lsl #28
 adc:	0000000c 	andeq	r0, r0, ip
 ae0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 ae4:	7c020001 	stcvc	0, cr0, [r2], {1}
 ae8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 aec:	00000014 	andeq	r0, r0, r4, lsl r0
 af0:	00000adc 	ldrdeq	r0, [r0], -ip
 af4:	20002c80 	andcs	r2, r0, r0, lsl #25
 af8:	00000012 	andeq	r0, r0, r2, lsl r0
 afc:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 b00:	00018e02 	andeq	r8, r1, r2, lsl #28
 b04:	0000000c 	andeq	r0, r0, ip
 b08:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 b0c:	7c020001 	stcvc	0, cr0, [r2], {1}
 b10:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b14:	0000001c 	andeq	r0, r0, ip, lsl r0
 b18:	00000b04 	andeq	r0, r0, r4, lsl #22
 b1c:	20002c94 	mulcs	r0, r4, ip
 b20:	00000064 	andeq	r0, r0, r4, rrx
 b24:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 b28:	86048505 	strhi	r8, [r4], -r5, lsl #10
 b2c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 b30:	480e4201 	stmdami	lr, {r0, r9, lr}
 b34:	00000014 	andeq	r0, r0, r4, lsl r0
 b38:	00000b04 	andeq	r0, r0, r4, lsl #22
 b3c:	20002cf8 	strdcs	r2, [r0], -r8
 b40:	00000008 	andeq	r0, r0, r8
 b44:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 b48:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000ca4 	andcs	r0, r0, r4, lsr #25
   4:	20000f46 	andcs	r0, r0, r6, asr #30
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
