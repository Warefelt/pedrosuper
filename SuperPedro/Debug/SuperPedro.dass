
./Debug/SuperPedro.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fa74 	bl	200004f0 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#include "delays.h"

void delay_250ns(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL=0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/4-1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL=0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	*STK_CTRL=0;
20000058:	4b0c      	ldr	r3, [pc, #48]	; (2000008c <delay_500ns+0x38>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/2-1;
2000005e:	4b0c      	ldr	r3, [pc, #48]	; (20000090 <delay_500ns+0x3c>)
20000060:	2253      	movs	r2, #83	; 0x53
20000062:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_500ns+0x40>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
2000006a:	4b08      	ldr	r3, [pc, #32]	; (2000008c <delay_500ns+0x38>)
2000006c:	2205      	movs	r2, #5
2000006e:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	4b06      	ldr	r3, [pc, #24]	; (2000008c <delay_500ns+0x38>)
20000074:	681a      	ldr	r2, [r3, #0]
20000076:	2380      	movs	r3, #128	; 0x80
20000078:	025b      	lsls	r3, r3, #9
2000007a:	4013      	ands	r3, r2
2000007c:	d0f9      	beq.n	20000072 <delay_500ns+0x1e>
    *STK_CTRL=0;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <delay_500ns+0x38>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	bd80      	pop	{r7, pc}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	e000e010 	and	lr, r0, r0, lsl r0
20000090:	e000e014 	and	lr, r0, r4, lsl r0
20000094:	e000e018 	and	lr, r0, r8, lsl r0

20000098 <delaymicros>:

void delaymicros(int micros){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
    #ifdef NONSIMULATOR
		//micros *= 1000;
	#endif
    for(int i = 0; i < micros * 2; i++){
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delaymicros+0x18>
        delay_500ns();
200000a6:	f7ff ffd5 	bl	20000054 <delay_500ns>
    for(int i = 0; i < micros * 2; i++){
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	005b      	lsls	r3, r3, #1
200000b4:	68fa      	ldr	r2, [r7, #12]
200000b6:	429a      	cmp	r2, r3
200000b8:	dbf5      	blt.n	200000a6 <delaymicros+0xe>
    }
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b004      	add	sp, #16
200000c0:	bd80      	pop	{r7, pc}

200000c2 <delaymillis>:


void delaymillis(int millis){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	6078      	str	r0, [r7, #4]
	delaymicros(millis * 1000);
200000ca:	687a      	ldr	r2, [r7, #4]
200000cc:	0013      	movs	r3, r2
200000ce:	015b      	lsls	r3, r3, #5
200000d0:	1a9b      	subs	r3, r3, r2
200000d2:	009b      	lsls	r3, r3, #2
200000d4:	189b      	adds	r3, r3, r2
200000d6:	00db      	lsls	r3, r3, #3
200000d8:	0018      	movs	r0, r3
200000da:	f7ff ffdd 	bl	20000098 <delaymicros>
}
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	46bd      	mov	sp, r7
200000e2:	b002      	add	sp, #8
200000e4:	bd80      	pop	{r7, pc}
200000e6:	46c0      	nop			; (mov r8, r8)

200000e8 <kbdActivate>:
#include "keyfuncs.h"
#include "gpio.h"

void kbdActivate(unsigned int row){
200000e8:	b580      	push	{r7, lr}
200000ea:	b082      	sub	sp, #8
200000ec:	af00      	add	r7, sp, #0
200000ee:	6078      	str	r0, [r7, #4]
    switch(row){
200000f0:	687b      	ldr	r3, [r7, #4]
200000f2:	2b02      	cmp	r3, #2
200000f4:	d00c      	beq.n	20000110 <kbdActivate+0x28>
200000f6:	d802      	bhi.n	200000fe <kbdActivate+0x16>
200000f8:	2b01      	cmp	r3, #1
200000fa:	d005      	beq.n	20000108 <kbdActivate+0x20>
200000fc:	e014      	b.n	20000128 <kbdActivate+0x40>
200000fe:	2b03      	cmp	r3, #3
20000100:	d00a      	beq.n	20000118 <kbdActivate+0x30>
20000102:	2b04      	cmp	r3, #4
20000104:	d00c      	beq.n	20000120 <kbdActivate+0x38>
20000106:	e00f      	b.n	20000128 <kbdActivate+0x40>
        case 1: 
            GPIO_D->odrHigh = 0x10;
20000108:	4b0b      	ldr	r3, [pc, #44]	; (20000138 <kbdActivate+0x50>)
2000010a:	2210      	movs	r2, #16
2000010c:	755a      	strb	r2, [r3, #21]
            break;
2000010e:	e00e      	b.n	2000012e <kbdActivate+0x46>
        case 2: 
            GPIO_D->odrHigh = 0x20;
20000110:	4b09      	ldr	r3, [pc, #36]	; (20000138 <kbdActivate+0x50>)
20000112:	2220      	movs	r2, #32
20000114:	755a      	strb	r2, [r3, #21]
            break;
20000116:	e00a      	b.n	2000012e <kbdActivate+0x46>
        case 3: 
            GPIO_D->odrHigh = 0x40;
20000118:	4b07      	ldr	r3, [pc, #28]	; (20000138 <kbdActivate+0x50>)
2000011a:	2240      	movs	r2, #64	; 0x40
2000011c:	755a      	strb	r2, [r3, #21]
            break;
2000011e:	e006      	b.n	2000012e <kbdActivate+0x46>
        case 4: 
            GPIO_D->odrHigh = 0x80;
20000120:	4b05      	ldr	r3, [pc, #20]	; (20000138 <kbdActivate+0x50>)
20000122:	2280      	movs	r2, #128	; 0x80
20000124:	755a      	strb	r2, [r3, #21]
            break;
20000126:	e002      	b.n	2000012e <kbdActivate+0x46>
        default: 
            GPIO_D->odrHigh = 0;
20000128:	4b03      	ldr	r3, [pc, #12]	; (20000138 <kbdActivate+0x50>)
2000012a:	2200      	movs	r2, #0
2000012c:	755a      	strb	r2, [r3, #21]
    }
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	b002      	add	sp, #8
20000134:	bd80      	pop	{r7, pc}
20000136:	46c0      	nop			; (mov r8, r8)
20000138:	40020c00 	andmi	r0, r2, r0, lsl #24

2000013c <kbdGetCol>:

int kbdGetCol(){                    
2000013c:	b580      	push	{r7, lr}
2000013e:	af00      	add	r7, sp, #0
    if(GPIO_D->idrHigh & 8) 
20000140:	4b13      	ldr	r3, [pc, #76]	; (20000190 <kbdGetCol+0x54>)
20000142:	7c5b      	ldrb	r3, [r3, #17]
20000144:	b2db      	uxtb	r3, r3
20000146:	001a      	movs	r2, r3
20000148:	2308      	movs	r3, #8
2000014a:	4013      	ands	r3, r2
2000014c:	d001      	beq.n	20000152 <kbdGetCol+0x16>
        return 4;
2000014e:	2304      	movs	r3, #4
20000150:	e01b      	b.n	2000018a <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 4) 
20000152:	4b0f      	ldr	r3, [pc, #60]	; (20000190 <kbdGetCol+0x54>)
20000154:	7c5b      	ldrb	r3, [r3, #17]
20000156:	b2db      	uxtb	r3, r3
20000158:	001a      	movs	r2, r3
2000015a:	2304      	movs	r3, #4
2000015c:	4013      	ands	r3, r2
2000015e:	d001      	beq.n	20000164 <kbdGetCol+0x28>
        return 3;
20000160:	2303      	movs	r3, #3
20000162:	e012      	b.n	2000018a <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 2) 
20000164:	4b0a      	ldr	r3, [pc, #40]	; (20000190 <kbdGetCol+0x54>)
20000166:	7c5b      	ldrb	r3, [r3, #17]
20000168:	b2db      	uxtb	r3, r3
2000016a:	001a      	movs	r2, r3
2000016c:	2302      	movs	r3, #2
2000016e:	4013      	ands	r3, r2
20000170:	d001      	beq.n	20000176 <kbdGetCol+0x3a>
        return 2;
20000172:	2302      	movs	r3, #2
20000174:	e009      	b.n	2000018a <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 1) 
20000176:	4b06      	ldr	r3, [pc, #24]	; (20000190 <kbdGetCol+0x54>)
20000178:	7c5b      	ldrb	r3, [r3, #17]
2000017a:	b2db      	uxtb	r3, r3
2000017c:	001a      	movs	r2, r3
2000017e:	2301      	movs	r3, #1
20000180:	4013      	ands	r3, r2
20000182:	d001      	beq.n	20000188 <kbdGetCol+0x4c>
        return 1;
20000184:	2301      	movs	r3, #1
20000186:	e000      	b.n	2000018a <kbdGetCol+0x4e>
    return 0;
20000188:	2300      	movs	r3, #0
}
2000018a:	0018      	movs	r0, r3
2000018c:	46bd      	mov	sp, r7
2000018e:	bd80      	pop	{r7, pc}
20000190:	40020c00 	andmi	r0, r2, r0, lsl #24

20000194 <isUpKey>:


char isUpKey(){
20000194:	b580      	push	{r7, lr}
20000196:	af00      	add	r7, sp, #0
	kbdActivate(3);	//row3
20000198:	2003      	movs	r0, #3
2000019a:	f7ff ffa5 	bl	200000e8 <kbdActivate>
	kbdActivate(4);         //power off kbd-rows
2000019e:	2004      	movs	r0, #4
200001a0:	f7ff ffa2 	bl	200000e8 <kbdActivate>
	if(kbdGetCol() == 3){
200001a4:	f7ff ffca 	bl	2000013c <kbdGetCol>
200001a8:	0003      	movs	r3, r0
200001aa:	2b03      	cmp	r3, #3
200001ac:	d104      	bne.n	200001b8 <isUpKey+0x24>
		kbdActivate(0);         //power off kbd-rows
200001ae:	2000      	movs	r0, #0
200001b0:	f7ff ff9a 	bl	200000e8 <kbdActivate>
		return 1;
200001b4:	2301      	movs	r3, #1
200001b6:	e000      	b.n	200001ba <isUpKey+0x26>
	}
	return 0;
200001b8:	2300      	movs	r3, #0
}
200001ba:	0018      	movs	r0, r3
200001bc:	46bd      	mov	sp, r7
200001be:	bd80      	pop	{r7, pc}

200001c0 <isRightKey>:
char isRightKey(){
200001c0:	b580      	push	{r7, lr}
200001c2:	af00      	add	r7, sp, #0
	kbdActivate(4);
200001c4:	2004      	movs	r0, #4
200001c6:	f7ff ff8f 	bl	200000e8 <kbdActivate>
	if(kbdGetCol() == 4){
200001ca:	f7ff ffb7 	bl	2000013c <kbdGetCol>
200001ce:	0003      	movs	r3, r0
200001d0:	2b04      	cmp	r3, #4
200001d2:	d104      	bne.n	200001de <isRightKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
200001d4:	2000      	movs	r0, #0
200001d6:	f7ff ff87 	bl	200000e8 <kbdActivate>
		return 1;
200001da:	2301      	movs	r3, #1
200001dc:	e000      	b.n	200001e0 <isRightKey+0x20>
	}
return 0;
200001de:	2300      	movs	r3, #0
	
}
200001e0:	0018      	movs	r0, r3
200001e2:	46bd      	mov	sp, r7
200001e4:	bd80      	pop	{r7, pc}

200001e6 <isLeftKey>:
char isLeftKey(){
200001e6:	b580      	push	{r7, lr}
200001e8:	af00      	add	r7, sp, #0
	kbdActivate(4);
200001ea:	2004      	movs	r0, #4
200001ec:	f7ff ff7c 	bl	200000e8 <kbdActivate>
	if(kbdGetCol() == 2){
200001f0:	f7ff ffa4 	bl	2000013c <kbdGetCol>
200001f4:	0003      	movs	r3, r0
200001f6:	2b02      	cmp	r3, #2
200001f8:	d104      	bne.n	20000204 <isLeftKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
200001fa:	2000      	movs	r0, #0
200001fc:	f7ff ff74 	bl	200000e8 <kbdActivate>
		return 1;
20000200:	2301      	movs	r3, #1
20000202:	e000      	b.n	20000206 <isLeftKey+0x20>
	}
	return 0;
20000204:	2300      	movs	r3, #0
	
}
20000206:	0018      	movs	r0, r3
20000208:	46bd      	mov	sp, r7
2000020a:	bd80      	pop	{r7, pc}

2000020c <move>:
	0, 
    /*komplettera?*/
};


void move(){								//Kollar knapptryck och uppdaterar alla Pedros värden
2000020c:	b580      	push	{r7, lr}
2000020e:	af00      	add	r7, sp, #0
    
    checkKeys();
20000210:	f000 f81a 	bl	20000248 <checkKeys>

    applyPhysics();
20000214:	f000 f874 	bl	20000300 <applyPhysics>
    
    if(Pedro.velx > 0){
20000218:	4b0a      	ldr	r3, [pc, #40]	; (20000244 <move+0x38>)
2000021a:	691b      	ldr	r3, [r3, #16]
2000021c:	2b00      	cmp	r3, #0
2000021e:	dd02      	ble.n	20000226 <move+0x1a>
        shiftLeft();
20000220:	f000 fc9c 	bl	20000b5c <shiftLeft>
20000224:	e005      	b.n	20000232 <move+0x26>
    }
    else if(Pedro.velx < 0){
20000226:	4b07      	ldr	r3, [pc, #28]	; (20000244 <move+0x38>)
20000228:	691b      	ldr	r3, [r3, #16]
2000022a:	2b00      	cmp	r3, #0
2000022c:	da01      	bge.n	20000232 <move+0x26>
        shiftRight();
2000022e:	f000 fc5b 	bl	20000ae8 <shiftRight>
    }
    graphic_draw_screen();
20000232:	f000 fbe9 	bl	20000a08 <graphic_draw_screen>
    draw(&Pedro);  //extra args? FLYTTA? han kan ritas ut med resten av skärmen_________________________________________________________________________________* 
20000236:	4b03      	ldr	r3, [pc, #12]	; (20000244 <move+0x38>)
20000238:	0018      	movs	r0, r3
2000023a:	f000 f88b 	bl	20000354 <draw>

}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	bd80      	pop	{r7, pc}
20000244:	200013d4 	ldrdcs	r1, [r0], -r4

20000248 <checkKeys>:

//check keypresses and change pedros properties (acceleration for <- ^ -> and velocity for ^) accordingly
void checkKeys(){
20000248:	b580      	push	{r7, lr}
2000024a:	af00      	add	r7, sp, #0
    if(isRightKey() && !isLeftKey()){     //Kräver importerad keyb
2000024c:	f7ff ffb8 	bl	200001c0 <isRightKey>
20000250:	1e03      	subs	r3, r0, #0
20000252:	d00f      	beq.n	20000274 <checkKeys+0x2c>
20000254:	f7ff ffc7 	bl	200001e6 <isLeftKey>
20000258:	1e03      	subs	r3, r0, #0
2000025a:	d10b      	bne.n	20000274 <checkKeys+0x2c>
		if(Pedro.velx < MAX_VELX){
2000025c:	4b27      	ldr	r3, [pc, #156]	; (200002fc <checkKeys+0xb4>)
2000025e:	691b      	ldr	r3, [r3, #16]
20000260:	2b03      	cmp	r3, #3
20000262:	dc03      	bgt.n	2000026c <checkKeys+0x24>
			Pedro.accx = ACCX;     //accelerate right
20000264:	4b25      	ldr	r3, [pc, #148]	; (200002fc <checkKeys+0xb4>)
20000266:	2201      	movs	r2, #1
20000268:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
2000026a:	e02d      	b.n	200002c8 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
2000026c:	4b23      	ldr	r3, [pc, #140]	; (200002fc <checkKeys+0xb4>)
2000026e:	2200      	movs	r2, #0
20000270:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
20000272:	e029      	b.n	200002c8 <checkKeys+0x80>
		}
	}
	else if(!isRightKey() && isLeftKey())
20000274:	f7ff ffa4 	bl	200001c0 <isRightKey>
20000278:	1e03      	subs	r3, r0, #0
2000027a:	d110      	bne.n	2000029e <checkKeys+0x56>
2000027c:	f7ff ffb3 	bl	200001e6 <isLeftKey>
20000280:	1e03      	subs	r3, r0, #0
20000282:	d00c      	beq.n	2000029e <checkKeys+0x56>
	{
		if(Pedro.velx > -MAX_VELX){
20000284:	4b1d      	ldr	r3, [pc, #116]	; (200002fc <checkKeys+0xb4>)
20000286:	691b      	ldr	r3, [r3, #16]
20000288:	3303      	adds	r3, #3
2000028a:	db04      	blt.n	20000296 <checkKeys+0x4e>
			Pedro.accx = -ACCX;    //accelerate left
2000028c:	4b1b      	ldr	r3, [pc, #108]	; (200002fc <checkKeys+0xb4>)
2000028e:	2201      	movs	r2, #1
20000290:	4252      	negs	r2, r2
20000292:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
20000294:	e018      	b.n	200002c8 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
20000296:	4b19      	ldr	r3, [pc, #100]	; (200002fc <checkKeys+0xb4>)
20000298:	2200      	movs	r2, #0
2000029a:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
2000029c:	e014      	b.n	200002c8 <checkKeys+0x80>
		}
	}
	else                            //decrease velocity
	{
		Pedro.accx = 0;
2000029e:	4b17      	ldr	r3, [pc, #92]	; (200002fc <checkKeys+0xb4>)
200002a0:	2200      	movs	r2, #0
200002a2:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > 0){
200002a4:	4b15      	ldr	r3, [pc, #84]	; (200002fc <checkKeys+0xb4>)
200002a6:	691b      	ldr	r3, [r3, #16]
200002a8:	2b00      	cmp	r3, #0
200002aa:	dd04      	ble.n	200002b6 <checkKeys+0x6e>
			Pedro.velx -= ACCX;
200002ac:	4b13      	ldr	r3, [pc, #76]	; (200002fc <checkKeys+0xb4>)
200002ae:	691b      	ldr	r3, [r3, #16]
200002b0:	1e5a      	subs	r2, r3, #1
200002b2:	4b12      	ldr	r3, [pc, #72]	; (200002fc <checkKeys+0xb4>)
200002b4:	611a      	str	r2, [r3, #16]
		}
		if(Pedro.velx < 0){
200002b6:	4b11      	ldr	r3, [pc, #68]	; (200002fc <checkKeys+0xb4>)
200002b8:	691b      	ldr	r3, [r3, #16]
200002ba:	2b00      	cmp	r3, #0
200002bc:	da04      	bge.n	200002c8 <checkKeys+0x80>
			Pedro.velx += ACCX;
200002be:	4b0f      	ldr	r3, [pc, #60]	; (200002fc <checkKeys+0xb4>)
200002c0:	691b      	ldr	r3, [r3, #16]
200002c2:	1c5a      	adds	r2, r3, #1
200002c4:	4b0d      	ldr	r3, [pc, #52]	; (200002fc <checkKeys+0xb4>)
200002c6:	611a      	str	r2, [r3, #16]
		}
	}
    
    if(isJumping()){
200002c8:	f000 f83e 	bl	20000348 <isJumping>
200002cc:	1e03      	subs	r3, r0, #0
200002ce:	d003      	beq.n	200002d8 <checkKeys+0x90>
        Pedro.accy = 1;
200002d0:	4b0a      	ldr	r3, [pc, #40]	; (200002fc <checkKeys+0xb4>)
200002d2:	2201      	movs	r2, #1
200002d4:	61da      	str	r2, [r3, #28]
			Pedro.vely = VELY;    //jump
            Pedro.accy = 1;
		}
	}
    
}
200002d6:	e00d      	b.n	200002f4 <checkKeys+0xac>
        Pedro.accy = 0;
200002d8:	4b08      	ldr	r3, [pc, #32]	; (200002fc <checkKeys+0xb4>)
200002da:	2200      	movs	r2, #0
200002dc:	61da      	str	r2, [r3, #28]
        if(isUpKey()){
200002de:	f7ff ff59 	bl	20000194 <isUpKey>
200002e2:	1e03      	subs	r3, r0, #0
200002e4:	d006      	beq.n	200002f4 <checkKeys+0xac>
			Pedro.vely = VELY;    //jump
200002e6:	4b05      	ldr	r3, [pc, #20]	; (200002fc <checkKeys+0xb4>)
200002e8:	220a      	movs	r2, #10
200002ea:	4252      	negs	r2, r2
200002ec:	615a      	str	r2, [r3, #20]
            Pedro.accy = 1;
200002ee:	4b03      	ldr	r3, [pc, #12]	; (200002fc <checkKeys+0xb4>)
200002f0:	2201      	movs	r2, #1
200002f2:	61da      	str	r2, [r3, #28]
}
200002f4:	46c0      	nop			; (mov r8, r8)
200002f6:	46bd      	mov	sp, r7
200002f8:	bd80      	pop	{r7, pc}
200002fa:	46c0      	nop			; (mov r8, r8)
200002fc:	200013d4 	ldrdcs	r1, [r0], -r4

20000300 <applyPhysics>:

void applyPhysics(){
20000300:	b580      	push	{r7, lr}
20000302:	af00      	add	r7, sp, #0
    //physics
    Pedro.velx += Pedro.accx;
20000304:	4b0f      	ldr	r3, [pc, #60]	; (20000344 <applyPhysics+0x44>)
20000306:	691a      	ldr	r2, [r3, #16]
20000308:	4b0e      	ldr	r3, [pc, #56]	; (20000344 <applyPhysics+0x44>)
2000030a:	699b      	ldr	r3, [r3, #24]
2000030c:	18d2      	adds	r2, r2, r3
2000030e:	4b0d      	ldr	r3, [pc, #52]	; (20000344 <applyPhysics+0x44>)
20000310:	611a      	str	r2, [r3, #16]
	Pedro.posx += Pedro.velx;
20000312:	4b0c      	ldr	r3, [pc, #48]	; (20000344 <applyPhysics+0x44>)
20000314:	689a      	ldr	r2, [r3, #8]
20000316:	4b0b      	ldr	r3, [pc, #44]	; (20000344 <applyPhysics+0x44>)
20000318:	691b      	ldr	r3, [r3, #16]
2000031a:	18d2      	adds	r2, r2, r3
2000031c:	4b09      	ldr	r3, [pc, #36]	; (20000344 <applyPhysics+0x44>)
2000031e:	609a      	str	r2, [r3, #8]
    
    Pedro.vely += Pedro.accy;
20000320:	4b08      	ldr	r3, [pc, #32]	; (20000344 <applyPhysics+0x44>)
20000322:	695a      	ldr	r2, [r3, #20]
20000324:	4b07      	ldr	r3, [pc, #28]	; (20000344 <applyPhysics+0x44>)
20000326:	69db      	ldr	r3, [r3, #28]
20000328:	18d2      	adds	r2, r2, r3
2000032a:	4b06      	ldr	r3, [pc, #24]	; (20000344 <applyPhysics+0x44>)
2000032c:	615a      	str	r2, [r3, #20]
	Pedro.posy += Pedro.vely;
2000032e:	4b05      	ldr	r3, [pc, #20]	; (20000344 <applyPhysics+0x44>)
20000330:	68da      	ldr	r2, [r3, #12]
20000332:	4b04      	ldr	r3, [pc, #16]	; (20000344 <applyPhysics+0x44>)
20000334:	695b      	ldr	r3, [r3, #20]
20000336:	18d2      	adds	r2, r2, r3
20000338:	4b02      	ldr	r3, [pc, #8]	; (20000344 <applyPhysics+0x44>)
2000033a:	60da      	str	r2, [r3, #12]
    
}
2000033c:	46c0      	nop			; (mov r8, r8)
2000033e:	46bd      	mov	sp, r7
20000340:	bd80      	pop	{r7, pc}
20000342:	46c0      	nop			; (mov r8, r8)
20000344:	200013d4 	ldrdcs	r1, [r0], -r4

20000348 <isJumping>:

char isJumping(){
20000348:	b580      	push	{r7, lr}
2000034a:	af00      	add	r7, sp, #0
    //return Pedro.posy < .....//groundlvl+pedroheight
}
2000034c:	46c0      	nop			; (mov r8, r8)
2000034e:	0018      	movs	r0, r3
20000350:	46bd      	mov	sp, r7
20000352:	bd80      	pop	{r7, pc}

20000354 <draw>:



void draw(POBJECT object){		//Ritar ut pedro enligt hans position och utseende. Dessa står fria att ändras i andra metoder
20000354:	b590      	push	{r4, r7, lr}
20000356:	b087      	sub	sp, #28
20000358:	af00      	add	r7, sp, #0
2000035a:	6078      	str	r0, [r7, #4]
	 unsigned char i, j;
	 unsigned char* man = object->sprite;
2000035c:	687b      	ldr	r3, [r7, #4]
2000035e:	3320      	adds	r3, #32
20000360:	613b      	str	r3, [r7, #16]
        for(j = 0; j < (object->height)/8; j++) {
20000362:	2316      	movs	r3, #22
20000364:	18fb      	adds	r3, r7, r3
20000366:	2200      	movs	r2, #0
20000368:	701a      	strb	r2, [r3, #0]
2000036a:	e052      	b.n	20000412 <draw+0xbe>
            graphic_write_command(LCD_SET_PAGE | (((63-object->posy-object->height)/8)+j), B_CS1);
2000036c:	687b      	ldr	r3, [r7, #4]
2000036e:	68db      	ldr	r3, [r3, #12]
20000370:	223f      	movs	r2, #63	; 0x3f
20000372:	1ad2      	subs	r2, r2, r3
20000374:	687b      	ldr	r3, [r7, #4]
20000376:	681b      	ldr	r3, [r3, #0]
20000378:	1ad3      	subs	r3, r2, r3
2000037a:	d500      	bpl.n	2000037e <draw+0x2a>
2000037c:	3307      	adds	r3, #7
2000037e:	10db      	asrs	r3, r3, #3
20000380:	b2da      	uxtb	r2, r3
20000382:	2316      	movs	r3, #22
20000384:	18fb      	adds	r3, r7, r3
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	18d3      	adds	r3, r2, r3
2000038a:	b2db      	uxtb	r3, r3
2000038c:	b25b      	sxtb	r3, r3
2000038e:	2248      	movs	r2, #72	; 0x48
20000390:	4252      	negs	r2, r2
20000392:	4313      	orrs	r3, r2
20000394:	b25b      	sxtb	r3, r3
20000396:	b2db      	uxtb	r3, r3
20000398:	2108      	movs	r1, #8
2000039a:	0018      	movs	r0, r3
2000039c:	f000 fa26 	bl	200007ec <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | object->posx, B_CS1);
200003a0:	687b      	ldr	r3, [r7, #4]
200003a2:	689b      	ldr	r3, [r3, #8]
200003a4:	b25b      	sxtb	r3, r3
200003a6:	2240      	movs	r2, #64	; 0x40
200003a8:	4313      	orrs	r3, r2
200003aa:	b25b      	sxtb	r3, r3
200003ac:	b2db      	uxtb	r3, r3
200003ae:	2108      	movs	r1, #8
200003b0:	0018      	movs	r0, r3
200003b2:	f000 fa1b 	bl	200007ec <graphic_write_command>
            for(i = 0; i < object->width; i++) {
200003b6:	2317      	movs	r3, #23
200003b8:	18fb      	adds	r3, r7, r3
200003ba:	2200      	movs	r2, #0
200003bc:	701a      	strb	r2, [r3, #0]
200003be:	e01b      	b.n	200003f8 <draw+0xa4>
				unsigned char byte = *(man+(j*object->width)+i);
200003c0:	2316      	movs	r3, #22
200003c2:	18fb      	adds	r3, r7, r3
200003c4:	781a      	ldrb	r2, [r3, #0]
200003c6:	687b      	ldr	r3, [r7, #4]
200003c8:	685b      	ldr	r3, [r3, #4]
200003ca:	4353      	muls	r3, r2
200003cc:	001a      	movs	r2, r3
200003ce:	2417      	movs	r4, #23
200003d0:	193b      	adds	r3, r7, r4
200003d2:	781b      	ldrb	r3, [r3, #0]
200003d4:	18d3      	adds	r3, r2, r3
200003d6:	693a      	ldr	r2, [r7, #16]
200003d8:	18d2      	adds	r2, r2, r3
200003da:	210f      	movs	r1, #15
200003dc:	187b      	adds	r3, r7, r1
200003de:	7812      	ldrb	r2, [r2, #0]
200003e0:	701a      	strb	r2, [r3, #0]
                graphic_write_data(byte, B_CS1);
200003e2:	187b      	adds	r3, r7, r1
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	2108      	movs	r1, #8
200003e8:	0018      	movs	r0, r3
200003ea:	f000 fa1f 	bl	2000082c <graphic_write_data>
            for(i = 0; i < object->width; i++) {
200003ee:	193b      	adds	r3, r7, r4
200003f0:	781a      	ldrb	r2, [r3, #0]
200003f2:	193b      	adds	r3, r7, r4
200003f4:	3201      	adds	r2, #1
200003f6:	701a      	strb	r2, [r3, #0]
200003f8:	2317      	movs	r3, #23
200003fa:	18fb      	adds	r3, r7, r3
200003fc:	781a      	ldrb	r2, [r3, #0]
200003fe:	687b      	ldr	r3, [r7, #4]
20000400:	685b      	ldr	r3, [r3, #4]
20000402:	429a      	cmp	r2, r3
20000404:	dbdc      	blt.n	200003c0 <draw+0x6c>
        for(j = 0; j < (object->height)/8; j++) {
20000406:	2116      	movs	r1, #22
20000408:	187b      	adds	r3, r7, r1
2000040a:	781a      	ldrb	r2, [r3, #0]
2000040c:	187b      	adds	r3, r7, r1
2000040e:	3201      	adds	r2, #1
20000410:	701a      	strb	r2, [r3, #0]
20000412:	2316      	movs	r3, #22
20000414:	18fb      	adds	r3, r7, r3
20000416:	781a      	ldrb	r2, [r3, #0]
20000418:	687b      	ldr	r3, [r7, #4]
2000041a:	681b      	ldr	r3, [r3, #0]
2000041c:	2b00      	cmp	r3, #0
2000041e:	da00      	bge.n	20000422 <draw+0xce>
20000420:	3307      	adds	r3, #7
20000422:	10db      	asrs	r3, r3, #3
20000424:	429a      	cmp	r2, r3
20000426:	dba1      	blt.n	2000036c <draw+0x18>
            }
        }
}
20000428:	46c0      	nop			; (mov r8, r8)
2000042a:	46bd      	mov	sp, r7
2000042c:	b007      	add	sp, #28
2000042e:	bd90      	pop	{r4, r7, pc}

20000430 <touchesPepper>:

char touchesPepper(){
20000430:	b580      	push	{r7, lr}
20000432:	af00      	add	r7, sp, #0
    //kolla nedre hörnen (om Pedro bredare än 16px även i mitten) först, om pixeln är 1 -> Pedro.touches = 1 innan
    //jfr pedrobyte & backbufferbyte
}
20000434:	46c0      	nop			; (mov r8, r8)
20000436:	0018      	movs	r0, r3
20000438:	46bd      	mov	sp, r7
2000043a:	bd80      	pop	{r7, pc}

2000043c <gpioInit>:
extern char backBuffer[256][8];

//#define USBDM
#define NONSIMULATOR

void gpioInit(){
2000043c:	b580      	push	{r7, lr}
2000043e:	af00      	add	r7, sp, #0
	
    GPIO_E->moder=0x55555555;		//------------------------------------------------------------------------------------------------
20000440:	4b10      	ldr	r3, [pc, #64]	; (20000484 <gpioInit+0x48>)
20000442:	4a11      	ldr	r2, [pc, #68]	; (20000488 <gpioInit+0x4c>)
20000444:	601a      	str	r2, [r3, #0]
    GPIO_D->moder = 0x55005555;
20000446:	4b11      	ldr	r3, [pc, #68]	; (2000048c <gpioInit+0x50>)
20000448:	4a11      	ldr	r2, [pc, #68]	; (20000490 <gpioInit+0x54>)
2000044a:	601a      	str	r2, [r3, #0]
    
	GPIO_D->otyper &= 0xFFFF00FF;
2000044c:	4b0f      	ldr	r3, [pc, #60]	; (2000048c <gpioInit+0x50>)
2000044e:	685a      	ldr	r2, [r3, #4]
20000450:	4b0e      	ldr	r3, [pc, #56]	; (2000048c <gpioInit+0x50>)
20000452:	4910      	ldr	r1, [pc, #64]	; (20000494 <gpioInit+0x58>)
20000454:	400a      	ands	r2, r1
20000456:	605a      	str	r2, [r3, #4]
	GPIO_D->otyper |= 0x00000F00;
20000458:	4b0c      	ldr	r3, [pc, #48]	; (2000048c <gpioInit+0x50>)
2000045a:	685a      	ldr	r2, [r3, #4]
2000045c:	4b0b      	ldr	r3, [pc, #44]	; (2000048c <gpioInit+0x50>)
2000045e:	21f0      	movs	r1, #240	; 0xf0
20000460:	0109      	lsls	r1, r1, #4
20000462:	430a      	orrs	r2, r1
20000464:	605a      	str	r2, [r3, #4]
	// Sätter pinnar 4-0 till "pull-down"
	GPIO_D->pupdr &= 0x0000FFFF;
20000466:	4b09      	ldr	r3, [pc, #36]	; (2000048c <gpioInit+0x50>)
20000468:	68da      	ldr	r2, [r3, #12]
2000046a:	4b08      	ldr	r3, [pc, #32]	; (2000048c <gpioInit+0x50>)
2000046c:	0412      	lsls	r2, r2, #16
2000046e:	0c12      	lsrs	r2, r2, #16
20000470:	60da      	str	r2, [r3, #12]
	GPIO_D->pupdr |= 0xFFAA0000;
20000472:	4b06      	ldr	r3, [pc, #24]	; (2000048c <gpioInit+0x50>)
20000474:	68da      	ldr	r2, [r3, #12]
20000476:	4b05      	ldr	r3, [pc, #20]	; (2000048c <gpioInit+0x50>)
20000478:	4907      	ldr	r1, [pc, #28]	; (20000498 <gpioInit+0x5c>)
2000047a:	430a      	orrs	r2, r1
2000047c:	60da      	str	r2, [r3, #12]

}
2000047e:	46c0      	nop			; (mov r8, r8)
20000480:	46bd      	mov	sp, r7
20000482:	bd80      	pop	{r7, pc}
20000484:	40021000 	andmi	r1, r2, r0
20000488:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
2000048c:	40020c00 	andmi	r0, r2, r0, lsl #24
20000490:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000494:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000498:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

2000049c <init>:



void init(){
2000049c:	b580      	push	{r7, lr}
2000049e:	af00      	add	r7, sp, #0
    #ifdef USBDM
		*((unsigned long*)0x40023830)=0x18;
    #endif
	
    gpioInit();
200004a0:	f7ff ffcc 	bl	2000043c <gpioInit>
    
    graphic_initialize();
200004a4:	f000 f8a3 	bl	200005ee <graphic_initialize>
//    ascii_initialize();     //todo?

	clear_backBuffer();
200004a8:	f000 fa02 	bl	200008b0 <clear_backBuffer>
	graphic_draw_screen();
200004ac:	f000 faac 	bl	20000a08 <graphic_draw_screen>

}
200004b0:	46c0      	nop			; (mov r8, r8)
200004b2:	46bd      	mov	sp, r7
200004b4:	bd80      	pop	{r7, pc}

200004b6 <loop>:





void loop(){
200004b6:	b580      	push	{r7, lr}
200004b8:	af00      	add	r7, sp, #0
	//(splash start)	
	//
	//	
	while(1){
		update();
200004ba:	f000 f801 	bl	200004c0 <update>
	while(1){
200004be:	e7fc      	b.n	200004ba <loop+0x4>

200004c0 <update>:
	//	
	//	
}


void update(){
200004c0:	b580      	push	{r7, lr}
200004c2:	af00      	add	r7, sp, #0
	}
    if(backBuffer[192][7] == 0){
//		loadNewLevelSegmentRight()
	}
	
	move();	//flyttar hela skärmen så det ser ut som att Pedro rör sig
200004c4:	f7ff fea2 	bl	2000020c <move>
    	
	//win/loss
	if(touchesPepper() == 1){
200004c8:	f7ff ffb2 	bl	20000430 <touchesPepper>
200004cc:	0003      	movs	r3, r0
200004ce:	2b01      	cmp	r3, #1
200004d0:	d101      	bne.n	200004d6 <update+0x16>
		onLoss();
200004d2:	f000 f803 	bl	200004dc <onLoss>
	}
/*	if(Pedro.distance == ){
		onWin();
	}*/
	
}
200004d6:	46c0      	nop			; (mov r8, r8)
200004d8:	46bd      	mov	sp, r7
200004da:	bd80      	pop	{r7, pc}

200004dc <onLoss>:




void onLoss(){
200004dc:	b580      	push	{r7, lr}
200004de:	af00      	add	r7, sp, #0
	
}
200004e0:	46c0      	nop			; (mov r8, r8)
200004e2:	46bd      	mov	sp, r7
200004e4:	bd80      	pop	{r7, pc}

200004e6 <onWin>:
void onWin(){
200004e6:	b580      	push	{r7, lr}
200004e8:	af00      	add	r7, sp, #0
	
}
200004ea:	46c0      	nop			; (mov r8, r8)
200004ec:	46bd      	mov	sp, r7
200004ee:	bd80      	pop	{r7, pc}

200004f0 <main>:





void main(void){
200004f0:	b580      	push	{r7, lr}
200004f2:	af00      	add	r7, sp, #0
	init();
200004f4:	f7ff ffd2 	bl	2000049c <init>
	while(1){
		loop();
200004f8:	f7ff ffdd 	bl	200004b6 <loop>
200004fc:	e7fc      	b.n	200004f8 <main+0x8>
200004fe:	46c0      	nop			; (mov r8, r8)

20000500 <graphic_ctrl_bit_set>:


uint8_t backBuffer[256][8]; // 256 * 64 / 8


void graphic_ctrl_bit_set(unsigned char x){
20000500:	b580      	push	{r7, lr}
20000502:	b084      	sub	sp, #16
20000504:	af00      	add	r7, sp, #0
20000506:	0002      	movs	r2, r0
20000508:	1dfb      	adds	r3, r7, #7
2000050a:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
2000050c:	4a0c      	ldr	r2, [pc, #48]	; (20000540 <graphic_ctrl_bit_set+0x40>)
2000050e:	200f      	movs	r0, #15
20000510:	183b      	adds	r3, r7, r0
20000512:	7d12      	ldrb	r2, [r2, #20]
20000514:	701a      	strb	r2, [r3, #0]
    c |= x;
20000516:	183b      	adds	r3, r7, r0
20000518:	1839      	adds	r1, r7, r0
2000051a:	1dfa      	adds	r2, r7, #7
2000051c:	7809      	ldrb	r1, [r1, #0]
2000051e:	7812      	ldrb	r2, [r2, #0]
20000520:	430a      	orrs	r2, r1
20000522:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000524:	183b      	adds	r3, r7, r0
20000526:	183a      	adds	r2, r7, r0
20000528:	7812      	ldrb	r2, [r2, #0]
2000052a:	2104      	movs	r1, #4
2000052c:	438a      	bics	r2, r1
2000052e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000530:	4a03      	ldr	r2, [pc, #12]	; (20000540 <graphic_ctrl_bit_set+0x40>)
20000532:	183b      	adds	r3, r7, r0
20000534:	781b      	ldrb	r3, [r3, #0]
20000536:	7513      	strb	r3, [r2, #20]
}
20000538:	46c0      	nop			; (mov r8, r8)
2000053a:	46bd      	mov	sp, r7
2000053c:	b004      	add	sp, #16
2000053e:	bd80      	pop	{r7, pc}
20000540:	40021000 	andmi	r1, r2, r0

20000544 <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x){
20000544:	b580      	push	{r7, lr}
20000546:	b084      	sub	sp, #16
20000548:	af00      	add	r7, sp, #0
2000054a:	0002      	movs	r2, r0
2000054c:	1dfb      	adds	r3, r7, #7
2000054e:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000550:	4a0f      	ldr	r2, [pc, #60]	; (20000590 <graphic_ctrl_bit_clear+0x4c>)
20000552:	210f      	movs	r1, #15
20000554:	187b      	adds	r3, r7, r1
20000556:	7d12      	ldrb	r2, [r2, #20]
20000558:	701a      	strb	r2, [r3, #0]
    c &= ~x;
2000055a:	1dfb      	adds	r3, r7, #7
2000055c:	781b      	ldrb	r3, [r3, #0]
2000055e:	b25b      	sxtb	r3, r3
20000560:	43db      	mvns	r3, r3
20000562:	b25b      	sxtb	r3, r3
20000564:	187a      	adds	r2, r7, r1
20000566:	7812      	ldrb	r2, [r2, #0]
20000568:	b252      	sxtb	r2, r2
2000056a:	4013      	ands	r3, r2
2000056c:	b25a      	sxtb	r2, r3
2000056e:	187b      	adds	r3, r7, r1
20000570:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000572:	187b      	adds	r3, r7, r1
20000574:	0008      	movs	r0, r1
20000576:	187a      	adds	r2, r7, r1
20000578:	7812      	ldrb	r2, [r2, #0]
2000057a:	2104      	movs	r1, #4
2000057c:	438a      	bics	r2, r1
2000057e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000580:	4a03      	ldr	r2, [pc, #12]	; (20000590 <graphic_ctrl_bit_clear+0x4c>)
20000582:	183b      	adds	r3, r7, r0
20000584:	781b      	ldrb	r3, [r3, #0]
20000586:	7513      	strb	r3, [r2, #20]
}
20000588:	46c0      	nop			; (mov r8, r8)
2000058a:	46bd      	mov	sp, r7
2000058c:	b004      	add	sp, #16
2000058e:	bd80      	pop	{r7, pc}
20000590:	40021000 	andmi	r1, r2, r0

20000594 <select_controller>:

static void select_controller(uint8_t controller){  //@param controller - 0/B_CS1/B_CS2/both
20000594:	b580      	push	{r7, lr}
20000596:	b082      	sub	sp, #8
20000598:	af00      	add	r7, sp, #0
2000059a:	0002      	movs	r2, r0
2000059c:	1dfb      	adds	r3, r7, #7
2000059e:	701a      	strb	r2, [r3, #0]
    switch(controller){
200005a0:	1dfb      	adds	r3, r7, #7
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	2b08      	cmp	r3, #8
200005a6:	d00c      	beq.n	200005c2 <select_controller+0x2e>
200005a8:	dc02      	bgt.n	200005b0 <select_controller+0x1c>
200005aa:	2b00      	cmp	r3, #0
200005ac:	d005      	beq.n	200005ba <select_controller+0x26>
            break;
        case B_CS1|B_CS2 :  //both
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
200005ae:	e01a      	b.n	200005e6 <select_controller+0x52>
    switch(controller){
200005b0:	2b10      	cmp	r3, #16
200005b2:	d00d      	beq.n	200005d0 <select_controller+0x3c>
200005b4:	2b18      	cmp	r3, #24
200005b6:	d012      	beq.n	200005de <select_controller+0x4a>
}
200005b8:	e015      	b.n	200005e6 <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
200005ba:	2018      	movs	r0, #24
200005bc:	f7ff ffc2 	bl	20000544 <graphic_ctrl_bit_clear>
            break;
200005c0:	e011      	b.n	200005e6 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
200005c2:	2008      	movs	r0, #8
200005c4:	f7ff ff9c 	bl	20000500 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
200005c8:	2010      	movs	r0, #16
200005ca:	f7ff ffbb 	bl	20000544 <graphic_ctrl_bit_clear>
            break;
200005ce:	e00a      	b.n	200005e6 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS2);
200005d0:	2010      	movs	r0, #16
200005d2:	f7ff ff95 	bl	20000500 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS1);
200005d6:	2008      	movs	r0, #8
200005d8:	f7ff ffb4 	bl	20000544 <graphic_ctrl_bit_clear>
            break;
200005dc:	e003      	b.n	200005e6 <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
200005de:	2018      	movs	r0, #24
200005e0:	f7ff ff8e 	bl	20000500 <graphic_ctrl_bit_set>
            break;
200005e4:	46c0      	nop			; (mov r8, r8)
}
200005e6:	46c0      	nop			; (mov r8, r8)
200005e8:	46bd      	mov	sp, r7
200005ea:	b002      	add	sp, #8
200005ec:	bd80      	pop	{r7, pc}

200005ee <graphic_initialize>:

void graphic_initialize(void) {
200005ee:	b580      	push	{r7, lr}
200005f0:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200005f2:	2040      	movs	r0, #64	; 0x40
200005f4:	f7ff ff84 	bl	20000500 <graphic_ctrl_bit_set>
    delaymicros(10);
200005f8:	200a      	movs	r0, #10
200005fa:	f7ff fd4d 	bl	20000098 <delaymicros>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200005fe:	2078      	movs	r0, #120	; 0x78
20000600:	f7ff ffa0 	bl	20000544 <graphic_ctrl_bit_clear>
    delaymillis(30);
20000604:	201e      	movs	r0, #30
20000606:	f7ff fd5c 	bl	200000c2 <delaymillis>
    graphic_ctrl_bit_set(B_RST);
2000060a:	2020      	movs	r0, #32
2000060c:	f7ff ff78 	bl	20000500 <graphic_ctrl_bit_set>
    delaymillis(100);
20000610:	2064      	movs	r0, #100	; 0x64
20000612:	f7ff fd56 	bl	200000c2 <delaymillis>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20000616:	2118      	movs	r1, #24
20000618:	203e      	movs	r0, #62	; 0x3e
2000061a:	f000 f8e7 	bl	200007ec <graphic_write_command>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
2000061e:	2118      	movs	r1, #24
20000620:	203e      	movs	r0, #62	; 0x3e
20000622:	f000 f8e3 	bl	200007ec <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);     //...
20000626:	2118      	movs	r1, #24
20000628:	203f      	movs	r0, #63	; 0x3f
2000062a:	f000 f8df 	bl	200007ec <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000062e:	2118      	movs	r1, #24
20000630:	20c0      	movs	r0, #192	; 0xc0
20000632:	f000 f8db 	bl	200007ec <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000636:	2118      	movs	r1, #24
20000638:	2040      	movs	r0, #64	; 0x40
2000063a:	f000 f8d7 	bl	200007ec <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000063e:	2118      	movs	r1, #24
20000640:	20b8      	movs	r0, #184	; 0xb8
20000642:	f000 f8d3 	bl	200007ec <graphic_write_command>
    select_controller(0);       //choose neither CS1/CS2
20000646:	2000      	movs	r0, #0
20000648:	f7ff ffa4 	bl	20000594 <select_controller>
}
2000064c:	46c0      	nop			; (mov r8, r8)
2000064e:	46bd      	mov	sp, r7
20000650:	bd80      	pop	{r7, pc}

20000652 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
20000652:	b580      	push	{r7, lr}
20000654:	b082      	sub	sp, #8
20000656:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000658:	2040      	movs	r0, #64	; 0x40
2000065a:	f7ff ff73 	bl	20000544 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
2000065e:	4b14      	ldr	r3, [pc, #80]	; (200006b0 <graphic_wait_ready+0x5e>)
20000660:	4a14      	ldr	r2, [pc, #80]	; (200006b4 <graphic_wait_ready+0x62>)
20000662:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000664:	2001      	movs	r0, #1
20000666:	f7ff ff6d 	bl	20000544 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
2000066a:	2002      	movs	r0, #2
2000066c:	f7ff ff48 	bl	20000500 <graphic_ctrl_bit_set>
    delay_500ns();
20000670:	f7ff fcf0 	bl	20000054 <delay_500ns>
    while(1) {
        graphic_ctrl_bit_set(B_E);
20000674:	2040      	movs	r0, #64	; 0x40
20000676:	f7ff ff43 	bl	20000500 <graphic_ctrl_bit_set>
        delay_500ns();
2000067a:	f7ff fceb 	bl	20000054 <delay_500ns>
        c = GPIO_E->idrHigh & LCD_BUSY;
2000067e:	4b0c      	ldr	r3, [pc, #48]	; (200006b0 <graphic_wait_ready+0x5e>)
20000680:	7c5b      	ldrb	r3, [r3, #17]
20000682:	b2da      	uxtb	r2, r3
20000684:	1dfb      	adds	r3, r7, #7
20000686:	217f      	movs	r1, #127	; 0x7f
20000688:	438a      	bics	r2, r1
2000068a:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
2000068c:	2040      	movs	r0, #64	; 0x40
2000068e:	f7ff ff59 	bl	20000544 <graphic_ctrl_bit_clear>
        delay_500ns();
20000692:	f7ff fcdf 	bl	20000054 <delay_500ns>
        if( c == 0 ) break;
20000696:	1dfb      	adds	r3, r7, #7
20000698:	781b      	ldrb	r3, [r3, #0]
2000069a:	2b00      	cmp	r3, #0
2000069c:	d000      	beq.n	200006a0 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
2000069e:	e7e9      	b.n	20000674 <graphic_wait_ready+0x22>
        if( c == 0 ) break;
200006a0:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
200006a2:	4b03      	ldr	r3, [pc, #12]	; (200006b0 <graphic_wait_ready+0x5e>)
200006a4:	4a04      	ldr	r2, [pc, #16]	; (200006b8 <graphic_wait_ready+0x66>)
200006a6:	601a      	str	r2, [r3, #0]
}
200006a8:	46c0      	nop			; (mov r8, r8)
200006aa:	46bd      	mov	sp, r7
200006ac:	b002      	add	sp, #8
200006ae:	bd80      	pop	{r7, pc}
200006b0:	40021000 	andmi	r1, r2, r0
200006b4:	00005555 	andeq	r5, r0, r5, asr r5
200006b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006bc <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
200006bc:	b580      	push	{r7, lr}
200006be:	b084      	sub	sp, #16
200006c0:	af00      	add	r7, sp, #0
200006c2:	0002      	movs	r2, r0
200006c4:	1dfb      	adds	r3, r7, #7
200006c6:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
200006c8:	2040      	movs	r0, #64	; 0x40
200006ca:	f7ff ff3b 	bl	20000544 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200006ce:	4b1c      	ldr	r3, [pc, #112]	; (20000740 <graphic_read+0x84>)
200006d0:	4a1c      	ldr	r2, [pc, #112]	; (20000744 <graphic_read+0x88>)
200006d2:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
200006d4:	2003      	movs	r0, #3
200006d6:	f7ff ff13 	bl	20000500 <graphic_ctrl_bit_set>
    select_controller(controller);
200006da:	1dfb      	adds	r3, r7, #7
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	0018      	movs	r0, r3
200006e0:	f7ff ff58 	bl	20000594 <select_controller>
    delay_500ns();
200006e4:	f7ff fcb6 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200006e8:	2040      	movs	r0, #64	; 0x40
200006ea:	f7ff ff09 	bl	20000500 <graphic_ctrl_bit_set>
    delay_500ns();
200006ee:	f7ff fcb1 	bl	20000054 <delay_500ns>
    c = GPIO_E->idrHigh;
200006f2:	4a13      	ldr	r2, [pc, #76]	; (20000740 <graphic_read+0x84>)
200006f4:	230f      	movs	r3, #15
200006f6:	18fb      	adds	r3, r7, r3
200006f8:	7c52      	ldrb	r2, [r2, #17]
200006fa:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200006fc:	2040      	movs	r0, #64	; 0x40
200006fe:	f7ff ff21 	bl	20000544 <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000702:	4b0f      	ldr	r3, [pc, #60]	; (20000740 <graphic_read+0x84>)
20000704:	4a10      	ldr	r2, [pc, #64]	; (20000748 <graphic_read+0x8c>)
20000706:	601a      	str	r2, [r3, #0]

    if( controller & B_CS1 ) {
20000708:	1dfb      	adds	r3, r7, #7
2000070a:	781b      	ldrb	r3, [r3, #0]
2000070c:	2208      	movs	r2, #8
2000070e:	4013      	ands	r3, r2
20000710:	d004      	beq.n	2000071c <graphic_read+0x60>
        select_controller(B_CS1);
20000712:	2008      	movs	r0, #8
20000714:	f7ff ff3e 	bl	20000594 <select_controller>
        graphic_wait_ready();
20000718:	f7ff ff9b 	bl	20000652 <graphic_wait_ready>
    }
    if( controller & B_CS2 ) {
2000071c:	1dfb      	adds	r3, r7, #7
2000071e:	781b      	ldrb	r3, [r3, #0]
20000720:	2210      	movs	r2, #16
20000722:	4013      	ands	r3, r2
20000724:	d004      	beq.n	20000730 <graphic_read+0x74>
        select_controller(B_CS2);
20000726:	2010      	movs	r0, #16
20000728:	f7ff ff34 	bl	20000594 <select_controller>
        graphic_wait_ready();
2000072c:	f7ff ff91 	bl	20000652 <graphic_wait_ready>
    }
    return c;
20000730:	230f      	movs	r3, #15
20000732:	18fb      	adds	r3, r7, r3
20000734:	781b      	ldrb	r3, [r3, #0]
}
20000736:	0018      	movs	r0, r3
20000738:	46bd      	mov	sp, r7
2000073a:	b004      	add	sp, #16
2000073c:	bd80      	pop	{r7, pc}
2000073e:	46c0      	nop			; (mov r8, r8)
20000740:	40021000 	andmi	r1, r2, r0
20000744:	00005555 	andeq	r5, r0, r5, asr r5
20000748:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000074c <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
2000074c:	b580      	push	{r7, lr}
2000074e:	b082      	sub	sp, #8
20000750:	af00      	add	r7, sp, #0
20000752:	0002      	movs	r2, r0
20000754:	1dfb      	adds	r3, r7, #7
20000756:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000758:	1dfb      	adds	r3, r7, #7
2000075a:	781b      	ldrb	r3, [r3, #0]
2000075c:	0018      	movs	r0, r3
2000075e:	f7ff ffad 	bl	200006bc <graphic_read>
    return graphic_read(controller);
20000762:	1dfb      	adds	r3, r7, #7
20000764:	781b      	ldrb	r3, [r3, #0]
20000766:	0018      	movs	r0, r3
20000768:	f7ff ffa8 	bl	200006bc <graphic_read>
2000076c:	0003      	movs	r3, r0
}
2000076e:	0018      	movs	r0, r3
20000770:	46bd      	mov	sp, r7
20000772:	b002      	add	sp, #8
20000774:	bd80      	pop	{r7, pc}

20000776 <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000776:	b580      	push	{r7, lr}
20000778:	b082      	sub	sp, #8
2000077a:	af00      	add	r7, sp, #0
2000077c:	0002      	movs	r2, r0
2000077e:	1dfb      	adds	r3, r7, #7
20000780:	701a      	strb	r2, [r3, #0]
20000782:	1dbb      	adds	r3, r7, #6
20000784:	1c0a      	adds	r2, r1, #0
20000786:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
20000788:	4a17      	ldr	r2, [pc, #92]	; (200007e8 <graphic_write+0x72>)
2000078a:	1dfb      	adds	r3, r7, #7
2000078c:	781b      	ldrb	r3, [r3, #0]
2000078e:	7553      	strb	r3, [r2, #21]
    delay_500ns();
20000790:	f7ff fc60 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000794:	2040      	movs	r0, #64	; 0x40
20000796:	f7ff feb3 	bl	20000500 <graphic_ctrl_bit_set>
    delay_500ns();
2000079a:	f7ff fc5b 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
2000079e:	2040      	movs	r0, #64	; 0x40
200007a0:	f7ff fed0 	bl	20000544 <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
200007a4:	1dbb      	adds	r3, r7, #6
200007a6:	781b      	ldrb	r3, [r3, #0]
200007a8:	2208      	movs	r2, #8
200007aa:	4013      	ands	r3, r2
200007ac:	d004      	beq.n	200007b8 <graphic_write+0x42>
        select_controller(B_CS1);
200007ae:	2008      	movs	r0, #8
200007b0:	f7ff fef0 	bl	20000594 <select_controller>
        graphic_wait_ready();
200007b4:	f7ff ff4d 	bl	20000652 <graphic_wait_ready>
    }
    if(controller & B_CS2){
200007b8:	1dbb      	adds	r3, r7, #6
200007ba:	781b      	ldrb	r3, [r3, #0]
200007bc:	2210      	movs	r2, #16
200007be:	4013      	ands	r3, r2
200007c0:	d004      	beq.n	200007cc <graphic_write+0x56>
        select_controller(B_CS2);
200007c2:	2010      	movs	r0, #16
200007c4:	f7ff fee6 	bl	20000594 <select_controller>
        graphic_wait_ready();
200007c8:	f7ff ff43 	bl	20000652 <graphic_wait_ready>
    }
        
    GPIO_E->odrHigh = 0;
200007cc:	4b06      	ldr	r3, [pc, #24]	; (200007e8 <graphic_write+0x72>)
200007ce:	2200      	movs	r2, #0
200007d0:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(B_E);
200007d2:	2040      	movs	r0, #64	; 0x40
200007d4:	f7ff fe94 	bl	20000500 <graphic_ctrl_bit_set>
    select_controller(0);    
200007d8:	2000      	movs	r0, #0
200007da:	f7ff fedb 	bl	20000594 <select_controller>
    
}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	46bd      	mov	sp, r7
200007e2:	b002      	add	sp, #8
200007e4:	bd80      	pop	{r7, pc}
200007e6:	46c0      	nop			; (mov r8, r8)
200007e8:	40021000 	andmi	r1, r2, r0

200007ec <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
200007ec:	b580      	push	{r7, lr}
200007ee:	b082      	sub	sp, #8
200007f0:	af00      	add	r7, sp, #0
200007f2:	0002      	movs	r2, r0
200007f4:	1dfb      	adds	r3, r7, #7
200007f6:	701a      	strb	r2, [r3, #0]
200007f8:	1dbb      	adds	r3, r7, #6
200007fa:	1c0a      	adds	r2, r1, #0
200007fc:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200007fe:	2040      	movs	r0, #64	; 0x40
20000800:	f7ff fea0 	bl	20000544 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000804:	1dbb      	adds	r3, r7, #6
20000806:	781b      	ldrb	r3, [r3, #0]
20000808:	0018      	movs	r0, r3
2000080a:	f7ff fec3 	bl	20000594 <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
2000080e:	2003      	movs	r0, #3
20000810:	f7ff fe98 	bl	20000544 <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000814:	1dbb      	adds	r3, r7, #6
20000816:	781a      	ldrb	r2, [r3, #0]
20000818:	1dfb      	adds	r3, r7, #7
2000081a:	781b      	ldrb	r3, [r3, #0]
2000081c:	0011      	movs	r1, r2
2000081e:	0018      	movs	r0, r3
20000820:	f7ff ffa9 	bl	20000776 <graphic_write>
}
20000824:	46c0      	nop			; (mov r8, r8)
20000826:	46bd      	mov	sp, r7
20000828:	b002      	add	sp, #8
2000082a:	bd80      	pop	{r7, pc}

2000082c <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller){
2000082c:	b580      	push	{r7, lr}
2000082e:	b082      	sub	sp, #8
20000830:	af00      	add	r7, sp, #0
20000832:	0002      	movs	r2, r0
20000834:	1dfb      	adds	r3, r7, #7
20000836:	701a      	strb	r2, [r3, #0]
20000838:	1dbb      	adds	r3, r7, #6
2000083a:	1c0a      	adds	r2, r1, #0
2000083c:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
2000083e:	2040      	movs	r0, #64	; 0x40
20000840:	f7ff fe80 	bl	20000544 <graphic_ctrl_bit_clear>
    select_controller(controller);
20000844:	1dbb      	adds	r3, r7, #6
20000846:	781b      	ldrb	r3, [r3, #0]
20000848:	0018      	movs	r0, r3
2000084a:	f7ff fea3 	bl	20000594 <select_controller>
    graphic_ctrl_bit_clear(B_RW);
2000084e:	2002      	movs	r0, #2
20000850:	f7ff fe78 	bl	20000544 <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RS);
20000854:	2001      	movs	r0, #1
20000856:	f7ff fe53 	bl	20000500 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
2000085a:	1dbb      	adds	r3, r7, #6
2000085c:	781a      	ldrb	r2, [r3, #0]
2000085e:	1dfb      	adds	r3, r7, #7
20000860:	781b      	ldrb	r3, [r3, #0]
20000862:	0011      	movs	r1, r2
20000864:	0018      	movs	r0, r3
20000866:	f7ff ff86 	bl	20000776 <graphic_write>
}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	46bd      	mov	sp, r7
2000086e:	b002      	add	sp, #8
20000870:	bd80      	pop	{r7, pc}

20000872 <graphic_clear_screen>:
void graphic_clear_screen(void){
20000872:	b580      	push	{r7, lr}
20000874:	b082      	sub	sp, #8
20000876:	af00      	add	r7, sp, #0
    for(int i = 1; i <= 128; i++){
20000878:	2301      	movs	r3, #1
2000087a:	607b      	str	r3, [r7, #4]
2000087c:	e011      	b.n	200008a2 <graphic_clear_screen+0x30>
		for(int j = 1; j <= 64; j++){
2000087e:	2301      	movs	r3, #1
20000880:	603b      	str	r3, [r7, #0]
20000882:	e008      	b.n	20000896 <graphic_clear_screen+0x24>
			pixel(i, j, 0);
20000884:	6839      	ldr	r1, [r7, #0]
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	2200      	movs	r2, #0
2000088a:	0018      	movs	r0, r3
2000088c:	f000 f834 	bl	200008f8 <pixel>
		for(int j = 1; j <= 64; j++){
20000890:	683b      	ldr	r3, [r7, #0]
20000892:	3301      	adds	r3, #1
20000894:	603b      	str	r3, [r7, #0]
20000896:	683b      	ldr	r3, [r7, #0]
20000898:	2b40      	cmp	r3, #64	; 0x40
2000089a:	ddf3      	ble.n	20000884 <graphic_clear_screen+0x12>
    for(int i = 1; i <= 128; i++){
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	3301      	adds	r3, #1
200008a0:	607b      	str	r3, [r7, #4]
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	2b80      	cmp	r3, #128	; 0x80
200008a6:	ddea      	ble.n	2000087e <graphic_clear_screen+0xc>
		}
	}
}
200008a8:	46c0      	nop			; (mov r8, r8)
200008aa:	46bd      	mov	sp, r7
200008ac:	b002      	add	sp, #8
200008ae:	bd80      	pop	{r7, pc}

200008b0 <clear_backBuffer>:


void clear_backBuffer() {
200008b0:	b580      	push	{r7, lr}
200008b2:	b082      	sub	sp, #8
200008b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++){
200008b6:	2300      	movs	r3, #0
200008b8:	607b      	str	r3, [r7, #4]
200008ba:	e013      	b.n	200008e4 <clear_backBuffer+0x34>
        for(int j = 0; j < 8; j++)
200008bc:	2300      	movs	r3, #0
200008be:	603b      	str	r3, [r7, #0]
200008c0:	e00a      	b.n	200008d8 <clear_backBuffer+0x28>
			 backBuffer[i][j] = 0;
200008c2:	4a0c      	ldr	r2, [pc, #48]	; (200008f4 <clear_backBuffer+0x44>)
200008c4:	687b      	ldr	r3, [r7, #4]
200008c6:	00db      	lsls	r3, r3, #3
200008c8:	18d2      	adds	r2, r2, r3
200008ca:	683b      	ldr	r3, [r7, #0]
200008cc:	18d3      	adds	r3, r2, r3
200008ce:	2200      	movs	r2, #0
200008d0:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++)
200008d2:	683b      	ldr	r3, [r7, #0]
200008d4:	3301      	adds	r3, #1
200008d6:	603b      	str	r3, [r7, #0]
200008d8:	683b      	ldr	r3, [r7, #0]
200008da:	2b07      	cmp	r3, #7
200008dc:	ddf1      	ble.n	200008c2 <clear_backBuffer+0x12>
    for (int i = 0; i < 256; i++){
200008de:	687b      	ldr	r3, [r7, #4]
200008e0:	3301      	adds	r3, #1
200008e2:	607b      	str	r3, [r7, #4]
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	2bff      	cmp	r3, #255	; 0xff
200008e8:	dde8      	ble.n	200008bc <clear_backBuffer+0xc>
	}
}
200008ea:	46c0      	nop			; (mov r8, r8)
200008ec:	46bd      	mov	sp, r7
200008ee:	b002      	add	sp, #8
200008f0:	bd80      	pop	{r7, pc}
200008f2:	46c0      	nop			; (mov r8, r8)
200008f4:	20000bd4 	ldrdcs	r0, [r0], -r4

200008f8 <pixel>:

void pixel(int x, int y, int set) {
200008f8:	b580      	push	{r7, lr}
200008fa:	b086      	sub	sp, #24
200008fc:	af00      	add	r7, sp, #0
200008fe:	60f8      	str	r0, [r7, #12]
20000900:	60b9      	str	r1, [r7, #8]
20000902:	607a      	str	r2, [r7, #4]
    
    uint8_t mask = 1 << ((y-1)%8);
20000904:	68bb      	ldr	r3, [r7, #8]
20000906:	3b01      	subs	r3, #1
20000908:	4a26      	ldr	r2, [pc, #152]	; (200009a4 <pixel+0xac>)
2000090a:	4013      	ands	r3, r2
2000090c:	d504      	bpl.n	20000918 <pixel+0x20>
2000090e:	3b01      	subs	r3, #1
20000910:	2208      	movs	r2, #8
20000912:	4252      	negs	r2, r2
20000914:	4313      	orrs	r3, r2
20000916:	3301      	adds	r3, #1
20000918:	001a      	movs	r2, r3
2000091a:	2301      	movs	r3, #1
2000091c:	4093      	lsls	r3, r2
2000091e:	001a      	movs	r2, r3
20000920:	2317      	movs	r3, #23
20000922:	18fb      	adds	r3, r7, r3
20000924:	701a      	strb	r2, [r3, #0]
    
    if(set){
20000926:	687b      	ldr	r3, [r7, #4]
20000928:	2b00      	cmp	r3, #0
2000092a:	d019      	beq.n	20000960 <pixel+0x68>
        backBuffer[64+(y-1)][(x-1)/8] |= mask;
2000092c:	68bb      	ldr	r3, [r7, #8]
2000092e:	333f      	adds	r3, #63	; 0x3f
20000930:	001a      	movs	r2, r3
20000932:	68fb      	ldr	r3, [r7, #12]
20000934:	3b01      	subs	r3, #1
20000936:	2b00      	cmp	r3, #0
20000938:	da00      	bge.n	2000093c <pixel+0x44>
2000093a:	3307      	adds	r3, #7
2000093c:	10db      	asrs	r3, r3, #3
2000093e:	491a      	ldr	r1, [pc, #104]	; (200009a8 <pixel+0xb0>)
20000940:	00d2      	lsls	r2, r2, #3
20000942:	188a      	adds	r2, r1, r2
20000944:	5cd0      	ldrb	r0, [r2, r3]
20000946:	68ba      	ldr	r2, [r7, #8]
20000948:	323f      	adds	r2, #63	; 0x3f
2000094a:	2117      	movs	r1, #23
2000094c:	1879      	adds	r1, r7, r1
2000094e:	7809      	ldrb	r1, [r1, #0]
20000950:	4301      	orrs	r1, r0
20000952:	b2c8      	uxtb	r0, r1
20000954:	4914      	ldr	r1, [pc, #80]	; (200009a8 <pixel+0xb0>)
20000956:	00d2      	lsls	r2, r2, #3
20000958:	188a      	adds	r2, r1, r2
2000095a:	1c01      	adds	r1, r0, #0
2000095c:	54d1      	strb	r1, [r2, r3]
    }
    else{
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
    }
}
2000095e:	e01d      	b.n	2000099c <pixel+0xa4>
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
20000960:	68bb      	ldr	r3, [r7, #8]
20000962:	333f      	adds	r3, #63	; 0x3f
20000964:	001a      	movs	r2, r3
20000966:	68fb      	ldr	r3, [r7, #12]
20000968:	3b01      	subs	r3, #1
2000096a:	2b00      	cmp	r3, #0
2000096c:	da00      	bge.n	20000970 <pixel+0x78>
2000096e:	3307      	adds	r3, #7
20000970:	10db      	asrs	r3, r3, #3
20000972:	490d      	ldr	r1, [pc, #52]	; (200009a8 <pixel+0xb0>)
20000974:	00d2      	lsls	r2, r2, #3
20000976:	188a      	adds	r2, r1, r2
20000978:	5cd2      	ldrb	r2, [r2, r3]
2000097a:	b252      	sxtb	r2, r2
2000097c:	2117      	movs	r1, #23
2000097e:	1879      	adds	r1, r7, r1
20000980:	7809      	ldrb	r1, [r1, #0]
20000982:	b249      	sxtb	r1, r1
20000984:	43c9      	mvns	r1, r1
20000986:	b249      	sxtb	r1, r1
20000988:	400a      	ands	r2, r1
2000098a:	b251      	sxtb	r1, r2
2000098c:	68ba      	ldr	r2, [r7, #8]
2000098e:	323f      	adds	r2, #63	; 0x3f
20000990:	b2c8      	uxtb	r0, r1
20000992:	4905      	ldr	r1, [pc, #20]	; (200009a8 <pixel+0xb0>)
20000994:	00d2      	lsls	r2, r2, #3
20000996:	188a      	adds	r2, r1, r2
20000998:	1c01      	adds	r1, r0, #0
2000099a:	54d1      	strb	r1, [r2, r3]
}
2000099c:	46c0      	nop			; (mov r8, r8)
2000099e:	46bd      	mov	sp, r7
200009a0:	b006      	add	sp, #24
200009a2:	bd80      	pop	{r7, pc}
200009a4:	80000007 	andhi	r0, r0, r7
200009a8:	20000bd4 	ldrdcs	r0, [r0], -r4

200009ac <byteToBuffer>:

void byteToBuffer(int addr, int page, char c){
200009ac:	b580      	push	{r7, lr}
200009ae:	b084      	sub	sp, #16
200009b0:	af00      	add	r7, sp, #0
200009b2:	60f8      	str	r0, [r7, #12]
200009b4:	60b9      	str	r1, [r7, #8]
200009b6:	1dfb      	adds	r3, r7, #7
200009b8:	701a      	strb	r2, [r3, #0]
	backBuffer[addr][page] = c;
200009ba:	4a06      	ldr	r2, [pc, #24]	; (200009d4 <byteToBuffer+0x28>)
200009bc:	68fb      	ldr	r3, [r7, #12]
200009be:	00db      	lsls	r3, r3, #3
200009c0:	18d2      	adds	r2, r2, r3
200009c2:	68bb      	ldr	r3, [r7, #8]
200009c4:	18d3      	adds	r3, r2, r3
200009c6:	1dfa      	adds	r2, r7, #7
200009c8:	7812      	ldrb	r2, [r2, #0]
200009ca:	701a      	strb	r2, [r3, #0]
}
200009cc:	46c0      	nop			; (mov r8, r8)
200009ce:	46bd      	mov	sp, r7
200009d0:	b004      	add	sp, #16
200009d2:	bd80      	pop	{r7, pc}
200009d4:	20000bd4 	ldrdcs	r0, [r0], -r4

200009d8 <byteToScreenBuffer>:
void byteToScreenBuffer(int addr, int page, char c){
200009d8:	b580      	push	{r7, lr}
200009da:	b084      	sub	sp, #16
200009dc:	af00      	add	r7, sp, #0
200009de:	60f8      	str	r0, [r7, #12]
200009e0:	60b9      	str	r1, [r7, #8]
200009e2:	1dfb      	adds	r3, r7, #7
200009e4:	701a      	strb	r2, [r3, #0]
	backBuffer[64+addr][page] = c;
200009e6:	68fb      	ldr	r3, [r7, #12]
200009e8:	3340      	adds	r3, #64	; 0x40
200009ea:	4a06      	ldr	r2, [pc, #24]	; (20000a04 <byteToScreenBuffer+0x2c>)
200009ec:	00db      	lsls	r3, r3, #3
200009ee:	18d2      	adds	r2, r2, r3
200009f0:	68bb      	ldr	r3, [r7, #8]
200009f2:	18d3      	adds	r3, r2, r3
200009f4:	1dfa      	adds	r2, r7, #7
200009f6:	7812      	ldrb	r2, [r2, #0]
200009f8:	701a      	strb	r2, [r3, #0]
}
200009fa:	46c0      	nop			; (mov r8, r8)
200009fc:	46bd      	mov	sp, r7
200009fe:	b004      	add	sp, #16
20000a00:	bd80      	pop	{r7, pc}
20000a02:	46c0      	nop			; (mov r8, r8)
20000a04:	20000bd4 	ldrdcs	r0, [r0], -r4

20000a08 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000a08:	b590      	push	{r4, r7, lr}
20000a0a:	b085      	sub	sp, #20
20000a0c:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20000a0e:	2300      	movs	r3, #0
20000a10:	60bb      	str	r3, [r7, #8]
    for(c = 0; c < 2; c++) {
20000a12:	230d      	movs	r3, #13
20000a14:	18fb      	adds	r3, r7, r3
20000a16:	2200      	movs	r2, #0
20000a18:	701a      	strb	r2, [r3, #0]
20000a1a:	e05a      	b.n	20000ad2 <graphic_draw_screen+0xca>
        controller = (c == 0) ? B_CS1 : B_CS2;
20000a1c:	230d      	movs	r3, #13
20000a1e:	18fb      	adds	r3, r7, r3
20000a20:	781b      	ldrb	r3, [r3, #0]
20000a22:	2b00      	cmp	r3, #0
20000a24:	d101      	bne.n	20000a2a <graphic_draw_screen+0x22>
20000a26:	2208      	movs	r2, #8
20000a28:	e000      	b.n	20000a2c <graphic_draw_screen+0x24>
20000a2a:	2210      	movs	r2, #16
20000a2c:	1dfb      	adds	r3, r7, #7
20000a2e:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 8; j++) {
20000a30:	230e      	movs	r3, #14
20000a32:	18fb      	adds	r3, r7, r3
20000a34:	2200      	movs	r2, #0
20000a36:	701a      	strb	r2, [r3, #0]
20000a38:	e040      	b.n	20000abc <graphic_draw_screen+0xb4>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000a3a:	230e      	movs	r3, #14
20000a3c:	18fb      	adds	r3, r7, r3
20000a3e:	781b      	ldrb	r3, [r3, #0]
20000a40:	2248      	movs	r2, #72	; 0x48
20000a42:	4252      	negs	r2, r2
20000a44:	4313      	orrs	r3, r2
20000a46:	b2da      	uxtb	r2, r3
20000a48:	1dfb      	adds	r3, r7, #7
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	0019      	movs	r1, r3
20000a4e:	0010      	movs	r0, r2
20000a50:	f7ff fecc 	bl	200007ec <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000a54:	1dfb      	adds	r3, r7, #7
20000a56:	781b      	ldrb	r3, [r3, #0]
20000a58:	0019      	movs	r1, r3
20000a5a:	2040      	movs	r0, #64	; 0x40
20000a5c:	f7ff fec6 	bl	200007ec <graphic_write_command>
            for(i = 0; i <= 63; i++, k++) {
20000a60:	230f      	movs	r3, #15
20000a62:	18fb      	adds	r3, r7, r3
20000a64:	2200      	movs	r2, #0
20000a66:	701a      	strb	r2, [r3, #0]
20000a68:	e01d      	b.n	20000aa6 <graphic_draw_screen+0x9e>
                graphic_write_data(backBuffer[64+c*64 + i][j], controller);
20000a6a:	230d      	movs	r3, #13
20000a6c:	18fb      	adds	r3, r7, r3
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	3301      	adds	r3, #1
20000a72:	019a      	lsls	r2, r3, #6
20000a74:	240f      	movs	r4, #15
20000a76:	193b      	adds	r3, r7, r4
20000a78:	781b      	ldrb	r3, [r3, #0]
20000a7a:	18d2      	adds	r2, r2, r3
20000a7c:	230e      	movs	r3, #14
20000a7e:	18fb      	adds	r3, r7, r3
20000a80:	781b      	ldrb	r3, [r3, #0]
20000a82:	4918      	ldr	r1, [pc, #96]	; (20000ae4 <graphic_draw_screen+0xdc>)
20000a84:	00d2      	lsls	r2, r2, #3
20000a86:	188a      	adds	r2, r1, r2
20000a88:	5cd2      	ldrb	r2, [r2, r3]
20000a8a:	1dfb      	adds	r3, r7, #7
20000a8c:	781b      	ldrb	r3, [r3, #0]
20000a8e:	0019      	movs	r1, r3
20000a90:	0010      	movs	r0, r2
20000a92:	f7ff fecb 	bl	2000082c <graphic_write_data>
            for(i = 0; i <= 63; i++, k++) {
20000a96:	193b      	adds	r3, r7, r4
20000a98:	781a      	ldrb	r2, [r3, #0]
20000a9a:	193b      	adds	r3, r7, r4
20000a9c:	3201      	adds	r2, #1
20000a9e:	701a      	strb	r2, [r3, #0]
20000aa0:	68bb      	ldr	r3, [r7, #8]
20000aa2:	3301      	adds	r3, #1
20000aa4:	60bb      	str	r3, [r7, #8]
20000aa6:	230f      	movs	r3, #15
20000aa8:	18fb      	adds	r3, r7, r3
20000aaa:	781b      	ldrb	r3, [r3, #0]
20000aac:	2b3f      	cmp	r3, #63	; 0x3f
20000aae:	d9dc      	bls.n	20000a6a <graphic_draw_screen+0x62>
        for(j = 0; j < 8; j++) {
20000ab0:	210e      	movs	r1, #14
20000ab2:	187b      	adds	r3, r7, r1
20000ab4:	781a      	ldrb	r2, [r3, #0]
20000ab6:	187b      	adds	r3, r7, r1
20000ab8:	3201      	adds	r2, #1
20000aba:	701a      	strb	r2, [r3, #0]
20000abc:	230e      	movs	r3, #14
20000abe:	18fb      	adds	r3, r7, r3
20000ac0:	781b      	ldrb	r3, [r3, #0]
20000ac2:	2b07      	cmp	r3, #7
20000ac4:	d9b9      	bls.n	20000a3a <graphic_draw_screen+0x32>
    for(c = 0; c < 2; c++) {
20000ac6:	210d      	movs	r1, #13
20000ac8:	187b      	adds	r3, r7, r1
20000aca:	781a      	ldrb	r2, [r3, #0]
20000acc:	187b      	adds	r3, r7, r1
20000ace:	3201      	adds	r2, #1
20000ad0:	701a      	strb	r2, [r3, #0]
20000ad2:	230d      	movs	r3, #13
20000ad4:	18fb      	adds	r3, r7, r3
20000ad6:	781b      	ldrb	r3, [r3, #0]
20000ad8:	2b01      	cmp	r3, #1
20000ada:	d99f      	bls.n	20000a1c <graphic_draw_screen+0x14>
            }
        }
    }
}
20000adc:	46c0      	nop			; (mov r8, r8)
20000ade:	46bd      	mov	sp, r7
20000ae0:	b005      	add	sp, #20
20000ae2:	bd90      	pop	{r4, r7, pc}
20000ae4:	20000bd4 	ldrdcs	r0, [r0], -r4

20000ae8 <shiftRight>:


*/


void shiftRight(){
20000ae8:	b580      	push	{r7, lr}
20000aea:	b084      	sub	sp, #16
20000aec:	af00      	add	r7, sp, #0
	for(int i = 255; i > 0; i--){
20000aee:	23ff      	movs	r3, #255	; 0xff
20000af0:	60fb      	str	r3, [r7, #12]
20000af2:	e01b      	b.n	20000b2c <shiftRight+0x44>
		for(int j = 0; j < 8; j++){
20000af4:	2300      	movs	r3, #0
20000af6:	60bb      	str	r3, [r7, #8]
20000af8:	e012      	b.n	20000b20 <shiftRight+0x38>
			backBuffer[i][j] = backBuffer[i-1][j];
20000afa:	68fb      	ldr	r3, [r7, #12]
20000afc:	3b01      	subs	r3, #1
20000afe:	4a16      	ldr	r2, [pc, #88]	; (20000b58 <shiftRight+0x70>)
20000b00:	00db      	lsls	r3, r3, #3
20000b02:	18d2      	adds	r2, r2, r3
20000b04:	68bb      	ldr	r3, [r7, #8]
20000b06:	18d3      	adds	r3, r2, r3
20000b08:	7819      	ldrb	r1, [r3, #0]
20000b0a:	4a13      	ldr	r2, [pc, #76]	; (20000b58 <shiftRight+0x70>)
20000b0c:	68fb      	ldr	r3, [r7, #12]
20000b0e:	00db      	lsls	r3, r3, #3
20000b10:	18d2      	adds	r2, r2, r3
20000b12:	68bb      	ldr	r3, [r7, #8]
20000b14:	18d3      	adds	r3, r2, r3
20000b16:	1c0a      	adds	r2, r1, #0
20000b18:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20000b1a:	68bb      	ldr	r3, [r7, #8]
20000b1c:	3301      	adds	r3, #1
20000b1e:	60bb      	str	r3, [r7, #8]
20000b20:	68bb      	ldr	r3, [r7, #8]
20000b22:	2b07      	cmp	r3, #7
20000b24:	dde9      	ble.n	20000afa <shiftRight+0x12>
	for(int i = 255; i > 0; i--){
20000b26:	68fb      	ldr	r3, [r7, #12]
20000b28:	3b01      	subs	r3, #1
20000b2a:	60fb      	str	r3, [r7, #12]
20000b2c:	68fb      	ldr	r3, [r7, #12]
20000b2e:	2b00      	cmp	r3, #0
20000b30:	dce0      	bgt.n	20000af4 <shiftRight+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
20000b32:	2300      	movs	r3, #0
20000b34:	607b      	str	r3, [r7, #4]
20000b36:	e007      	b.n	20000b48 <shiftRight+0x60>
        backBuffer[0][j] = 0; 
20000b38:	4a07      	ldr	r2, [pc, #28]	; (20000b58 <shiftRight+0x70>)
20000b3a:	687b      	ldr	r3, [r7, #4]
20000b3c:	18d3      	adds	r3, r2, r3
20000b3e:	2200      	movs	r2, #0
20000b40:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	3301      	adds	r3, #1
20000b46:	607b      	str	r3, [r7, #4]
20000b48:	687b      	ldr	r3, [r7, #4]
20000b4a:	2b07      	cmp	r3, #7
20000b4c:	ddf4      	ble.n	20000b38 <shiftRight+0x50>
    }
}
20000b4e:	46c0      	nop			; (mov r8, r8)
20000b50:	46bd      	mov	sp, r7
20000b52:	b004      	add	sp, #16
20000b54:	bd80      	pop	{r7, pc}
20000b56:	46c0      	nop			; (mov r8, r8)
20000b58:	20000bd4 	ldrdcs	r0, [r0], -r4

20000b5c <shiftLeft>:
void shiftLeft(){
20000b5c:	b580      	push	{r7, lr}
20000b5e:	b084      	sub	sp, #16
20000b60:	af00      	add	r7, sp, #0
	for(int i = 0; i < 255; i++){
20000b62:	2300      	movs	r3, #0
20000b64:	60fb      	str	r3, [r7, #12]
20000b66:	e01b      	b.n	20000ba0 <shiftLeft+0x44>
		for(int j = 0; j < 8; j++){
20000b68:	2300      	movs	r3, #0
20000b6a:	60bb      	str	r3, [r7, #8]
20000b6c:	e012      	b.n	20000b94 <shiftLeft+0x38>
			backBuffer[i][j] = backBuffer[i+1][j];
20000b6e:	68fb      	ldr	r3, [r7, #12]
20000b70:	3301      	adds	r3, #1
20000b72:	4a17      	ldr	r2, [pc, #92]	; (20000bd0 <shiftLeft+0x74>)
20000b74:	00db      	lsls	r3, r3, #3
20000b76:	18d2      	adds	r2, r2, r3
20000b78:	68bb      	ldr	r3, [r7, #8]
20000b7a:	18d3      	adds	r3, r2, r3
20000b7c:	7819      	ldrb	r1, [r3, #0]
20000b7e:	4a14      	ldr	r2, [pc, #80]	; (20000bd0 <shiftLeft+0x74>)
20000b80:	68fb      	ldr	r3, [r7, #12]
20000b82:	00db      	lsls	r3, r3, #3
20000b84:	18d2      	adds	r2, r2, r3
20000b86:	68bb      	ldr	r3, [r7, #8]
20000b88:	18d3      	adds	r3, r2, r3
20000b8a:	1c0a      	adds	r2, r1, #0
20000b8c:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20000b8e:	68bb      	ldr	r3, [r7, #8]
20000b90:	3301      	adds	r3, #1
20000b92:	60bb      	str	r3, [r7, #8]
20000b94:	68bb      	ldr	r3, [r7, #8]
20000b96:	2b07      	cmp	r3, #7
20000b98:	dde9      	ble.n	20000b6e <shiftLeft+0x12>
	for(int i = 0; i < 255; i++){
20000b9a:	68fb      	ldr	r3, [r7, #12]
20000b9c:	3301      	adds	r3, #1
20000b9e:	60fb      	str	r3, [r7, #12]
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	2bfe      	cmp	r3, #254	; 0xfe
20000ba4:	dde0      	ble.n	20000b68 <shiftLeft+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
20000ba6:	2300      	movs	r3, #0
20000ba8:	607b      	str	r3, [r7, #4]
20000baa:	e00a      	b.n	20000bc2 <shiftLeft+0x66>
        backBuffer[255][j] = 0; 
20000bac:	4908      	ldr	r1, [pc, #32]	; (20000bd0 <shiftLeft+0x74>)
20000bae:	23ff      	movs	r3, #255	; 0xff
20000bb0:	00db      	lsls	r3, r3, #3
20000bb2:	687a      	ldr	r2, [r7, #4]
20000bb4:	188a      	adds	r2, r1, r2
20000bb6:	18d3      	adds	r3, r2, r3
20000bb8:	2200      	movs	r2, #0
20000bba:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	3301      	adds	r3, #1
20000bc0:	607b      	str	r3, [r7, #4]
20000bc2:	687b      	ldr	r3, [r7, #4]
20000bc4:	2b07      	cmp	r3, #7
20000bc6:	ddf1      	ble.n	20000bac <shiftLeft+0x50>
    }
20000bc8:	46c0      	nop			; (mov r8, r8)
20000bca:	46bd      	mov	sp, r7
20000bcc:	b004      	add	sp, #16
20000bce:	bd80      	pop	{r7, pc}
20000bd0:	20000bd4 	ldrdcs	r0, [r0], -r4

20000bd4 <backBuffer>:
	...

200013d4 <Pedro>:
200013d4:	00000020 	andeq	r0, r0, r0, lsr #32
200013d8:	00000014 	andeq	r0, r0, r4, lsl r0
200013dc:	00000000 	andeq	r0, r0, r0
200013e0:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20001584:	20000355 	andcs	r0, r0, r5, asr r3
20001588:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000000a9 	andeq	r0, r0, r9, lsr #1
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000035 	andeq	r0, r0, r5, lsr r0
  10:	0000cd0c 	andeq	ip, r0, ip, lsl #26
  14:	00000000 	andeq	r0, r0, r0
  18:	00001000 	andeq	r1, r0, r0
  1c:	0000d620 	andeq	sp, r0, r0, lsr #12
  20:	00000000 	andeq	r0, r0, r0
  24:	00f30200 	rscseq	r0, r3, r0, lsl #4
  28:	1f010000 	svcne	0x00010000
  2c:	200000c2 	andcs	r0, r0, r2, asr #1
  30:	00000024 	andeq	r0, r0, r4, lsr #32
  34:	00499c01 	subeq	r9, r9, r1, lsl #24
  38:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
  3c:	01000000 	mrseq	r0, (UNDEF: 0)
  40:	0000491f 	andeq	r4, r0, pc, lsl r9
  44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
  4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  50:	00002902 	andeq	r2, r0, r2, lsl #18
  54:	98150100 	ldmdals	r5, {r8}
  58:	2a200000 	bcs	800060 <startup-0x1f7fffa0>
  5c:	01000000 	mrseq	r0, (UNDEF: 0)
  60:	00008a9c 	muleq	r0, ip, sl
  64:	002e0300 	eoreq	r0, lr, r0, lsl #6
  68:	15010000 	strne	r0, [r1, #-0]
  6c:	00000049 	andeq	r0, r0, r9, asr #32
  70:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
  74:	200000a0 	andcs	r0, r0, r0, lsr #1
  78:	0000001a 	andeq	r0, r0, sl, lsl r0
  7c:	01006906 	tsteq	r0, r6, lsl #18
  80:	00004919 	andeq	r4, r0, r9, lsl r9
  84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
  88:	1d070000 	stcne	0, cr0, [r7, #-0]
  8c:	01000000 	mrseq	r0, (UNDEF: 0)
  90:	0000540c 	andeq	r5, r0, ip, lsl #8
  94:	00004420 	andeq	r4, r0, r0, lsr #8
  98:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
  9c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
  a0:	00100301 	andseq	r0, r0, r1, lsl #6
  a4:	00442000 	subeq	r2, r4, r0
  a8:	9c010000 	stcls	0, cr0, [r1], {-0}
  ac:	00017a00 	andeq	r7, r1, r0, lsl #20
  b0:	76000400 	strvc	r0, [r0], -r0, lsl #8
  b4:	04000000 	streq	r0, [r0], #-0
  b8:	00003501 	andeq	r3, r0, r1, lsl #10
  bc:	010b0c00 	tsteq	fp, r0, lsl #24
  c0:	00000000 	andeq	r0, r0, r0
  c4:	00e80000 	rsceq	r0, r8, r0
  c8:	01242000 			; <UNDEFINED> instruction: 0x01242000
  cc:	00870000 	addeq	r0, r7, r0
  d0:	02020000 	andeq	r0, r2, #0
  d4:	00460c02 	subeq	r0, r6, r2, lsl #24
  d8:	67030000 	strvs	r0, [r3, -r0]
  dc:	02000001 	andeq	r0, r0, #1
  e0:	0000460d 	andeq	r4, r0, sp, lsl #12
  e4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
  e8:	02000001 	andeq	r0, r0, #1
  ec:	0000460e 	andeq	r4, r0, lr, lsl #12
  f0:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
  f4:	016e0801 	cmneq	lr, r1, lsl #16
  f8:	04050000 	streq	r0, [r5], #-0
  fc:	00660a02 	rsbeq	r0, r6, r2, lsl #20
 100:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
 104:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
 108:	0000660b 	andeq	r6, r0, fp, lsl #12
 10c:	00250700 	eoreq	r0, r5, r0, lsl #14
 110:	04000000 	streq	r0, [r0], #-0
 114:	02310704 	eorseq	r0, r1, #4, 14	; 0x100000
 118:	02020000 	andeq	r0, r2, #0
 11c:	008e1302 	addeq	r1, lr, r2, lsl #6
 120:	60030000 	andvs	r0, r3, r0
 124:	02000001 	andeq	r0, r0, #1
 128:	00004614 	andeq	r4, r0, r4, lsl r6
 12c:	4b030000 	blmi	c0134 <startup-0x1ff3fecc>
 130:	02000001 	andeq	r0, r0, #1
 134:	00004615 	andeq	r4, r0, r5, lsl r6
 138:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
 13c:	a7110204 	ldrge	r0, [r1, -r4, lsl #4]
 140:	06000000 	streq	r0, [r0], -r0
 144:	0072646f 	rsbseq	r6, r2, pc, ror #8
 148:	00661202 	rsbeq	r1, r6, r2, lsl #4
 14c:	6d070000 	stcvs	0, cr0, [r7, #-0]
 150:	00000000 	andeq	r0, r0, r0
 154:	00019108 	andeq	r9, r1, r8, lsl #2
 158:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
 15c:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 160:	00013303 	andeq	r3, r1, r3, lsl #6
 164:	66050200 	strvs	r0, [r5], -r0, lsl #4
 168:	00000000 	andeq	r0, r0, r0
 16c:	00015303 	andeq	r5, r1, r3, lsl #6
 170:	66060200 	strvs	r0, [r6], -r0, lsl #4
 174:	04000000 	streq	r0, [r0], #-0
 178:	0001b003 	andeq	fp, r1, r3
 17c:	66070200 	strvs	r0, [r7], -r0, lsl #4
 180:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 184:	00015a03 	andeq	r5, r1, r3, lsl #20
 188:	66080200 	strvs	r0, [r8], -r0, lsl #4
 18c:	0c000000 	stceq	0, cr0, [r0], {-0}
 190:	00004d09 	andeq	r4, r0, r9, lsl #26
 194:	8e091000 	cdphi	0, 0, cr1, cr9, cr0, {0}
 198:	14000000 	strne	r0, [r0], #-0
 19c:	01a30a00 			; <UNDEFINED> instruction: 0x01a30a00
 1a0:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 1a4:	000000a7 	andeq	r0, r0, r7, lsr #1
 1a8:	0001390b 	andeq	r3, r1, fp, lsl #18
 1ac:	10360100 	eorsne	r0, r6, r0, lsl #2
 1b0:	e6000001 	str	r0, [r0], -r1
 1b4:	26200001 	strtcs	r0, [r0], -r1
 1b8:	01000000 	mrseq	r0, (UNDEF: 0)
 1bc:	0801049c 	stmdaeq	r1, {r2, r3, r4, r7, sl}
 1c0:	00000177 	andeq	r0, r0, r7, ror r1
 1c4:	00017c0b 	andeq	r7, r1, fp, lsl #24
 1c8:	102d0100 	eorne	r0, sp, r0, lsl #2
 1cc:	c0000001 	andgt	r0, r0, r1
 1d0:	26200001 	strtcs	r0, [r0], -r1
 1d4:	01000000 	mrseq	r0, (UNDEF: 0)
 1d8:	01430b9c 			; <UNDEFINED> instruction: 0x01430b9c
 1dc:	24010000 	strcs	r0, [r1], #-0
 1e0:	00000110 	andeq	r0, r0, r0, lsl r1
 1e4:	20000194 	mulcs	r0, r4, r1
 1e8:	0000002c 	andeq	r0, r0, ip, lsr #32
 1ec:	870c9c01 	strhi	r9, [ip, -r1, lsl #24]
 1f0:	01000001 	tsteq	r0, r1
 1f4:	00015617 	andeq	r5, r1, r7, lsl r6
 1f8:	00013c00 	andeq	r3, r1, r0, lsl #24
 1fc:	00005820 	andeq	r5, r0, r0, lsr #16
 200:	0d9c0100 	ldfeqs	f0, [ip]
 204:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 208:	970e0074 	smlsdxls	lr, r4, r0, r0
 20c:	01000001 	tsteq	r0, r1
 210:	0000e804 	andeq	lr, r0, r4, lsl #16
 214:	00005420 	andeq	r5, r0, r0, lsr #8
 218:	0f9c0100 	svceq	0x009c0100
 21c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 220:	00660401 	rsbeq	r0, r6, r1, lsl #8
 224:	91020000 	mrsls	r0, (UNDEF: 2)
 228:	64000074 	strvs	r0, [r0], #-116	; 0xffffff8c
 22c:	04000002 	streq	r0, [r0], #-2
 230:	00015900 	andeq	r5, r1, r0, lsl #18
 234:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
 238:	0c000000 	stceq	0, cr0, [r0], {-0}
 23c:	0000025a 	andeq	r0, r0, sl, asr r2
 240:	00000000 	andeq	r0, r0, r0
 244:	2000020c 	andcs	r0, r0, ip, lsl #4
 248:	00000230 	andeq	r0, r0, r0, lsr r2
 24c:	00000112 	andeq	r0, r0, r2, lsl r1
 250:	00029602 	andeq	r9, r2, r2, lsl #12
 254:	0201b800 	andeq	fp, r1, #0, 16
 258:	0000b90a 	andeq	fp, r0, sl, lsl #18
 25c:	02050300 	andeq	r0, r5, #0, 6
 260:	0b020000 	bleq	80268 <startup-0x1ff7fd98>
 264:	000000b9 	strheq	r0, [r0], -r9
 268:	02860300 	addeq	r0, r6, #0, 6
 26c:	0c020000 	stceq	0, cr0, [r2], {-0}
 270:	000000b9 	strheq	r0, [r0], -r9
 274:	01fb0304 	mvnseq	r0, r4, lsl #6
 278:	0d020000 	stceq	0, cr0, [r2, #-0]
 27c:	000000b9 	strheq	r0, [r0], -r9
 280:	02000308 	andeq	r0, r0, #8, 6	; 0x20000000
 284:	0d020000 	stceq	0, cr0, [r2, #-0]
 288:	000000b9 	strheq	r0, [r0], -r9
 28c:	01f6030c 	mvnseq	r0, ip, lsl #6
 290:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 294:	000000b9 	strheq	r0, [r0], -r9
 298:	01ec0310 	mvneq	r0, r0, lsl r3
 29c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 2a0:	000000b9 	strheq	r0, [r0], -r9
 2a4:	021d0314 	andseq	r0, sp, #20, 6	; 0x50000000
 2a8:	0f020000 	svceq	0x00020000
 2ac:	000000b9 	strheq	r0, [r0], -r9
 2b0:	02220318 	eoreq	r0, r2, #24, 6	; 0x60000000
 2b4:	0f020000 	svceq	0x00020000
 2b8:	000000b9 	strheq	r0, [r0], -r9
 2bc:	020c031c 	andeq	r0, ip, #28, 6	; 0x70000000
 2c0:	10020000 	andne	r0, r2, r0
 2c4:	000000c0 	andeq	r0, r0, r0, asr #1
 2c8:	01f10420 	mvnseq	r0, r0, lsr #8
 2cc:	11020000 	mrsne	r0, (UNDEF: 2)
 2d0:	000000f5 	strdeq	r0, [r0], -r5
 2d4:	9b0401b0 	blls	10099c <startup-0x1feff664>
 2d8:	02000002 	andeq	r0, r0, #2
 2dc:	0000f512 	andeq	pc, r0, r2, lsl r5	; <UNPREDICTABLE>
 2e0:	0001b400 	andeq	fp, r1, r0, lsl #8
 2e4:	69050405 	stmdbvs	r5, {r0, r2, sl}
 2e8:	0600746e 	streq	r7, [r0], -lr, ror #8
 2ec:	000000d7 	ldrdeq	r0, [r0], -r7
 2f0:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2f4:	0000d007 	andeq	sp, r0, r7
 2f8:	08006300 	stmdaeq	r0, {r8, r9, sp, lr}
 2fc:	02310704 	eorseq	r0, r1, #4, 14	; 0x100000
 300:	04090000 	streq	r0, [r9], #-0
 304:	000000dd 	ldrdeq	r0, [r0], -sp
 308:	77080108 	strvc	r0, [r8, -r8, lsl #2]
 30c:	0a000001 	beq	318 <startup-0x1ffffce8>
 310:	000000ef 	andeq	r0, r0, pc, ror #1
 314:	0000ef0b 	andeq	lr, r0, fp, lsl #30
 318:	04090000 	streq	r0, [r9], #-0
 31c:	00000025 	andeq	r0, r0, r5, lsr #32
 320:	00e40409 	rsceq	r0, r4, r9, lsl #8
 324:	a10c0000 	mrsge	r0, (UNDEF: 12)
 328:	02000002 	andeq	r0, r0, #2
 32c:	00002513 	andeq	r2, r0, r3, lsl r5
 330:	02a00c00 	adceq	r0, r0, #0, 24
 334:	13020000 	movwne	r0, #8192	; 0x2000
 338:	000000ef 	andeq	r0, r0, pc, ror #1
 33c:	70060108 	andvc	r0, r6, r8, lsl #2
 340:	08000001 	stmdaeq	r0, {r0}
 344:	016e0801 	cmneq	lr, r1, lsl #16
 348:	02080000 	andeq	r0, r8, #0
 34c:	00028c05 	andeq	r8, r2, r5, lsl #24
 350:	07020800 	streq	r0, [r2, -r0, lsl #16]
 354:	000001ca 	andeq	r0, r0, sl, asr #3
 358:	51050408 	tstpl	r5, r8, lsl #8
 35c:	08000002 	stmdaeq	r0, {r1}
 360:	022c0704 	eoreq	r0, ip, #4, 14	; 0x100000
 364:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 368:	00024c05 	andeq	r4, r2, r5, lsl #24
 36c:	07080800 	streq	r0, [r8, -r0, lsl #16]
 370:	00000227 	andeq	r0, r0, r7, lsr #4
 374:	0000170d 	andeq	r1, r0, sp, lsl #14
 378:	fb0f0100 	blx	3c0782 <startup-0x1fc3f87e>
 37c:	05000000 	streq	r0, [r0, #-0]
 380:	0013d403 	andseq	sp, r3, r3, lsl #8
 384:	023e0e20 	eorseq	r0, lr, #32, 28	; 0x200
 388:	75010000 	strvc	r0, [r1, #-0]
 38c:	000000dd 	ldrdeq	r0, [r0], -sp
 390:	20000430 	andcs	r0, r0, r0, lsr r4
 394:	0000000c 	andeq	r0, r0, ip
 398:	f10f9c01 			; <UNDEFINED> instruction: 0xf10f9c01
 39c:	01000001 	tsteq	r0, r1
 3a0:	00035468 	andeq	r5, r3, r8, ror #8
 3a4:	0000dc20 	andeq	sp, r0, r0, lsr #24
 3a8:	d19c0100 	orrsle	r0, ip, r0, lsl #2
 3ac:	10000001 	andne	r0, r0, r1
 3b0:	0000027f 	andeq	r0, r0, pc, ror r2
 3b4:	01066801 	tsteq	r6, r1, lsl #16
 3b8:	91020000 	mrsls	r0, (UNDEF: 2)
 3bc:	0069115c 	rsbeq	r1, r9, ip, asr r1
 3c0:	01186901 	tsteq	r8, r1, lsl #18
 3c4:	91020000 	mrsls	r0, (UNDEF: 2)
 3c8:	006a116f 	rsbeq	r1, sl, pc, ror #2
 3cc:	01186901 	tsteq	r8, r1, lsl #18
 3d0:	91020000 	mrsls	r0, (UNDEF: 2)
 3d4:	616d116e 	cmnvs	sp, lr, ror #2
 3d8:	6a01006e 	bvs	40598 <startup-0x1ffbfa68>
 3dc:	000001d1 	ldrdeq	r0, [r0], -r1
 3e0:	12689102 	rsbne	r9, r8, #-2147483648	; 0x80000000
 3e4:	200003c0 	andcs	r0, r0, r0, asr #7
 3e8:	0000002e 	andeq	r0, r0, lr, lsr #32
 3ec:	0001dd0d 	andeq	sp, r1, sp, lsl #26
 3f0:	186f0100 	stmdane	pc!, {r8}^	; <UNPREDICTABLE>
 3f4:	02000001 	andeq	r0, r0, #1
 3f8:	00006791 	muleq	r0, r1, r7
 3fc:	01180409 	tsteq	r8, r9, lsl #8
 400:	130e0000 	movwne	r0, #57344	; 0xe000
 404:	01000002 	tsteq	r0, r2
 408:	0000dd62 	andeq	sp, r0, r2, ror #26
 40c:	00034800 	andeq	r4, r3, r0, lsl #16
 410:	00000c20 	andeq	r0, r0, r0, lsr #24
 414:	139c0100 	orrsne	r0, ip, #0, 2
 418:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 41c:	03005801 	movweq	r5, #2049	; 0x801
 420:	00482000 	subeq	r2, r8, r0
 424:	9c010000 	stcls	0, cr0, [r1], {-0}
 428:	0001e214 	andeq	lr, r1, r4, lsl r2
 42c:	482e0100 	stmdami	lr!, {r8}
 430:	b8200002 	stmdalt	r0!, {r1}
 434:	01000000 	mrseq	r0, (UNDEF: 0)
 438:	0002569c 	muleq	r2, ip, r6
 43c:	024c1500 	subeq	r1, ip, #0, 10
 440:	007c2000 	rsbseq	r2, ip, r0
 444:	023e0000 	eorseq	r0, lr, #0
 448:	7c160000 	ldcvc	0, cr0, [r6], {-0}
 44c:	01000001 	tsteq	r0, r1
 450:	0000b92f 	andeq	fp, r0, pc, lsr #18
 454:	00023000 	andeq	r3, r2, r0
 458:	18001700 	stmdane	r0, {r8, r9, sl, ip}
 45c:	00000139 	andeq	r0, r0, r9, lsr r1
 460:	00b92f01 	adcseq	r2, r9, r1, lsl #30
 464:	00170000 	andseq	r0, r7, r0
 468:	02de1200 	sbcseq	r1, lr, #0, 4
 46c:	00162000 	andseq	r2, r6, r0
 470:	43180000 	tstmi	r8, #0
 474:	01000001 	tsteq	r0, r1
 478:	0000b950 	andeq	fp, r0, r0, asr r9
 47c:	00001700 	andeq	r1, r0, r0, lsl #14
 480:	01c51900 	biceq	r1, r5, r0, lsl #18
 484:	1c010000 	stcne	0, cr0, [r1], {-0}
 488:	2000020c 	andcs	r0, r0, ip, lsl #4
 48c:	0000003c 	andeq	r0, r0, ip, lsr r0
 490:	18009c01 	stmdane	r0, {r0, sl, fp, ip, pc}
 494:	04000002 	streq	r0, [r0], #-2
 498:	0002c800 	andeq	ip, r2, r0, lsl #16
 49c:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
 4a0:	0c000000 	stceq	0, cr0, [r0], {-0}
 4a4:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
	...
 4b4:	000001dd 	ldrdeq	r0, [r0], -sp
 4b8:	70060102 	andvc	r0, r6, r2, lsl #2
 4bc:	02000001 	andeq	r0, r0, #1
 4c0:	016e0801 	cmneq	lr, r1, lsl #16
 4c4:	02020000 	andeq	r0, r2, #0
 4c8:	00028c05 	andeq	r8, r2, r5, lsl #24
 4cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
 4d0:	000001ca 	andeq	r0, r0, sl, asr #3
 4d4:	51050402 	tstpl	r5, r2, lsl #8
 4d8:	02000002 	andeq	r0, r0, #2
 4dc:	022c0704 	eoreq	r0, ip, #4, 14	; 0x100000
 4e0:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 4e4:	00024c05 	andeq	r4, r2, r5, lsl #24
 4e8:	07080200 	streq	r0, [r8, -r0, lsl #4]
 4ec:	00000227 	andeq	r0, r0, r7, lsr #4
 4f0:	69050403 	stmdbvs	r5, {r0, r1, sl}
 4f4:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
 4f8:	02310704 	eorseq	r0, r1, #4, 14	; 0x100000
 4fc:	02040000 	andeq	r0, r4, #0
 500:	008c0c02 	addeq	r0, ip, r2, lsl #24
 504:	67050000 	strvs	r0, [r5, -r0]
 508:	02000001 	andeq	r0, r0, #1
 50c:	00002c0d 	andeq	r2, r0, sp, lsl #24
 510:	a8050000 	stmdage	r5, {}	; <UNPREDICTABLE>
 514:	02000001 	andeq	r0, r0, #1
 518:	00002c0e 	andeq	r2, r0, lr, lsl #24
 51c:	06000100 	streq	r0, [r0], -r0, lsl #2
 520:	a50a0204 	strge	r0, [sl, #-516]	; 0xfffffdfc
 524:	07000000 	streq	r0, [r0, -r0]
 528:	00726469 	rsbseq	r6, r2, r9, ror #8
 52c:	00640b02 	rsbeq	r0, r4, r2, lsl #22
 530:	6b080000 	blvs	200538 <startup-0x1fdffac8>
 534:	00000000 	andeq	r0, r0, r0
 538:	13020204 	movwne	r0, #8708	; 0x2204
 53c:	000000c6 	andeq	r0, r0, r6, asr #1
 540:	00016005 	andeq	r6, r1, r5
 544:	2c140200 	lfmcs	f0, 4, [r4], {-0}
 548:	00000000 	andeq	r0, r0, r0
 54c:	00014b05 	andeq	r4, r1, r5, lsl #22
 550:	2c150200 	lfmcs	f0, 4, [r5], {-0}
 554:	01000000 	mrseq	r0, (UNDEF: 0)
 558:	02040600 	andeq	r0, r4, #0, 12
 55c:	0000df11 	andeq	sp, r0, r1, lsl pc
 560:	646f0700 	strbtvs	r0, [pc], #-1792	; 568 <startup-0x1ffffa98>
 564:	12020072 	andne	r0, r2, #114	; 0x72
 568:	00000064 	andeq	r0, r0, r4, rrx
 56c:	0000a508 	andeq	sl, r0, r8, lsl #10
 570:	91090000 	mrsls	r0, (UNDEF: 9)
 574:	18000001 	stmdane	r0, {r0}
 578:	01280402 			; <UNDEFINED> instruction: 0x01280402
 57c:	33050000 	movwcc	r0, #20480	; 0x5000
 580:	02000001 	andeq	r0, r0, #1
 584:	00006405 	andeq	r6, r0, r5, lsl #8
 588:	53050000 	movwpl	r0, #20480	; 0x5000
 58c:	02000001 	andeq	r0, r0, #1
 590:	00006406 	andeq	r6, r0, r6, lsl #8
 594:	b0050400 	andlt	r0, r5, r0, lsl #8
 598:	02000001 	andeq	r0, r0, #1
 59c:	00006407 	andeq	r6, r0, r7, lsl #8
 5a0:	5a050800 	bpl	1425a8 <startup-0x1febda58>
 5a4:	02000001 	andeq	r0, r0, #1
 5a8:	00006408 	andeq	r6, r0, r8, lsl #8
 5ac:	8c0a0c00 	stchi	12, cr0, [sl], {-0}
 5b0:	10000000 	andne	r0, r0, r0
 5b4:	0000c60a 	andeq	ip, r0, sl, lsl #12
 5b8:	0b001400 	bleq	55c0 <startup-0x1fffaa40>
 5bc:	000001a3 	andeq	r0, r0, r3, lsr #3
 5c0:	00df1802 	sbcseq	r1, pc, r2, lsl #16
 5c4:	01020000 	mrseq	r0, (UNDEF: 2)
 5c8:	00017708 	andeq	r7, r1, r8, lsl #14
 5cc:	01330c00 	teqeq	r3, r0, lsl #24
 5d0:	01500000 	cmpeq	r0, r0
 5d4:	640d0000 	strvs	r0, [sp], #-0
 5d8:	ff000000 			; <UNDEFINED> instruction: 0xff000000
 5dc:	0000640d 	andeq	r6, r0, sp, lsl #8
 5e0:	0e000700 	cdpeq	7, 0, cr0, cr0, cr0, {0}
 5e4:	0000046b 	andeq	r0, r0, fp, ror #8
 5e8:	013a3401 	teqeq	sl, r1, lsl #8
 5ec:	a80f0000 	stmdage	pc, {}	; <UNPREDICTABLE>
 5f0:	01000002 	tsteq	r0, r2
 5f4:	0004f0ad 	andeq	pc, r4, sp, lsr #1
 5f8:	00000e20 	andeq	r0, r0, r0, lsr #28
 5fc:	109c0100 	addsne	r0, ip, r0, lsl #2
 600:	000002ed 	andeq	r0, r0, sp, ror #5
 604:	04e68c01 	strbteq	r8, [r6], #3073	; 0xc01
 608:	000a2000 	andeq	r2, sl, r0
 60c:	9c010000 	stcls	0, cr0, [r1], {-0}
 610:	0002e610 	andeq	lr, r2, r0, lsl r6
 614:	dc890100 	stfles	f0, [r9], {0}
 618:	0a200004 	beq	800630 <startup-0x1f7ff9d0>
 61c:	01000000 	mrseq	r0, (UNDEF: 0)
 620:	02b6119c 	adcseq	r1, r6, #156, 2	; 0x27
 624:	70010000 	andvc	r0, r1, r0
 628:	200004c0 	andcs	r0, r0, r0, asr #9
 62c:	0000001c 	andeq	r0, r0, ip, lsl r0
 630:	01bb9c01 			; <UNDEFINED> instruction: 0x01bb9c01
 634:	d2120000 	andsle	r0, r2, #0
 638:	04200004 	strteq	r0, [r0], #-4
 63c:	13000000 	movwne	r0, #0
 640:	000002e6 	andeq	r0, r0, r6, ror #5
 644:	005d7e01 	subseq	r7, sp, r1, lsl #28
 648:	00140000 	andseq	r0, r4, r0
 64c:	f3110000 	vhadd.u16	d0, d1, d0
 650:	01000002 	tsteq	r0, r2
 654:	0004b661 	andeq	fp, r4, r1, ror #12
 658:	00000a20 	andeq	r0, r0, r0, lsr #20
 65c:	e89c0100 	ldm	ip, {r8}
 660:	12000001 	andne	r0, r0, #1
 664:	200004ba 			; <UNDEFINED> instruction: 0x200004ba
 668:	00000004 	andeq	r0, r0, r4
 66c:	0002b613 	andeq	fp, r2, r3, lsl r6
 670:	5d660100 	stfple	f0, [r6, #-0]
 674:	14000000 	strne	r0, [r0], #-0
 678:	15000000 	strne	r0, [r0, #-0]
 67c:	000002e1 	andeq	r0, r0, r1, ror #5
 680:	049c4801 	ldreq	r4, [ip], #2049	; 0x801
 684:	001a2000 	andseq	r2, sl, r0
 688:	9c010000 	stcls	0, cr0, [r1], {-0}
 68c:	0002ad10 	andeq	sl, r2, r0, lsl sp
 690:	3c390100 	ldfccs	f0, [r9], #-0
 694:	60200004 	eorvs	r0, r0, r4
 698:	01000000 	mrseq	r0, (UNDEF: 0)
 69c:	02f8169c 	rscseq	r1, r8, #156, 12	; 0x9c00000
 6a0:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 6a4:	20000000 	andcs	r0, r0, r0
 6a8:	0000000c 	andeq	r0, r0, ip
 6ac:	b5009c01 	strlt	r9, [r0, #-3073]	; 0xfffff3ff
 6b0:	04000005 	streq	r0, [r0], #-5
 6b4:	00040a00 	andeq	r0, r4, r0, lsl #20
 6b8:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
 6bc:	0c000000 	stceq	0, cr0, [r0], {-0}
 6c0:	00000430 	andeq	r0, r0, r0, lsr r4
 6c4:	00000000 	andeq	r0, r0, r0
 6c8:	20000500 	andcs	r0, r0, r0, lsl #10
 6cc:	000006d4 	ldrdeq	r0, [r0], -r4
 6d0:	0000027b 	andeq	r0, r0, fp, ror r2
 6d4:	70060102 	andvc	r0, r6, r2, lsl #2
 6d8:	03000001 	movweq	r0, #1
 6dc:	0000037e 	andeq	r0, r0, lr, ror r3
 6e0:	00372b02 	eorseq	r2, r7, r2, lsl #22
 6e4:	01020000 	mrseq	r0, (UNDEF: 2)
 6e8:	00016e08 	andeq	r6, r1, r8, lsl #28
 6ec:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
 6f0:	0000028c 	andeq	r0, r0, ip, lsl #5
 6f4:	ca070202 	bgt	1c0f04 <startup-0x1fe3f0fc>
 6f8:	02000001 	andeq	r0, r0, #1
 6fc:	02510504 	subseq	r0, r1, #4, 10	; 0x1000000
 700:	04020000 	streq	r0, [r2], #-0
 704:	00022c07 	andeq	r2, r2, r7, lsl #24
 708:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
 70c:	0000024c 	andeq	r0, r0, ip, asr #4
 710:	27070802 	strcs	r0, [r7, -r2, lsl #16]
 714:	04000002 	streq	r0, [r0], #-2
 718:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 71c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
 720:	00023107 	andeq	r3, r2, r7, lsl #2
 724:	03800300 	orreq	r0, r0, #0, 6
 728:	18030000 	stmdane	r3, {}	; <UNPREDICTABLE>
 72c:	0000002c 	andeq	r0, r0, ip, lsr #32
 730:	0c040205 	sfmeq	f0, 4, [r4], {5}
 734:	000000a2 	andeq	r0, r0, r2, lsr #1
 738:	00016706 	andeq	r6, r1, r6, lsl #14
 73c:	370d0400 	strcc	r0, [sp, -r0, lsl #8]
 740:	00000000 	andeq	r0, r0, r0
 744:	0001a806 	andeq	sl, r1, r6, lsl #16
 748:	370e0400 	strcc	r0, [lr, -r0, lsl #8]
 74c:	01000000 	mrseq	r0, (UNDEF: 0)
 750:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
 754:	0000bb0a 	andeq	fp, r0, sl, lsl #22
 758:	64690800 	strbtvs	r0, [r9], #-2048	; 0xfffff800
 75c:	0b040072 	bleq	10092c <startup-0x1feff6d4>
 760:	0000006f 	andeq	r0, r0, pc, rrx
 764:	00008109 	andeq	r8, r0, r9, lsl #2
 768:	02050000 	andeq	r0, r5, #0
 76c:	00dc1304 	sbcseq	r1, ip, r4, lsl #6
 770:	60060000 	andvs	r0, r6, r0
 774:	04000001 	streq	r0, [r0], #-1
 778:	00003714 	andeq	r3, r0, r4, lsl r7
 77c:	4b060000 	blmi	180784 <startup-0x1fe7f87c>
 780:	04000001 	streq	r0, [r0], #-1
 784:	00003715 	andeq	r3, r0, r5, lsl r7
 788:	07000100 	streq	r0, [r0, -r0, lsl #2]
 78c:	f5110404 			; <UNDEFINED> instruction: 0xf5110404
 790:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 794:	0072646f 	rsbseq	r6, r2, pc, ror #8
 798:	006f1204 	rsbeq	r1, pc, r4, lsl #4
 79c:	bb090000 	bllt	2407a4 <startup-0x1fdbf85c>
 7a0:	00000000 	andeq	r0, r0, r0
 7a4:	0001910a 	andeq	r9, r1, sl, lsl #2
 7a8:	04041800 	streq	r1, [r4], #-2048	; 0xfffff800
 7ac:	0000013e 	andeq	r0, r0, lr, lsr r1
 7b0:	00013306 	andeq	r3, r1, r6, lsl #6
 7b4:	6f050400 	svcvs	0x00050400
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00015306 	andeq	r5, r1, r6, lsl #6
 7c0:	6f060400 	svcvs	0x00060400
 7c4:	04000000 	streq	r0, [r0], #-0
 7c8:	0001b006 	andeq	fp, r1, r6
 7cc:	6f070400 	svcvs	0x00070400
 7d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 7d4:	00015a06 	andeq	r5, r1, r6, lsl #20
 7d8:	6f080400 	svcvs	0x00080400
 7dc:	0c000000 	stceq	0, cr0, [r0], {-0}
 7e0:	0000a20b 	andeq	sl, r0, fp, lsl #4
 7e4:	dc0b1000 	stcle	0, cr1, [fp], {-0}
 7e8:	14000000 	strne	r0, [r0], #-0
 7ec:	01a30300 			; <UNDEFINED> instruction: 0x01a30300
 7f0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
 7f4:	000000f5 	strdeq	r0, [r0], -r5
 7f8:	0000760c 	andeq	r7, r0, ip, lsl #12
 7fc:	00015f00 	andeq	r5, r1, r0, lsl #30
 800:	006f0d00 	rsbeq	r0, pc, r0, lsl #26
 804:	0dff0000 	ldcleq	0, cr0, [pc]	; 80c <startup-0x1ffff7f4>
 808:	0000006f 	andeq	r0, r0, pc, rrx
 80c:	6b0e0007 	blvs	380830 <startup-0x1fc7f7d0>
 810:	01000004 	tsteq	r0, r4
 814:	00014907 	andeq	r4, r1, r7, lsl #18
 818:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
 81c:	0f20000b 	svceq	0x0020000b
 820:	00000306 	andeq	r0, r0, r6, lsl #6
 824:	0b5ceb01 	bleq	173b430 <startup-0x1e8c4bd0>
 828:	00782000 	rsbseq	r2, r8, r0
 82c:	9c010000 	stcls	0, cr0, [r1], {-0}
 830:	000001cc 	andeq	r0, r0, ip, asr #3
 834:	000b6210 	andeq	r6, fp, r0, lsl r2
 838:	00004420 	andeq	r4, r0, r0, lsr #8
 83c:	0001b500 	andeq	fp, r1, r0, lsl #10
 840:	00691100 	rsbeq	r1, r9, r0, lsl #2
 844:	0068ec01 	rsbeq	lr, r8, r1, lsl #24
 848:	91020000 	mrsls	r0, (UNDEF: 2)
 84c:	0b681274 	bleq	1a05224 <startup-0x1e5faddc>
 850:	00322000 	eorseq	r2, r2, r0
 854:	6a110000 	bvs	44085c <startup-0x1fbbf7a4>
 858:	68ed0100 	stmiavs	sp!, {r8}^
 85c:	02000000 	andeq	r0, r0, #0
 860:	00007091 	muleq	r0, r1, r0
 864:	000ba612 	andeq	sl, fp, r2, lsl r6
 868:	00002220 	andeq	r2, r0, r0, lsr #4
 86c:	006a1100 	rsbeq	r1, sl, r0, lsl #2
 870:	0068f101 	rsbeq	pc, r8, r1, lsl #2
 874:	91020000 	mrsls	r0, (UNDEF: 2)
 878:	0f00006c 	svceq	0x0000006c
 87c:	000003d3 	ldrdeq	r0, [r0], -r3
 880:	0ae8e101 	beq	ffa38c8c <Pedro+0xdfa378b8>
 884:	00742000 	rsbseq	r2, r4, r0
 888:	9c010000 	stcls	0, cr0, [r1], {-0}
 88c:	00000228 	andeq	r0, r0, r8, lsr #4
 890:	000aee10 	andeq	lr, sl, r0, lsl lr
 894:	00004420 	andeq	r4, r0, r0, lsr #8
 898:	00021100 	andeq	r1, r2, r0, lsl #2
 89c:	00691100 	rsbeq	r1, r9, r0, lsl #2
 8a0:	0068e201 	rsbeq	lr, r8, r1, lsl #4
 8a4:	91020000 	mrsls	r0, (UNDEF: 2)
 8a8:	0af41274 	beq	ffd05280 <Pedro+0xdfd03eac>
 8ac:	00322000 	eorseq	r2, r2, r0
 8b0:	6a110000 	bvs	4408b8 <startup-0x1fbbf748>
 8b4:	68e30100 	stmiavs	r3!, {r8}^
 8b8:	02000000 	andeq	r0, r0, #0
 8bc:	00007091 	muleq	r0, r1, r0
 8c0:	000b3212 	andeq	r3, fp, r2, lsl r2
 8c4:	00001c20 	andeq	r1, r0, r0, lsr #24
 8c8:	006a1100 	rsbeq	r1, sl, r0, lsl #2
 8cc:	0068e701 	rsbeq	lr, r8, r1, lsl #14
 8d0:	91020000 	mrsls	r0, (UNDEF: 2)
 8d4:	1300006c 	movwne	r0, #108	; 0x6c
 8d8:	00000310 	andeq	r0, r0, r0, lsl r3
 8dc:	0a08b101 	beq	22cce8 <startup-0x1fdd3318>
 8e0:	00e02000 	rsceq	r2, r0, r0
 8e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8e8:	0000027c 	andeq	r0, r0, ip, ror r2
 8ec:	01006911 	tsteq	r0, r1, lsl r9
 8f0:	000076b2 			; <UNDEFINED> instruction: 0x000076b2
 8f4:	6f910200 	svcvs	0x00910200
 8f8:	01006a11 	tsteq	r0, r1, lsl sl
 8fc:	000076b2 			; <UNDEFINED> instruction: 0x000076b2
 900:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 904:	00041214 	andeq	r1, r4, r4, lsl r2
 908:	76b20100 	ldrtvc	r0, [r2], r0, lsl #2
 90c:	02000000 	andeq	r0, r0, #0
 910:	63116791 	tstvs	r1, #38010880	; 0x2440000
 914:	76b20100 	ldrtvc	r0, [r2], r0, lsl #2
 918:	02000000 	andeq	r0, r0, #0
 91c:	6b116d91 	blvs	45bf68 <startup-0x1fba4098>
 920:	6fb30100 	svcvs	0x00b30100
 924:	02000000 	andeq	r0, r0, #0
 928:	15006891 	strne	r6, [r0, #-2193]	; 0xfffff76f
 92c:	000003c0 	andeq	r0, r0, r0, asr #7
 930:	09d8ad01 	ldmibeq	r8, {r0, r8, sl, fp, sp, pc}^
 934:	00302000 	eorseq	r2, r0, r0
 938:	9c010000 	stcls	0, cr0, [r1], {-0}
 93c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
 940:	00036716 	andeq	r6, r3, r6, lsl r7
 944:	68ad0100 	stmiavs	sp!, {r8}
 948:	02000000 	andeq	r0, r0, #0
 94c:	62167491 	andsvs	r7, r6, #-1862270976	; 0x91000000
 950:	01000003 	tsteq	r0, r3
 954:	000068ad 	andeq	r6, r0, sp, lsr #17
 958:	70910200 	addsvc	r0, r1, r0, lsl #4
 95c:	01006317 	tsteq	r0, r7, lsl r3
 960:	0002baad 	andeq	fp, r2, sp, lsr #21
 964:	6f910200 	svcvs	0x00910200
 968:	08010200 	stmdaeq	r1, {r9}
 96c:	00000177 	andeq	r0, r0, r7, ror r1
 970:	00045815 	andeq	r5, r4, r5, lsl r8
 974:	acaa0100 	stfges	f0, [sl]
 978:	2c200009 	stccs	0, cr0, [r0], #-36	; 0xffffffdc
 97c:	01000000 	mrseq	r0, (UNDEF: 0)
 980:	0002ff9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 984:	03671600 	cmneq	r7, #0, 12
 988:	aa010000 	bge	40990 <startup-0x1ffbf670>
 98c:	00000068 	andeq	r0, r0, r8, rrx
 990:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 994:	00000362 	andeq	r0, r0, r2, ror #6
 998:	0068aa01 	rsbeq	sl, r8, r1, lsl #20
 99c:	91020000 	mrsls	r0, (UNDEF: 2)
 9a0:	00631770 	rsbeq	r1, r3, r0, ror r7
 9a4:	02baaa01 	adcseq	sl, sl, #4096	; 0x1000
 9a8:	91020000 	mrsls	r0, (UNDEF: 2)
 9ac:	0015006f 	andseq	r0, r5, pc, rrx
 9b0:	01000003 	tsteq	r0, r3
 9b4:	0008f89e 	muleq	r8, lr, r8
 9b8:	0000b420 	andeq	fp, r0, r0, lsr #8
 9bc:	499c0100 	ldmibmi	ip, {r8}
 9c0:	17000003 	strne	r0, [r0, -r3]
 9c4:	9e010078 	mcrls	0, 0, r0, cr1, cr8, {3}
 9c8:	00000068 	andeq	r0, r0, r8, rrx
 9cc:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
 9d0:	9e010079 	mcrls	0, 0, r0, cr1, cr9, {3}
 9d4:	00000068 	andeq	r0, r0, r8, rrx
 9d8:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
 9dc:	00746573 	rsbseq	r6, r4, r3, ror r5
 9e0:	00689e01 	rsbeq	r9, r8, r1, lsl #28
 9e4:	91020000 	mrsls	r0, (UNDEF: 2)
 9e8:	04061464 	streq	r1, [r6], #-1124	; 0xfffffb9c
 9ec:	a0010000 	andge	r0, r1, r0
 9f0:	00000076 	andeq	r0, r0, r6, ror r0
 9f4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 9f8:	0004650f 	andeq	r6, r4, pc, lsl #10
 9fc:	b0970100 	addslt	r0, r7, r0, lsl #2
 a00:	48200008 	stmdami	r0!, {r3}
 a04:	01000000 	mrseq	r0, (UNDEF: 0)
 a08:	00038b9c 	muleq	r3, ip, fp
 a0c:	08b61200 	ldmeq	r6!, {r9, ip}
 a10:	00342000 	eorseq	r2, r4, r0
 a14:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 a18:	68980100 	ldmvs	r8, {r8}
 a1c:	02000000 	andeq	r0, r0, #0
 a20:	bc127491 	cfldrslt	mvf7, [r2], {145}	; 0x91
 a24:	22200008 	eorcs	r0, r0, #8
 a28:	11000000 	mrsne	r0, (UNDEF: 0)
 a2c:	9901006a 	stmdbls	r1, {r1, r3, r5, r6}
 a30:	00000068 	andeq	r0, r0, r8, rrx
 a34:	00709102 	rsbseq	r9, r0, r2, lsl #2
 a38:	40130000 	andsmi	r0, r3, r0
 a3c:	01000003 	tsteq	r0, r3
 a40:	0008728e 	andeq	r7, r8, lr, lsl #5
 a44:	00003e20 	andeq	r3, r0, r0, lsr #28
 a48:	cd9c0100 	ldfgts	f0, [ip]
 a4c:	12000003 	andne	r0, r0, #3
 a50:	20000878 	andcs	r0, r0, r8, ror r8
 a54:	00000030 	andeq	r0, r0, r0, lsr r0
 a58:	01006911 	tsteq	r0, r1, lsl r9
 a5c:	0000688f 	andeq	r6, r0, pc, lsl #17
 a60:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 a64:	00087e12 	andeq	r7, r8, r2, lsl lr
 a68:	00001e20 	andeq	r1, r0, r0, lsr #28
 a6c:	006a1100 	rsbeq	r1, sl, r0, lsl #2
 a70:	00689001 	rsbeq	r9, r8, r1
 a74:	91020000 	mrsls	r0, (UNDEF: 2)
 a78:	00000070 	andeq	r0, r0, r0, ror r0
 a7c:	00038813 	andeq	r8, r3, r3, lsl r8
 a80:	2c870100 	stfcss	f0, [r7], {0}
 a84:	46200008 	strtmi	r0, [r0], -r8
 a88:	01000000 	mrseq	r0, (UNDEF: 0)
 a8c:	0003ff9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 a90:	03791600 	cmneq	r9, #0, 12
 a94:	87010000 	strhi	r0, [r1, -r0]
 a98:	00000076 	andeq	r0, r0, r6, ror r0
 a9c:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 aa0:	00000412 	andeq	r0, r0, r2, lsl r4
 aa4:	00768701 	rsbseq	r8, r6, r1, lsl #14
 aa8:	91020000 	mrsls	r0, (UNDEF: 2)
 aac:	24130076 	ldrcs	r0, [r3], #-118	; 0xffffff8a
 ab0:	01000003 	tsteq	r0, r3
 ab4:	0007ec81 	andeq	lr, r7, r1, lsl #25
 ab8:	00004020 	andeq	r4, r0, r0, lsr #32
 abc:	319c0100 	orrscc	r0, ip, r0, lsl #2
 ac0:	16000004 	strne	r0, [r0], -r4
 ac4:	00000332 	andeq	r0, r0, r2, lsr r3
 ac8:	00768101 	rsbseq	r8, r6, r1, lsl #2
 acc:	91020000 	mrsls	r0, (UNDEF: 2)
 ad0:	04121677 	ldreq	r1, [r2], #-1655	; 0xfffff989
 ad4:	81010000 	mrshi	r0, (UNDEF: 1)
 ad8:	00000076 	andeq	r0, r0, r6, ror r0
 adc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 ae0:	0003b213 	andeq	fp, r3, r3, lsl r2
 ae4:	766c0100 	strbtvc	r0, [ip], -r0, lsl #2
 ae8:	76200007 	strtvc	r0, [r0], -r7
 aec:	01000000 	mrseq	r0, (UNDEF: 0)
 af0:	0004709c 	muleq	r4, ip, r0
 af4:	033a1600 	teqeq	sl, #0, 12
 af8:	6c010000 	stcvs	0, cr0, [r1], {-0}
 afc:	00000076 	andeq	r0, r0, r6, ror r0
 b00:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 b04:	00000412 	andeq	r0, r0, r2, lsl r4
 b08:	00766c01 	rsbseq	r6, r6, r1, lsl #24
 b0c:	91020000 	mrsls	r0, (UNDEF: 2)
 b10:	001d1876 	andseq	r1, sp, r6, ror r8
 b14:	43010000 	movwmi	r0, #4096	; 0x1000
 b18:	00000068 	andeq	r0, r0, r8, rrx
 b1c:	1a000019 	bne	b88 <startup-0x1ffff478>
 b20:	0000036c 	andeq	r0, r0, ip, ror #6
 b24:	00766701 	rsbseq	r6, r6, r1, lsl #14
 b28:	074c0000 	strbeq	r0, [ip, -r0]
 b2c:	002a2000 	eoreq	r2, sl, r0
 b30:	9c010000 	stcls	0, cr0, [r1], {-0}
 b34:	00000498 	muleq	r0, r8, r4
 b38:	00041216 	andeq	r1, r4, r6, lsl r2
 b3c:	76670100 	strbtvc	r0, [r7], -r0, lsl #2
 b40:	02000000 	andeq	r0, r0, #0
 b44:	1a007791 	bne	1e990 <startup-0x1ffe1670>
 b48:	00000355 	andeq	r0, r0, r5, asr r3
 b4c:	00764f01 	rsbseq	r4, r6, r1, lsl #30
 b50:	06bc0000 	ldrteq	r0, [ip], r0
 b54:	00902000 	addseq	r2, r0, r0
 b58:	9c010000 	stcls	0, cr0, [r1], {-0}
 b5c:	000004d9 	ldrdeq	r0, [r0], -r9
 b60:	00041216 	andeq	r1, r4, r6, lsl r2
 b64:	764f0100 	strbvc	r0, [pc], -r0, lsl #2
 b68:	02000000 	andeq	r0, r0, #0
 b6c:	63116f91 	tstvs	r1, #580	; 0x244
 b70:	76500100 	ldrbvc	r0, [r0], -r0, lsl #2
 b74:	02000000 	andeq	r0, r0, #0
 b78:	1d187791 	ldcne	7, cr7, [r8, #-580]	; 0xfffffdbc
 b7c:	01000000 	mrseq	r0, (UNDEF: 0)
 b80:	00006843 	andeq	r6, r0, r3, asr #16
 b84:	00001900 	andeq	r1, r0, r0, lsl #18
 b88:	0003f31b 	andeq	pc, r3, fp, lsl r3	; <UNPREDICTABLE>
 b8c:	523d0100 	eorspl	r0, sp, #0, 2
 b90:	6a200006 	bvs	800bb0 <startup-0x1f7ff450>
 b94:	01000000 	mrseq	r0, (UNDEF: 0)
 b98:	0005089c 	muleq	r5, ip, r8
 b9c:	00631100 	rsbeq	r1, r3, r0, lsl #2
 ba0:	00763e01 	rsbseq	r3, r6, r1, lsl #28
 ba4:	91020000 	mrsls	r0, (UNDEF: 2)
 ba8:	001d1877 	andseq	r1, sp, r7, ror r8
 bac:	43010000 	movwmi	r0, #4096	; 0x1000
 bb0:	00000068 	andeq	r0, r0, r8, rrx
 bb4:	13000019 	movwne	r0, #25
 bb8:	0000041d 	andeq	r0, r0, sp, lsl r4
 bbc:	05ee2d01 	strbeq	r2, [lr, #3329]!	; 0xd01
 bc0:	00642000 	rsbeq	r2, r4, r0
 bc4:	9c010000 	stcls	0, cr0, [r1], {-0}
 bc8:	0000053c 	andeq	r0, r0, ip, lsr r5
 bcc:	0000291c 	andeq	r2, r0, ip, lsl r9
 bd0:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
 bd4:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 bd8:	19000005 	stmdbne	r0, {r0, r2}
 bdc:	00f31800 	rscseq	r1, r3, r0, lsl #16
 be0:	31010000 	mrscc	r0, (UNDEF: 1)
 be4:	00000068 	andeq	r0, r0, r8, rrx
 be8:	1b000019 	blne	c54 <startup-0x1ffff3ac>
 bec:	0000040b 	andeq	r0, r0, fp, lsl #8
 bf0:	05941a01 	ldreq	r1, [r4, #2561]	; 0xa01
 bf4:	005a2000 	subseq	r2, sl, r0
 bf8:	9c010000 	stcls	0, cr0, [r1], {-0}
 bfc:	00000560 	andeq	r0, r0, r0, ror #10
 c00:	00041216 	andeq	r1, r4, r6, lsl r2
 c04:	761a0100 	ldrvc	r0, [sl], -r0, lsl #2
 c08:	02000000 	andeq	r0, r0, #0
 c0c:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 c10:	0000039b 	muleq	r0, fp, r3
 c14:	05441201 	strbeq	r1, [r4, #-513]	; 0xfffffdff
 c18:	00502000 	subseq	r2, r0, r0
 c1c:	9c010000 	stcls	0, cr0, [r1], {-0}
 c20:	0000058e 	andeq	r0, r0, lr, lsl #11
 c24:	01007817 	tsteq	r0, r7, lsl r8
 c28:	00003712 	andeq	r3, r0, r2, lsl r7
 c2c:	6f910200 	svcvs	0x00910200
 c30:	01006311 	tsteq	r0, r1, lsl r3
 c34:	0002ba13 	andeq	fp, r2, r3, lsl sl
 c38:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c3c:	03de1e00 	bicseq	r1, lr, #0, 28
 c40:	0a010000 	beq	40c48 <startup-0x1ffbf3b8>
 c44:	20000500 	andcs	r0, r0, r0, lsl #10
 c48:	00000044 	andeq	r0, r0, r4, asr #32
 c4c:	78179c01 	ldmdavc	r7, {r0, sl, fp, ip, pc}
 c50:	370a0100 	strcc	r0, [sl, -r0, lsl #2]
 c54:	02000000 	andeq	r0, r0, #0
 c58:	63116f91 	tstvs	r1, #580	; 0x244
 c5c:	ba0b0100 	blt	2c1064 <startup-0x1fd3ef9c>
 c60:	02000002 	andeq	r0, r0, #2
 c64:	00007791 	muleq	r0, r1, r7

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00050300 	andeq	r0, r5, r0, lsl #6
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	0b002404 	bleq	9054 <startup-0x1fff6fac>
  40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  44:	05000008 	streq	r0, [r0, #-8]
  48:	0111010b 	tsteq	r1, fp, lsl #2
  4c:	00000612 	andeq	r0, r0, r2, lsl r6
  50:	03003406 	movweq	r3, #1030	; 0x406
  54:	3b0b3a08 	blcc	2ce87c <startup-0x1fd31784>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	07000018 	smladeq	r0, r8, r0, r0
  60:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	01110b3b 	tsteq	r1, fp, lsr fp
  6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  70:	00194297 	mulseq	r9, r7, r2
  74:	11010000 	mrsne	r0, (UNDEF: 1)
  78:	130e2501 	movwne	r2, #58625	; 0xe501
  7c:	1b0e030b 	blne	380cb0 <startup-0x1fc7f350>
  80:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  84:	00171006 	andseq	r1, r7, r6
  88:	01130200 	tsteq	r3, r0, lsl #4
  8c:	0b3a0b0b 	bleq	e82cc0 <startup-0x1f17d340>
  90:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  94:	0d030000 	stceq	0, cr0, [r3, #-0]
  98:	3a0e0300 	bcc	380ca0 <startup-0x1fc7f360>
  9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  a0:	000b3813 	andeq	r3, fp, r3, lsl r8
  a4:	00240400 	eoreq	r0, r4, r0, lsl #8
  a8:	0b3e0b0b 	bleq	f82cdc <startup-0x1f07d324>
  ac:	00000e03 	andeq	r0, r0, r3, lsl #28
  b0:	0b011705 	bleq	45ccc <startup-0x1ffba334>
  b4:	3b0b3a0b 	blcc	2ce8e8 <startup-0x1fd31718>
  b8:	0013010b 	andseq	r0, r3, fp, lsl #2
  bc:	000d0600 	andeq	r0, sp, r0, lsl #12
  c0:	0b3a0803 	bleq	e820d4 <startup-0x1f17df2c>
  c4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  c8:	0d070000 	stceq	0, cr0, [r7, #-0]
  cc:	00134900 	andseq	r4, r3, r0, lsl #18
  d0:	01130800 	tsteq	r3, r0, lsl #16
  d4:	0b0b0e03 	bleq	2c38e8 <startup-0x1fd3c718>
  d8:	0b3b0b3a 	bleq	ec2dc8 <startup-0x1f13d238>
  dc:	00001301 	andeq	r1, r0, r1, lsl #6
  e0:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
  e4:	000b3813 	andeq	r3, fp, r3, lsl r8
  e8:	00160a00 	andseq	r0, r6, r0, lsl #20
  ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
  f0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f4:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
  f8:	03193f00 	tsteq	r9, #0, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	1113490b 	tstne	r3, fp, lsl #18
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 10c:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 110:	03193f00 	tsteq	r9, #0, 30
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	1113490b 	tstne	r3, fp, lsl #18
 11c:	40061201 	andmi	r1, r6, r1, lsl #4
 120:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 124:	240d0000 	strcs	r0, [sp], #-0
 128:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 12c:	0008030b 	andeq	r0, r8, fp, lsl #6
 130:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 134:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 138:	0b3b0b3a 	bleq	ec2e28 <startup-0x1f13d1d8>
 13c:	01111927 	tsteq	r1, r7, lsr #18
 140:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 144:	00194297 	mulseq	r9, r7, r2
 148:	00050f00 	andeq	r0, r5, r0, lsl #30
 14c:	0b3a0803 	bleq	e82160 <startup-0x1f17dea0>
 150:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 154:	00001802 	andeq	r1, r0, r2, lsl #16
 158:	01110100 	tsteq	r1, r0, lsl #2
 15c:	0b130e25 	bleq	4c39f8 <startup-0x1fb3c608>
 160:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 164:	06120111 			; <UNDEFINED> instruction: 0x06120111
 168:	00001710 	andeq	r1, r0, r0, lsl r7
 16c:	03011302 	movweq	r1, #4866	; 0x1302
 170:	3a050b0e 	bcc	142db0 <startup-0x1febd250>
 174:	010b3b0b 	tsteq	fp, fp, lsl #22
 178:	03000013 	movweq	r0, #19
 17c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 180:	0b3b0b3a 	bleq	ec2e70 <startup-0x1f13d190>
 184:	0b381349 	bleq	e04eb0 <startup-0x1f1fb150>
 188:	0d040000 	stceq	0, cr0, [r4, #-0]
 18c:	3a0e0300 	bcc	380d94 <startup-0x1fc7f26c>
 190:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 194:	00053813 	andeq	r3, r5, r3, lsl r8
 198:	00240500 	eoreq	r0, r4, r0, lsl #10
 19c:	0b3e0b0b 	bleq	f82dd0 <startup-0x1f07d230>
 1a0:	00000803 	andeq	r0, r0, r3, lsl #16
 1a4:	49010106 	stmdbmi	r1, {r1, r2, r8}
 1a8:	00130113 	andseq	r0, r3, r3, lsl r1
 1ac:	00210700 	eoreq	r0, r1, r0, lsl #14
 1b0:	0b2f1349 	bleq	bc4edc <startup-0x1f43b124>
 1b4:	24080000 	strcs	r0, [r8], #-0
 1b8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 1bc:	000e030b 	andeq	r0, lr, fp, lsl #6
 1c0:	000f0900 	andeq	r0, pc, r0, lsl #18
 1c4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 1c8:	150a0000 	strne	r0, [sl, #-0]
 1cc:	01192701 	tsteq	r9, r1, lsl #14
 1d0:	0b000013 	bleq	224 <startup-0x1ffffddc>
 1d4:	13490005 	movtne	r0, #36869	; 0x9005
 1d8:	160c0000 	strne	r0, [ip], -r0
 1dc:	3a0e0300 	bcc	380de4 <startup-0x1fc7f21c>
 1e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 1e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 1ec:	0b3b0b3a 	bleq	ec2edc <startup-0x1f13d124>
 1f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1f4:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 1f8:	03193f00 	tsteq	r9, #0, 30
 1fc:	3b0b3a0e 	blcc	2cea3c <startup-0x1fd315c4>
 200:	1113490b 	tstne	r3, fp, lsl #18
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 20c:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 210:	03193f01 	tsteq	r9, #1, 30
 214:	3b0b3a0e 	blcc	2cea54 <startup-0x1fd315ac>
 218:	1119270b 	tstne	r9, fp, lsl #14
 21c:	40061201 	andmi	r1, r6, r1, lsl #4
 220:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 224:	00001301 	andeq	r1, r0, r1, lsl #6
 228:	03000510 	movweq	r0, #1296	; 0x510
 22c:	3b0b3a0e 	blcc	2cea6c <startup-0x1fd31594>
 230:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 234:	11000018 	tstne	r0, r8, lsl r0
 238:	08030034 	stmdaeq	r3, {r2, r4, r5}
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 244:	0b120000 	bleq	48024c <startup-0x1fb7fdb4>
 248:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 24c:	13000006 	movwne	r0, #6
 250:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 254:	0b3a0e03 	bleq	e83a68 <startup-0x1f17c598>
 258:	01110b3b 	tsteq	r1, fp, lsr fp
 25c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 260:	00194297 	mulseq	r9, r7, r2
 264:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
 268:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 26c:	0b3b0b3a 	bleq	ec2f5c <startup-0x1f13d0a4>
 270:	06120111 			; <UNDEFINED> instruction: 0x06120111
 274:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 278:	00130119 	andseq	r0, r3, r9, lsl r1
 27c:	010b1500 	tsteq	fp, r0, lsl #10
 280:	06120111 			; <UNDEFINED> instruction: 0x06120111
 284:	00001301 	andeq	r1, r0, r1, lsl #6
 288:	3f012e16 	svccc	0x00012e16
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	01193c13 	tsteq	r9, r3, lsl ip
 298:	17000013 	smladne	r0, r3, r0, r0
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	3f012e18 	svccc	0x00012e18
 2a4:	3a0e0319 	bcc	380f10 <startup-0x1fc7f0f0>
 2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00193c13 	andseq	r3, r9, r3, lsl ip
 2b0:	002e1900 	eoreq	r1, lr, r0, lsl #18
 2b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b8:	0b3b0b3a 	bleq	ec2fa8 <startup-0x1f13d058>
 2bc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2c4:	00000019 	andeq	r0, r0, r9, lsl r0
 2c8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2cc:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
 2d4:	10011117 	andne	r1, r1, r7, lsl r1
 2d8:	02000017 	andeq	r0, r0, #23
 2dc:	0b0b0024 	bleq	2c0374 <startup-0x1fd3fc8c>
 2e0:	0e030b3e 	vmoveq.16	d3[0], r0
 2e4:	24030000 	strcs	r0, [r3], #-0
 2e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2ec:	0008030b 	andeq	r0, r8, fp, lsl #6
 2f0:	01130400 	tsteq	r3, r0, lsl #8
 2f4:	0b3a0b0b 	bleq	e82f28 <startup-0x1f17d0d8>
 2f8:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 2fc:	0d050000 	stceq	0, cr0, [r5, #-0]
 300:	3a0e0300 	bcc	380f08 <startup-0x1fc7f0f8>
 304:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 308:	000b3813 	andeq	r3, fp, r3, lsl r8
 30c:	01170600 	tsteq	r7, r0, lsl #12
 310:	0b3a0b0b 	bleq	e82f44 <startup-0x1f17d0bc>
 314:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 318:	0d070000 	stceq	0, cr0, [r7, #-0]
 31c:	3a080300 	bcc	200f24 <startup-0x1fdff0dc>
 320:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 324:	08000013 	stmdaeq	r0, {r0, r1, r4}
 328:	1349000d 	movtne	r0, #36877	; 0x900d
 32c:	13090000 	movwne	r0, #36864	; 0x9000
 330:	0b0e0301 	bleq	380f3c <startup-0x1fc7f0c4>
 334:	3b0b3a0b 	blcc	2ceb68 <startup-0x1fd31498>
 338:	0013010b 	andseq	r0, r3, fp, lsl #2
 33c:	000d0a00 	andeq	r0, sp, r0, lsl #20
 340:	0b381349 	bleq	e0506c <startup-0x1f1faf94>
 344:	160b0000 	strne	r0, [fp], -r0
 348:	3a0e0300 	bcc	380f50 <startup-0x1fc7f0b0>
 34c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 350:	0c000013 	stceq	0, cr0, [r0], {19}
 354:	13490101 	movtne	r0, #37121	; 0x9101
 358:	00001301 	andeq	r1, r0, r1, lsl #6
 35c:	4900210d 	stmdbmi	r0, {r0, r2, r3, r8, sp}
 360:	000b2f13 	andeq	r2, fp, r3, lsl pc
 364:	00340e00 	eorseq	r0, r4, r0, lsl #28
 368:	0b3a0e03 	bleq	e83b7c <startup-0x1f17c484>
 36c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 370:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 374:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 378:	03193f00 	tsteq	r9, #0, 30
 37c:	3b0b3a0e 	blcc	2cebbc <startup-0x1fd31444>
 380:	1119270b 	tstne	r9, fp, lsl #14
 384:	40061201 	andmi	r1, r6, r1, lsl #4
 388:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 38c:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 390:	03193f00 	tsteq	r9, #0, 30
 394:	3b0b3a0e 	blcc	2cebd4 <startup-0x1fd3142c>
 398:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 39c:	97184006 	ldrls	r4, [r8, -r6]
 3a0:	00001942 	andeq	r1, r0, r2, asr #18
 3a4:	3f012e11 	svccc	0x00012e11
 3a8:	3a0e0319 	bcc	381014 <startup-0x1fc7efec>
 3ac:	110b3b0b 	tstne	fp, fp, lsl #22
 3b0:	40061201 	andmi	r1, r6, r1, lsl #4
 3b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3b8:	00001301 	andeq	r1, r0, r1, lsl #6
 3bc:	11010b12 	tstne	r1, r2, lsl fp
 3c0:	00061201 	andeq	r1, r6, r1, lsl #4
 3c4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
 3c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3cc:	0b3b0b3a 	bleq	ec30bc <startup-0x1f13cf44>
 3d0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 3d4:	18140000 	ldmdane	r4, {}	; <UNPREDICTABLE>
 3d8:	15000000 	strne	r0, [r0, #-0]
 3dc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3e0:	0b3a0e03 	bleq	e83bf4 <startup-0x1f17c40c>
 3e4:	01110b3b 	tsteq	r1, fp, lsr fp
 3e8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3ec:	00194296 	mulseq	r9, r6, r2
 3f0:	002e1600 	eoreq	r1, lr, r0, lsl #12
 3f4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	01111927 	tsteq	r1, r7, lsr #18
 400:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 404:	00194297 	mulseq	r9, r7, r2
 408:	11010000 	mrsne	r0, (UNDEF: 1)
 40c:	130e2501 	movwne	r2, #58625	; 0xe501
 410:	1b0e030b 	blne	381044 <startup-0x1fc7efbc>
 414:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 418:	00171006 	andseq	r1, r7, r6
 41c:	00240200 	eoreq	r0, r4, r0, lsl #4
 420:	0b3e0b0b 	bleq	f83054 <startup-0x1f07cfac>
 424:	00000e03 	andeq	r0, r0, r3, lsl #28
 428:	03001603 	movweq	r1, #1539	; 0x603
 42c:	3b0b3a0e 	blcc	2cec6c <startup-0x1fd31394>
 430:	0013490b 	andseq	r4, r3, fp, lsl #18
 434:	00240400 	eoreq	r0, r4, r0, lsl #8
 438:	0b3e0b0b 	bleq	f8306c <startup-0x1f07cf94>
 43c:	00000803 	andeq	r0, r0, r3, lsl #16
 440:	0b011305 	bleq	4505c <startup-0x1ffbafa4>
 444:	3b0b3a0b 	blcc	2cec78 <startup-0x1fd31388>
 448:	0013010b 	andseq	r0, r3, fp, lsl #2
 44c:	000d0600 	andeq	r0, sp, r0, lsl #12
 450:	0b3a0e03 	bleq	e83c64 <startup-0x1f17c39c>
 454:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 458:	00000b38 	andeq	r0, r0, r8, lsr fp
 45c:	0b011707 	bleq	46080 <startup-0x1ffb9f80>
 460:	3b0b3a0b 	blcc	2cec94 <startup-0x1fd3136c>
 464:	0013010b 	andseq	r0, r3, fp, lsl #2
 468:	000d0800 	andeq	r0, sp, r0, lsl #16
 46c:	0b3a0803 	bleq	e82480 <startup-0x1f17db80>
 470:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 474:	0d090000 	stceq	0, cr0, [r9, #-0]
 478:	00134900 	andseq	r4, r3, r0, lsl #18
 47c:	01130a00 	tsteq	r3, r0, lsl #20
 480:	0b0b0e03 	bleq	2c3c94 <startup-0x1fd3c36c>
 484:	0b3b0b3a 	bleq	ec3174 <startup-0x1f13ce8c>
 488:	00001301 	andeq	r1, r0, r1, lsl #6
 48c:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 490:	000b3813 	andeq	r3, fp, r3, lsl r8
 494:	01010c00 	tsteq	r1, r0, lsl #24
 498:	13011349 	movwne	r1, #4937	; 0x1349
 49c:	210d0000 	mrscs	r0, (UNDEF: 13)
 4a0:	2f134900 	svccs	0x00134900
 4a4:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 4a8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 4ac:	0b3b0b3a 	bleq	ec319c <startup-0x1f13ce64>
 4b0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 4b4:	00001802 	andeq	r1, r0, r2, lsl #16
 4b8:	3f012e0f 	svccc	0x00012e0f
 4bc:	3a0e0319 	bcc	381128 <startup-0x1fc7eed8>
 4c0:	110b3b0b 	tstne	fp, fp, lsl #22
 4c4:	40061201 	andmi	r1, r6, r1, lsl #4
 4c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4cc:	00001301 	andeq	r1, r0, r1, lsl #6
 4d0:	11010b10 	tstne	r1, r0, lsl fp
 4d4:	01061201 	tsteq	r6, r1, lsl #4
 4d8:	11000013 	tstne	r0, r3, lsl r0
 4dc:	08030034 	stmdaeq	r3, {r2, r4, r5}
 4e0:	0b3b0b3a 	bleq	ec31d0 <startup-0x1f13ce30>
 4e4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 4e8:	0b120000 	bleq	4804f0 <startup-0x1fb7fb10>
 4ec:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 4f0:	13000006 	movwne	r0, #6
 4f4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 4f8:	0b3a0e03 	bleq	e83d0c <startup-0x1f17c2f4>
 4fc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 500:	06120111 			; <UNDEFINED> instruction: 0x06120111
 504:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 508:	00130119 	andseq	r0, r3, r9, lsl r1
 50c:	00341400 	eorseq	r1, r4, r0, lsl #8
 510:	0b3a0e03 	bleq	e83d24 <startup-0x1f17c2dc>
 514:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 518:	00001802 	andeq	r1, r0, r2, lsl #16
 51c:	3f012e15 	svccc	0x00012e15
 520:	3a0e0319 	bcc	38118c <startup-0x1fc7ee74>
 524:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 528:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 52c:	97184006 	ldrls	r4, [r8, -r6]
 530:	13011942 	movwne	r1, #6466	; 0x1942
 534:	05160000 	ldreq	r0, [r6, #-0]
 538:	3a0e0300 	bcc	381140 <startup-0x1fc7eec0>
 53c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 540:	00180213 	andseq	r0, r8, r3, lsl r2
 544:	00051700 	andeq	r1, r5, r0, lsl #14
 548:	0b3a0803 	bleq	e8255c <startup-0x1f17daa4>
 54c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 550:	00001802 	andeq	r1, r0, r2, lsl #16
 554:	3f012e18 	svccc	0x00012e18
 558:	3a0e0319 	bcc	3811c4 <startup-0x1fc7ee3c>
 55c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 560:	00193c13 	andseq	r3, r9, r3, lsl ip
 564:	00181900 	andseq	r1, r8, r0, lsl #18
 568:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 56c:	3a0e0301 	bcc	381178 <startup-0x1fc7ee88>
 570:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 574:	11134919 	tstne	r3, r9, lsl r9
 578:	40061201 	andmi	r1, r6, r1, lsl #4
 57c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 580:	00001301 	andeq	r1, r0, r1, lsl #6
 584:	03012e1b 	movweq	r2, #7707	; 0x1e1b
 588:	3b0b3a0e 	blcc	2cedc8 <startup-0x1fd31238>
 58c:	1119270b 	tstne	r9, fp, lsl #14
 590:	40061201 	andmi	r1, r6, r1, lsl #4
 594:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 598:	00001301 	andeq	r1, r0, r1, lsl #6
 59c:	3f012e1c 	svccc	0x00012e1c
 5a0:	3a0e0319 	bcc	38120c <startup-0x1fc7edf4>
 5a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 5a8:	01193c13 	tsteq	r9, r3, lsl ip
 5ac:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 5b0:	0e03012e 	adfeqsp	f0, f3, #0.5
 5b4:	0b3b0b3a 	bleq	ec32a4 <startup-0x1f13cd5c>
 5b8:	01111927 	tsteq	r1, r7, lsr #18
 5bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
 5c4:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 5c8:	0e03012e 	adfeqsp	f0, f3, #0.5
 5cc:	0b3b0b3a 	bleq	ec32bc <startup-0x1f13cd44>
 5d0:	01111927 	tsteq	r1, r7, lsr #18
 5d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 5d8:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000d6 	ldrdeq	r0, [r0], -r6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00ad0002 	adceq	r0, sp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000e8 	andcs	r0, r0, r8, ror #1
  34:	00000124 	andeq	r0, r0, r4, lsr #2
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	022b0002 	eoreq	r0, fp, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	2000020c 	andcs	r0, r0, ip, lsl #4
  54:	00000230 	andeq	r0, r0, r0, lsr r2
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	04930002 	ldreq	r0, [r3], #2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	2000043c 	andcs	r0, r0, ip, lsr r4
  74:	000000c2 	andeq	r0, r0, r2, asr #1
  78:	20000000 	andcs	r0, r0, r0
  7c:	0000000c 	andeq	r0, r0, ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	06af0002 	strteq	r0, [pc], r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000500 	andcs	r0, r0, r0, lsl #10
  9c:	000006d4 	ldrdeq	r0, [r0], -r4
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000083 	andeq	r0, r0, r3, lsl #1
   4:	003c0002 	eorseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
  24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  2c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
  30:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
  34:	006f7264 	rsbeq	r7, pc, r4, ror #4
  38:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  3c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
  40:	00010063 	andeq	r0, r1, r3, rrx
  44:	05000000 	streq	r0, [r0, #-0]
  48:	00001002 	andeq	r1, r0, r2
  4c:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; ffffffd4 <Pedro+0xdfffec00>
  50:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  54:	06010402 	streq	r0, [r1], -r2, lsl #8
  58:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  5c:	3d3d2fa0 	ldccc	15, cr2, [sp, #-640]!	; 0xfffffd80
  60:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  64:	20060104 	andcs	r0, r6, r4, lsl #2
  68:	a03d6706 	eorsge	r6, sp, r6, lsl #14
  6c:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
  70:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  74:	002d0304 	eoreq	r0, sp, r4, lsl #6
  78:	06010402 	streq	r0, [r1], -r2, lsl #8
  7c:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
  80:	04029f4b 	streq	r9, [r2], #-3915	; 0xfffff0b5
  84:	87010100 	strhi	r0, [r1, -r0, lsl #2]
  88:	02000000 	andeq	r0, r0, #0
  8c:	00004800 	andeq	r4, r0, r0, lsl #16
  90:	fb010200 	blx	4089a <startup-0x1ffbf766>
  94:	01000d0e 	tsteq	r0, lr, lsl #26
  98:	00010101 	andeq	r0, r1, r1, lsl #2
  9c:	00010000 	andeq	r0, r1, r0
  a0:	3a5a0100 	bcc	16804a8 <startup-0x1e97fb58>
  a4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  a8:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
  ac:	2f65646f 	svccs	0x0065646f
  b0:	2f706f6d 	svccs	0x00706f6d
  b4:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
  b8:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
  bc:	00006f72 	andeq	r6, r0, r2, ror pc
  c0:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
  c4:	73636e75 	cmnvc	r3, #1872	; 0x750
  c8:	0100632e 	tsteq	r0, lr, lsr #6
  cc:	70670000 	rsbvc	r0, r7, r0
  d0:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
  d4:	00000100 	andeq	r0, r0, r0, lsl #2
  d8:	02050000 	andeq	r0, r5, #0
  dc:	200000e8 	andcs	r0, r0, r8, ror #1
  e0:	3dbc4b15 			; <UNDEFINED> instruction: 0x3dbc4b15
  e4:	3d223d22 	stccc	13, cr3, [r2, #-136]!	; 0xffffff78
  e8:	3e223d22 	cdpcc	13, 2, cr3, cr2, cr2, {1}
  ec:	2f752f76 	svccs	0x00752f76
  f0:	2f752f75 	svccs	0x00752f75
  f4:	5b212f75 	blpl	84bed0 <startup-0x1f7b4130>
  f8:	593d3d2f 	ldmdbpl	sp!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}
  fc:	3d21303d 	stccc	0, cr3, [r1, #-244]!	; 0xffffff0c
 100:	3d593d2f 	ldclcc	13, cr3, [r9, #-188]	; 0xffffff44
 104:	2f3d2230 	svccs	0x003d2230
 108:	303d593d 	eorscc	r5, sp, sp, lsr r9
 10c:	00030222 	andeq	r0, r3, r2, lsr #4
 110:	00c70101 	sbceq	r0, r7, r1, lsl #2
 114:	00020000 	andeq	r0, r2, r0
 118:	00000046 	andeq	r0, r0, r6, asr #32
 11c:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 120:	0101000d 	tsteq	r1, sp
 124:	00000101 	andeq	r0, r0, r1, lsl #2
 128:	00000100 	andeq	r0, r0, r0, lsl #2
 12c:	2f3a5a01 	svccs	0x003a5a01
 130:	2f504f4d 	svccs	0x00504f4d
 134:	6f632d63 	svcvs	0x00632d63
 138:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffffb0 <Pedro+0xdfffebdc>
 13c:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 140:	72657075 	rsbvc	r7, r5, #117	; 0x75
 144:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 148:	5000006f 	andpl	r0, r0, pc, rrx
 14c:	6f726465 	svcvs	0x00726465
 150:	0100632e 	tsteq	r0, lr, lsr #6
 154:	65700000 	ldrbvs	r0, [r0, #-0]!
 158:	2e6f7264 	cdpcs	2, 6, cr7, cr15, cr4, {3}
 15c:	00010068 	andeq	r0, r1, r8, rrx
 160:	05000000 	streq	r0, [r0, #-0]
 164:	00020c02 	andeq	r0, r2, r2, lsl #24
 168:	011b0320 	tsteq	fp, r0, lsr #6
 16c:	4b303030 	blmi	c0c234 <startup-0x1f3f3dcc>
 170:	2f304b3e 	svccs	0x00304b3e
 174:	002f5b4c 	eoreq	r5, pc, ip, asr #22
 178:	06010402 	streq	r0, [r1], -r2, lsl #8
 17c:	4b4b064a 	blmi	12c1aac <startup-0x1ed3e554>
 180:	2738243b 			; <UNDEFINED> instruction: 0x2738243b
 184:	01040200 	mrseq	r0, R12_usr
 188:	4c064a06 			; <UNDEFINED> instruction: 0x4c064a06
 18c:	3824494b 	stmdacc	r4!, {r0, r1, r3, r6, r8, fp, lr}
 190:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
 194:	5c4b5a4b 	mcrrpl	10, 4, r5, fp, cr11
 198:	3c0a034b 	stccc	3, cr0, [sl], {75}	; 0x4b
 19c:	3d207903 			; <UNDEFINED> instruction: 0x3d207903
 1a0:	68404b4b 	stmdavs	r0, {r0, r1, r3, r6, r8, r9, fp, lr}^
 1a4:	75767530 	ldrbvc	r7, [r6, #-1328]!	; 0xfffffad0
 1a8:	4e306876 	mrcmi	8, 1, r6, cr0, cr6, {3}
 1ac:	08593d4c 	ldmdaeq	r9, {r2, r3, r6, r8, sl, fp, ip, sp}^
 1b0:	0200ad91 	andeq	sl, r0, #9280	; 0x2440
 1b4:	00590304 	subseq	r0, r9, r4, lsl #6
 1b8:	08030402 	stmdaeq	r3, {r1, sl}
 1bc:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
 1c0:	02006403 	andeq	r6, r0, #50331648	; 0x3000000
 1c4:	58060104 	stmdapl	r6, {r2, r8}
 1c8:	02040200 	andeq	r0, r4, #0, 4
 1cc:	02007106 	andeq	r7, r0, #-2147483647	; 0x80000001
 1d0:	66060104 	strvs	r0, [r6], -r4, lsl #2
 1d4:	314cb406 	cmpcc	ip, r6, lsl #8
 1d8:	01000402 	tsteq	r0, r2, lsl #8
 1dc:	00009a01 	andeq	r9, r0, r1, lsl #20
 1e0:	44000200 	strmi	r0, [r0], #-512	; 0xfffffe00
 1e4:	02000000 	andeq	r0, r0, #0
 1e8:	0d0efb01 	vstreq	d15, [lr, #-4]
 1ec:	01010100 	mrseq	r0, (UNDEF: 17)
 1f0:	00000001 	andeq	r0, r0, r1
 1f4:	01000001 	tsteq	r0, r1
 1f8:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 1fc:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 200:	646f632d 	strbtvs	r6, [pc], #-813	; 208 <startup-0x1ffffdf8>
 204:	6f6d2f65 	svcvs	0x006d2f65
 208:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 20c:	50726570 	rsbspl	r6, r2, r0, ror r5
 210:	6f726465 	svcvs	0x00726465
 214:	616d0000 	cmnvs	sp, r0
 218:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 21c:	00000100 	andeq	r0, r0, r0, lsl #2
 220:	6f697067 	svcvs	0x00697067
 224:	0100682e 	tsteq	r0, lr, lsr #16
 228:	00000000 	andeq	r0, r0, r0
 22c:	00000205 	andeq	r0, r0, r5, lsl #4
 230:	28032000 	stmdacs	r3, {sp}
 234:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
 238:	01010003 	tsteq	r1, r3
 23c:	3c020500 	cfstr32cc	mvfx0, [r2], {-0}
 240:	03200004 			; <UNDEFINED> instruction: 0x03200004
 244:	3d300138 	ldfccs	f0, [r0, #-224]!	; 0xffffff20
 248:	6776673e 			; <UNDEFINED> instruction: 0x6776673e
 24c:	3033e868 	eorscc	lr, r3, r8, ror #16
 250:	03302f31 	teqeq	r0, #49, 30	; 0xc4
 254:	02003c0c 	andeq	r3, r0, #12, 24	; 0xc00
 258:	00330104 	eorseq	r0, r3, r4, lsl #2
 25c:	2d010402 	cfstrscs	mvf0, [r1, #-8]
 260:	03200b03 			; <UNDEFINED> instruction: 0x03200b03
 264:	59312e0a 	ldmdbpl	r1!, {r1, r3, r9, sl, fp, sp}
 268:	3d304134 	ldfccs	f4, [r0, #-208]!	; 0xffffff30
 26c:	3c1f0330 	ldccc	3, cr0, [pc], {48}	; 0x30
 270:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 274:	03023001 	movweq	r3, #8193	; 0x2001
 278:	72010100 	andvc	r0, r1, #0, 2
 27c:	02000002 	andeq	r0, r0, #2
 280:	0000e300 	andeq	lr, r0, r0, lsl #6
 284:	fb010200 	blx	40a8e <startup-0x1ffbf572>
 288:	01000d0e 	tsteq	r0, lr, lsl #26
 28c:	00010101 	andeq	r0, r1, r1, lsl #2
 290:	00010000 	andeq	r0, r1, r0
 294:	3a5a0100 	bcc	168069c <startup-0x1e97f964>
 298:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 29c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 2a0:	2f65646f 	svccs	0x0065646f
 2a4:	2f706f6d 	svccs	0x00706f6d
 2a8:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 2ac:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 2b0:	63006f72 	movwvs	r6, #3954	; 0xf72
 2b4:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 2b8:	70706165 	rsbsvc	r6, r0, r5, ror #2
 2bc:	646f635c 	strbtvs	r6, [pc], #-860	; 2c4 <startup-0x1ffffd3c>
 2c0:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 2c4:	6f745c65 	svcvs	0x00745c65
 2c8:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 2cc:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 2d0:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 2d4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2d8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 2dc:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2e0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 2e4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 2e8:	616d5c65 	cmnvs	sp, r5, ror #24
 2ec:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 2f0:	3a630065 	bcc	18c048c <startup-0x1e73fb74>
 2f4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 2f8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 2fc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 300:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 304:	6f6f745c 	svcvs	0x006f745c
 308:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 30c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 310:	615c6d72 	cmpvs	ip, r2, ror sp
 314:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 318:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 31c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 320:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 324:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 328:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 32c:	634c0000 	movtvs	r0, #49152	; 0xc000
 330:	63734164 	cmnvs	r3, #100, 2
 334:	632e6969 			; <UNDEFINED> instruction: 0x632e6969
 338:	00000100 	andeq	r0, r0, r0, lsl #2
 33c:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 340:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 344:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 348:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 34c:	00000200 	andeq	r0, r0, r0, lsl #4
 350:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 354:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 358:	00030068 	andeq	r0, r3, r8, rrx
 35c:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 360:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 364:	00000001 	andeq	r0, r0, r1
 368:	00020500 	andeq	r0, r2, r0, lsl #10
 36c:	03200005 			; <UNDEFINED> instruction: 0x03200005
 370:	59680109 	stmdbpl	r8!, {r0, r3, r8}^
 374:	684b6775 	stmdavs	fp, {r0, r2, r4, r5, r6, r8, r9, sl, sp, lr}^
 378:	75bb5968 	ldrvc	r5, [fp, #2408]!	; 0x968
 37c:	0367684b 	cmneq	r7, #4915200	; 0x4b0000
 380:	70037410 	andvc	r7, r3, r0, lsl r4
 384:	4a100320 	bmi	40100c <startup-0x1fbfeff4>
 388:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 38c:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 390:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 394:	3d2f4c22 	stccc	12, cr4, [pc, #-136]!	; 314 <startup-0x1ffffcec>
 398:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 39c:	4b4b4b3d 	blmi	12d3098 <startup-0x1ed2cf68>
 3a0:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 3a4:	3d3d3e3e 	ldccc	14, cr3, [sp, #-248]!	; 0xffffff08
 3a8:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
 3ac:	2f3d752f 	svccs	0x003d752f
 3b0:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 3b4:	3d3d68a0 	ldccc	8, cr6, [sp, #-640]!	; 0xfffffd80
 3b8:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 3bc:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 3c0:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 3c4:	ae3d303d 	mrcge	0, 1, r3, cr13, cr13, {1}
 3c8:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 3cc:	3d2f4b91 	fstmdbxcc	pc!, {d4-d75}	;@ Deprecated
 3d0:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 3d4:	313d5930 	teqcc	sp, r0, lsr r9
 3d8:	753e3d3d 	ldrvc	r3, [lr, #-3389]!	; 0xfffff2c3
 3dc:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 3e0:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
 3e4:	833d3d59 	teqhi	sp, #5696	; 0x1640
 3e8:	003d3d4b 	eorseq	r3, sp, fp, asr #26
 3ec:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 3f0:	03040200 	movweq	r0, #16896	; 0x4200
 3f4:	04020065 	streq	r0, [r2], #-101	; 0xffffff9b
 3f8:	003c0601 	eorseq	r0, ip, r1, lsl #12
 3fc:	06020402 	streq	r0, [r2], -r2, lsl #8
 400:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
 404:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 408:	3d3d4d41 	ldccc	13, cr4, [sp, #-260]!	; 0xfffffefc
 40c:	03040200 	movweq	r0, #16896	; 0x4200
 410:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 414:	02008103 	andeq	r8, r0, #-1073741824	; 0xc0000000
 418:	3c060104 	stfccs	f0, [r6], {4}
 41c:	02040200 	andeq	r0, r4, #0, 4
 420:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 424:	3c060104 	stfccs	f0, [r6], {4}
 428:	68764006 	ldmdavs	r6!, {r1, r2, lr}^
 42c:	083d1408 	ldmdaeq	sp!, {r3, sl, ip}
 430:	ca081e87 	bgt	207e54 <startup-0x1fdf81ac>
 434:	67917584 	ldrvs	r7, [r1, r4, lsl #11]
 438:	3e769f75 	mrccc	15, 3, r9, cr6, cr5, {3}
 43c:	0200592f 	andeq	r5, r0, #770048	; 0xbc000
 440:	58060104 	stmdapl	r6, {r2, r8}
 444:	02040200 	andeq	r0, r4, #0, 4
 448:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 44c:	02002004 	andeq	r2, r0, #4
 450:	2f060404 	svccs	0x00060404
 454:	0067c959 	rsbeq	ip, r7, r9, asr r9
 458:	59030402 	stmdbpl	r3, {r1, sl}
 45c:	03040200 	movweq	r0, #16896	; 0x4200
 460:	02005708 	andeq	r5, r0, #8, 14	; 0x200000
 464:	82060104 	andhi	r0, r6, #4, 2
 468:	02040200 	andeq	r0, r4, #0, 4
 46c:	02005506 	andeq	r5, r0, #25165824	; 0x1800000
 470:	66060104 	strvs	r0, [r6], -r4, lsl #2
 474:	02040200 	andeq	r0, r4, #0, 4
 478:	02005606 	andeq	r5, r0, #6291456	; 0x600000
 47c:	66060104 	strvs	r0, [r6], -r4, lsl #2
 480:	580a0306 	stmdapl	sl, {r1, r2, r8, r9}
 484:	3d662303 	stclcc	3, cr2, [r6, #-12]!
 488:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 48c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 490:	00f10304 	rscseq	r0, r1, r4, lsl #6
 494:	06010402 	streq	r0, [r1], -r2, lsl #8
 498:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 49c:	003b0602 	eorseq	r0, fp, r2, lsl #12
 4a0:	06010402 	streq	r0, [r1], -r2, lsl #8
 4a4:	0041063c 	subeq	r0, r1, ip, lsr r6
 4a8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 4ac:	03040200 	movweq	r0, #16896	; 0x4200
 4b0:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
 4b4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 4b8:	3d3d753f 	cfldr32cc	mvfx7, [sp, #-252]!	; 0xffffff04
 4bc:	03040200 	movweq	r0, #16896	; 0x4200
 4c0:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4c4:	0200f103 	andeq	pc, r0, #-1073741824	; 0xc0000000
 4c8:	3c060104 	stfccs	f0, [r6], {4}
 4cc:	02040200 	andeq	r0, r4, #0, 4
 4d0:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 4d4:	3c060104 	stfccs	f0, [r6], {4}
 4d8:	02004106 	andeq	r4, r0, #-2147483647	; 0x80000001
 4dc:	003d0304 	eorseq	r0, sp, r4, lsl #6
 4e0:	81030402 	tsthi	r3, r2, lsl #8
 4e4:	01040200 	mrseq	r0, R12_usr
 4e8:	3f063c06 	svccc	0x00063c06
 4ec:	01000602 	tsteq	r0, r2, lsl #12
 4f0:	Address 0x000004f0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4d5c3a5a 	vldrmi	s7, [ip, #-360]	; 0xfffffe98
   4:	635c504f 	cmpvs	ip, #79	; 0x4f
   8:	646f632d 	strbtvs	r6, [pc], #-813	; 10 <startup-0x1ffffff0>
   c:	6f6d5c65 	svcvs	0x006d5c65
  10:	75535c70 	ldrbvc	r5, [r3, #-3184]	; 0xfffff390
  14:	50726570 	rsbspl	r6, r2, r0, ror r5
  18:	6f726465 	svcvs	0x00726465
  1c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  20:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff6c7 <Pedro+0xdfffe2f3>
  24:	736e3030 	cmnvc	lr, #48	; 0x30
  28:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  2c:	696d7961 	stmdbvs	sp!, {r0, r5, r6, r8, fp, ip, sp, lr}^
  30:	736f7263 	cmnvc	pc, #805306374	; 0x30000006
  34:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  38:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffdf3a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  80:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  84:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  94:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  98:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  9c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  a4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  ac:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	2f3a5a00 	svccs	0x003a5a00
  d0:	2f504f4d 	svccs	0x00504f4d
  d4:	6f632d63 	svcvs	0x00632d63
  d8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffff50 <Pedro+0xdfffeb7c>
  dc:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
  e0:	72657075 	rsbvc	r7, r5, #117	; 0x75
  e4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  e8:	65642f6f 	strbvs	r2, [r4, #-3951]!	; 0xfffff091
  ec:	7379616c 	cmnvc	r9, #108, 2
  f0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
  f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  f8:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  fc:	64007369 	strvs	r7, [r0], #-873	; 0xfffffc97
 100:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 104:	3035325f 	eorscc	r3, r5, pc, asr r2
 108:	5a00736e 	bpl	1cec8 <startup-0x1ffe3138>
 10c:	4f4d2f3a 	svcmi	0x004d2f3a
 110:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 114:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 118:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 11c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 120:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 124:	2f6f7264 	svccs	0x006f7264
 128:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
 12c:	73636e75 	cmnvc	r3, #1872	; 0x750
 130:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 134:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 138:	4c736900 			; <UNDEFINED> instruction: 0x4c736900
 13c:	4b746665 	blmi	1d19ad8 <startup-0x1e2e6528>
 140:	69007965 	stmdbvs	r0, {r0, r2, r5, r6, r8, fp, ip, sp, lr}
 144:	4b705573 	blmi	1c15718 <startup-0x1e3ea8e8>
 148:	6f007965 	svcvs	0x00007965
 14c:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 150:	6f006867 	svcvs	0x00006867
 154:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 158:	75700072 	ldrbvc	r0, [r0, #-114]!	; 0xffffff8e
 15c:	00726470 	rsbseq	r6, r2, r0, ror r4
 160:	4c72646f 	cfldrdmi	mvd6, [r2], #-444	; 0xfffffe44
 164:	6900776f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 168:	6f4c7264 	svcvs	0x004c7264
 16c:	6e750077 	mrcvs	0, 3, r0, cr5, cr7, {3}
 170:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 174:	63206465 			; <UNDEFINED> instruction: 0x63206465
 178:	00726168 	rsbseq	r6, r2, r8, ror #2
 17c:	69527369 	ldmdbvs	r2, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
 180:	4b746867 	blmi	1d1a324 <startup-0x1e2e5cdc>
 184:	6b007965 	blvs	1e720 <startup-0x1ffe18e0>
 188:	65476462 	strbvs	r6, [r7, #-1122]	; 0xfffffb9e
 18c:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; ffffffc4 <Pedro+0xdfffebf0>
 190:	70675f00 	rsbvc	r5, r7, r0, lsl #30
 194:	6b006f69 	blvs	1bf40 <startup-0x1ffe40c0>
 198:	63416462 	movtvs	r6, #5218	; 0x1462
 19c:	61766974 	cmnvs	r6, r4, ror r9
 1a0:	47006574 	smlsdxmi	r0, r4, r5, r6
 1a4:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 1a8:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 1ac:	00686769 	rsbeq	r6, r8, r9, ror #14
 1b0:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 1b4:	00726465 	rsbseq	r6, r2, r5, ror #8
 1b8:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 1bc:	79685079 	stmdbvc	r8!, {r0, r3, r4, r5, r6, ip, lr}^
 1c0:	73636973 	cmnvc	r3, #1884160	; 0x1cc000
 1c4:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 1c8:	68730065 	ldmdavs	r3!, {r0, r2, r5, r6}^
 1cc:	2074726f 	rsbscs	r7, r4, pc, ror #4
 1d0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1d4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 1d8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 1dc:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 1e0:	68630065 	stmdavs	r3!, {r0, r2, r5, r6}^
 1e4:	4b6b6365 	blmi	1ad8f80 <startup-0x1e527080>
 1e8:	00737965 	rsbseq	r7, r3, r5, ror #18
 1ec:	796c6576 	stmdbvc	ip!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 1f0:	61726400 	cmnvs	r2, r0, lsl #8
 1f4:	65760077 	ldrbvs	r0, [r6, #-119]!	; 0xffffff89
 1f8:	7000786c 	andvc	r7, r0, ip, ror #16
 1fc:	0078736f 	rsbseq	r7, r8, pc, ror #6
 200:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 204:	69656800 	stmdbvs	r5!, {fp, sp, lr}^
 208:	00746867 	rsbseq	r6, r4, r7, ror #16
 20c:	69727073 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
 210:	69006574 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 214:	6d754a73 	vldmdbvs	r5!, {s9-s123}
 218:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 21c:	63636100 	cmnvs	r3, #0, 2
 220:	63610078 	cmnvs	r1, #120	; 0x78
 224:	6c007963 			; <UNDEFINED> instruction: 0x6c007963
 228:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 22c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 230:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 234:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 238:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 23c:	6f740074 	svcvs	0x00740074
 240:	65686375 	strbvs	r6, [r8, #-885]!	; 0xfffffc8b
 244:	70655073 	rsbvc	r5, r5, r3, ror r0
 248:	00726570 	rsbseq	r6, r2, r0, ror r5
 24c:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 250:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 254:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 258:	3a5a0074 	bcc	1680430 <startup-0x1e97fbd0>
 25c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 260:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 264:	2f65646f 	svccs	0x0065646f
 268:	2f706f6d 	svccs	0x00706f6d
 26c:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 270:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 274:	502f6f72 	eorpl	r6, pc, r2, ror pc	; <UNPREDICTABLE>
 278:	6f726465 	svcvs	0x00726465
 27c:	6f00632e 	svcvs	0x0000632e
 280:	63656a62 	cmnvs	r5, #401408	; 0x62000
 284:	69770074 	ldmdbvs	r7!, {r2, r4, r5, r6}^
 288:	00687464 	rsbeq	r7, r8, r4, ror #8
 28c:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 290:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 294:	4f740074 	svcmi	0x00740074
 298:	6a006a62 	bvs	1ac28 <startup-0x1ffe53d8>
 29c:	00706d75 	rsbseq	r6, r0, r5, ror sp
 2a0:	4a424f50 	bmi	1093fe8 <startup-0x1ef6c018>
 2a4:	00544345 	subseq	r4, r4, r5, asr #6
 2a8:	6e69616d 	powvsez	f6, f1, #5.0
 2ac:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 2b0:	696e496f 	stmdbvs	lr!, {r0, r1, r2, r3, r5, r6, r8, fp, lr}^
 2b4:	70750074 	rsbsvc	r0, r5, r4, ror r0
 2b8:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 2bc:	2f3a5a00 	svccs	0x003a5a00
 2c0:	2f504f4d 	svccs	0x00504f4d
 2c4:	6f632d63 	svcvs	0x00632d63
 2c8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 140 <startup-0x1ffffec0>
 2cc:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 2d0:	72657075 	rsbvc	r7, r5, #117	; 0x75
 2d4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 2d8:	616d2f6f 	cmnvs	sp, pc, ror #30
 2dc:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 2e0:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 2e4:	6e6f0074 	mcrvs	0, 3, r0, cr15, cr4, {3}
 2e8:	73736f4c 	cmnvc	r3, #76, 30	; 0x130
 2ec:	576e6f00 	strbpl	r6, [lr, -r0, lsl #30]!
 2f0:	6c006e69 	stcvs	14, cr6, [r0], {105}	; 0x69
 2f4:	00706f6f 	rsbseq	r6, r0, pc, ror #30
 2f8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 2fc:	00707574 	rsbseq	r7, r0, r4, ror r5
 300:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 304:	6873006c 	ldmdavs	r3!, {r2, r3, r5, r6}^
 308:	4c746669 	ldclmi	6, cr6, [r4], #-420	; 0xfffffe5c
 30c:	00746665 	rsbseq	r6, r4, r5, ror #12
 310:	70617267 	rsbvc	r7, r1, r7, ror #4
 314:	5f636968 	svcpl	0x00636968
 318:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 31c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 320:	006e6565 	rsbeq	r6, lr, r5, ror #10
 324:	70617267 	rsbvc	r7, r1, r7, ror #4
 328:	5f636968 	svcpl	0x00636968
 32c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 330:	6f635f65 	svcvs	0x00635f65
 334:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 338:	61760064 	cmnvs	r6, r4, rrx
 33c:	0065756c 	rsbeq	r7, r5, ip, ror #10
 340:	70617267 	rsbvc	r7, r1, r7, ror #4
 344:	5f636968 	svcpl	0x00636968
 348:	61656c63 	cmnvs	r5, r3, ror #24
 34c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 350:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 354:	61726700 	cmnvs	r2, r0, lsl #14
 358:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 35c:	6165725f 	cmnvs	r5, pc, asr r2
 360:	61700064 	cmnvs	r0, r4, rrx
 364:	61006567 	tstvs	r0, r7, ror #10
 368:	00726464 	rsbseq	r6, r2, r4, ror #8
 36c:	70617267 	rsbvc	r7, r1, r7, ror #4
 370:	5f636968 	svcpl	0x00636968
 374:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 378:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 37c:	5f5f0061 	svcpl	0x005f0061
 380:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 384:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 388:	70617267 	rsbvc	r7, r1, r7, ror #4
 38c:	5f636968 	svcpl	0x00636968
 390:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 394:	61645f65 	cmnvs	r4, r5, ror #30
 398:	67006174 	smlsdxvs	r0, r4, r1, r6
 39c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3a0:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3a4:	5f6c7274 	svcpl	0x006c7274
 3a8:	5f746962 	svcpl	0x00746962
 3ac:	61656c63 	cmnvs	r5, r3, ror #24
 3b0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 3b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3b8:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 3bc:	00657469 	rsbeq	r7, r5, r9, ror #8
 3c0:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 3c4:	63536f54 	cmpvs	r3, #84, 30	; 0x150
 3c8:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 3cc:	66667542 	strbtvs	r7, [r6], -r2, asr #10
 3d0:	73007265 	movwvc	r7, #613	; 0x265
 3d4:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
 3d8:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 3dc:	72670074 	rsbvc	r0, r7, #116	; 0x74
 3e0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3e4:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 3e8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3ec:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 3f0:	67007465 	strvs	r7, [r0, -r5, ror #8]
 3f4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3f8:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 3fc:	5f746961 	svcpl	0x00746961
 400:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 404:	616d0079 	smcvs	53257	; 0xd009
 408:	73006b73 	movwvc	r6, #2931	; 0xb73
 40c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 410:	6f635f74 	svcvs	0x00635f74
 414:	6f72746e 	svcvs	0x0072746e
 418:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 41c:	61726700 	cmnvs	r2, r0, lsl #14
 420:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 424:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 428:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 42c:	00657a69 	rsbeq	r7, r5, r9, ror #20
 430:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 434:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 438:	646f632d 	strbtvs	r6, [pc], #-813	; 440 <startup-0x1ffffbc0>
 43c:	6f6d2f65 	svcvs	0x006d2f65
 440:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 444:	50726570 	rsbspl	r6, r2, r0, ror r5
 448:	6f726465 	svcvs	0x00726465
 44c:	64634c2f 	strbtvs	r4, [r3], #-3119	; 0xfffff3d1
 450:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 454:	00632e69 	rsbeq	r2, r3, r9, ror #28
 458:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 45c:	75426f54 	strbvc	r6, [r2, #-3924]	; 0xfffff0ac
 460:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 464:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 468:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 46c:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 470:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 474:	Address 0x00000474 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffdf3a>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	00000044 	andeq	r0, r0, r4, asr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000098 	mulcs	r0, r8, r0
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
  58:	40080e41 	andmi	r0, r8, r1, asr #28
  5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  60:	180e4101 	stmdane	lr, {r0, r8, lr}
  64:	00070d41 	andeq	r0, r7, r1, asr #26
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200000c2 	andcs	r0, r0, r2, asr #1
  74:	00000024 	andeq	r0, r0, r4, lsr #32
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000e8 	andcs	r0, r0, r8, ror #1
  a4:	00000054 	andeq	r0, r0, r4, asr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000088 	andeq	r0, r0, r8, lsl #1
  c0:	2000013c 	andcs	r0, r0, ip, lsr r1
  c4:	00000058 	andeq	r0, r0, r8, asr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d4:	00000018 	andeq	r0, r0, r8, lsl r0
  d8:	00000088 	andeq	r0, r0, r8, lsl #1
  dc:	20000194 	mulcs	r0, r4, r1
  e0:	0000002c 	andeq	r0, r0, ip, lsr #32
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f0:	00000018 	andeq	r0, r0, r8, lsl r0
  f4:	00000088 	andeq	r0, r0, r8, lsl #1
  f8:	200001c0 	andcs	r0, r0, r0, asr #3
  fc:	00000026 	andeq	r0, r0, r6, lsr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 10c:	00000018 	andeq	r0, r0, r8, lsl r0
 110:	00000088 	andeq	r0, r0, r8, lsl #1
 114:	200001e6 	andcs	r0, r0, r6, ror #3
 118:	00000026 	andeq	r0, r0, r6, lsr #32
 11c:	40080e41 	andmi	r0, r8, r1, asr #28
 120:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 124:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 128:	0000000c 	andeq	r0, r0, ip
 12c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 130:	7c020001 	stcvc	0, cr0, [r2], {1}
 134:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 138:	00000018 	andeq	r0, r0, r8, lsl r0
 13c:	00000128 	andeq	r0, r0, r8, lsr #2
 140:	2000020c 	andcs	r0, r0, ip, lsl #4
 144:	0000003c 	andeq	r0, r0, ip, lsr r0
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 154:	00000018 	andeq	r0, r0, r8, lsl r0
 158:	00000128 	andeq	r0, r0, r8, lsr #2
 15c:	20000248 	andcs	r0, r0, r8, asr #4
 160:	000000b8 	strheq	r0, [r0], -r8
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 170:	00000018 	andeq	r0, r0, r8, lsl r0
 174:	00000128 	andeq	r0, r0, r8, lsr #2
 178:	20000300 	andcs	r0, r0, r0, lsl #6
 17c:	00000048 	andeq	r0, r0, r8, asr #32
 180:	40080e41 	andmi	r0, r8, r1, asr #28
 184:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 188:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 18c:	00000018 	andeq	r0, r0, r8, lsl r0
 190:	00000128 	andeq	r0, r0, r8, lsr #2
 194:	20000348 	andcs	r0, r0, r8, asr #6
 198:	0000000c 	andeq	r0, r0, ip
 19c:	40080e41 	andmi	r0, r8, r1, asr #28
 1a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1a8:	00000020 	andeq	r0, r0, r0, lsr #32
 1ac:	00000128 	andeq	r0, r0, r8, lsr #2
 1b0:	20000354 	andcs	r0, r0, r4, asr r3
 1b4:	000000dc 	ldrdeq	r0, [r0], -ip
 1b8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1bc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1c0:	018e4002 	orreq	r4, lr, r2
 1c4:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 1c8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000128 	andeq	r0, r0, r8, lsr #2
 1d4:	20000430 	andcs	r0, r0, r0, lsr r4
 1d8:	0000000c 	andeq	r0, r0, ip
 1dc:	40080e41 	andmi	r0, r8, r1, asr #28
 1e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1e8:	0000000c 	andeq	r0, r0, ip
 1ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1f0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1f8:	0000000c 	andeq	r0, r0, ip
 1fc:	000001e8 	andeq	r0, r0, r8, ror #3
 200:	20000000 	andcs	r0, r0, r0
 204:	0000000c 	andeq	r0, r0, ip
 208:	00000018 	andeq	r0, r0, r8, lsl r0
 20c:	000001e8 	andeq	r0, r0, r8, ror #3
 210:	2000043c 	andcs	r0, r0, ip, lsr r4
 214:	00000060 	andeq	r0, r0, r0, rrx
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 224:	00000018 	andeq	r0, r0, r8, lsl r0
 228:	000001e8 	andeq	r0, r0, r8, ror #3
 22c:	2000049c 	mulcs	r0, ip, r4
 230:	0000001a 	andeq	r0, r0, sl, lsl r0
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 240:	00000018 	andeq	r0, r0, r8, lsl r0
 244:	000001e8 	andeq	r0, r0, r8, ror #3
 248:	200004b6 			; <UNDEFINED> instruction: 0x200004b6
 24c:	0000000a 	andeq	r0, r0, sl
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 25c:	00000018 	andeq	r0, r0, r8, lsl r0
 260:	000001e8 	andeq	r0, r0, r8, ror #3
 264:	200004c0 	andcs	r0, r0, r0, asr #9
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 278:	00000018 	andeq	r0, r0, r8, lsl r0
 27c:	000001e8 	andeq	r0, r0, r8, ror #3
 280:	200004dc 	ldrdcs	r0, [r0], -ip
 284:	0000000a 	andeq	r0, r0, sl
 288:	40080e41 	andmi	r0, r8, r1, asr #28
 28c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 290:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 294:	00000018 	andeq	r0, r0, r8, lsl r0
 298:	000001e8 	andeq	r0, r0, r8, ror #3
 29c:	200004e6 	andcs	r0, r0, r6, ror #9
 2a0:	0000000a 	andeq	r0, r0, sl
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	000001e8 	andeq	r0, r0, r8, ror #3
 2b8:	200004f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2bc:	0000000e 	andeq	r0, r0, lr
 2c0:	40080e41 	andmi	r0, r8, r1, asr #28
 2c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2cc:	0000000c 	andeq	r0, r0, ip
 2d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2d8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e0:	000002cc 	andeq	r0, r0, ip, asr #5
 2e4:	20000500 	andcs	r0, r0, r0, lsl #10
 2e8:	00000044 	andeq	r0, r0, r4, asr #32
 2ec:	40080e41 	andmi	r0, r8, r1, asr #28
 2f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 2f8:	00070d41 	andeq	r0, r7, r1, asr #26
 2fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 300:	000002cc 	andeq	r0, r0, ip, asr #5
 304:	20000544 	andcs	r0, r0, r4, asr #10
 308:	00000050 	andeq	r0, r0, r0, asr r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	180e4101 	stmdane	lr, {r0, r8, lr}
 318:	00070d41 	andeq	r0, r7, r1, asr #26
 31c:	0000001c 	andeq	r0, r0, ip, lsl r0
 320:	000002cc 	andeq	r0, r0, ip, asr #5
 324:	20000594 	mulcs	r0, r4, r5
 328:	0000005a 	andeq	r0, r0, sl, asr r0
 32c:	40080e41 	andmi	r0, r8, r1, asr #28
 330:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 334:	100e4101 	andne	r4, lr, r1, lsl #2
 338:	00070d41 	andeq	r0, r7, r1, asr #26
 33c:	00000018 	andeq	r0, r0, r8, lsl r0
 340:	000002cc 	andeq	r0, r0, ip, asr #5
 344:	200005ee 	andcs	r0, r0, lr, ror #11
 348:	00000064 	andeq	r0, r0, r4, rrx
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	000002cc 	andeq	r0, r0, ip, asr #5
 360:	20000652 	andcs	r0, r0, r2, asr r6
 364:	0000006a 	andeq	r0, r0, sl, rrx
 368:	40080e41 	andmi	r0, r8, r1, asr #28
 36c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 370:	100e4101 	andne	r4, lr, r1, lsl #2
 374:	00070d41 	andeq	r0, r7, r1, asr #26
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	000002cc 	andeq	r0, r0, ip, asr #5
 380:	200006bc 			; <UNDEFINED> instruction: 0x200006bc
 384:	00000090 	muleq	r0, r0, r0
 388:	40080e41 	andmi	r0, r8, r1, asr #28
 38c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 390:	180e4101 	stmdane	lr, {r0, r8, lr}
 394:	00070d41 	andeq	r0, r7, r1, asr #26
 398:	0000001c 	andeq	r0, r0, ip, lsl r0
 39c:	000002cc 	andeq	r0, r0, ip, asr #5
 3a0:	2000074c 	andcs	r0, r0, ip, asr #14
 3a4:	0000002a 	andeq	r0, r0, sl, lsr #32
 3a8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b0:	100e4101 	andne	r4, lr, r1, lsl #2
 3b4:	00070d41 	andeq	r0, r7, r1, asr #26
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	000002cc 	andeq	r0, r0, ip, asr #5
 3c0:	20000776 	andcs	r0, r0, r6, ror r7
 3c4:	00000076 	andeq	r0, r0, r6, ror r0
 3c8:	40080e41 	andmi	r0, r8, r1, asr #28
 3cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d0:	100e4101 	andne	r4, lr, r1, lsl #2
 3d4:	00070d41 	andeq	r0, r7, r1, asr #26
 3d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3dc:	000002cc 	andeq	r0, r0, ip, asr #5
 3e0:	200007ec 	andcs	r0, r0, ip, ror #15
 3e4:	00000040 	andeq	r0, r0, r0, asr #32
 3e8:	40080e41 	andmi	r0, r8, r1, asr #28
 3ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f0:	100e4101 	andne	r4, lr, r1, lsl #2
 3f4:	00070d41 	andeq	r0, r7, r1, asr #26
 3f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3fc:	000002cc 	andeq	r0, r0, ip, asr #5
 400:	2000082c 	andcs	r0, r0, ip, lsr #16
 404:	00000046 	andeq	r0, r0, r6, asr #32
 408:	40080e41 	andmi	r0, r8, r1, asr #28
 40c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 410:	100e4101 	andne	r4, lr, r1, lsl #2
 414:	00070d41 	andeq	r0, r7, r1, asr #26
 418:	0000001c 	andeq	r0, r0, ip, lsl r0
 41c:	000002cc 	andeq	r0, r0, ip, asr #5
 420:	20000872 	andcs	r0, r0, r2, ror r8
 424:	0000003e 	andeq	r0, r0, lr, lsr r0
 428:	40080e41 	andmi	r0, r8, r1, asr #28
 42c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 430:	100e4101 	andne	r4, lr, r1, lsl #2
 434:	00070d41 	andeq	r0, r7, r1, asr #26
 438:	0000001c 	andeq	r0, r0, ip, lsl r0
 43c:	000002cc 	andeq	r0, r0, ip, asr #5
 440:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 444:	00000048 	andeq	r0, r0, r8, asr #32
 448:	40080e41 	andmi	r0, r8, r1, asr #28
 44c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 450:	100e4101 	andne	r4, lr, r1, lsl #2
 454:	00070d41 	andeq	r0, r7, r1, asr #26
 458:	0000001c 	andeq	r0, r0, ip, lsl r0
 45c:	000002cc 	andeq	r0, r0, ip, asr #5
 460:	200008f8 	strdcs	r0, [r0], -r8
 464:	000000b4 	strheq	r0, [r0], -r4
 468:	40080e41 	andmi	r0, r8, r1, asr #28
 46c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 470:	200e4101 	andcs	r4, lr, r1, lsl #2
 474:	00070d41 	andeq	r0, r7, r1, asr #26
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	000002cc 	andeq	r0, r0, ip, asr #5
 480:	200009ac 	andcs	r0, r0, ip, lsr #19
 484:	0000002c 	andeq	r0, r0, ip, lsr #32
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	180e4101 	stmdane	lr, {r0, r8, lr}
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	000002cc 	andeq	r0, r0, ip, asr #5
 4a0:	200009d8 	ldrdcs	r0, [r0], -r8
 4a4:	00000030 	andeq	r0, r0, r0, lsr r0
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	00000020 	andeq	r0, r0, r0, lsr #32
 4bc:	000002cc 	andeq	r0, r0, ip, asr #5
 4c0:	20000a08 	andcs	r0, r0, r8, lsl #20
 4c4:	000000e0 	andeq	r0, r0, r0, ror #1
 4c8:	400c0e41 	andmi	r0, ip, r1, asr #28
 4cc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4d0:	018e4002 	orreq	r4, lr, r2
 4d4:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 4d8:	0000070d 	andeq	r0, r0, sp, lsl #14
 4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e0:	000002cc 	andeq	r0, r0, ip, asr #5
 4e4:	20000ae8 	andcs	r0, r0, r8, ror #21
 4e8:	00000074 	andeq	r0, r0, r4, ror r0
 4ec:	40080e41 	andmi	r0, r8, r1, asr #28
 4f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 4f8:	00070d41 	andeq	r0, r7, r1, asr #26
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	000002cc 	andeq	r0, r0, ip, asr #5
 504:	20000b5c 	andcs	r0, r0, ip, asr fp
 508:	00000078 	andeq	r0, r0, r8, ror r0
 50c:	40080e41 	andmi	r0, r8, r1, asr #28
 510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 514:	180e4101 	stmdane	lr, {r0, r8, lr}
 518:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000043c 	andcs	r0, r0, ip, lsr r4
   4:	200004fe 	strdcs	r0, [r0], -lr
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
