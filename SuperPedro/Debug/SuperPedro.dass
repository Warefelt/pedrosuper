
./Debug/SuperPedro.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fe88 	bl	20000d18 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:
#include "delays.h"

void delay_250ns(){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
    *STK_CTRL=0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/4-1;
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
    *STK_CTRL=0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_500ns>:

void delay_500ns(){
20000054:	b580      	push	{r7, lr}
20000056:	af00      	add	r7, sp, #0
	*STK_CTRL=0;
20000058:	4b0c      	ldr	r3, [pc, #48]	; (2000008c <delay_500ns+0x38>)
2000005a:	2200      	movs	r2, #0
2000005c:	601a      	str	r2, [r3, #0]
    *STK_LOAD=168/2-1;
2000005e:	4b0c      	ldr	r3, [pc, #48]	; (20000090 <delay_500ns+0x3c>)
20000060:	2253      	movs	r2, #83	; 0x53
20000062:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000064:	4b0b      	ldr	r3, [pc, #44]	; (20000094 <delay_500ns+0x40>)
20000066:	2200      	movs	r2, #0
20000068:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
2000006a:	4b08      	ldr	r3, [pc, #32]	; (2000008c <delay_500ns+0x38>)
2000006c:	2205      	movs	r2, #5
2000006e:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
20000070:	46c0      	nop			; (mov r8, r8)
20000072:	4b06      	ldr	r3, [pc, #24]	; (2000008c <delay_500ns+0x38>)
20000074:	681a      	ldr	r2, [r3, #0]
20000076:	2380      	movs	r3, #128	; 0x80
20000078:	025b      	lsls	r3, r3, #9
2000007a:	4013      	ands	r3, r2
2000007c:	d0f9      	beq.n	20000072 <delay_500ns+0x1e>
    *STK_CTRL=0;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <delay_500ns+0x38>)
20000080:	2200      	movs	r2, #0
20000082:	601a      	str	r2, [r3, #0]
}
20000084:	46c0      	nop			; (mov r8, r8)
20000086:	46bd      	mov	sp, r7
20000088:	bd80      	pop	{r7, pc}
2000008a:	46c0      	nop			; (mov r8, r8)
2000008c:	e000e010 	and	lr, r0, r0, lsl r0
20000090:	e000e014 	and	lr, r0, r4, lsl r0
20000094:	e000e018 	and	lr, r0, r8, lsl r0

20000098 <delaymicros>:

void delaymicros(int micros){
20000098:	b580      	push	{r7, lr}
2000009a:	b084      	sub	sp, #16
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
    #ifdef NONSIMULATOR
		//micros *= 1000;
	#endif
    for(int i = 0; i < micros * 2; i++){
200000a0:	2300      	movs	r3, #0
200000a2:	60fb      	str	r3, [r7, #12]
200000a4:	e004      	b.n	200000b0 <delaymicros+0x18>
        delay_500ns();
200000a6:	f7ff ffd5 	bl	20000054 <delay_500ns>
    for(int i = 0; i < micros * 2; i++){
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	3301      	adds	r3, #1
200000ae:	60fb      	str	r3, [r7, #12]
200000b0:	687b      	ldr	r3, [r7, #4]
200000b2:	005b      	lsls	r3, r3, #1
200000b4:	68fa      	ldr	r2, [r7, #12]
200000b6:	429a      	cmp	r2, r3
200000b8:	dbf5      	blt.n	200000a6 <delaymicros+0xe>
    }
}
200000ba:	46c0      	nop			; (mov r8, r8)
200000bc:	46bd      	mov	sp, r7
200000be:	b004      	add	sp, #16
200000c0:	bd80      	pop	{r7, pc}

200000c2 <delaymillis>:


void delaymillis(int millis){
200000c2:	b580      	push	{r7, lr}
200000c4:	b082      	sub	sp, #8
200000c6:	af00      	add	r7, sp, #0
200000c8:	6078      	str	r0, [r7, #4]
	delaymicros(millis * 1000);
200000ca:	687a      	ldr	r2, [r7, #4]
200000cc:	0013      	movs	r3, r2
200000ce:	015b      	lsls	r3, r3, #5
200000d0:	1a9b      	subs	r3, r3, r2
200000d2:	009b      	lsls	r3, r3, #2
200000d4:	189b      	adds	r3, r3, r2
200000d6:	00db      	lsls	r3, r3, #3
200000d8:	0018      	movs	r0, r3
200000da:	f7ff ffdd 	bl	20000098 <delaymicros>
}
200000de:	46c0      	nop			; (mov r8, r8)
200000e0:	46bd      	mov	sp, r7
200000e2:	b002      	add	sp, #8
200000e4:	bd80      	pop	{r7, pc}
200000e6:	46c0      	nop			; (mov r8, r8)

200000e8 <resetPedro>:
	0,
	0 
    /*komplettera?*/
};

void resetPedro(){
200000e8:	b590      	push	{r4, r7, lr}
200000ea:	af00      	add	r7, sp, #0
    Pedro = (OBJECT){
200000ec:	4b06      	ldr	r3, [pc, #24]	; (20000108 <resetPedro+0x20>)
200000ee:	4a07      	ldr	r2, [pc, #28]	; (2000010c <resetPedro+0x24>)
200000f0:	ca13      	ldmia	r2!, {r0, r1, r4}
200000f2:	c313      	stmia	r3!, {r0, r1, r4}
200000f4:	ca13      	ldmia	r2!, {r0, r1, r4}
200000f6:	c313      	stmia	r3!, {r0, r1, r4}
200000f8:	ca13      	ldmia	r2!, {r0, r1, r4}
200000fa:	c313      	stmia	r3!, {r0, r1, r4}
200000fc:	ca13      	ldmia	r2!, {r0, r1, r4}
200000fe:	c313      	stmia	r3!, {r0, r1, r4}
	&pedro_still,		//Sprite
	0,
	0 
    /*komplettera?*/
};
}
20000100:	46c0      	nop			; (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	bd90      	pop	{r4, r7, pc}
20000106:	46c0      	nop			; (mov r8, r8)
20000108:	2000245c 	andcs	r2, r0, ip, asr r4
2000010c:	2000248c 	andcs	r2, r0, ip, lsl #9

20000110 <move>:


void move(){								//Kollar knapptryck och uppdaterar alla Pedros värden
20000110:	b580      	push	{r7, lr}
20000112:	af00      	add	r7, sp, #0
    
    checkKeys();
20000114:	f000 f840 	bl	20000198 <checkKeys>

    applyPhysics();
20000118:	f000 f8aa 	bl	20000270 <applyPhysics>
    
    if(Pedro.velx > 0){
2000011c:	4b1d      	ldr	r3, [pc, #116]	; (20000194 <move+0x84>)
2000011e:	691b      	ldr	r3, [r3, #16]
20000120:	2b00      	cmp	r3, #0
20000122:	dd11      	ble.n	20000148 <move+0x38>
        shiftLeft();
20000124:	f001 f93e 	bl	200013a4 <shiftLeft>
        delaymillis(100/Pedro.velx);
20000128:	4b1a      	ldr	r3, [pc, #104]	; (20000194 <move+0x84>)
2000012a:	691b      	ldr	r3, [r3, #16]
2000012c:	0019      	movs	r1, r3
2000012e:	2064      	movs	r0, #100	; 0x64
20000130:	f001 fb9e 	bl	20001870 <__divsi3>
20000134:	0003      	movs	r3, r0
20000136:	0018      	movs	r0, r3
20000138:	f7ff ffc3 	bl	200000c2 <delaymillis>
        Pedro.distance++;
2000013c:	4b15      	ldr	r3, [pc, #84]	; (20000194 <move+0x84>)
2000013e:	6a1b      	ldr	r3, [r3, #32]
20000140:	1c5a      	adds	r2, r3, #1
20000142:	4b14      	ldr	r3, [pc, #80]	; (20000194 <move+0x84>)
20000144:	621a      	str	r2, [r3, #32]
20000146:	e015      	b.n	20000174 <move+0x64>
    }
    else if(Pedro.velx < 0){
20000148:	4b12      	ldr	r3, [pc, #72]	; (20000194 <move+0x84>)
2000014a:	691b      	ldr	r3, [r3, #16]
2000014c:	2b00      	cmp	r3, #0
2000014e:	da11      	bge.n	20000174 <move+0x64>
        shiftRight();
20000150:	f001 f8ee 	bl	20001330 <shiftRight>
        delaymillis(100/(-Pedro.velx));
20000154:	4b0f      	ldr	r3, [pc, #60]	; (20000194 <move+0x84>)
20000156:	691b      	ldr	r3, [r3, #16]
20000158:	425b      	negs	r3, r3
2000015a:	0019      	movs	r1, r3
2000015c:	2064      	movs	r0, #100	; 0x64
2000015e:	f001 fb87 	bl	20001870 <__divsi3>
20000162:	0003      	movs	r3, r0
20000164:	0018      	movs	r0, r3
20000166:	f7ff ffac 	bl	200000c2 <delaymillis>
        Pedro.distance--;
2000016a:	4b0a      	ldr	r3, [pc, #40]	; (20000194 <move+0x84>)
2000016c:	6a1b      	ldr	r3, [r3, #32]
2000016e:	1e5a      	subs	r2, r3, #1
20000170:	4b08      	ldr	r3, [pc, #32]	; (20000194 <move+0x84>)
20000172:	621a      	str	r2, [r3, #32]

    }

    if(Pedro.velx != 0 || Pedro.vely != 0){
20000174:	4b07      	ldr	r3, [pc, #28]	; (20000194 <move+0x84>)
20000176:	691b      	ldr	r3, [r3, #16]
20000178:	2b00      	cmp	r3, #0
2000017a:	d103      	bne.n	20000184 <move+0x74>
2000017c:	4b05      	ldr	r3, [pc, #20]	; (20000194 <move+0x84>)
2000017e:	695b      	ldr	r3, [r3, #20]
20000180:	2b00      	cmp	r3, #0
20000182:	d003      	beq.n	2000018c <move+0x7c>
        graphic_draw_screen();
20000184:	f001 f864 	bl	20001250 <graphic_draw_screen>
        draw();  //extra args? FLYTTA? han kan ritas ut med resten av skärmen_________________________________________________________________________________*  
20000188:	f000 f8e2 	bl	20000350 <draw>
    }
    
}
2000018c:	46c0      	nop			; (mov r8, r8)
2000018e:	46bd      	mov	sp, r7
20000190:	bd80      	pop	{r7, pc}
20000192:	46c0      	nop			; (mov r8, r8)
20000194:	2000245c 	andcs	r2, r0, ip, asr r4

20000198 <checkKeys>:

//check keypresses and change pedros properties (acceleration for <- ^ -> and velocity for ^) accordingly
void checkKeys(){
20000198:	b580      	push	{r7, lr}
2000019a:	af00      	add	r7, sp, #0
    if(isRightKey() && !isLeftKey()){     //Kräver importerad keyb
2000019c:	f000 fbfc 	bl	20000998 <isRightKey>
200001a0:	1e03      	subs	r3, r0, #0
200001a2:	d00f      	beq.n	200001c4 <checkKeys+0x2c>
200001a4:	f000 fc0e 	bl	200009c4 <isLeftKey>
200001a8:	1e03      	subs	r3, r0, #0
200001aa:	d10b      	bne.n	200001c4 <checkKeys+0x2c>
		if(Pedro.velx < MAX_VELX){
200001ac:	4b2e      	ldr	r3, [pc, #184]	; (20000268 <checkKeys+0xd0>)
200001ae:	691b      	ldr	r3, [r3, #16]
200001b0:	2b03      	cmp	r3, #3
200001b2:	dc03      	bgt.n	200001bc <checkKeys+0x24>
			Pedro.accx = ACCX;     //accelerate right
200001b4:	4b2c      	ldr	r3, [pc, #176]	; (20000268 <checkKeys+0xd0>)
200001b6:	2201      	movs	r2, #1
200001b8:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
200001ba:	e02d      	b.n	20000218 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
200001bc:	4b2a      	ldr	r3, [pc, #168]	; (20000268 <checkKeys+0xd0>)
200001be:	2200      	movs	r2, #0
200001c0:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
200001c2:	e029      	b.n	20000218 <checkKeys+0x80>
		}
	}
	else if(!isRightKey() && isLeftKey())
200001c4:	f000 fbe8 	bl	20000998 <isRightKey>
200001c8:	1e03      	subs	r3, r0, #0
200001ca:	d110      	bne.n	200001ee <checkKeys+0x56>
200001cc:	f000 fbfa 	bl	200009c4 <isLeftKey>
200001d0:	1e03      	subs	r3, r0, #0
200001d2:	d00c      	beq.n	200001ee <checkKeys+0x56>
	{
		if(Pedro.velx > -MAX_VELX){
200001d4:	4b24      	ldr	r3, [pc, #144]	; (20000268 <checkKeys+0xd0>)
200001d6:	691b      	ldr	r3, [r3, #16]
200001d8:	3303      	adds	r3, #3
200001da:	db04      	blt.n	200001e6 <checkKeys+0x4e>
			Pedro.accx = -ACCX;    //accelerate left
200001dc:	4b22      	ldr	r3, [pc, #136]	; (20000268 <checkKeys+0xd0>)
200001de:	2201      	movs	r2, #1
200001e0:	4252      	negs	r2, r2
200001e2:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200001e4:	e018      	b.n	20000218 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
200001e6:	4b20      	ldr	r3, [pc, #128]	; (20000268 <checkKeys+0xd0>)
200001e8:	2200      	movs	r2, #0
200001ea:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200001ec:	e014      	b.n	20000218 <checkKeys+0x80>
		}
	}
	else                            //decrease velocity
	{
		Pedro.accx = 0;
200001ee:	4b1e      	ldr	r3, [pc, #120]	; (20000268 <checkKeys+0xd0>)
200001f0:	2200      	movs	r2, #0
200001f2:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > 0){
200001f4:	4b1c      	ldr	r3, [pc, #112]	; (20000268 <checkKeys+0xd0>)
200001f6:	691b      	ldr	r3, [r3, #16]
200001f8:	2b00      	cmp	r3, #0
200001fa:	dd04      	ble.n	20000206 <checkKeys+0x6e>
			Pedro.velx -= ACCX;
200001fc:	4b1a      	ldr	r3, [pc, #104]	; (20000268 <checkKeys+0xd0>)
200001fe:	691b      	ldr	r3, [r3, #16]
20000200:	1e5a      	subs	r2, r3, #1
20000202:	4b19      	ldr	r3, [pc, #100]	; (20000268 <checkKeys+0xd0>)
20000204:	611a      	str	r2, [r3, #16]
		}
		if(Pedro.velx < 0){
20000206:	4b18      	ldr	r3, [pc, #96]	; (20000268 <checkKeys+0xd0>)
20000208:	691b      	ldr	r3, [r3, #16]
2000020a:	2b00      	cmp	r3, #0
2000020c:	da04      	bge.n	20000218 <checkKeys+0x80>
			Pedro.velx += ACCX;
2000020e:	4b16      	ldr	r3, [pc, #88]	; (20000268 <checkKeys+0xd0>)
20000210:	691b      	ldr	r3, [r3, #16]
20000212:	1c5a      	adds	r2, r3, #1
20000214:	4b14      	ldr	r3, [pc, #80]	; (20000268 <checkKeys+0xd0>)
20000216:	611a      	str	r2, [r3, #16]
		}
	}
    
    if(Pedro.posy <= 0){
20000218:	4b13      	ldr	r3, [pc, #76]	; (20000268 <checkKeys+0xd0>)
2000021a:	68db      	ldr	r3, [r3, #12]
2000021c:	2b00      	cmp	r3, #0
2000021e:	dc08      	bgt.n	20000232 <checkKeys+0x9a>
        Pedro.vely = 0;
20000220:	4b11      	ldr	r3, [pc, #68]	; (20000268 <checkKeys+0xd0>)
20000222:	2200      	movs	r2, #0
20000224:	615a      	str	r2, [r3, #20]
        Pedro.posy = 0;
20000226:	4b10      	ldr	r3, [pc, #64]	; (20000268 <checkKeys+0xd0>)
20000228:	2200      	movs	r2, #0
2000022a:	60da      	str	r2, [r3, #12]
        Pedro.accy = 0;
2000022c:	4b0e      	ldr	r3, [pc, #56]	; (20000268 <checkKeys+0xd0>)
2000022e:	2200      	movs	r2, #0
20000230:	61da      	str	r2, [r3, #28]
    }
    
    
    if(isJumping()){
20000232:	f000 f839 	bl	200002a8 <isJumping>
20000236:	1e03      	subs	r3, r0, #0
20000238:	d004      	beq.n	20000244 <checkKeys+0xac>
        Pedro.accy = ACCY;
2000023a:	4b0b      	ldr	r3, [pc, #44]	; (20000268 <checkKeys+0xd0>)
2000023c:	2201      	movs	r2, #1
2000023e:	4252      	negs	r2, r2
20000240:	61da      	str	r2, [r3, #28]
            Pedro.accy = ACCY;
            Pedro.sprite = pedro_jump;
		}
	}

}
20000242:	e00d      	b.n	20000260 <checkKeys+0xc8>
        if(isUpKey()){
20000244:	f000 fb92 	bl	2000096c <isUpKey>
20000248:	1e03      	subs	r3, r0, #0
2000024a:	d009      	beq.n	20000260 <checkKeys+0xc8>
			Pedro.vely = VELY;    //jump
2000024c:	4b06      	ldr	r3, [pc, #24]	; (20000268 <checkKeys+0xd0>)
2000024e:	220a      	movs	r2, #10
20000250:	615a      	str	r2, [r3, #20]
            Pedro.accy = ACCY;
20000252:	4b05      	ldr	r3, [pc, #20]	; (20000268 <checkKeys+0xd0>)
20000254:	2201      	movs	r2, #1
20000256:	4252      	negs	r2, r2
20000258:	61da      	str	r2, [r3, #28]
            Pedro.sprite = pedro_jump;
2000025a:	4b03      	ldr	r3, [pc, #12]	; (20000268 <checkKeys+0xd0>)
2000025c:	4a03      	ldr	r2, [pc, #12]	; (2000026c <checkKeys+0xd4>)
2000025e:	625a      	str	r2, [r3, #36]	; 0x24
}
20000260:	46c0      	nop			; (mov r8, r8)
20000262:	46bd      	mov	sp, r7
20000264:	bd80      	pop	{r7, pc}
20000266:	46c0      	nop			; (mov r8, r8)
20000268:	2000245c 	andcs	r2, r0, ip, asr r4
2000026c:	2000236c 	andcs	r2, r0, ip, ror #6

20000270 <applyPhysics>:

void applyPhysics(){
20000270:	b580      	push	{r7, lr}
20000272:	af00      	add	r7, sp, #0
    //physics
    Pedro.velx += Pedro.accx;
20000274:	4b0b      	ldr	r3, [pc, #44]	; (200002a4 <applyPhysics+0x34>)
20000276:	691a      	ldr	r2, [r3, #16]
20000278:	4b0a      	ldr	r3, [pc, #40]	; (200002a4 <applyPhysics+0x34>)
2000027a:	699b      	ldr	r3, [r3, #24]
2000027c:	18d2      	adds	r2, r2, r3
2000027e:	4b09      	ldr	r3, [pc, #36]	; (200002a4 <applyPhysics+0x34>)
20000280:	611a      	str	r2, [r3, #16]
    
    Pedro.vely += Pedro.accy;
20000282:	4b08      	ldr	r3, [pc, #32]	; (200002a4 <applyPhysics+0x34>)
20000284:	695a      	ldr	r2, [r3, #20]
20000286:	4b07      	ldr	r3, [pc, #28]	; (200002a4 <applyPhysics+0x34>)
20000288:	69db      	ldr	r3, [r3, #28]
2000028a:	18d2      	adds	r2, r2, r3
2000028c:	4b05      	ldr	r3, [pc, #20]	; (200002a4 <applyPhysics+0x34>)
2000028e:	615a      	str	r2, [r3, #20]
	Pedro.posy += Pedro.vely;
20000290:	4b04      	ldr	r3, [pc, #16]	; (200002a4 <applyPhysics+0x34>)
20000292:	68da      	ldr	r2, [r3, #12]
20000294:	4b03      	ldr	r3, [pc, #12]	; (200002a4 <applyPhysics+0x34>)
20000296:	695b      	ldr	r3, [r3, #20]
20000298:	18d2      	adds	r2, r2, r3
2000029a:	4b02      	ldr	r3, [pc, #8]	; (200002a4 <applyPhysics+0x34>)
2000029c:	60da      	str	r2, [r3, #12]
    
}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	46bd      	mov	sp, r7
200002a2:	bd80      	pop	{r7, pc}
200002a4:	2000245c 	andcs	r2, r0, ip, asr r4

200002a8 <isJumping>:

char isJumping(){
200002a8:	b580      	push	{r7, lr}
200002aa:	af00      	add	r7, sp, #0
    return (Pedro.posy > 0 || Pedro.vely != 0);       //groundlvl+pedroheight
200002ac:	4b07      	ldr	r3, [pc, #28]	; (200002cc <isJumping+0x24>)
200002ae:	68db      	ldr	r3, [r3, #12]
200002b0:	2b00      	cmp	r3, #0
200002b2:	dc03      	bgt.n	200002bc <isJumping+0x14>
200002b4:	4b05      	ldr	r3, [pc, #20]	; (200002cc <isJumping+0x24>)
200002b6:	695b      	ldr	r3, [r3, #20]
200002b8:	2b00      	cmp	r3, #0
200002ba:	d001      	beq.n	200002c0 <isJumping+0x18>
200002bc:	2301      	movs	r3, #1
200002be:	e000      	b.n	200002c2 <isJumping+0x1a>
200002c0:	2300      	movs	r3, #0
200002c2:	b2db      	uxtb	r3, r3
}
200002c4:	0018      	movs	r0, r3
200002c6:	46bd      	mov	sp, r7
200002c8:	bd80      	pop	{r7, pc}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	2000245c 	andcs	r2, r0, ip, asr r4

200002d0 <setSprite>:


#define distanceBetweenAnimationChange 4
char facingLeft = 0;
void setSprite(){
200002d0:	b580      	push	{r7, lr}
200002d2:	af00      	add	r7, sp, #0
	if(Pedro.velx > 0){
200002d4:	4b18      	ldr	r3, [pc, #96]	; (20000338 <setSprite+0x68>)
200002d6:	691b      	ldr	r3, [r3, #16]
200002d8:	2b00      	cmp	r3, #0
200002da:	dd02      	ble.n	200002e2 <setSprite+0x12>
		facingLeft = 0;
200002dc:	4b17      	ldr	r3, [pc, #92]	; (2000033c <setSprite+0x6c>)
200002de:	2200      	movs	r2, #0
200002e0:	701a      	strb	r2, [r3, #0]
	}
	if(Pedro.velx < 0){
200002e2:	4b15      	ldr	r3, [pc, #84]	; (20000338 <setSprite+0x68>)
200002e4:	691b      	ldr	r3, [r3, #16]
200002e6:	2b00      	cmp	r3, #0
200002e8:	da02      	bge.n	200002f0 <setSprite+0x20>
		facingLeft = 1;
200002ea:	4b14      	ldr	r3, [pc, #80]	; (2000033c <setSprite+0x6c>)
200002ec:	2201      	movs	r2, #1
200002ee:	701a      	strb	r2, [r3, #0]
	}
	if(Pedro.posy > 0){
200002f0:	4b11      	ldr	r3, [pc, #68]	; (20000338 <setSprite+0x68>)
200002f2:	68db      	ldr	r3, [r3, #12]
200002f4:	2b00      	cmp	r3, #0
200002f6:	dd03      	ble.n	20000300 <setSprite+0x30>
		Pedro.sprite = pedro_jump;
200002f8:	4b0f      	ldr	r3, [pc, #60]	; (20000338 <setSprite+0x68>)
200002fa:	4a11      	ldr	r2, [pc, #68]	; (20000340 <setSprite+0x70>)
200002fc:	625a      	str	r2, [r3, #36]	; 0x24
		Pedro.sprite = pedro_walk2;
	}
	else{
		Pedro.sprite = pedro_walk1;
	}
}
200002fe:	e018      	b.n	20000332 <setSprite+0x62>
	else if(Pedro.velx == 0){
20000300:	4b0d      	ldr	r3, [pc, #52]	; (20000338 <setSprite+0x68>)
20000302:	691b      	ldr	r3, [r3, #16]
20000304:	2b00      	cmp	r3, #0
20000306:	d103      	bne.n	20000310 <setSprite+0x40>
		Pedro.sprite = pedro_still;
20000308:	4b0b      	ldr	r3, [pc, #44]	; (20000338 <setSprite+0x68>)
2000030a:	4a0e      	ldr	r2, [pc, #56]	; (20000344 <setSprite+0x74>)
2000030c:	625a      	str	r2, [r3, #36]	; 0x24
}
2000030e:	e010      	b.n	20000332 <setSprite+0x62>
	else if((getDistance()/distanceBetweenAnimationChange)%2){
20000310:	f000 fa6e 	bl	200007f0 <getDistance>
20000314:	1e03      	subs	r3, r0, #0
20000316:	da00      	bge.n	2000031a <setSprite+0x4a>
20000318:	3303      	adds	r3, #3
2000031a:	109b      	asrs	r3, r3, #2
2000031c:	001a      	movs	r2, r3
2000031e:	2301      	movs	r3, #1
20000320:	4013      	ands	r3, r2
20000322:	d003      	beq.n	2000032c <setSprite+0x5c>
		Pedro.sprite = pedro_walk2;
20000324:	4b04      	ldr	r3, [pc, #16]	; (20000338 <setSprite+0x68>)
20000326:	4a08      	ldr	r2, [pc, #32]	; (20000348 <setSprite+0x78>)
20000328:	625a      	str	r2, [r3, #36]	; 0x24
}
2000032a:	e002      	b.n	20000332 <setSprite+0x62>
		Pedro.sprite = pedro_walk1;
2000032c:	4b02      	ldr	r3, [pc, #8]	; (20000338 <setSprite+0x68>)
2000032e:	4a07      	ldr	r2, [pc, #28]	; (2000034c <setSprite+0x7c>)
20000330:	625a      	str	r2, [r3, #36]	; 0x24
}
20000332:	46c0      	nop			; (mov r8, r8)
20000334:	46bd      	mov	sp, r7
20000336:	bd80      	pop	{r7, pc}
20000338:	2000245c 	andcs	r2, r0, ip, asr r4
2000033c:	20001b00 	andcs	r1, r0, r0, lsl #22
20000340:	2000236c 	andcs	r2, r0, ip, ror #6
20000344:	2000231c 	andcs	r2, r0, ip, lsl r3
20000348:	2000240c 	andcs	r2, r0, ip, lsl #8
2000034c:	200023bc 			; <UNDEFINED> instruction: 0x200023bc

20000350 <draw>:

void draw(){
20000350:	b580      	push	{r7, lr}
20000352:	b088      	sub	sp, #32
20000354:	af00      	add	r7, sp, #0
    
    setSprite();
20000356:	f7ff ffbb 	bl	200002d0 <setSprite>
    
	 unsigned char i, j;
	 unsigned char* man = Pedro.sprite;
2000035a:	4b8a      	ldr	r3, [pc, #552]	; (20000584 <draw+0x234>)
2000035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000035e:	61bb      	str	r3, [r7, #24]
	 int shift = Pedro.posy%8;
20000360:	4b88      	ldr	r3, [pc, #544]	; (20000584 <draw+0x234>)
20000362:	68db      	ldr	r3, [r3, #12]
20000364:	4a88      	ldr	r2, [pc, #544]	; (20000588 <draw+0x238>)
20000366:	4013      	ands	r3, r2
20000368:	d504      	bpl.n	20000374 <draw+0x24>
2000036a:	3b01      	subs	r3, #1
2000036c:	2208      	movs	r2, #8
2000036e:	4252      	negs	r2, r2
20000370:	4313      	orrs	r3, r2
20000372:	3301      	adds	r3, #1
20000374:	617b      	str	r3, [r7, #20]
        for(j = 0; j < ((Pedro.height)/8)+1; j++) {
20000376:	231e      	movs	r3, #30
20000378:	18fb      	adds	r3, r7, r3
2000037a:	2200      	movs	r2, #0
2000037c:	701a      	strb	r2, [r3, #0]
2000037e:	e0ef      	b.n	20000560 <draw+0x210>
			if(!(Pedro.posy+Pedro.height > 64 && j < ((64-Pedro.posy)/8))){						//If page is over his bottom position
20000380:	4b80      	ldr	r3, [pc, #512]	; (20000584 <draw+0x234>)
20000382:	68da      	ldr	r2, [r3, #12]
20000384:	4b7f      	ldr	r3, [pc, #508]	; (20000584 <draw+0x234>)
20000386:	681b      	ldr	r3, [r3, #0]
20000388:	18d3      	adds	r3, r2, r3
2000038a:	2b40      	cmp	r3, #64	; 0x40
2000038c:	dd0c      	ble.n	200003a8 <draw+0x58>
2000038e:	231e      	movs	r3, #30
20000390:	18fb      	adds	r3, r7, r3
20000392:	781a      	ldrb	r2, [r3, #0]
20000394:	4b7b      	ldr	r3, [pc, #492]	; (20000584 <draw+0x234>)
20000396:	68db      	ldr	r3, [r3, #12]
20000398:	2140      	movs	r1, #64	; 0x40
2000039a:	1acb      	subs	r3, r1, r3
2000039c:	d500      	bpl.n	200003a0 <draw+0x50>
2000039e:	3307      	adds	r3, #7
200003a0:	10db      	asrs	r3, r3, #3
200003a2:	429a      	cmp	r2, r3
200003a4:	da00      	bge.n	200003a8 <draw+0x58>
200003a6:	e0d5      	b.n	20000554 <draw+0x204>

				graphic_write_command(LCD_SET_PAGE | (((63-Pedro.posy-Pedro.height)/8)+j), B_CS1);
200003a8:	4b76      	ldr	r3, [pc, #472]	; (20000584 <draw+0x234>)
200003aa:	68db      	ldr	r3, [r3, #12]
200003ac:	223f      	movs	r2, #63	; 0x3f
200003ae:	1ad2      	subs	r2, r2, r3
200003b0:	4b74      	ldr	r3, [pc, #464]	; (20000584 <draw+0x234>)
200003b2:	681b      	ldr	r3, [r3, #0]
200003b4:	1ad3      	subs	r3, r2, r3
200003b6:	d500      	bpl.n	200003ba <draw+0x6a>
200003b8:	3307      	adds	r3, #7
200003ba:	10db      	asrs	r3, r3, #3
200003bc:	b2da      	uxtb	r2, r3
200003be:	231e      	movs	r3, #30
200003c0:	18fb      	adds	r3, r7, r3
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	18d3      	adds	r3, r2, r3
200003c6:	b2db      	uxtb	r3, r3
200003c8:	b25b      	sxtb	r3, r3
200003ca:	2248      	movs	r2, #72	; 0x48
200003cc:	4252      	negs	r2, r2
200003ce:	4313      	orrs	r3, r2
200003d0:	b25b      	sxtb	r3, r3
200003d2:	b2db      	uxtb	r3, r3
200003d4:	2108      	movs	r1, #8
200003d6:	0018      	movs	r0, r3
200003d8:	f000 fe2c 	bl	20001034 <graphic_write_command>
				graphic_write_command(LCD_SET_ADD | Pedro.posx, B_CS1);
200003dc:	4b69      	ldr	r3, [pc, #420]	; (20000584 <draw+0x234>)
200003de:	689b      	ldr	r3, [r3, #8]
200003e0:	b25b      	sxtb	r3, r3
200003e2:	2240      	movs	r2, #64	; 0x40
200003e4:	4313      	orrs	r3, r2
200003e6:	b25b      	sxtb	r3, r3
200003e8:	b2db      	uxtb	r3, r3
200003ea:	2108      	movs	r1, #8
200003ec:	0018      	movs	r0, r3
200003ee:	f000 fe21 	bl	20001034 <graphic_write_command>
				for(i = 0; i < Pedro.width; i++) {
200003f2:	231f      	movs	r3, #31
200003f4:	18fb      	adds	r3, r7, r3
200003f6:	2200      	movs	r2, #0
200003f8:	701a      	strb	r2, [r3, #0]
200003fa:	e0a3      	b.n	20000544 <draw+0x1f4>
					if(j == 0){
200003fc:	231e      	movs	r3, #30
200003fe:	18fb      	adds	r3, r7, r3
20000400:	781b      	ldrb	r3, [r3, #0]
20000402:	2b00      	cmp	r3, #0
20000404:	d120      	bne.n	20000448 <draw+0xf8>
						unsigned char* adress = (man+(j*Pedro.width)+i);
20000406:	231e      	movs	r3, #30
20000408:	18fb      	adds	r3, r7, r3
2000040a:	781a      	ldrb	r2, [r3, #0]
2000040c:	4b5d      	ldr	r3, [pc, #372]	; (20000584 <draw+0x234>)
2000040e:	685b      	ldr	r3, [r3, #4]
20000410:	4353      	muls	r3, r2
20000412:	001a      	movs	r2, r3
20000414:	231f      	movs	r3, #31
20000416:	18fb      	adds	r3, r7, r3
20000418:	781b      	ldrb	r3, [r3, #0]
2000041a:	18d3      	adds	r3, r2, r3
2000041c:	69ba      	ldr	r2, [r7, #24]
2000041e:	18d3      	adds	r3, r2, r3
20000420:	60bb      	str	r3, [r7, #8]
						unsigned char byte = *adress;
20000422:	1dfb      	adds	r3, r7, #7
20000424:	68ba      	ldr	r2, [r7, #8]
20000426:	7812      	ldrb	r2, [r2, #0]
20000428:	701a      	strb	r2, [r3, #0]
						byte = byte<<(8-shift);
2000042a:	1dfb      	adds	r3, r7, #7
2000042c:	781a      	ldrb	r2, [r3, #0]
2000042e:	697b      	ldr	r3, [r7, #20]
20000430:	2108      	movs	r1, #8
20000432:	1acb      	subs	r3, r1, r3
20000434:	409a      	lsls	r2, r3
20000436:	1dfb      	adds	r3, r7, #7
20000438:	701a      	strb	r2, [r3, #0]
						graphic_write_data(byte, B_CS1);
2000043a:	1dfb      	adds	r3, r7, #7
2000043c:	781b      	ldrb	r3, [r3, #0]
2000043e:	2108      	movs	r1, #8
20000440:	0018      	movs	r0, r3
20000442:	f000 fe17 	bl	20001074 <graphic_write_data>
20000446:	e077      	b.n	20000538 <draw+0x1e8>
					}
					else{
						unsigned char* adress = (man+((j-1)*Pedro.width)+i);
20000448:	201e      	movs	r0, #30
2000044a:	183b      	adds	r3, r7, r0
2000044c:	781b      	ldrb	r3, [r3, #0]
2000044e:	1e5a      	subs	r2, r3, #1
20000450:	4b4c      	ldr	r3, [pc, #304]	; (20000584 <draw+0x234>)
20000452:	685b      	ldr	r3, [r3, #4]
20000454:	4353      	muls	r3, r2
20000456:	001a      	movs	r2, r3
20000458:	231f      	movs	r3, #31
2000045a:	18fb      	adds	r3, r7, r3
2000045c:	781b      	ldrb	r3, [r3, #0]
2000045e:	18d3      	adds	r3, r2, r3
20000460:	69ba      	ldr	r2, [r7, #24]
20000462:	18d3      	adds	r3, r2, r3
20000464:	613b      	str	r3, [r7, #16]
						unsigned char byte = *adress;
20000466:	211d      	movs	r1, #29
20000468:	187b      	adds	r3, r7, r1
2000046a:	693a      	ldr	r2, [r7, #16]
2000046c:	7812      	ldrb	r2, [r2, #0]
2000046e:	701a      	strb	r2, [r3, #0]
						byte = byte>>(shift);
20000470:	187b      	adds	r3, r7, r1
20000472:	781a      	ldrb	r2, [r3, #0]
20000474:	697b      	ldr	r3, [r7, #20]
20000476:	411a      	asrs	r2, r3
20000478:	187b      	adds	r3, r7, r1
2000047a:	701a      	strb	r2, [r3, #0]
						if(j < (Pedro.height)/8){
2000047c:	183b      	adds	r3, r7, r0
2000047e:	781a      	ldrb	r2, [r3, #0]
20000480:	4b40      	ldr	r3, [pc, #256]	; (20000584 <draw+0x234>)
20000482:	681b      	ldr	r3, [r3, #0]
20000484:	2b00      	cmp	r3, #0
20000486:	da00      	bge.n	2000048a <draw+0x13a>
20000488:	3307      	adds	r3, #7
2000048a:	10db      	asrs	r3, r3, #3
2000048c:	429a      	cmp	r2, r3
2000048e:	da27      	bge.n	200004e0 <draw+0x190>
							unsigned char tillagg = *(adress+Pedro.width);
20000490:	4b3c      	ldr	r3, [pc, #240]	; (20000584 <draw+0x234>)
20000492:	685b      	ldr	r3, [r3, #4]
20000494:	001a      	movs	r2, r3
20000496:	693b      	ldr	r3, [r7, #16]
20000498:	189a      	adds	r2, r3, r2
2000049a:	210f      	movs	r1, #15
2000049c:	187b      	adds	r3, r7, r1
2000049e:	7812      	ldrb	r2, [r2, #0]
200004a0:	701a      	strb	r2, [r3, #0]
							tillagg &= (0xFF>>(8-shift));		//nollställer överblivna bitar som ej ingår i bildförskjutningen
200004a2:	697b      	ldr	r3, [r7, #20]
200004a4:	2208      	movs	r2, #8
200004a6:	1ad3      	subs	r3, r2, r3
200004a8:	22ff      	movs	r2, #255	; 0xff
200004aa:	411a      	asrs	r2, r3
200004ac:	0013      	movs	r3, r2
200004ae:	b25b      	sxtb	r3, r3
200004b0:	0008      	movs	r0, r1
200004b2:	183a      	adds	r2, r7, r0
200004b4:	7812      	ldrb	r2, [r2, #0]
200004b6:	b252      	sxtb	r2, r2
200004b8:	4013      	ands	r3, r2
200004ba:	b25a      	sxtb	r2, r3
200004bc:	183b      	adds	r3, r7, r0
200004be:	701a      	strb	r2, [r3, #0]
							tillagg = tillagg<<(8-shift);
200004c0:	183b      	adds	r3, r7, r0
200004c2:	781a      	ldrb	r2, [r3, #0]
200004c4:	697b      	ldr	r3, [r7, #20]
200004c6:	2108      	movs	r1, #8
200004c8:	1acb      	subs	r3, r1, r3
200004ca:	409a      	lsls	r2, r3
200004cc:	183b      	adds	r3, r7, r0
200004ce:	701a      	strb	r2, [r3, #0]
							byte |= tillagg;
200004d0:	221d      	movs	r2, #29
200004d2:	18bb      	adds	r3, r7, r2
200004d4:	18b9      	adds	r1, r7, r2
200004d6:	183a      	adds	r2, r7, r0
200004d8:	7809      	ldrb	r1, [r1, #0]
200004da:	7812      	ldrb	r2, [r2, #0]
200004dc:	430a      	orrs	r2, r1
200004de:	701a      	strb	r2, [r3, #0]
						}
                        if(j == (Pedro.height)/8){
200004e0:	231e      	movs	r3, #30
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	781a      	ldrb	r2, [r3, #0]
200004e6:	4b27      	ldr	r3, [pc, #156]	; (20000584 <draw+0x234>)
200004e8:	681b      	ldr	r3, [r3, #0]
200004ea:	2b00      	cmp	r3, #0
200004ec:	da00      	bge.n	200004f0 <draw+0x1a0>
200004ee:	3307      	adds	r3, #7
200004f0:	10db      	asrs	r3, r3, #3
200004f2:	429a      	cmp	r2, r3
200004f4:	d119      	bne.n	2000052a <draw+0x1da>
                            byte |= backBuffer[64+(Pedro.posx)+i][7-(Pedro.posy)/8];
200004f6:	4b23      	ldr	r3, [pc, #140]	; (20000584 <draw+0x234>)
200004f8:	689b      	ldr	r3, [r3, #8]
200004fa:	3340      	adds	r3, #64	; 0x40
200004fc:	001a      	movs	r2, r3
200004fe:	231f      	movs	r3, #31
20000500:	18fb      	adds	r3, r7, r3
20000502:	781b      	ldrb	r3, [r3, #0]
20000504:	18d2      	adds	r2, r2, r3
20000506:	4b1f      	ldr	r3, [pc, #124]	; (20000584 <draw+0x234>)
20000508:	68db      	ldr	r3, [r3, #12]
2000050a:	2b00      	cmp	r3, #0
2000050c:	da00      	bge.n	20000510 <draw+0x1c0>
2000050e:	3307      	adds	r3, #7
20000510:	10db      	asrs	r3, r3, #3
20000512:	425b      	negs	r3, r3
20000514:	3307      	adds	r3, #7
20000516:	491d      	ldr	r1, [pc, #116]	; (2000058c <draw+0x23c>)
20000518:	00d2      	lsls	r2, r2, #3
2000051a:	188a      	adds	r2, r1, r2
2000051c:	5cd1      	ldrb	r1, [r2, r3]
2000051e:	221d      	movs	r2, #29
20000520:	18bb      	adds	r3, r7, r2
20000522:	18ba      	adds	r2, r7, r2
20000524:	7812      	ldrb	r2, [r2, #0]
20000526:	430a      	orrs	r2, r1
20000528:	701a      	strb	r2, [r3, #0]
                        }
                            graphic_write_data(byte, B_CS1);
2000052a:	231d      	movs	r3, #29
2000052c:	18fb      	adds	r3, r7, r3
2000052e:	781b      	ldrb	r3, [r3, #0]
20000530:	2108      	movs	r1, #8
20000532:	0018      	movs	r0, r3
20000534:	f000 fd9e 	bl	20001074 <graphic_write_data>
				for(i = 0; i < Pedro.width; i++) {
20000538:	211f      	movs	r1, #31
2000053a:	187b      	adds	r3, r7, r1
2000053c:	781a      	ldrb	r2, [r3, #0]
2000053e:	187b      	adds	r3, r7, r1
20000540:	3201      	adds	r2, #1
20000542:	701a      	strb	r2, [r3, #0]
20000544:	231f      	movs	r3, #31
20000546:	18fb      	adds	r3, r7, r3
20000548:	781a      	ldrb	r2, [r3, #0]
2000054a:	4b0e      	ldr	r3, [pc, #56]	; (20000584 <draw+0x234>)
2000054c:	685b      	ldr	r3, [r3, #4]
2000054e:	429a      	cmp	r2, r3
20000550:	da00      	bge.n	20000554 <draw+0x204>
20000552:	e753      	b.n	200003fc <draw+0xac>
        for(j = 0; j < ((Pedro.height)/8)+1; j++) {
20000554:	211e      	movs	r1, #30
20000556:	187b      	adds	r3, r7, r1
20000558:	781a      	ldrb	r2, [r3, #0]
2000055a:	187b      	adds	r3, r7, r1
2000055c:	3201      	adds	r2, #1
2000055e:	701a      	strb	r2, [r3, #0]
20000560:	231e      	movs	r3, #30
20000562:	18fb      	adds	r3, r7, r3
20000564:	781a      	ldrb	r2, [r3, #0]
20000566:	4b07      	ldr	r3, [pc, #28]	; (20000584 <draw+0x234>)
20000568:	681b      	ldr	r3, [r3, #0]
2000056a:	2b00      	cmp	r3, #0
2000056c:	da00      	bge.n	20000570 <draw+0x220>
2000056e:	3307      	adds	r3, #7
20000570:	10db      	asrs	r3, r3, #3
20000572:	3301      	adds	r3, #1
20000574:	429a      	cmp	r2, r3
20000576:	da00      	bge.n	2000057a <draw+0x22a>
20000578:	e702      	b.n	20000380 <draw+0x30>
					}
				}
			}
        }
}
2000057a:	46c0      	nop			; (mov r8, r8)
2000057c:	46bd      	mov	sp, r7
2000057e:	b008      	add	sp, #32
20000580:	bd80      	pop	{r7, pc}
20000582:	46c0      	nop			; (mov r8, r8)
20000584:	2000245c 	andcs	r2, r0, ip, asr r4
20000588:	80000007 	andhi	r0, r0, r7
2000058c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20000590 <oldDraw>:

void oldDraw ()
{
20000590:	b580      	push	{r7, lr}
20000592:	b082      	sub	sp, #8
20000594:	af00      	add	r7, sp, #0
	unsigned char i, j;
	 unsigned char* man = Pedro.sprite;
20000596:	4b2f      	ldr	r3, [pc, #188]	; (20000654 <oldDraw+0xc4>)
20000598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000059a:	603b      	str	r3, [r7, #0]
        for(j = 0; j < (Pedro.height)/8; j++) {
2000059c:	1dbb      	adds	r3, r7, #6
2000059e:	2200      	movs	r2, #0
200005a0:	701a      	strb	r2, [r3, #0]
200005a2:	e049      	b.n	20000638 <oldDraw+0xa8>
            graphic_write_command(LCD_SET_PAGE | abs((((63-Pedro.posy-Pedro.height)/8)+j)), B_CS1);
200005a4:	4b2b      	ldr	r3, [pc, #172]	; (20000654 <oldDraw+0xc4>)
200005a6:	68db      	ldr	r3, [r3, #12]
200005a8:	223f      	movs	r2, #63	; 0x3f
200005aa:	1ad2      	subs	r2, r2, r3
200005ac:	4b29      	ldr	r3, [pc, #164]	; (20000654 <oldDraw+0xc4>)
200005ae:	681b      	ldr	r3, [r3, #0]
200005b0:	1ad3      	subs	r3, r2, r3
200005b2:	d500      	bpl.n	200005b6 <oldDraw+0x26>
200005b4:	3307      	adds	r3, #7
200005b6:	10db      	asrs	r3, r3, #3
200005b8:	001a      	movs	r2, r3
200005ba:	1dbb      	adds	r3, r7, #6
200005bc:	781b      	ldrb	r3, [r3, #0]
200005be:	18d3      	adds	r3, r2, r3
200005c0:	17da      	asrs	r2, r3, #31
200005c2:	189b      	adds	r3, r3, r2
200005c4:	4053      	eors	r3, r2
200005c6:	b25b      	sxtb	r3, r3
200005c8:	2248      	movs	r2, #72	; 0x48
200005ca:	4252      	negs	r2, r2
200005cc:	4313      	orrs	r3, r2
200005ce:	b25b      	sxtb	r3, r3
200005d0:	b2db      	uxtb	r3, r3
200005d2:	2108      	movs	r1, #8
200005d4:	0018      	movs	r0, r3
200005d6:	f000 fd2d 	bl	20001034 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | Pedro.posx, B_CS1);
200005da:	4b1e      	ldr	r3, [pc, #120]	; (20000654 <oldDraw+0xc4>)
200005dc:	689b      	ldr	r3, [r3, #8]
200005de:	b25b      	sxtb	r3, r3
200005e0:	2240      	movs	r2, #64	; 0x40
200005e2:	4313      	orrs	r3, r2
200005e4:	b25b      	sxtb	r3, r3
200005e6:	b2db      	uxtb	r3, r3
200005e8:	2108      	movs	r1, #8
200005ea:	0018      	movs	r0, r3
200005ec:	f000 fd22 	bl	20001034 <graphic_write_command>
            for(i = 0; i < Pedro.width; i++) {
200005f0:	1dfb      	adds	r3, r7, #7
200005f2:	2200      	movs	r2, #0
200005f4:	701a      	strb	r2, [r3, #0]
200005f6:	e014      	b.n	20000622 <oldDraw+0x92>
                graphic_write_data(*(man+(j*Pedro.width)+i), B_CS1);
200005f8:	1dbb      	adds	r3, r7, #6
200005fa:	781a      	ldrb	r2, [r3, #0]
200005fc:	4b15      	ldr	r3, [pc, #84]	; (20000654 <oldDraw+0xc4>)
200005fe:	685b      	ldr	r3, [r3, #4]
20000600:	4353      	muls	r3, r2
20000602:	001a      	movs	r2, r3
20000604:	1dfb      	adds	r3, r7, #7
20000606:	781b      	ldrb	r3, [r3, #0]
20000608:	18d3      	adds	r3, r2, r3
2000060a:	683a      	ldr	r2, [r7, #0]
2000060c:	18d3      	adds	r3, r2, r3
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	2108      	movs	r1, #8
20000612:	0018      	movs	r0, r3
20000614:	f000 fd2e 	bl	20001074 <graphic_write_data>
            for(i = 0; i < Pedro.width; i++) {
20000618:	1dfb      	adds	r3, r7, #7
2000061a:	781a      	ldrb	r2, [r3, #0]
2000061c:	1dfb      	adds	r3, r7, #7
2000061e:	3201      	adds	r2, #1
20000620:	701a      	strb	r2, [r3, #0]
20000622:	1dfb      	adds	r3, r7, #7
20000624:	781a      	ldrb	r2, [r3, #0]
20000626:	4b0b      	ldr	r3, [pc, #44]	; (20000654 <oldDraw+0xc4>)
20000628:	685b      	ldr	r3, [r3, #4]
2000062a:	429a      	cmp	r2, r3
2000062c:	dbe4      	blt.n	200005f8 <oldDraw+0x68>
        for(j = 0; j < (Pedro.height)/8; j++) {
2000062e:	1dbb      	adds	r3, r7, #6
20000630:	781a      	ldrb	r2, [r3, #0]
20000632:	1dbb      	adds	r3, r7, #6
20000634:	3201      	adds	r2, #1
20000636:	701a      	strb	r2, [r3, #0]
20000638:	1dbb      	adds	r3, r7, #6
2000063a:	781a      	ldrb	r2, [r3, #0]
2000063c:	4b05      	ldr	r3, [pc, #20]	; (20000654 <oldDraw+0xc4>)
2000063e:	681b      	ldr	r3, [r3, #0]
20000640:	2b00      	cmp	r3, #0
20000642:	da00      	bge.n	20000646 <oldDraw+0xb6>
20000644:	3307      	adds	r3, #7
20000646:	10db      	asrs	r3, r3, #3
20000648:	429a      	cmp	r2, r3
2000064a:	dbab      	blt.n	200005a4 <oldDraw+0x14>
            }
        }
}
2000064c:	46c0      	nop			; (mov r8, r8)
2000064e:	46bd      	mov	sp, r7
20000650:	b002      	add	sp, #8
20000652:	bd80      	pop	{r7, pc}
20000654:	2000245c 	andcs	r2, r0, ip, asr r4

20000658 <abs>:

int abs(int x){
20000658:	b580      	push	{r7, lr}
2000065a:	b082      	sub	sp, #8
2000065c:	af00      	add	r7, sp, #0
2000065e:	6078      	str	r0, [r7, #4]
    if(x >= 0){
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	2b00      	cmp	r3, #0
20000664:	db01      	blt.n	2000066a <abs+0x12>
        return x;
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	e000      	b.n	2000066c <abs+0x14>
    }
    else {
        return 7;
2000066a:	2307      	movs	r3, #7
    }
}
2000066c:	0018      	movs	r0, r3
2000066e:	46bd      	mov	sp, r7
20000670:	b002      	add	sp, #8
20000672:	bd80      	pop	{r7, pc}

20000674 <touchesPepper>:

char touchesPepper(){
20000674:	b580      	push	{r7, lr}
20000676:	b084      	sub	sp, #16
20000678:	af00      	add	r7, sp, #0
    //kolla nedre hörnen (om Pedro bredare än 16px även i mitten) först, om pixeln är 1 -> Pedro.touches = 1 innan
    //jfr pedrobyte & backbufferbyte
	
	unsigned int pepperStripe = 0;
2000067a:	2300      	movs	r3, #0
2000067c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
2000067e:	2300      	movs	r3, #0
20000680:	60bb      	str	r3, [r7, #8]
20000682:	e044      	b.n	2000070e <touchesPepper+0x9a>
		char part = backBuffer[64+(Pedro.posx)+i][7-(Pedro.posy)/8];
20000684:	4b2b      	ldr	r3, [pc, #172]	; (20000734 <touchesPepper+0xc0>)
20000686:	689b      	ldr	r3, [r3, #8]
20000688:	3340      	adds	r3, #64	; 0x40
2000068a:	001a      	movs	r2, r3
2000068c:	68bb      	ldr	r3, [r7, #8]
2000068e:	18d1      	adds	r1, r2, r3
20000690:	4b28      	ldr	r3, [pc, #160]	; (20000734 <touchesPepper+0xc0>)
20000692:	68db      	ldr	r3, [r3, #12]
20000694:	2b00      	cmp	r3, #0
20000696:	da00      	bge.n	2000069a <touchesPepper+0x26>
20000698:	3307      	adds	r3, #7
2000069a:	10db      	asrs	r3, r3, #3
2000069c:	425b      	negs	r3, r3
2000069e:	1dda      	adds	r2, r3, #7
200006a0:	1cfb      	adds	r3, r7, #3
200006a2:	4825      	ldr	r0, [pc, #148]	; (20000738 <touchesPepper+0xc4>)
200006a4:	00c9      	lsls	r1, r1, #3
200006a6:	1841      	adds	r1, r0, r1
200006a8:	5c8a      	ldrb	r2, [r1, r2]
200006aa:	701a      	strb	r2, [r3, #0]
		char mask = 1<<(7-(Pedro.posy%8));
200006ac:	4b21      	ldr	r3, [pc, #132]	; (20000734 <touchesPepper+0xc0>)
200006ae:	68db      	ldr	r3, [r3, #12]
200006b0:	4a22      	ldr	r2, [pc, #136]	; (2000073c <touchesPepper+0xc8>)
200006b2:	4013      	ands	r3, r2
200006b4:	d504      	bpl.n	200006c0 <touchesPepper+0x4c>
200006b6:	3b01      	subs	r3, #1
200006b8:	2208      	movs	r2, #8
200006ba:	4252      	negs	r2, r2
200006bc:	4313      	orrs	r3, r2
200006be:	3301      	adds	r3, #1
200006c0:	001a      	movs	r2, r3
200006c2:	2307      	movs	r3, #7
200006c4:	1a9b      	subs	r3, r3, r2
200006c6:	2201      	movs	r2, #1
200006c8:	409a      	lsls	r2, r3
200006ca:	1cbb      	adds	r3, r7, #2
200006cc:	701a      	strb	r2, [r3, #0]
		part &= mask;
200006ce:	1cfb      	adds	r3, r7, #3
200006d0:	1cfa      	adds	r2, r7, #3
200006d2:	1cb9      	adds	r1, r7, #2
200006d4:	7812      	ldrb	r2, [r2, #0]
200006d6:	7809      	ldrb	r1, [r1, #0]
200006d8:	400a      	ands	r2, r1
200006da:	701a      	strb	r2, [r3, #0]
		pepperStripe |= (part<<(24-i+(Pedro.posy%8)));
200006dc:	1cfb      	adds	r3, r7, #3
200006de:	781a      	ldrb	r2, [r3, #0]
200006e0:	68bb      	ldr	r3, [r7, #8]
200006e2:	2118      	movs	r1, #24
200006e4:	1ac9      	subs	r1, r1, r3
200006e6:	4b13      	ldr	r3, [pc, #76]	; (20000734 <touchesPepper+0xc0>)
200006e8:	68db      	ldr	r3, [r3, #12]
200006ea:	4814      	ldr	r0, [pc, #80]	; (2000073c <touchesPepper+0xc8>)
200006ec:	4003      	ands	r3, r0
200006ee:	d504      	bpl.n	200006fa <touchesPepper+0x86>
200006f0:	3b01      	subs	r3, #1
200006f2:	2008      	movs	r0, #8
200006f4:	4240      	negs	r0, r0
200006f6:	4303      	orrs	r3, r0
200006f8:	3301      	adds	r3, #1
200006fa:	18cb      	adds	r3, r1, r3
200006fc:	409a      	lsls	r2, r3
200006fe:	0013      	movs	r3, r2
20000700:	001a      	movs	r2, r3
20000702:	68fb      	ldr	r3, [r7, #12]
20000704:	4313      	orrs	r3, r2
20000706:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 20; i++){
20000708:	68bb      	ldr	r3, [r7, #8]
2000070a:	3301      	adds	r3, #1
2000070c:	60bb      	str	r3, [r7, #8]
2000070e:	68bb      	ldr	r3, [r7, #8]
20000710:	2b13      	cmp	r3, #19
20000712:	ddb7      	ble.n	20000684 <touchesPepper+0x10>
	}	
	int bottomRow = getBottomRow(0);
20000714:	2000      	movs	r0, #0
20000716:	f000 f813 	bl	20000740 <getBottomRow>
2000071a:	0003      	movs	r3, r0
2000071c:	607b      	str	r3, [r7, #4]
	if(bottomRow & pepperStripe){
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	68fa      	ldr	r2, [r7, #12]
20000722:	4013      	ands	r3, r2
20000724:	d001      	beq.n	2000072a <touchesPepper+0xb6>
		return 1;
20000726:	2301      	movs	r3, #1
20000728:	e000      	b.n	2000072c <touchesPepper+0xb8>
	}
	return 0;
2000072a:	2300      	movs	r3, #0
	
}
2000072c:	0018      	movs	r0, r3
2000072e:	46bd      	mov	sp, r7
20000730:	b004      	add	sp, #16
20000732:	bd80      	pop	{r7, pc}
20000734:	2000245c 	andcs	r2, r0, ip, asr r4
20000738:	20001b1c 	andcs	r1, r0, ip, lsl fp
2000073c:	80000007 	andhi	r0, r0, r7

20000740 <getBottomRow>:

int getBottomRow(int posyposy){
20000740:	b580      	push	{r7, lr}
20000742:	b088      	sub	sp, #32
20000744:	af00      	add	r7, sp, #0
20000746:	6078      	str	r0, [r7, #4]
	unsigned char* man = Pedro.sprite;
20000748:	4b28      	ldr	r3, [pc, #160]	; (200007ec <getBottomRow+0xac>)
2000074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000074c:	617b      	str	r3, [r7, #20]
	unsigned char i;
	int s = 0;
2000074e:	2300      	movs	r3, #0
20000750:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
20000752:	231f      	movs	r3, #31
20000754:	18fb      	adds	r3, r7, r3
20000756:	2200      	movs	r2, #0
20000758:	701a      	strb	r2, [r3, #0]
2000075a:	e030      	b.n	200007be <getBottomRow+0x7e>
		unsigned char take = *(man+(((Pedro.height)/8)-1)*(Pedro.width)+i);
2000075c:	4b23      	ldr	r3, [pc, #140]	; (200007ec <getBottomRow+0xac>)
2000075e:	681b      	ldr	r3, [r3, #0]
20000760:	2b00      	cmp	r3, #0
20000762:	da00      	bge.n	20000766 <getBottomRow+0x26>
20000764:	3307      	adds	r3, #7
20000766:	10db      	asrs	r3, r3, #3
20000768:	1e5a      	subs	r2, r3, #1
2000076a:	4b20      	ldr	r3, [pc, #128]	; (200007ec <getBottomRow+0xac>)
2000076c:	685b      	ldr	r3, [r3, #4]
2000076e:	4353      	muls	r3, r2
20000770:	001a      	movs	r2, r3
20000772:	211f      	movs	r1, #31
20000774:	187b      	adds	r3, r7, r1
20000776:	781b      	ldrb	r3, [r3, #0]
20000778:	18d3      	adds	r3, r2, r3
2000077a:	697a      	ldr	r2, [r7, #20]
2000077c:	18d2      	adds	r2, r2, r3
2000077e:	2013      	movs	r0, #19
20000780:	183b      	adds	r3, r7, r0
20000782:	7812      	ldrb	r2, [r2, #0]
20000784:	701a      	strb	r2, [r3, #0]
		int part = (int)take;
20000786:	183b      	adds	r3, r7, r0
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	60fb      	str	r3, [r7, #12]
		part &= (1<<(7-posyposy));
2000078c:	687b      	ldr	r3, [r7, #4]
2000078e:	2207      	movs	r2, #7
20000790:	1ad3      	subs	r3, r2, r3
20000792:	2201      	movs	r2, #1
20000794:	409a      	lsls	r2, r3
20000796:	68fb      	ldr	r3, [r7, #12]
20000798:	4013      	ands	r3, r2
2000079a:	60fb      	str	r3, [r7, #12]
		s |= part<<(24-i+posyposy);
2000079c:	187b      	adds	r3, r7, r1
2000079e:	781b      	ldrb	r3, [r3, #0]
200007a0:	2218      	movs	r2, #24
200007a2:	1ad2      	subs	r2, r2, r3
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	18d3      	adds	r3, r2, r3
200007a8:	68fa      	ldr	r2, [r7, #12]
200007aa:	409a      	lsls	r2, r3
200007ac:	0013      	movs	r3, r2
200007ae:	69ba      	ldr	r2, [r7, #24]
200007b0:	4313      	orrs	r3, r2
200007b2:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < Pedro.width; i++){
200007b4:	187b      	adds	r3, r7, r1
200007b6:	781a      	ldrb	r2, [r3, #0]
200007b8:	187b      	adds	r3, r7, r1
200007ba:	3201      	adds	r2, #1
200007bc:	701a      	strb	r2, [r3, #0]
200007be:	231f      	movs	r3, #31
200007c0:	18fb      	adds	r3, r7, r3
200007c2:	781a      	ldrb	r2, [r3, #0]
200007c4:	4b09      	ldr	r3, [pc, #36]	; (200007ec <getBottomRow+0xac>)
200007c6:	685b      	ldr	r3, [r3, #4]
200007c8:	429a      	cmp	r2, r3
200007ca:	dbc7      	blt.n	2000075c <getBottomRow+0x1c>
	}
	if((s & 0x03FFFFFF) == 0){
200007cc:	69bb      	ldr	r3, [r7, #24]
200007ce:	019b      	lsls	r3, r3, #6
200007d0:	099b      	lsrs	r3, r3, #6
200007d2:	d106      	bne.n	200007e2 <getBottomRow+0xa2>
		return getBottomRow((posyposy+1));
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	3301      	adds	r3, #1
200007d8:	0018      	movs	r0, r3
200007da:	f7ff ffb1 	bl	20000740 <getBottomRow>
200007de:	0003      	movs	r3, r0
200007e0:	e000      	b.n	200007e4 <getBottomRow+0xa4>
	}
	return s;
200007e2:	69bb      	ldr	r3, [r7, #24]
}
200007e4:	0018      	movs	r0, r3
200007e6:	46bd      	mov	sp, r7
200007e8:	b008      	add	sp, #32
200007ea:	bd80      	pop	{r7, pc}
200007ec:	2000245c 	andcs	r2, r0, ip, asr r4

200007f0 <getDistance>:

int getDistance(){
200007f0:	b580      	push	{r7, lr}
200007f2:	af00      	add	r7, sp, #0
    return Pedro.distance;
200007f4:	4b02      	ldr	r3, [pc, #8]	; (20000800 <getDistance+0x10>)
200007f6:	6a1b      	ldr	r3, [r3, #32]
}
200007f8:	0018      	movs	r0, r3
200007fa:	46bd      	mov	sp, r7
200007fc:	bd80      	pop	{r7, pc}
200007fe:	46c0      	nop			; (mov r8, r8)
20000800:	2000245c 	andcs	r2, r0, ip, asr r4

20000804 <getVelx>:
int getVelx(){
20000804:	b580      	push	{r7, lr}
20000806:	af00      	add	r7, sp, #0
    return Pedro.velx;
20000808:	4b02      	ldr	r3, [pc, #8]	; (20000814 <getVelx+0x10>)
2000080a:	691b      	ldr	r3, [r3, #16]
}
2000080c:	0018      	movs	r0, r3
2000080e:	46bd      	mov	sp, r7
20000810:	bd80      	pop	{r7, pc}
20000812:	46c0      	nop			; (mov r8, r8)
20000814:	2000245c 	andcs	r2, r0, ip, asr r4

20000818 <seedRng>:
#include "randomNum.h"

//typedef uint32_t rngword_t;

void seedRng(rngword_t* state, uint32_t seed) {
20000818:	b580      	push	{r7, lr}
2000081a:	b084      	sub	sp, #16
2000081c:	af00      	add	r7, sp, #0
2000081e:	6078      	str	r0, [r7, #4]
20000820:	6039      	str	r1, [r7, #0]
	*state = seed;
20000822:	687b      	ldr	r3, [r7, #4]
20000824:	683a      	ldr	r2, [r7, #0]
20000826:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
20000828:	2300      	movs	r3, #0
2000082a:	60fb      	str	r3, [r7, #12]
2000082c:	e006      	b.n	2000083c <seedRng+0x24>
		nextRnd(state);
2000082e:	687b      	ldr	r3, [r7, #4]
20000830:	0018      	movs	r0, r3
20000832:	f000 f80a 	bl	2000084a <nextRnd>
	for(int i = 0; i < 10; i++) {
20000836:	68fb      	ldr	r3, [r7, #12]
20000838:	3301      	adds	r3, #1
2000083a:	60fb      	str	r3, [r7, #12]
2000083c:	68fb      	ldr	r3, [r7, #12]
2000083e:	2b09      	cmp	r3, #9
20000840:	ddf5      	ble.n	2000082e <seedRng+0x16>
	}
}
20000842:	46c0      	nop			; (mov r8, r8)
20000844:	46bd      	mov	sp, r7
20000846:	b004      	add	sp, #16
20000848:	bd80      	pop	{r7, pc}

2000084a <nextRnd>:

rngword_t nextRnd(rngword_t* state) {
2000084a:	b580      	push	{r7, lr}
2000084c:	b084      	sub	sp, #16
2000084e:	af00      	add	r7, sp, #0
20000850:	6078      	str	r0, [r7, #4]
	*state = *state * 0xDEADBEAD + 0x1;
20000852:	687b      	ldr	r3, [r7, #4]
20000854:	6819      	ldr	r1, [r3, #0]
20000856:	000b      	movs	r3, r1
20000858:	00db      	lsls	r3, r3, #3
2000085a:	1a5b      	subs	r3, r3, r1
2000085c:	011a      	lsls	r2, r3, #4
2000085e:	1ad2      	subs	r2, r2, r3
20000860:	0092      	lsls	r2, r2, #2
20000862:	1a52      	subs	r2, r2, r1
20000864:	0113      	lsls	r3, r2, #4
20000866:	1a9b      	subs	r3, r3, r2
20000868:	00db      	lsls	r3, r3, #3
2000086a:	1a5b      	subs	r3, r3, r1
2000086c:	015b      	lsls	r3, r3, #5
2000086e:	1a5b      	subs	r3, r3, r1
20000870:	00da      	lsls	r2, r3, #3
20000872:	189b      	adds	r3, r3, r2
20000874:	01da      	lsls	r2, r3, #7
20000876:	189b      	adds	r3, r3, r2
20000878:	005b      	lsls	r3, r3, #1
2000087a:	1a5b      	subs	r3, r3, r1
2000087c:	1c5a      	adds	r2, r3, #1
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	601a      	str	r2, [r3, #0]
	rngword_t x = *state;
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	681b      	ldr	r3, [r3, #0]
20000886:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
20000888:	2300      	movs	r3, #0
2000088a:	60bb      	str	r3, [r7, #8]
2000088c:	e00e      	b.n	200008ac <nextRnd+0x62>
		x ^= (x >> 9) ^ (x >> 17);
2000088e:	68fb      	ldr	r3, [r7, #12]
20000890:	0a5a      	lsrs	r2, r3, #9
20000892:	68fb      	ldr	r3, [r7, #12]
20000894:	0c5b      	lsrs	r3, r3, #17
20000896:	4053      	eors	r3, r2
20000898:	68fa      	ldr	r2, [r7, #12]
2000089a:	4053      	eors	r3, r2
2000089c:	60fb      	str	r3, [r7, #12]
		x *= 23456789;
2000089e:	68fb      	ldr	r3, [r7, #12]
200008a0:	4a06      	ldr	r2, [pc, #24]	; (200008bc <nextRnd+0x72>)
200008a2:	4353      	muls	r3, r2
200008a4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
200008a6:	68bb      	ldr	r3, [r7, #8]
200008a8:	3301      	adds	r3, #1
200008aa:	60bb      	str	r3, [r7, #8]
200008ac:	68bb      	ldr	r3, [r7, #8]
200008ae:	2b02      	cmp	r3, #2
200008b0:	dded      	ble.n	2000088e <nextRnd+0x44>
	}
	return x;
200008b2:	68fb      	ldr	r3, [r7, #12]
200008b4:	0018      	movs	r0, r3
200008b6:	46bd      	mov	sp, r7
200008b8:	b004      	add	sp, #16
200008ba:	bd80      	pop	{r7, pc}
200008bc:	0165ec15 	cmneq	r5, r5, lsl ip

200008c0 <kbdActivate>:
#include "keyfuncs.h"
#include "gpio.h"

void kbdActivate(unsigned int row){
200008c0:	b580      	push	{r7, lr}
200008c2:	b082      	sub	sp, #8
200008c4:	af00      	add	r7, sp, #0
200008c6:	6078      	str	r0, [r7, #4]
    switch(row){
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	2b02      	cmp	r3, #2
200008cc:	d00c      	beq.n	200008e8 <kbdActivate+0x28>
200008ce:	d802      	bhi.n	200008d6 <kbdActivate+0x16>
200008d0:	2b01      	cmp	r3, #1
200008d2:	d005      	beq.n	200008e0 <kbdActivate+0x20>
200008d4:	e014      	b.n	20000900 <kbdActivate+0x40>
200008d6:	2b03      	cmp	r3, #3
200008d8:	d00a      	beq.n	200008f0 <kbdActivate+0x30>
200008da:	2b04      	cmp	r3, #4
200008dc:	d00c      	beq.n	200008f8 <kbdActivate+0x38>
200008de:	e00f      	b.n	20000900 <kbdActivate+0x40>
        case 1: 
            GPIO_D->odrHigh = 0x10;
200008e0:	4b0b      	ldr	r3, [pc, #44]	; (20000910 <kbdActivate+0x50>)
200008e2:	2210      	movs	r2, #16
200008e4:	755a      	strb	r2, [r3, #21]
            break;
200008e6:	e00e      	b.n	20000906 <kbdActivate+0x46>
        case 2: 
            GPIO_D->odrHigh = 0x20;
200008e8:	4b09      	ldr	r3, [pc, #36]	; (20000910 <kbdActivate+0x50>)
200008ea:	2220      	movs	r2, #32
200008ec:	755a      	strb	r2, [r3, #21]
            break;
200008ee:	e00a      	b.n	20000906 <kbdActivate+0x46>
        case 3: 
            GPIO_D->odrHigh = 0x40;
200008f0:	4b07      	ldr	r3, [pc, #28]	; (20000910 <kbdActivate+0x50>)
200008f2:	2240      	movs	r2, #64	; 0x40
200008f4:	755a      	strb	r2, [r3, #21]
            break;
200008f6:	e006      	b.n	20000906 <kbdActivate+0x46>
        case 4: 
            GPIO_D->odrHigh = 0x80;
200008f8:	4b05      	ldr	r3, [pc, #20]	; (20000910 <kbdActivate+0x50>)
200008fa:	2280      	movs	r2, #128	; 0x80
200008fc:	755a      	strb	r2, [r3, #21]
            break;
200008fe:	e002      	b.n	20000906 <kbdActivate+0x46>
        default: 
            GPIO_D->odrHigh = 0;
20000900:	4b03      	ldr	r3, [pc, #12]	; (20000910 <kbdActivate+0x50>)
20000902:	2200      	movs	r2, #0
20000904:	755a      	strb	r2, [r3, #21]
    }
}
20000906:	46c0      	nop			; (mov r8, r8)
20000908:	46bd      	mov	sp, r7
2000090a:	b002      	add	sp, #8
2000090c:	bd80      	pop	{r7, pc}
2000090e:	46c0      	nop			; (mov r8, r8)
20000910:	40020c00 	andmi	r0, r2, r0, lsl #24

20000914 <kbdGetCol>:

int kbdGetCol(){                    
20000914:	b580      	push	{r7, lr}
20000916:	af00      	add	r7, sp, #0
    if(GPIO_D->idrHigh & 8) 
20000918:	4b13      	ldr	r3, [pc, #76]	; (20000968 <kbdGetCol+0x54>)
2000091a:	7c5b      	ldrb	r3, [r3, #17]
2000091c:	b2db      	uxtb	r3, r3
2000091e:	001a      	movs	r2, r3
20000920:	2308      	movs	r3, #8
20000922:	4013      	ands	r3, r2
20000924:	d001      	beq.n	2000092a <kbdGetCol+0x16>
        return 4;
20000926:	2304      	movs	r3, #4
20000928:	e01b      	b.n	20000962 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 4) 
2000092a:	4b0f      	ldr	r3, [pc, #60]	; (20000968 <kbdGetCol+0x54>)
2000092c:	7c5b      	ldrb	r3, [r3, #17]
2000092e:	b2db      	uxtb	r3, r3
20000930:	001a      	movs	r2, r3
20000932:	2304      	movs	r3, #4
20000934:	4013      	ands	r3, r2
20000936:	d001      	beq.n	2000093c <kbdGetCol+0x28>
        return 3;
20000938:	2303      	movs	r3, #3
2000093a:	e012      	b.n	20000962 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 2) 
2000093c:	4b0a      	ldr	r3, [pc, #40]	; (20000968 <kbdGetCol+0x54>)
2000093e:	7c5b      	ldrb	r3, [r3, #17]
20000940:	b2db      	uxtb	r3, r3
20000942:	001a      	movs	r2, r3
20000944:	2302      	movs	r3, #2
20000946:	4013      	ands	r3, r2
20000948:	d001      	beq.n	2000094e <kbdGetCol+0x3a>
        return 2;
2000094a:	2302      	movs	r3, #2
2000094c:	e009      	b.n	20000962 <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 1) 
2000094e:	4b06      	ldr	r3, [pc, #24]	; (20000968 <kbdGetCol+0x54>)
20000950:	7c5b      	ldrb	r3, [r3, #17]
20000952:	b2db      	uxtb	r3, r3
20000954:	001a      	movs	r2, r3
20000956:	2301      	movs	r3, #1
20000958:	4013      	ands	r3, r2
2000095a:	d001      	beq.n	20000960 <kbdGetCol+0x4c>
        return 1;
2000095c:	2301      	movs	r3, #1
2000095e:	e000      	b.n	20000962 <kbdGetCol+0x4e>
    return 0;
20000960:	2300      	movs	r3, #0
}
20000962:	0018      	movs	r0, r3
20000964:	46bd      	mov	sp, r7
20000966:	bd80      	pop	{r7, pc}
20000968:	40020c00 	andmi	r0, r2, r0, lsl #24

2000096c <isUpKey>:


char isUpKey(){
2000096c:	b580      	push	{r7, lr}
2000096e:	af00      	add	r7, sp, #0
	kbdActivate(3);	//row3
20000970:	2003      	movs	r0, #3
20000972:	f7ff ffa5 	bl	200008c0 <kbdActivate>
	//kbdActivate(4);         //power off kbd-rows
	if(kbdGetCol() == 3){
20000976:	f7ff ffcd 	bl	20000914 <kbdGetCol>
2000097a:	0003      	movs	r3, r0
2000097c:	2b03      	cmp	r3, #3
2000097e:	d104      	bne.n	2000098a <isUpKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000980:	2000      	movs	r0, #0
20000982:	f7ff ff9d 	bl	200008c0 <kbdActivate>
		return 1;
20000986:	2301      	movs	r3, #1
20000988:	e003      	b.n	20000992 <isUpKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
2000098a:	2000      	movs	r0, #0
2000098c:	f7ff ff98 	bl	200008c0 <kbdActivate>
	return 0;
20000990:	2300      	movs	r3, #0
}
20000992:	0018      	movs	r0, r3
20000994:	46bd      	mov	sp, r7
20000996:	bd80      	pop	{r7, pc}

20000998 <isRightKey>:
char isRightKey(){
20000998:	b580      	push	{r7, lr}
2000099a:	af00      	add	r7, sp, #0
	kbdActivate(4);
2000099c:	2004      	movs	r0, #4
2000099e:	f7ff ff8f 	bl	200008c0 <kbdActivate>
	if(kbdGetCol() == 4){
200009a2:	f7ff ffb7 	bl	20000914 <kbdGetCol>
200009a6:	0003      	movs	r3, r0
200009a8:	2b04      	cmp	r3, #4
200009aa:	d104      	bne.n	200009b6 <isRightKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
200009ac:	2000      	movs	r0, #0
200009ae:	f7ff ff87 	bl	200008c0 <kbdActivate>
		return 1;
200009b2:	2301      	movs	r3, #1
200009b4:	e003      	b.n	200009be <isRightKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
200009b6:	2000      	movs	r0, #0
200009b8:	f7ff ff82 	bl	200008c0 <kbdActivate>
    return 0;
200009bc:	2300      	movs	r3, #0
	
}
200009be:	0018      	movs	r0, r3
200009c0:	46bd      	mov	sp, r7
200009c2:	bd80      	pop	{r7, pc}

200009c4 <isLeftKey>:
char isLeftKey(){
200009c4:	b580      	push	{r7, lr}
200009c6:	af00      	add	r7, sp, #0
	kbdActivate(4);
200009c8:	2004      	movs	r0, #4
200009ca:	f7ff ff79 	bl	200008c0 <kbdActivate>
	if(kbdGetCol() == 2){
200009ce:	f7ff ffa1 	bl	20000914 <kbdGetCol>
200009d2:	0003      	movs	r3, r0
200009d4:	2b02      	cmp	r3, #2
200009d6:	d104      	bne.n	200009e2 <isLeftKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
200009d8:	2000      	movs	r0, #0
200009da:	f7ff ff71 	bl	200008c0 <kbdActivate>
		return 1;
200009de:	2301      	movs	r3, #1
200009e0:	e003      	b.n	200009ea <isLeftKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
200009e2:	2000      	movs	r0, #0
200009e4:	f7ff ff6c 	bl	200008c0 <kbdActivate>
	return 0;
200009e8:	2300      	movs	r3, #0
	
}
200009ea:	0018      	movs	r0, r3
200009ec:	46bd      	mov	sp, r7
200009ee:	bd80      	pop	{r7, pc}

200009f0 <isResetKey>:


char isResetKey(){
200009f0:	b580      	push	{r7, lr}
200009f2:	af00      	add	r7, sp, #0
    kbdActivate(1);
200009f4:	2001      	movs	r0, #1
200009f6:	f7ff ff63 	bl	200008c0 <kbdActivate>
	if(kbdGetCol() == 1){
200009fa:	f7ff ff8b 	bl	20000914 <kbdGetCol>
200009fe:	0003      	movs	r3, r0
20000a00:	2b01      	cmp	r3, #1
20000a02:	d104      	bne.n	20000a0e <isResetKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000a04:	2000      	movs	r0, #0
20000a06:	f7ff ff5b 	bl	200008c0 <kbdActivate>
		return 1;
20000a0a:	2301      	movs	r3, #1
20000a0c:	e003      	b.n	20000a16 <isResetKey+0x26>
	}
    kbdActivate(0);         //power off kbd-rows
20000a0e:	2000      	movs	r0, #0
20000a10:	f7ff ff56 	bl	200008c0 <kbdActivate>
	return 0;
20000a14:	2300      	movs	r3, #0
}
20000a16:	0018      	movs	r0, r3
20000a18:	46bd      	mov	sp, r7
20000a1a:	bd80      	pop	{r7, pc}

20000a1c <keyb>:



unsigned char keyb(){
20000a1c:	b590      	push	{r4, r7, lr}
20000a1e:	b087      	sub	sp, #28
20000a20:	af00      	add	r7, sp, #0
    char key[] = {1,2,3,10,4,5,6,11,7,8,9,12,14,0,15,13};
20000a22:	003b      	movs	r3, r7
20000a24:	4a17      	ldr	r2, [pc, #92]	; (20000a84 <keyb+0x68>)
20000a26:	ca13      	ldmia	r2!, {r0, r1, r4}
20000a28:	c313      	stmia	r3!, {r0, r1, r4}
20000a2a:	6812      	ldr	r2, [r2, #0]
20000a2c:	601a      	str	r2, [r3, #0]
    int row;
    int col = 0;
20000a2e:	2300      	movs	r3, #0
20000a30:	613b      	str	r3, [r7, #16]
    
    for(row = 1; row <= 4; row++){
20000a32:	2301      	movs	r3, #1
20000a34:	617b      	str	r3, [r7, #20]
20000a36:	e01c      	b.n	20000a72 <keyb+0x56>
        kbdActivate(row);           //power kbd-rows
20000a38:	697b      	ldr	r3, [r7, #20]
20000a3a:	0018      	movs	r0, r3
20000a3c:	f7ff ff40 	bl	200008c0 <kbdActivate>
        if(col = kbdGetCol()){      //drain kbd-cols
20000a40:	f7ff ff68 	bl	20000914 <kbdGetCol>
20000a44:	0003      	movs	r3, r0
20000a46:	613b      	str	r3, [r7, #16]
20000a48:	693b      	ldr	r3, [r7, #16]
20000a4a:	2b00      	cmp	r3, #0
20000a4c:	d00e      	beq.n	20000a6c <keyb+0x50>
            kbdActivate(0);         //power off kbd-rows
20000a4e:	2000      	movs	r0, #0
20000a50:	f7ff ff36 	bl	200008c0 <kbdActivate>
            return (4*(row-1)+(col-1));
20000a54:	697b      	ldr	r3, [r7, #20]
20000a56:	3b01      	subs	r3, #1
20000a58:	b2db      	uxtb	r3, r3
20000a5a:	009b      	lsls	r3, r3, #2
20000a5c:	b2da      	uxtb	r2, r3
20000a5e:	693b      	ldr	r3, [r7, #16]
20000a60:	b2db      	uxtb	r3, r3
20000a62:	18d3      	adds	r3, r2, r3
20000a64:	b2db      	uxtb	r3, r3
20000a66:	3b01      	subs	r3, #1
20000a68:	b2db      	uxtb	r3, r3
20000a6a:	e006      	b.n	20000a7a <keyb+0x5e>
    for(row = 1; row <= 4; row++){
20000a6c:	697b      	ldr	r3, [r7, #20]
20000a6e:	3301      	adds	r3, #1
20000a70:	617b      	str	r3, [r7, #20]
20000a72:	697b      	ldr	r3, [r7, #20]
20000a74:	2b04      	cmp	r3, #4
20000a76:	dddf      	ble.n	20000a38 <keyb+0x1c>
        }
    }
    return 0xFF;
20000a78:	23ff      	movs	r3, #255	; 0xff
20000a7a:	0018      	movs	r0, r3
20000a7c:	46bd      	mov	sp, r7
20000a7e:	b007      	add	sp, #28
20000a80:	bd90      	pop	{r4, r7, pc}
20000a82:	46c0      	nop			; (mov r8, r8)
20000a84:	200024bc 			; <UNDEFINED> instruction: 0x200024bc

20000a88 <gpioInit>:
uint32_t seed;

//#define USBDM
#define NONSIMULATOR

void gpioInit(){
20000a88:	b580      	push	{r7, lr}
20000a8a:	af00      	add	r7, sp, #0
	
    GPIO_E->moder=0x55555555;		//------------------------------------------------------------------------------------------------
20000a8c:	4b10      	ldr	r3, [pc, #64]	; (20000ad0 <gpioInit+0x48>)
20000a8e:	4a11      	ldr	r2, [pc, #68]	; (20000ad4 <gpioInit+0x4c>)
20000a90:	601a      	str	r2, [r3, #0]
    GPIO_D->moder = 0x55005555;
20000a92:	4b11      	ldr	r3, [pc, #68]	; (20000ad8 <gpioInit+0x50>)
20000a94:	4a11      	ldr	r2, [pc, #68]	; (20000adc <gpioInit+0x54>)
20000a96:	601a      	str	r2, [r3, #0]
    
	GPIO_D->otyper &= 0xFFFF00FF;
20000a98:	4b0f      	ldr	r3, [pc, #60]	; (20000ad8 <gpioInit+0x50>)
20000a9a:	685a      	ldr	r2, [r3, #4]
20000a9c:	4b0e      	ldr	r3, [pc, #56]	; (20000ad8 <gpioInit+0x50>)
20000a9e:	4910      	ldr	r1, [pc, #64]	; (20000ae0 <gpioInit+0x58>)
20000aa0:	400a      	ands	r2, r1
20000aa2:	605a      	str	r2, [r3, #4]
	GPIO_D->otyper |= 0x00000F00;
20000aa4:	4b0c      	ldr	r3, [pc, #48]	; (20000ad8 <gpioInit+0x50>)
20000aa6:	685a      	ldr	r2, [r3, #4]
20000aa8:	4b0b      	ldr	r3, [pc, #44]	; (20000ad8 <gpioInit+0x50>)
20000aaa:	21f0      	movs	r1, #240	; 0xf0
20000aac:	0109      	lsls	r1, r1, #4
20000aae:	430a      	orrs	r2, r1
20000ab0:	605a      	str	r2, [r3, #4]
	// Sätter pinnar 4-0 till "pull-down"
	GPIO_D->pupdr &= 0x0000FFFF;
20000ab2:	4b09      	ldr	r3, [pc, #36]	; (20000ad8 <gpioInit+0x50>)
20000ab4:	68da      	ldr	r2, [r3, #12]
20000ab6:	4b08      	ldr	r3, [pc, #32]	; (20000ad8 <gpioInit+0x50>)
20000ab8:	0412      	lsls	r2, r2, #16
20000aba:	0c12      	lsrs	r2, r2, #16
20000abc:	60da      	str	r2, [r3, #12]
	GPIO_D->pupdr |= 0xFFAA0000;
20000abe:	4b06      	ldr	r3, [pc, #24]	; (20000ad8 <gpioInit+0x50>)
20000ac0:	68da      	ldr	r2, [r3, #12]
20000ac2:	4b05      	ldr	r3, [pc, #20]	; (20000ad8 <gpioInit+0x50>)
20000ac4:	4907      	ldr	r1, [pc, #28]	; (20000ae4 <gpioInit+0x5c>)
20000ac6:	430a      	orrs	r2, r1
20000ac8:	60da      	str	r2, [r3, #12]

}
20000aca:	46c0      	nop			; (mov r8, r8)
20000acc:	46bd      	mov	sp, r7
20000ace:	bd80      	pop	{r7, pc}
20000ad0:	40021000 	andmi	r1, r2, r0
20000ad4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000ad8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000adc:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000ae0:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000ae4:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

20000ae8 <init>:



void init(){
20000ae8:	b580      	push	{r7, lr}
20000aea:	af00      	add	r7, sp, #0
        *((unsigned long*)0x40023844)|=0x4000;
        //*((unsigned long*)0xE000ED08)=0x2001C000;
        __asm volatile( "LDR R0,=0x08000208\n" "BLX R0\n ");
    #endif
	
    gpioInit();
20000aec:	f7ff ffcc 	bl	20000a88 <gpioInit>
    
    ascii_init();
20000af0:	f000 fd8e 	bl	20001610 <ascii_init>
    
    graphic_initialize();
20000af4:	f000 f99f 	bl	20000e36 <graphic_initialize>
    
    seed = 1337;
20000af8:	4b08      	ldr	r3, [pc, #32]	; (20000b1c <init+0x34>)
20000afa:	4a09      	ldr	r2, [pc, #36]	; (20000b20 <init+0x38>)
20000afc:	601a      	str	r2, [r3, #0]
    seedRng(&seed, seed);
20000afe:	4b07      	ldr	r3, [pc, #28]	; (20000b1c <init+0x34>)
20000b00:	681a      	ldr	r2, [r3, #0]
20000b02:	4b06      	ldr	r3, [pc, #24]	; (20000b1c <init+0x34>)
20000b04:	0011      	movs	r1, r2
20000b06:	0018      	movs	r0, r3
20000b08:	f7ff fe86 	bl	20000818 <seedRng>

	clear_backBuffer();
20000b0c:	f000 faf4 	bl	200010f8 <clear_backBuffer>
	graphic_draw_screen();
20000b10:	f000 fb9e 	bl	20001250 <graphic_draw_screen>

}
20000b14:	46c0      	nop			; (mov r8, r8)
20000b16:	46bd      	mov	sp, r7
20000b18:	bd80      	pop	{r7, pc}
20000b1a:	46c0      	nop			; (mov r8, r8)
20000b1c:	20001b18 	andcs	r1, r0, r8, lsl fp
20000b20:	00000539 	andeq	r0, r0, r9, lsr r5

20000b24 <loop>:





void loop(){
20000b24:	b580      	push	{r7, lr}
20000b26:	af00      	add	r7, sp, #0
    //drawGround(64, 191);
	
	while(1){
		//
		//ändra Pedros properties
		if(getDistance() % 64 == 0 && getVelx < 0){
20000b28:	f7ff fe62 	bl	200007f0 <getDistance>
			loadNewLevelSegmentLeft();
		}
		if(getDistance() % 64 == 0 && getVelx >= 0){
20000b2c:	f7ff fe60 	bl	200007f0 <getDistance>
20000b30:	0003      	movs	r3, r0
20000b32:	001a      	movs	r2, r3
20000b34:	233f      	movs	r3, #63	; 0x3f
20000b36:	4013      	ands	r3, r2
20000b38:	d101      	bne.n	20000b3e <loop+0x1a>
			loadNewLevelSegmentRight();
20000b3a:	f000 f821 	bl	20000b80 <loadNewLevelSegmentRight>
		}
		
		move();			//flyttar hela skärmen så det ser ut som att Pedro rör sig
20000b3e:	f7ff fae7 	bl	20000110 <move>
        
        showDistance();
20000b42:	f000 f8c0 	bl	20000cc6 <showDistance>
        
		//win/loss
        
        if(isResetKey()){
20000b46:	f7ff ff53 	bl	200009f0 <isResetKey>
20000b4a:	1e03      	subs	r3, r0, #0
20000b4c:	d003      	beq.n	20000b56 <loop+0x32>
            init();
20000b4e:	f7ff ffcb 	bl	20000ae8 <init>
            resetPedro();
20000b52:	f7ff fac9 	bl	200000e8 <resetPedro>
        }
		if(touchesPepper() == 1){
20000b56:	f7ff fd8d 	bl	20000674 <touchesPepper>
20000b5a:	0003      	movs	r3, r0
20000b5c:	2b01      	cmp	r3, #1
20000b5e:	d1e3      	bne.n	20000b28 <loop+0x4>
            init();
20000b60:	f7ff ffc2 	bl	20000ae8 <init>
            resetPedro();
20000b64:	f7ff fac0 	bl	200000e8 <resetPedro>
			break;		//startar om spelet från början
20000b68:	46c0      	nop			; (mov r8, r8)
		/*if(Pedro.distance == ){
			onWin();
		}*/
	}
	
}
20000b6a:	46c0      	nop			; (mov r8, r8)
20000b6c:	46bd      	mov	sp, r7
20000b6e:	bd80      	pop	{r7, pc}

20000b70 <loadNewLevelSegmentLeft>:



void loadNewLevelSegmentLeft(){
20000b70:	b580      	push	{r7, lr}
20000b72:	af00      	add	r7, sp, #0
    loadLvl(0);  //64px wide
20000b74:	2000      	movs	r0, #0
20000b76:	f000 f869 	bl	20000c4c <loadLvl>
}
20000b7a:	46c0      	nop			; (mov r8, r8)
20000b7c:	46bd      	mov	sp, r7
20000b7e:	bd80      	pop	{r7, pc}

20000b80 <loadNewLevelSegmentRight>:

void loadNewLevelSegmentRight(){
20000b80:	b580      	push	{r7, lr}
20000b82:	af00      	add	r7, sp, #0
    loadLvl(192);
20000b84:	20c0      	movs	r0, #192	; 0xc0
20000b86:	f000 f861 	bl	20000c4c <loadLvl>
}
20000b8a:	46c0      	nop			; (mov r8, r8)
20000b8c:	46bd      	mov	sp, r7
20000b8e:	bd80      	pop	{r7, pc}

20000b90 <loadPepperAt>:


//bör fungera
void loadPepperAt(int addr, int page){
20000b90:	b590      	push	{r4, r7, lr}
20000b92:	b08d      	sub	sp, #52	; 0x34
20000b94:	af00      	add	r7, sp, #0
20000b96:	6078      	str	r0, [r7, #4]
20000b98:	6039      	str	r1, [r7, #0]
		char b[][2]= 
20000b9a:	2308      	movs	r3, #8
20000b9c:	18fb      	adds	r3, r7, r3
20000b9e:	4a17      	ldr	r2, [pc, #92]	; (20000bfc <loadPepperAt+0x6c>)
20000ba0:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ba2:	c313      	stmia	r3!, {r0, r1, r4}
20000ba4:	ca13      	ldmia	r2!, {r0, r1, r4}
20000ba6:	c313      	stmia	r3!, {r0, r1, r4}
20000ba8:	ca03      	ldmia	r2!, {r0, r1}
20000baa:	c303      	stmia	r3!, {r0, r1}
				{0b00000100, 0b01100000},
				{0b00001100, 0b00110000},
				{0b11111000, 0b00011111}
				};
     
		for(int j = 0; j < 2; j++){
20000bac:	2300      	movs	r3, #0
20000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
20000bb0:	e01c      	b.n	20000bec <loadPepperAt+0x5c>
			for(int i = 0; i < 16; i++){
20000bb2:	2300      	movs	r3, #0
20000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
20000bb6:	e013      	b.n	20000be0 <loadPepperAt+0x50>
				byteToBuffer(addr + i, page + j, b[i][j]);
20000bb8:	687a      	ldr	r2, [r7, #4]
20000bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000bbc:	18d0      	adds	r0, r2, r3
20000bbe:	683a      	ldr	r2, [r7, #0]
20000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000bc2:	18d1      	adds	r1, r2, r3
20000bc4:	2308      	movs	r3, #8
20000bc6:	18fa      	adds	r2, r7, r3
20000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000bca:	005b      	lsls	r3, r3, #1
20000bcc:	18d2      	adds	r2, r2, r3
20000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000bd0:	18d3      	adds	r3, r2, r3
20000bd2:	781b      	ldrb	r3, [r3, #0]
20000bd4:	001a      	movs	r2, r3
20000bd6:	f000 fb0d 	bl	200011f4 <byteToBuffer>
			for(int i = 0; i < 16; i++){
20000bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000bdc:	3301      	adds	r3, #1
20000bde:	62bb      	str	r3, [r7, #40]	; 0x28
20000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
20000be2:	2b0f      	cmp	r3, #15
20000be4:	dde8      	ble.n	20000bb8 <loadPepperAt+0x28>
		for(int j = 0; j < 2; j++){
20000be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000be8:	3301      	adds	r3, #1
20000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
20000bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000bee:	2b01      	cmp	r3, #1
20000bf0:	dddf      	ble.n	20000bb2 <loadPepperAt+0x22>
			}
		}
}
20000bf2:	46c0      	nop			; (mov r8, r8)
20000bf4:	46bd      	mov	sp, r7
20000bf6:	b00d      	add	sp, #52	; 0x34
20000bf8:	bd90      	pop	{r4, r7, pc}
20000bfa:	46c0      	nop			; (mov r8, r8)
20000bfc:	200024cc 	andcs	r2, r0, ip, asr #9

20000c00 <loadPepperStrip>:


//bör fungera
void loadPepperStrip(int start, char type){
20000c00:	b580      	push	{r7, lr}
20000c02:	b082      	sub	sp, #8
20000c04:	af00      	add	r7, sp, #0
20000c06:	6078      	str	r0, [r7, #4]
20000c08:	000a      	movs	r2, r1
20000c0a:	1cfb      	adds	r3, r7, #3
20000c0c:	701a      	strb	r2, [r3, #0]
	
	switch(type){
20000c0e:	1cfb      	adds	r3, r7, #3
20000c10:	781b      	ldrb	r3, [r3, #0]
20000c12:	2b5f      	cmp	r3, #95	; 0x5f
20000c14:	d015      	beq.n	20000c42 <loadPepperStrip+0x42>
20000c16:	2b6f      	cmp	r3, #111	; 0x6f
20000c18:	d002      	beq.n	20000c20 <loadPepperStrip+0x20>
20000c1a:	2b38      	cmp	r3, #56	; 0x38
20000c1c:	d006      	beq.n	20000c2c <loadPepperStrip+0x2c>
			loadPepperAt(start, 6);
			loadPepperAt(start, 4);
			break;
			
	}
}
20000c1e:	e011      	b.n	20000c44 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	2106      	movs	r1, #6
20000c24:	0018      	movs	r0, r3
20000c26:	f7ff ffb3 	bl	20000b90 <loadPepperAt>
			break;
20000c2a:	e00b      	b.n	20000c44 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
20000c2c:	687b      	ldr	r3, [r7, #4]
20000c2e:	2106      	movs	r1, #6
20000c30:	0018      	movs	r0, r3
20000c32:	f7ff ffad 	bl	20000b90 <loadPepperAt>
			loadPepperAt(start, 4);
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	2104      	movs	r1, #4
20000c3a:	0018      	movs	r0, r3
20000c3c:	f7ff ffa8 	bl	20000b90 <loadPepperAt>
			break;
20000c40:	e000      	b.n	20000c44 <loadPepperStrip+0x44>
			break;
20000c42:	46c0      	nop			; (mov r8, r8)
}
20000c44:	46c0      	nop			; (mov r8, r8)
20000c46:	46bd      	mov	sp, r7
20000c48:	b002      	add	sp, #8
20000c4a:	bd80      	pop	{r7, pc}

20000c4c <loadLvl>:


void loadLvl(int start){        //loads a 64px wide levelstrip of new peppers into the backBuffer (starting at start, moving right)
20000c4c:	b580      	push	{r7, lr}
20000c4e:	b098      	sub	sp, #96	; 0x60
20000c50:	af00      	add	r7, sp, #0
20000c52:	6078      	str	r0, [r7, #4]
	//int seed = getDistance();
    int rand = (nextRnd(&seed) % 19);
20000c54:	4b17      	ldr	r3, [pc, #92]	; (20000cb4 <loadLvl+0x68>)
20000c56:	0018      	movs	r0, r3
20000c58:	f7ff fdf7 	bl	2000084a <nextRnd>
20000c5c:	0003      	movs	r3, r0
20000c5e:	2113      	movs	r1, #19
20000c60:	0018      	movs	r0, r3
20000c62:	f000 fe01 	bl	20001868 <__aeabi_uidivmod>
20000c66:	000b      	movs	r3, r1
20000c68:	65bb      	str	r3, [r7, #88]	; 0x58
	//int type = nextRnd() % 20;      // Returns a pseudo-random integer between 0 and 10, några olika varianter 1=____, 2=_oo_, 3=_8__, 4=_o_o mm.
    char PepperStrips[][4] = { "____", "_oo_", "_8__", "_o_o", "o__o", "_o__", "__8_", "_o8_", "__o_", "____", "____", "o___", "___o", "o_o_", "_8o_","_o__","__o_","o___", "___o","____"};
20000c6a:	2308      	movs	r3, #8
20000c6c:	18fa      	adds	r2, r7, r3
20000c6e:	4b12      	ldr	r3, [pc, #72]	; (20000cb8 <loadLvl+0x6c>)
20000c70:	0010      	movs	r0, r2
20000c72:	0019      	movs	r1, r3
20000c74:	2350      	movs	r3, #80	; 0x50
20000c76:	001a      	movs	r2, r3
20000c78:	f000 ff02 	bl	20001a80 <memcpy>
	
	
	for(int i = 0; i < 4; i++){
20000c7c:	2300      	movs	r3, #0
20000c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
20000c80:	e011      	b.n	20000ca6 <loadLvl+0x5a>
		loadPepperStrip(start + i*16, PepperStrips[rand][i]);
20000c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000c84:	011a      	lsls	r2, r3, #4
20000c86:	687b      	ldr	r3, [r7, #4]
20000c88:	18d0      	adds	r0, r2, r3
20000c8a:	2308      	movs	r3, #8
20000c8c:	18fa      	adds	r2, r7, r3
20000c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
20000c90:	009b      	lsls	r3, r3, #2
20000c92:	18d2      	adds	r2, r2, r3
20000c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000c96:	18d3      	adds	r3, r2, r3
20000c98:	781b      	ldrb	r3, [r3, #0]
20000c9a:	0019      	movs	r1, r3
20000c9c:	f7ff ffb0 	bl	20000c00 <loadPepperStrip>
	for(int i = 0; i < 4; i++){
20000ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000ca2:	3301      	adds	r3, #1
20000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
20000ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000ca8:	2b03      	cmp	r3, #3
20000caa:	ddea      	ble.n	20000c82 <loadLvl+0x36>
	}
	//drawGround(start, start+63);
    
}
20000cac:	46c0      	nop			; (mov r8, r8)
20000cae:	46bd      	mov	sp, r7
20000cb0:	b018      	add	sp, #96	; 0x60
20000cb2:	bd80      	pop	{r7, pc}
20000cb4:	20001b18 	andcs	r1, r0, r8, lsl fp
20000cb8:	200024ec 	andcs	r2, r0, ip, ror #9

20000cbc <onWin>:
    }
}
*/


void onWin(){
20000cbc:	b580      	push	{r7, lr}
20000cbe:	af00      	add	r7, sp, #0
	//ska vi ha med denna?
}
20000cc0:	46c0      	nop			; (mov r8, r8)
20000cc2:	46bd      	mov	sp, r7
20000cc4:	bd80      	pop	{r7, pc}

20000cc6 <showDistance>:



void showDistance(){
20000cc6:	b580      	push	{r7, lr}
20000cc8:	b082      	sub	sp, #8
20000cca:	af00      	add	r7, sp, #0
    static char buffer[20];
    for(int i = 0; i < 20; i++){
20000ccc:	2300      	movs	r3, #0
20000cce:	607b      	str	r3, [r7, #4]
20000cd0:	e007      	b.n	20000ce2 <showDistance+0x1c>
        buffer[i] = 0;
20000cd2:	4a10      	ldr	r2, [pc, #64]	; (20000d14 <showDistance+0x4e>)
20000cd4:	687b      	ldr	r3, [r7, #4]
20000cd6:	18d3      	adds	r3, r2, r3
20000cd8:	2200      	movs	r2, #0
20000cda:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 20; i++){
20000cdc:	687b      	ldr	r3, [r7, #4]
20000cde:	3301      	adds	r3, #1
20000ce0:	607b      	str	r3, [r7, #4]
20000ce2:	687b      	ldr	r3, [r7, #4]
20000ce4:	2b13      	cmp	r3, #19
20000ce6:	ddf4      	ble.n	20000cd2 <showDistance+0xc>
    }
    int d = getDistance();
20000ce8:	f7ff fd82 	bl	200007f0 <getDistance>
20000cec:	0003      	movs	r3, r0
20000cee:	603b      	str	r3, [r7, #0]
    itoa(d, buffer, 10);
20000cf0:	4908      	ldr	r1, [pc, #32]	; (20000d14 <showDistance+0x4e>)
20000cf2:	683b      	ldr	r3, [r7, #0]
20000cf4:	220a      	movs	r2, #10
20000cf6:	0018      	movs	r0, r3
20000cf8:	f000 febe 	bl	20001a78 <itoa>
    ascii_clear_disp();
20000cfc:	f000 fcb1 	bl	20001662 <ascii_clear_disp>
    stringToAscii(buffer, 1, 1);
20000d00:	4b04      	ldr	r3, [pc, #16]	; (20000d14 <showDistance+0x4e>)
20000d02:	2201      	movs	r2, #1
20000d04:	2101      	movs	r1, #1
20000d06:	0018      	movs	r0, r3
20000d08:	f000 fcfe 	bl	20001708 <stringToAscii>
}
20000d0c:	46c0      	nop			; (mov r8, r8)
20000d0e:	46bd      	mov	sp, r7
20000d10:	b002      	add	sp, #8
20000d12:	bd80      	pop	{r7, pc}
20000d14:	20001b04 	andcs	r1, r0, r4, lsl #22

20000d18 <main>:





void main(void){
20000d18:	b580      	push	{r7, lr}
20000d1a:	b088      	sub	sp, #32
20000d1c:	af00      	add	r7, sp, #0
    init();
20000d1e:	f7ff fee3 	bl	20000ae8 <init>
    
    char buffer[20];
    int a = 10;
20000d22:	230a      	movs	r3, #10
20000d24:	61fb      	str	r3, [r7, #28]
    itoa(a, buffer, 10);
20000d26:	1d39      	adds	r1, r7, #4
20000d28:	69fb      	ldr	r3, [r7, #28]
20000d2a:	220a      	movs	r2, #10
20000d2c:	0018      	movs	r0, r3
20000d2e:	f000 fea3 	bl	20001a78 <itoa>
    stringToAscii(buffer, 1, 1);
20000d32:	1d3b      	adds	r3, r7, #4
20000d34:	2201      	movs	r2, #1
20000d36:	2101      	movs	r1, #1
20000d38:	0018      	movs	r0, r3
20000d3a:	f000 fce5 	bl	20001708 <stringToAscii>
    int p = 0;
20000d3e:	2300      	movs	r3, #0
20000d40:	61bb      	str	r3, [r7, #24]
        delaymicros(100 * 1000);
        p++;
    }
#endif
	while(1){
		loop();
20000d42:	f7ff feef 	bl	20000b24 <loop>
20000d46:	e7fc      	b.n	20000d42 <main+0x2a>

20000d48 <graphic_ctrl_bit_set>:


uint8_t backBuffer[256][8]; // 256 * 64 / 8


void graphic_ctrl_bit_set(unsigned char x){
20000d48:	b580      	push	{r7, lr}
20000d4a:	b084      	sub	sp, #16
20000d4c:	af00      	add	r7, sp, #0
20000d4e:	0002      	movs	r2, r0
20000d50:	1dfb      	adds	r3, r7, #7
20000d52:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000d54:	4a0c      	ldr	r2, [pc, #48]	; (20000d88 <graphic_ctrl_bit_set+0x40>)
20000d56:	200f      	movs	r0, #15
20000d58:	183b      	adds	r3, r7, r0
20000d5a:	7d12      	ldrb	r2, [r2, #20]
20000d5c:	701a      	strb	r2, [r3, #0]
    c |= x;
20000d5e:	183b      	adds	r3, r7, r0
20000d60:	1839      	adds	r1, r7, r0
20000d62:	1dfa      	adds	r2, r7, #7
20000d64:	7809      	ldrb	r1, [r1, #0]
20000d66:	7812      	ldrb	r2, [r2, #0]
20000d68:	430a      	orrs	r2, r1
20000d6a:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000d6c:	183b      	adds	r3, r7, r0
20000d6e:	183a      	adds	r2, r7, r0
20000d70:	7812      	ldrb	r2, [r2, #0]
20000d72:	2104      	movs	r1, #4
20000d74:	438a      	bics	r2, r1
20000d76:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000d78:	4a03      	ldr	r2, [pc, #12]	; (20000d88 <graphic_ctrl_bit_set+0x40>)
20000d7a:	183b      	adds	r3, r7, r0
20000d7c:	781b      	ldrb	r3, [r3, #0]
20000d7e:	7513      	strb	r3, [r2, #20]
}
20000d80:	46c0      	nop			; (mov r8, r8)
20000d82:	46bd      	mov	sp, r7
20000d84:	b004      	add	sp, #16
20000d86:	bd80      	pop	{r7, pc}
20000d88:	40021000 	andmi	r1, r2, r0

20000d8c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x){
20000d8c:	b580      	push	{r7, lr}
20000d8e:	b084      	sub	sp, #16
20000d90:	af00      	add	r7, sp, #0
20000d92:	0002      	movs	r2, r0
20000d94:	1dfb      	adds	r3, r7, #7
20000d96:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000d98:	4a0f      	ldr	r2, [pc, #60]	; (20000dd8 <graphic_ctrl_bit_clear+0x4c>)
20000d9a:	210f      	movs	r1, #15
20000d9c:	187b      	adds	r3, r7, r1
20000d9e:	7d12      	ldrb	r2, [r2, #20]
20000da0:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000da2:	1dfb      	adds	r3, r7, #7
20000da4:	781b      	ldrb	r3, [r3, #0]
20000da6:	b25b      	sxtb	r3, r3
20000da8:	43db      	mvns	r3, r3
20000daa:	b25b      	sxtb	r3, r3
20000dac:	187a      	adds	r2, r7, r1
20000dae:	7812      	ldrb	r2, [r2, #0]
20000db0:	b252      	sxtb	r2, r2
20000db2:	4013      	ands	r3, r2
20000db4:	b25a      	sxtb	r2, r3
20000db6:	187b      	adds	r3, r7, r1
20000db8:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000dba:	187b      	adds	r3, r7, r1
20000dbc:	0008      	movs	r0, r1
20000dbe:	187a      	adds	r2, r7, r1
20000dc0:	7812      	ldrb	r2, [r2, #0]
20000dc2:	2104      	movs	r1, #4
20000dc4:	438a      	bics	r2, r1
20000dc6:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000dc8:	4a03      	ldr	r2, [pc, #12]	; (20000dd8 <graphic_ctrl_bit_clear+0x4c>)
20000dca:	183b      	adds	r3, r7, r0
20000dcc:	781b      	ldrb	r3, [r3, #0]
20000dce:	7513      	strb	r3, [r2, #20]
}
20000dd0:	46c0      	nop			; (mov r8, r8)
20000dd2:	46bd      	mov	sp, r7
20000dd4:	b004      	add	sp, #16
20000dd6:	bd80      	pop	{r7, pc}
20000dd8:	40021000 	andmi	r1, r2, r0

20000ddc <select_controller>:

static void select_controller(uint8_t controller){  //@param controller - 0/B_CS1/B_CS2/both
20000ddc:	b580      	push	{r7, lr}
20000dde:	b082      	sub	sp, #8
20000de0:	af00      	add	r7, sp, #0
20000de2:	0002      	movs	r2, r0
20000de4:	1dfb      	adds	r3, r7, #7
20000de6:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000de8:	1dfb      	adds	r3, r7, #7
20000dea:	781b      	ldrb	r3, [r3, #0]
20000dec:	2b08      	cmp	r3, #8
20000dee:	d00c      	beq.n	20000e0a <select_controller+0x2e>
20000df0:	dc02      	bgt.n	20000df8 <select_controller+0x1c>
20000df2:	2b00      	cmp	r3, #0
20000df4:	d005      	beq.n	20000e02 <select_controller+0x26>
            break;
        case B_CS1|B_CS2 :  //both
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000df6:	e01a      	b.n	20000e2e <select_controller+0x52>
    switch(controller){
20000df8:	2b10      	cmp	r3, #16
20000dfa:	d00d      	beq.n	20000e18 <select_controller+0x3c>
20000dfc:	2b18      	cmp	r3, #24
20000dfe:	d012      	beq.n	20000e26 <select_controller+0x4a>
}
20000e00:	e015      	b.n	20000e2e <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000e02:	2018      	movs	r0, #24
20000e04:	f7ff ffc2 	bl	20000d8c <graphic_ctrl_bit_clear>
            break;
20000e08:	e011      	b.n	20000e2e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
20000e0a:	2008      	movs	r0, #8
20000e0c:	f7ff ff9c 	bl	20000d48 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000e10:	2010      	movs	r0, #16
20000e12:	f7ff ffbb 	bl	20000d8c <graphic_ctrl_bit_clear>
            break;
20000e16:	e00a      	b.n	20000e2e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS2);
20000e18:	2010      	movs	r0, #16
20000e1a:	f7ff ff95 	bl	20000d48 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS1);
20000e1e:	2008      	movs	r0, #8
20000e20:	f7ff ffb4 	bl	20000d8c <graphic_ctrl_bit_clear>
            break;
20000e24:	e003      	b.n	20000e2e <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
20000e26:	2018      	movs	r0, #24
20000e28:	f7ff ff8e 	bl	20000d48 <graphic_ctrl_bit_set>
            break;
20000e2c:	46c0      	nop			; (mov r8, r8)
}
20000e2e:	46c0      	nop			; (mov r8, r8)
20000e30:	46bd      	mov	sp, r7
20000e32:	b002      	add	sp, #8
20000e34:	bd80      	pop	{r7, pc}

20000e36 <graphic_initialize>:

void graphic_initialize(void) {
20000e36:	b580      	push	{r7, lr}
20000e38:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
20000e3a:	2040      	movs	r0, #64	; 0x40
20000e3c:	f7ff ff84 	bl	20000d48 <graphic_ctrl_bit_set>
    delaymicros(10);
20000e40:	200a      	movs	r0, #10
20000e42:	f7ff f929 	bl	20000098 <delaymicros>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000e46:	2078      	movs	r0, #120	; 0x78
20000e48:	f7ff ffa0 	bl	20000d8c <graphic_ctrl_bit_clear>
    delaymillis(30);
20000e4c:	201e      	movs	r0, #30
20000e4e:	f7ff f938 	bl	200000c2 <delaymillis>
    graphic_ctrl_bit_set(B_RST);
20000e52:	2020      	movs	r0, #32
20000e54:	f7ff ff78 	bl	20000d48 <graphic_ctrl_bit_set>
    delaymillis(100);
20000e58:	2064      	movs	r0, #100	; 0x64
20000e5a:	f7ff f932 	bl	200000c2 <delaymillis>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20000e5e:	2118      	movs	r1, #24
20000e60:	203e      	movs	r0, #62	; 0x3e
20000e62:	f000 f8e7 	bl	20001034 <graphic_write_command>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
20000e66:	2118      	movs	r1, #24
20000e68:	203e      	movs	r0, #62	; 0x3e
20000e6a:	f000 f8e3 	bl	20001034 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);     //...
20000e6e:	2118      	movs	r1, #24
20000e70:	203f      	movs	r0, #63	; 0x3f
20000e72:	f000 f8df 	bl	20001034 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000e76:	2118      	movs	r1, #24
20000e78:	20c0      	movs	r0, #192	; 0xc0
20000e7a:	f000 f8db 	bl	20001034 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000e7e:	2118      	movs	r1, #24
20000e80:	2040      	movs	r0, #64	; 0x40
20000e82:	f000 f8d7 	bl	20001034 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000e86:	2118      	movs	r1, #24
20000e88:	20b8      	movs	r0, #184	; 0xb8
20000e8a:	f000 f8d3 	bl	20001034 <graphic_write_command>
    select_controller(0);       //choose neither CS1/CS2
20000e8e:	2000      	movs	r0, #0
20000e90:	f7ff ffa4 	bl	20000ddc <select_controller>
}
20000e94:	46c0      	nop			; (mov r8, r8)
20000e96:	46bd      	mov	sp, r7
20000e98:	bd80      	pop	{r7, pc}

20000e9a <graphic_wait_ready>:

static void graphic_wait_ready(void) {
20000e9a:	b580      	push	{r7, lr}
20000e9c:	b082      	sub	sp, #8
20000e9e:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000ea0:	2040      	movs	r0, #64	; 0x40
20000ea2:	f7ff ff73 	bl	20000d8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000ea6:	4b14      	ldr	r3, [pc, #80]	; (20000ef8 <graphic_wait_ready+0x5e>)
20000ea8:	4a14      	ldr	r2, [pc, #80]	; (20000efc <graphic_wait_ready+0x62>)
20000eaa:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
20000eac:	2001      	movs	r0, #1
20000eae:	f7ff ff6d 	bl	20000d8c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000eb2:	2002      	movs	r0, #2
20000eb4:	f7ff ff48 	bl	20000d48 <graphic_ctrl_bit_set>
    delay_500ns();
20000eb8:	f7ff f8cc 	bl	20000054 <delay_500ns>
    while(1) {
        graphic_ctrl_bit_set(B_E);
20000ebc:	2040      	movs	r0, #64	; 0x40
20000ebe:	f7ff ff43 	bl	20000d48 <graphic_ctrl_bit_set>
        delay_500ns();
20000ec2:	f7ff f8c7 	bl	20000054 <delay_500ns>
        c = GPIO_E->idrHigh & LCD_BUSY;
20000ec6:	4b0c      	ldr	r3, [pc, #48]	; (20000ef8 <graphic_wait_ready+0x5e>)
20000ec8:	7c5b      	ldrb	r3, [r3, #17]
20000eca:	b2da      	uxtb	r2, r3
20000ecc:	1dfb      	adds	r3, r7, #7
20000ece:	217f      	movs	r1, #127	; 0x7f
20000ed0:	438a      	bics	r2, r1
20000ed2:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000ed4:	2040      	movs	r0, #64	; 0x40
20000ed6:	f7ff ff59 	bl	20000d8c <graphic_ctrl_bit_clear>
        delay_500ns();
20000eda:	f7ff f8bb 	bl	20000054 <delay_500ns>
        if( c == 0 ) break;
20000ede:	1dfb      	adds	r3, r7, #7
20000ee0:	781b      	ldrb	r3, [r3, #0]
20000ee2:	2b00      	cmp	r3, #0
20000ee4:	d000      	beq.n	20000ee8 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
20000ee6:	e7e9      	b.n	20000ebc <graphic_wait_ready+0x22>
        if( c == 0 ) break;
20000ee8:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000eea:	4b03      	ldr	r3, [pc, #12]	; (20000ef8 <graphic_wait_ready+0x5e>)
20000eec:	4a04      	ldr	r2, [pc, #16]	; (20000f00 <graphic_wait_ready+0x66>)
20000eee:	601a      	str	r2, [r3, #0]
}
20000ef0:	46c0      	nop			; (mov r8, r8)
20000ef2:	46bd      	mov	sp, r7
20000ef4:	b002      	add	sp, #8
20000ef6:	bd80      	pop	{r7, pc}
20000ef8:	40021000 	andmi	r1, r2, r0
20000efc:	00005555 	andeq	r5, r0, r5, asr r5
20000f00:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000f04 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000f04:	b580      	push	{r7, lr}
20000f06:	b084      	sub	sp, #16
20000f08:	af00      	add	r7, sp, #0
20000f0a:	0002      	movs	r2, r0
20000f0c:	1dfb      	adds	r3, r7, #7
20000f0e:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000f10:	2040      	movs	r0, #64	; 0x40
20000f12:	f7ff ff3b 	bl	20000d8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000f16:	4b1c      	ldr	r3, [pc, #112]	; (20000f88 <graphic_read+0x84>)
20000f18:	4a1c      	ldr	r2, [pc, #112]	; (20000f8c <graphic_read+0x88>)
20000f1a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
20000f1c:	2003      	movs	r0, #3
20000f1e:	f7ff ff13 	bl	20000d48 <graphic_ctrl_bit_set>
    select_controller(controller);
20000f22:	1dfb      	adds	r3, r7, #7
20000f24:	781b      	ldrb	r3, [r3, #0]
20000f26:	0018      	movs	r0, r3
20000f28:	f7ff ff58 	bl	20000ddc <select_controller>
    delay_500ns();
20000f2c:	f7ff f892 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000f30:	2040      	movs	r0, #64	; 0x40
20000f32:	f7ff ff09 	bl	20000d48 <graphic_ctrl_bit_set>
    delay_500ns();
20000f36:	f7ff f88d 	bl	20000054 <delay_500ns>
    c = GPIO_E->idrHigh;
20000f3a:	4a13      	ldr	r2, [pc, #76]	; (20000f88 <graphic_read+0x84>)
20000f3c:	230f      	movs	r3, #15
20000f3e:	18fb      	adds	r3, r7, r3
20000f40:	7c52      	ldrb	r2, [r2, #17]
20000f42:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000f44:	2040      	movs	r0, #64	; 0x40
20000f46:	f7ff ff21 	bl	20000d8c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
20000f4a:	4b0f      	ldr	r3, [pc, #60]	; (20000f88 <graphic_read+0x84>)
20000f4c:	4a10      	ldr	r2, [pc, #64]	; (20000f90 <graphic_read+0x8c>)
20000f4e:	601a      	str	r2, [r3, #0]

    if( controller & B_CS1 ) {
20000f50:	1dfb      	adds	r3, r7, #7
20000f52:	781b      	ldrb	r3, [r3, #0]
20000f54:	2208      	movs	r2, #8
20000f56:	4013      	ands	r3, r2
20000f58:	d004      	beq.n	20000f64 <graphic_read+0x60>
        select_controller(B_CS1);
20000f5a:	2008      	movs	r0, #8
20000f5c:	f7ff ff3e 	bl	20000ddc <select_controller>
        graphic_wait_ready();
20000f60:	f7ff ff9b 	bl	20000e9a <graphic_wait_ready>
    }
    if( controller & B_CS2 ) {
20000f64:	1dfb      	adds	r3, r7, #7
20000f66:	781b      	ldrb	r3, [r3, #0]
20000f68:	2210      	movs	r2, #16
20000f6a:	4013      	ands	r3, r2
20000f6c:	d004      	beq.n	20000f78 <graphic_read+0x74>
        select_controller(B_CS2);
20000f6e:	2010      	movs	r0, #16
20000f70:	f7ff ff34 	bl	20000ddc <select_controller>
        graphic_wait_ready();
20000f74:	f7ff ff91 	bl	20000e9a <graphic_wait_ready>
    }
    return c;
20000f78:	230f      	movs	r3, #15
20000f7a:	18fb      	adds	r3, r7, r3
20000f7c:	781b      	ldrb	r3, [r3, #0]
}
20000f7e:	0018      	movs	r0, r3
20000f80:	46bd      	mov	sp, r7
20000f82:	b004      	add	sp, #16
20000f84:	bd80      	pop	{r7, pc}
20000f86:	46c0      	nop			; (mov r8, r8)
20000f88:	40021000 	andmi	r1, r2, r0
20000f8c:	00005555 	andeq	r5, r0, r5, asr r5
20000f90:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000f94 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20000f94:	b580      	push	{r7, lr}
20000f96:	b082      	sub	sp, #8
20000f98:	af00      	add	r7, sp, #0
20000f9a:	0002      	movs	r2, r0
20000f9c:	1dfb      	adds	r3, r7, #7
20000f9e:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000fa0:	1dfb      	adds	r3, r7, #7
20000fa2:	781b      	ldrb	r3, [r3, #0]
20000fa4:	0018      	movs	r0, r3
20000fa6:	f7ff ffad 	bl	20000f04 <graphic_read>
    return graphic_read(controller);
20000faa:	1dfb      	adds	r3, r7, #7
20000fac:	781b      	ldrb	r3, [r3, #0]
20000fae:	0018      	movs	r0, r3
20000fb0:	f7ff ffa8 	bl	20000f04 <graphic_read>
20000fb4:	0003      	movs	r3, r0
}
20000fb6:	0018      	movs	r0, r3
20000fb8:	46bd      	mov	sp, r7
20000fba:	b002      	add	sp, #8
20000fbc:	bd80      	pop	{r7, pc}

20000fbe <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000fbe:	b580      	push	{r7, lr}
20000fc0:	b082      	sub	sp, #8
20000fc2:	af00      	add	r7, sp, #0
20000fc4:	0002      	movs	r2, r0
20000fc6:	1dfb      	adds	r3, r7, #7
20000fc8:	701a      	strb	r2, [r3, #0]
20000fca:	1dbb      	adds	r3, r7, #6
20000fcc:	1c0a      	adds	r2, r1, #0
20000fce:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
20000fd0:	4a17      	ldr	r2, [pc, #92]	; (20001030 <graphic_write+0x72>)
20000fd2:	1dfb      	adds	r3, r7, #7
20000fd4:	781b      	ldrb	r3, [r3, #0]
20000fd6:	7553      	strb	r3, [r2, #21]
    delay_500ns();
20000fd8:	f7ff f83c 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000fdc:	2040      	movs	r0, #64	; 0x40
20000fde:	f7ff feb3 	bl	20000d48 <graphic_ctrl_bit_set>
    delay_500ns();
20000fe2:	f7ff f837 	bl	20000054 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000fe6:	2040      	movs	r0, #64	; 0x40
20000fe8:	f7ff fed0 	bl	20000d8c <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000fec:	1dbb      	adds	r3, r7, #6
20000fee:	781b      	ldrb	r3, [r3, #0]
20000ff0:	2208      	movs	r2, #8
20000ff2:	4013      	ands	r3, r2
20000ff4:	d004      	beq.n	20001000 <graphic_write+0x42>
        select_controller(B_CS1);
20000ff6:	2008      	movs	r0, #8
20000ff8:	f7ff fef0 	bl	20000ddc <select_controller>
        graphic_wait_ready();
20000ffc:	f7ff ff4d 	bl	20000e9a <graphic_wait_ready>
    }
    if(controller & B_CS2){
20001000:	1dbb      	adds	r3, r7, #6
20001002:	781b      	ldrb	r3, [r3, #0]
20001004:	2210      	movs	r2, #16
20001006:	4013      	ands	r3, r2
20001008:	d004      	beq.n	20001014 <graphic_write+0x56>
        select_controller(B_CS2);
2000100a:	2010      	movs	r0, #16
2000100c:	f7ff fee6 	bl	20000ddc <select_controller>
        graphic_wait_ready();
20001010:	f7ff ff43 	bl	20000e9a <graphic_wait_ready>
    }
        
    GPIO_E->odrHigh = 0;
20001014:	4b06      	ldr	r3, [pc, #24]	; (20001030 <graphic_write+0x72>)
20001016:	2200      	movs	r2, #0
20001018:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(B_E);
2000101a:	2040      	movs	r0, #64	; 0x40
2000101c:	f7ff fe94 	bl	20000d48 <graphic_ctrl_bit_set>
    select_controller(0);    
20001020:	2000      	movs	r0, #0
20001022:	f7ff fedb 	bl	20000ddc <select_controller>
    
}
20001026:	46c0      	nop			; (mov r8, r8)
20001028:	46bd      	mov	sp, r7
2000102a:	b002      	add	sp, #8
2000102c:	bd80      	pop	{r7, pc}
2000102e:	46c0      	nop			; (mov r8, r8)
20001030:	40021000 	andmi	r1, r2, r0

20001034 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20001034:	b580      	push	{r7, lr}
20001036:	b082      	sub	sp, #8
20001038:	af00      	add	r7, sp, #0
2000103a:	0002      	movs	r2, r0
2000103c:	1dfb      	adds	r3, r7, #7
2000103e:	701a      	strb	r2, [r3, #0]
20001040:	1dbb      	adds	r3, r7, #6
20001042:	1c0a      	adds	r2, r1, #0
20001044:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20001046:	2040      	movs	r0, #64	; 0x40
20001048:	f7ff fea0 	bl	20000d8c <graphic_ctrl_bit_clear>
    select_controller(controller);
2000104c:	1dbb      	adds	r3, r7, #6
2000104e:	781b      	ldrb	r3, [r3, #0]
20001050:	0018      	movs	r0, r3
20001052:	f7ff fec3 	bl	20000ddc <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
20001056:	2003      	movs	r0, #3
20001058:	f7ff fe98 	bl	20000d8c <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
2000105c:	1dbb      	adds	r3, r7, #6
2000105e:	781a      	ldrb	r2, [r3, #0]
20001060:	1dfb      	adds	r3, r7, #7
20001062:	781b      	ldrb	r3, [r3, #0]
20001064:	0011      	movs	r1, r2
20001066:	0018      	movs	r0, r3
20001068:	f7ff ffa9 	bl	20000fbe <graphic_write>
}
2000106c:	46c0      	nop			; (mov r8, r8)
2000106e:	46bd      	mov	sp, r7
20001070:	b002      	add	sp, #8
20001072:	bd80      	pop	{r7, pc}

20001074 <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller){
20001074:	b580      	push	{r7, lr}
20001076:	b082      	sub	sp, #8
20001078:	af00      	add	r7, sp, #0
2000107a:	0002      	movs	r2, r0
2000107c:	1dfb      	adds	r3, r7, #7
2000107e:	701a      	strb	r2, [r3, #0]
20001080:	1dbb      	adds	r3, r7, #6
20001082:	1c0a      	adds	r2, r1, #0
20001084:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20001086:	2040      	movs	r0, #64	; 0x40
20001088:	f7ff fe80 	bl	20000d8c <graphic_ctrl_bit_clear>
    select_controller(controller);
2000108c:	1dbb      	adds	r3, r7, #6
2000108e:	781b      	ldrb	r3, [r3, #0]
20001090:	0018      	movs	r0, r3
20001092:	f7ff fea3 	bl	20000ddc <select_controller>
    graphic_ctrl_bit_clear(B_RW);
20001096:	2002      	movs	r0, #2
20001098:	f7ff fe78 	bl	20000d8c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RS);
2000109c:	2001      	movs	r0, #1
2000109e:	f7ff fe53 	bl	20000d48 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
200010a2:	1dbb      	adds	r3, r7, #6
200010a4:	781a      	ldrb	r2, [r3, #0]
200010a6:	1dfb      	adds	r3, r7, #7
200010a8:	781b      	ldrb	r3, [r3, #0]
200010aa:	0011      	movs	r1, r2
200010ac:	0018      	movs	r0, r3
200010ae:	f7ff ff86 	bl	20000fbe <graphic_write>
}
200010b2:	46c0      	nop			; (mov r8, r8)
200010b4:	46bd      	mov	sp, r7
200010b6:	b002      	add	sp, #8
200010b8:	bd80      	pop	{r7, pc}

200010ba <graphic_clear_screen>:
void graphic_clear_screen(void){
200010ba:	b580      	push	{r7, lr}
200010bc:	b082      	sub	sp, #8
200010be:	af00      	add	r7, sp, #0
    for(int i = 1; i <= 128; i++){
200010c0:	2301      	movs	r3, #1
200010c2:	607b      	str	r3, [r7, #4]
200010c4:	e011      	b.n	200010ea <graphic_clear_screen+0x30>
		for(int j = 1; j <= 64; j++){
200010c6:	2301      	movs	r3, #1
200010c8:	603b      	str	r3, [r7, #0]
200010ca:	e008      	b.n	200010de <graphic_clear_screen+0x24>
			pixel(i, j, 0);
200010cc:	6839      	ldr	r1, [r7, #0]
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	2200      	movs	r2, #0
200010d2:	0018      	movs	r0, r3
200010d4:	f000 f834 	bl	20001140 <pixel>
		for(int j = 1; j <= 64; j++){
200010d8:	683b      	ldr	r3, [r7, #0]
200010da:	3301      	adds	r3, #1
200010dc:	603b      	str	r3, [r7, #0]
200010de:	683b      	ldr	r3, [r7, #0]
200010e0:	2b40      	cmp	r3, #64	; 0x40
200010e2:	ddf3      	ble.n	200010cc <graphic_clear_screen+0x12>
    for(int i = 1; i <= 128; i++){
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	3301      	adds	r3, #1
200010e8:	607b      	str	r3, [r7, #4]
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	2b80      	cmp	r3, #128	; 0x80
200010ee:	ddea      	ble.n	200010c6 <graphic_clear_screen+0xc>
		}
	}
}
200010f0:	46c0      	nop			; (mov r8, r8)
200010f2:	46bd      	mov	sp, r7
200010f4:	b002      	add	sp, #8
200010f6:	bd80      	pop	{r7, pc}

200010f8 <clear_backBuffer>:


void clear_backBuffer() {
200010f8:	b580      	push	{r7, lr}
200010fa:	b082      	sub	sp, #8
200010fc:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++){
200010fe:	2300      	movs	r3, #0
20001100:	607b      	str	r3, [r7, #4]
20001102:	e013      	b.n	2000112c <clear_backBuffer+0x34>
        for(int j = 0; j < 8; j++)
20001104:	2300      	movs	r3, #0
20001106:	603b      	str	r3, [r7, #0]
20001108:	e00a      	b.n	20001120 <clear_backBuffer+0x28>
			 backBuffer[i][j] = 0;
2000110a:	4a0c      	ldr	r2, [pc, #48]	; (2000113c <clear_backBuffer+0x44>)
2000110c:	687b      	ldr	r3, [r7, #4]
2000110e:	00db      	lsls	r3, r3, #3
20001110:	18d2      	adds	r2, r2, r3
20001112:	683b      	ldr	r3, [r7, #0]
20001114:	18d3      	adds	r3, r2, r3
20001116:	2200      	movs	r2, #0
20001118:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++)
2000111a:	683b      	ldr	r3, [r7, #0]
2000111c:	3301      	adds	r3, #1
2000111e:	603b      	str	r3, [r7, #0]
20001120:	683b      	ldr	r3, [r7, #0]
20001122:	2b07      	cmp	r3, #7
20001124:	ddf1      	ble.n	2000110a <clear_backBuffer+0x12>
    for (int i = 0; i < 256; i++){
20001126:	687b      	ldr	r3, [r7, #4]
20001128:	3301      	adds	r3, #1
2000112a:	607b      	str	r3, [r7, #4]
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	2bff      	cmp	r3, #255	; 0xff
20001130:	dde8      	ble.n	20001104 <clear_backBuffer+0xc>
	}
}
20001132:	46c0      	nop			; (mov r8, r8)
20001134:	46bd      	mov	sp, r7
20001136:	b002      	add	sp, #8
20001138:	bd80      	pop	{r7, pc}
2000113a:	46c0      	nop			; (mov r8, r8)
2000113c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20001140 <pixel>:

void pixel(int x, int y, int set) {
20001140:	b580      	push	{r7, lr}
20001142:	b086      	sub	sp, #24
20001144:	af00      	add	r7, sp, #0
20001146:	60f8      	str	r0, [r7, #12]
20001148:	60b9      	str	r1, [r7, #8]
2000114a:	607a      	str	r2, [r7, #4]
    
    uint8_t mask = 1 << ((y-1)%8);
2000114c:	68bb      	ldr	r3, [r7, #8]
2000114e:	3b01      	subs	r3, #1
20001150:	4a26      	ldr	r2, [pc, #152]	; (200011ec <pixel+0xac>)
20001152:	4013      	ands	r3, r2
20001154:	d504      	bpl.n	20001160 <pixel+0x20>
20001156:	3b01      	subs	r3, #1
20001158:	2208      	movs	r2, #8
2000115a:	4252      	negs	r2, r2
2000115c:	4313      	orrs	r3, r2
2000115e:	3301      	adds	r3, #1
20001160:	001a      	movs	r2, r3
20001162:	2301      	movs	r3, #1
20001164:	4093      	lsls	r3, r2
20001166:	001a      	movs	r2, r3
20001168:	2317      	movs	r3, #23
2000116a:	18fb      	adds	r3, r7, r3
2000116c:	701a      	strb	r2, [r3, #0]
    
    if(set){
2000116e:	687b      	ldr	r3, [r7, #4]
20001170:	2b00      	cmp	r3, #0
20001172:	d019      	beq.n	200011a8 <pixel+0x68>
        backBuffer[64+(y-1)][(x-1)/8] |= mask;
20001174:	68bb      	ldr	r3, [r7, #8]
20001176:	333f      	adds	r3, #63	; 0x3f
20001178:	001a      	movs	r2, r3
2000117a:	68fb      	ldr	r3, [r7, #12]
2000117c:	3b01      	subs	r3, #1
2000117e:	2b00      	cmp	r3, #0
20001180:	da00      	bge.n	20001184 <pixel+0x44>
20001182:	3307      	adds	r3, #7
20001184:	10db      	asrs	r3, r3, #3
20001186:	491a      	ldr	r1, [pc, #104]	; (200011f0 <pixel+0xb0>)
20001188:	00d2      	lsls	r2, r2, #3
2000118a:	188a      	adds	r2, r1, r2
2000118c:	5cd0      	ldrb	r0, [r2, r3]
2000118e:	68ba      	ldr	r2, [r7, #8]
20001190:	323f      	adds	r2, #63	; 0x3f
20001192:	2117      	movs	r1, #23
20001194:	1879      	adds	r1, r7, r1
20001196:	7809      	ldrb	r1, [r1, #0]
20001198:	4301      	orrs	r1, r0
2000119a:	b2c8      	uxtb	r0, r1
2000119c:	4914      	ldr	r1, [pc, #80]	; (200011f0 <pixel+0xb0>)
2000119e:	00d2      	lsls	r2, r2, #3
200011a0:	188a      	adds	r2, r1, r2
200011a2:	1c01      	adds	r1, r0, #0
200011a4:	54d1      	strb	r1, [r2, r3]
    }
    else{
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
    }
}
200011a6:	e01d      	b.n	200011e4 <pixel+0xa4>
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
200011a8:	68bb      	ldr	r3, [r7, #8]
200011aa:	333f      	adds	r3, #63	; 0x3f
200011ac:	001a      	movs	r2, r3
200011ae:	68fb      	ldr	r3, [r7, #12]
200011b0:	3b01      	subs	r3, #1
200011b2:	2b00      	cmp	r3, #0
200011b4:	da00      	bge.n	200011b8 <pixel+0x78>
200011b6:	3307      	adds	r3, #7
200011b8:	10db      	asrs	r3, r3, #3
200011ba:	490d      	ldr	r1, [pc, #52]	; (200011f0 <pixel+0xb0>)
200011bc:	00d2      	lsls	r2, r2, #3
200011be:	188a      	adds	r2, r1, r2
200011c0:	5cd2      	ldrb	r2, [r2, r3]
200011c2:	b252      	sxtb	r2, r2
200011c4:	2117      	movs	r1, #23
200011c6:	1879      	adds	r1, r7, r1
200011c8:	7809      	ldrb	r1, [r1, #0]
200011ca:	b249      	sxtb	r1, r1
200011cc:	43c9      	mvns	r1, r1
200011ce:	b249      	sxtb	r1, r1
200011d0:	400a      	ands	r2, r1
200011d2:	b251      	sxtb	r1, r2
200011d4:	68ba      	ldr	r2, [r7, #8]
200011d6:	323f      	adds	r2, #63	; 0x3f
200011d8:	b2c8      	uxtb	r0, r1
200011da:	4905      	ldr	r1, [pc, #20]	; (200011f0 <pixel+0xb0>)
200011dc:	00d2      	lsls	r2, r2, #3
200011de:	188a      	adds	r2, r1, r2
200011e0:	1c01      	adds	r1, r0, #0
200011e2:	54d1      	strb	r1, [r2, r3]
}
200011e4:	46c0      	nop			; (mov r8, r8)
200011e6:	46bd      	mov	sp, r7
200011e8:	b006      	add	sp, #24
200011ea:	bd80      	pop	{r7, pc}
200011ec:	80000007 	andhi	r0, r0, r7
200011f0:	20001b1c 	andcs	r1, r0, ip, lsl fp

200011f4 <byteToBuffer>:

void byteToBuffer(int addr, int page, char c){
200011f4:	b580      	push	{r7, lr}
200011f6:	b084      	sub	sp, #16
200011f8:	af00      	add	r7, sp, #0
200011fa:	60f8      	str	r0, [r7, #12]
200011fc:	60b9      	str	r1, [r7, #8]
200011fe:	1dfb      	adds	r3, r7, #7
20001200:	701a      	strb	r2, [r3, #0]
	backBuffer[addr][page] = c;
20001202:	4a06      	ldr	r2, [pc, #24]	; (2000121c <byteToBuffer+0x28>)
20001204:	68fb      	ldr	r3, [r7, #12]
20001206:	00db      	lsls	r3, r3, #3
20001208:	18d2      	adds	r2, r2, r3
2000120a:	68bb      	ldr	r3, [r7, #8]
2000120c:	18d3      	adds	r3, r2, r3
2000120e:	1dfa      	adds	r2, r7, #7
20001210:	7812      	ldrb	r2, [r2, #0]
20001212:	701a      	strb	r2, [r3, #0]
}
20001214:	46c0      	nop			; (mov r8, r8)
20001216:	46bd      	mov	sp, r7
20001218:	b004      	add	sp, #16
2000121a:	bd80      	pop	{r7, pc}
2000121c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20001220 <byteToScreenBuffer>:
void byteToScreenBuffer(int addr, int page, char c){
20001220:	b580      	push	{r7, lr}
20001222:	b084      	sub	sp, #16
20001224:	af00      	add	r7, sp, #0
20001226:	60f8      	str	r0, [r7, #12]
20001228:	60b9      	str	r1, [r7, #8]
2000122a:	1dfb      	adds	r3, r7, #7
2000122c:	701a      	strb	r2, [r3, #0]
	backBuffer[64+addr][page] = c;
2000122e:	68fb      	ldr	r3, [r7, #12]
20001230:	3340      	adds	r3, #64	; 0x40
20001232:	4a06      	ldr	r2, [pc, #24]	; (2000124c <byteToScreenBuffer+0x2c>)
20001234:	00db      	lsls	r3, r3, #3
20001236:	18d2      	adds	r2, r2, r3
20001238:	68bb      	ldr	r3, [r7, #8]
2000123a:	18d3      	adds	r3, r2, r3
2000123c:	1dfa      	adds	r2, r7, #7
2000123e:	7812      	ldrb	r2, [r2, #0]
20001240:	701a      	strb	r2, [r3, #0]
}
20001242:	46c0      	nop			; (mov r8, r8)
20001244:	46bd      	mov	sp, r7
20001246:	b004      	add	sp, #16
20001248:	bd80      	pop	{r7, pc}
2000124a:	46c0      	nop			; (mov r8, r8)
2000124c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20001250 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20001250:	b590      	push	{r4, r7, lr}
20001252:	b085      	sub	sp, #20
20001254:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20001256:	2300      	movs	r3, #0
20001258:	60bb      	str	r3, [r7, #8]
    for(c = 0; c < 2; c++) {
2000125a:	230d      	movs	r3, #13
2000125c:	18fb      	adds	r3, r7, r3
2000125e:	2200      	movs	r2, #0
20001260:	701a      	strb	r2, [r3, #0]
20001262:	e05a      	b.n	2000131a <graphic_draw_screen+0xca>
        controller = (c == 0) ? B_CS1 : B_CS2;
20001264:	230d      	movs	r3, #13
20001266:	18fb      	adds	r3, r7, r3
20001268:	781b      	ldrb	r3, [r3, #0]
2000126a:	2b00      	cmp	r3, #0
2000126c:	d101      	bne.n	20001272 <graphic_draw_screen+0x22>
2000126e:	2208      	movs	r2, #8
20001270:	e000      	b.n	20001274 <graphic_draw_screen+0x24>
20001272:	2210      	movs	r2, #16
20001274:	1dfb      	adds	r3, r7, #7
20001276:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 8; j++) {
20001278:	230e      	movs	r3, #14
2000127a:	18fb      	adds	r3, r7, r3
2000127c:	2200      	movs	r2, #0
2000127e:	701a      	strb	r2, [r3, #0]
20001280:	e040      	b.n	20001304 <graphic_draw_screen+0xb4>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20001282:	230e      	movs	r3, #14
20001284:	18fb      	adds	r3, r7, r3
20001286:	781b      	ldrb	r3, [r3, #0]
20001288:	2248      	movs	r2, #72	; 0x48
2000128a:	4252      	negs	r2, r2
2000128c:	4313      	orrs	r3, r2
2000128e:	b2da      	uxtb	r2, r3
20001290:	1dfb      	adds	r3, r7, #7
20001292:	781b      	ldrb	r3, [r3, #0]
20001294:	0019      	movs	r1, r3
20001296:	0010      	movs	r0, r2
20001298:	f7ff fecc 	bl	20001034 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
2000129c:	1dfb      	adds	r3, r7, #7
2000129e:	781b      	ldrb	r3, [r3, #0]
200012a0:	0019      	movs	r1, r3
200012a2:	2040      	movs	r0, #64	; 0x40
200012a4:	f7ff fec6 	bl	20001034 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++) {
200012a8:	230f      	movs	r3, #15
200012aa:	18fb      	adds	r3, r7, r3
200012ac:	2200      	movs	r2, #0
200012ae:	701a      	strb	r2, [r3, #0]
200012b0:	e01d      	b.n	200012ee <graphic_draw_screen+0x9e>
                graphic_write_data(backBuffer[64+c*64 + i][j], controller);
200012b2:	230d      	movs	r3, #13
200012b4:	18fb      	adds	r3, r7, r3
200012b6:	781b      	ldrb	r3, [r3, #0]
200012b8:	3301      	adds	r3, #1
200012ba:	019a      	lsls	r2, r3, #6
200012bc:	240f      	movs	r4, #15
200012be:	193b      	adds	r3, r7, r4
200012c0:	781b      	ldrb	r3, [r3, #0]
200012c2:	18d2      	adds	r2, r2, r3
200012c4:	230e      	movs	r3, #14
200012c6:	18fb      	adds	r3, r7, r3
200012c8:	781b      	ldrb	r3, [r3, #0]
200012ca:	4918      	ldr	r1, [pc, #96]	; (2000132c <graphic_draw_screen+0xdc>)
200012cc:	00d2      	lsls	r2, r2, #3
200012ce:	188a      	adds	r2, r1, r2
200012d0:	5cd2      	ldrb	r2, [r2, r3]
200012d2:	1dfb      	adds	r3, r7, #7
200012d4:	781b      	ldrb	r3, [r3, #0]
200012d6:	0019      	movs	r1, r3
200012d8:	0010      	movs	r0, r2
200012da:	f7ff fecb 	bl	20001074 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++) {
200012de:	193b      	adds	r3, r7, r4
200012e0:	781a      	ldrb	r2, [r3, #0]
200012e2:	193b      	adds	r3, r7, r4
200012e4:	3201      	adds	r2, #1
200012e6:	701a      	strb	r2, [r3, #0]
200012e8:	68bb      	ldr	r3, [r7, #8]
200012ea:	3301      	adds	r3, #1
200012ec:	60bb      	str	r3, [r7, #8]
200012ee:	230f      	movs	r3, #15
200012f0:	18fb      	adds	r3, r7, r3
200012f2:	781b      	ldrb	r3, [r3, #0]
200012f4:	2b3f      	cmp	r3, #63	; 0x3f
200012f6:	d9dc      	bls.n	200012b2 <graphic_draw_screen+0x62>
        for(j = 0; j < 8; j++) {
200012f8:	210e      	movs	r1, #14
200012fa:	187b      	adds	r3, r7, r1
200012fc:	781a      	ldrb	r2, [r3, #0]
200012fe:	187b      	adds	r3, r7, r1
20001300:	3201      	adds	r2, #1
20001302:	701a      	strb	r2, [r3, #0]
20001304:	230e      	movs	r3, #14
20001306:	18fb      	adds	r3, r7, r3
20001308:	781b      	ldrb	r3, [r3, #0]
2000130a:	2b07      	cmp	r3, #7
2000130c:	d9b9      	bls.n	20001282 <graphic_draw_screen+0x32>
    for(c = 0; c < 2; c++) {
2000130e:	210d      	movs	r1, #13
20001310:	187b      	adds	r3, r7, r1
20001312:	781a      	ldrb	r2, [r3, #0]
20001314:	187b      	adds	r3, r7, r1
20001316:	3201      	adds	r2, #1
20001318:	701a      	strb	r2, [r3, #0]
2000131a:	230d      	movs	r3, #13
2000131c:	18fb      	adds	r3, r7, r3
2000131e:	781b      	ldrb	r3, [r3, #0]
20001320:	2b01      	cmp	r3, #1
20001322:	d99f      	bls.n	20001264 <graphic_draw_screen+0x14>
            }
        }
    }
}
20001324:	46c0      	nop			; (mov r8, r8)
20001326:	46bd      	mov	sp, r7
20001328:	b005      	add	sp, #20
2000132a:	bd90      	pop	{r4, r7, pc}
2000132c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20001330 <shiftRight>:


*/


void shiftRight(){
20001330:	b580      	push	{r7, lr}
20001332:	b084      	sub	sp, #16
20001334:	af00      	add	r7, sp, #0
	for(int i = 255; i > 0; i--){
20001336:	23ff      	movs	r3, #255	; 0xff
20001338:	60fb      	str	r3, [r7, #12]
2000133a:	e01b      	b.n	20001374 <shiftRight+0x44>
		for(int j = 0; j < 8; j++){
2000133c:	2300      	movs	r3, #0
2000133e:	60bb      	str	r3, [r7, #8]
20001340:	e012      	b.n	20001368 <shiftRight+0x38>
			backBuffer[i][j] = backBuffer[i-1][j];
20001342:	68fb      	ldr	r3, [r7, #12]
20001344:	3b01      	subs	r3, #1
20001346:	4a16      	ldr	r2, [pc, #88]	; (200013a0 <shiftRight+0x70>)
20001348:	00db      	lsls	r3, r3, #3
2000134a:	18d2      	adds	r2, r2, r3
2000134c:	68bb      	ldr	r3, [r7, #8]
2000134e:	18d3      	adds	r3, r2, r3
20001350:	7819      	ldrb	r1, [r3, #0]
20001352:	4a13      	ldr	r2, [pc, #76]	; (200013a0 <shiftRight+0x70>)
20001354:	68fb      	ldr	r3, [r7, #12]
20001356:	00db      	lsls	r3, r3, #3
20001358:	18d2      	adds	r2, r2, r3
2000135a:	68bb      	ldr	r3, [r7, #8]
2000135c:	18d3      	adds	r3, r2, r3
2000135e:	1c0a      	adds	r2, r1, #0
20001360:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20001362:	68bb      	ldr	r3, [r7, #8]
20001364:	3301      	adds	r3, #1
20001366:	60bb      	str	r3, [r7, #8]
20001368:	68bb      	ldr	r3, [r7, #8]
2000136a:	2b07      	cmp	r3, #7
2000136c:	dde9      	ble.n	20001342 <shiftRight+0x12>
	for(int i = 255; i > 0; i--){
2000136e:	68fb      	ldr	r3, [r7, #12]
20001370:	3b01      	subs	r3, #1
20001372:	60fb      	str	r3, [r7, #12]
20001374:	68fb      	ldr	r3, [r7, #12]
20001376:	2b00      	cmp	r3, #0
20001378:	dce0      	bgt.n	2000133c <shiftRight+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
2000137a:	2300      	movs	r3, #0
2000137c:	607b      	str	r3, [r7, #4]
2000137e:	e007      	b.n	20001390 <shiftRight+0x60>
        backBuffer[0][j] = 0; 
20001380:	4a07      	ldr	r2, [pc, #28]	; (200013a0 <shiftRight+0x70>)
20001382:	687b      	ldr	r3, [r7, #4]
20001384:	18d3      	adds	r3, r2, r3
20001386:	2200      	movs	r2, #0
20001388:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
2000138a:	687b      	ldr	r3, [r7, #4]
2000138c:	3301      	adds	r3, #1
2000138e:	607b      	str	r3, [r7, #4]
20001390:	687b      	ldr	r3, [r7, #4]
20001392:	2b07      	cmp	r3, #7
20001394:	ddf4      	ble.n	20001380 <shiftRight+0x50>
    }
}
20001396:	46c0      	nop			; (mov r8, r8)
20001398:	46bd      	mov	sp, r7
2000139a:	b004      	add	sp, #16
2000139c:	bd80      	pop	{r7, pc}
2000139e:	46c0      	nop			; (mov r8, r8)
200013a0:	20001b1c 	andcs	r1, r0, ip, lsl fp

200013a4 <shiftLeft>:
void shiftLeft(){
200013a4:	b580      	push	{r7, lr}
200013a6:	b084      	sub	sp, #16
200013a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 255; i++){
200013aa:	2300      	movs	r3, #0
200013ac:	60fb      	str	r3, [r7, #12]
200013ae:	e01b      	b.n	200013e8 <shiftLeft+0x44>
		for(int j = 0; j < 8; j++){
200013b0:	2300      	movs	r3, #0
200013b2:	60bb      	str	r3, [r7, #8]
200013b4:	e012      	b.n	200013dc <shiftLeft+0x38>
			backBuffer[i][j] = backBuffer[i+1][j];
200013b6:	68fb      	ldr	r3, [r7, #12]
200013b8:	3301      	adds	r3, #1
200013ba:	4a17      	ldr	r2, [pc, #92]	; (20001418 <shiftLeft+0x74>)
200013bc:	00db      	lsls	r3, r3, #3
200013be:	18d2      	adds	r2, r2, r3
200013c0:	68bb      	ldr	r3, [r7, #8]
200013c2:	18d3      	adds	r3, r2, r3
200013c4:	7819      	ldrb	r1, [r3, #0]
200013c6:	4a14      	ldr	r2, [pc, #80]	; (20001418 <shiftLeft+0x74>)
200013c8:	68fb      	ldr	r3, [r7, #12]
200013ca:	00db      	lsls	r3, r3, #3
200013cc:	18d2      	adds	r2, r2, r3
200013ce:	68bb      	ldr	r3, [r7, #8]
200013d0:	18d3      	adds	r3, r2, r3
200013d2:	1c0a      	adds	r2, r1, #0
200013d4:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
200013d6:	68bb      	ldr	r3, [r7, #8]
200013d8:	3301      	adds	r3, #1
200013da:	60bb      	str	r3, [r7, #8]
200013dc:	68bb      	ldr	r3, [r7, #8]
200013de:	2b07      	cmp	r3, #7
200013e0:	dde9      	ble.n	200013b6 <shiftLeft+0x12>
	for(int i = 0; i < 255; i++){
200013e2:	68fb      	ldr	r3, [r7, #12]
200013e4:	3301      	adds	r3, #1
200013e6:	60fb      	str	r3, [r7, #12]
200013e8:	68fb      	ldr	r3, [r7, #12]
200013ea:	2bfe      	cmp	r3, #254	; 0xfe
200013ec:	dde0      	ble.n	200013b0 <shiftLeft+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
200013ee:	2300      	movs	r3, #0
200013f0:	607b      	str	r3, [r7, #4]
200013f2:	e00a      	b.n	2000140a <shiftLeft+0x66>
        backBuffer[255][j] = 0; 
200013f4:	4908      	ldr	r1, [pc, #32]	; (20001418 <shiftLeft+0x74>)
200013f6:	23ff      	movs	r3, #255	; 0xff
200013f8:	00db      	lsls	r3, r3, #3
200013fa:	687a      	ldr	r2, [r7, #4]
200013fc:	188a      	adds	r2, r1, r2
200013fe:	18d3      	adds	r3, r2, r3
20001400:	2200      	movs	r2, #0
20001402:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20001404:	687b      	ldr	r3, [r7, #4]
20001406:	3301      	adds	r3, #1
20001408:	607b      	str	r3, [r7, #4]
2000140a:	687b      	ldr	r3, [r7, #4]
2000140c:	2b07      	cmp	r3, #7
2000140e:	ddf1      	ble.n	200013f4 <shiftLeft+0x50>
    }
}
20001410:	46c0      	nop			; (mov r8, r8)
20001412:	46bd      	mov	sp, r7
20001414:	b004      	add	sp, #16
20001416:	bd80      	pop	{r7, pc}
20001418:	20001b1c 	andcs	r1, r0, ip, lsl fp

2000141c <ascii_ctrl_bit_set>:



 
 
 void ascii_ctrl_bit_set(unsigned char x){
2000141c:	b580      	push	{r7, lr}
2000141e:	b084      	sub	sp, #16
20001420:	af00      	add	r7, sp, #0
20001422:	0002      	movs	r2, r0
20001424:	1dfb      	adds	r3, r7, #7
20001426:	701a      	strb	r2, [r3, #0]
	unsigned char c = *portOdrLow;
20001428:	4a0c      	ldr	r2, [pc, #48]	; (2000145c <ascii_ctrl_bit_set+0x40>)
2000142a:	210f      	movs	r1, #15
2000142c:	187b      	adds	r3, r7, r1
2000142e:	7812      	ldrb	r2, [r2, #0]
20001430:	701a      	strb	r2, [r3, #0]
	c |= (B_SELECT | x);
20001432:	1dfa      	adds	r2, r7, #7
20001434:	187b      	adds	r3, r7, r1
20001436:	7812      	ldrb	r2, [r2, #0]
20001438:	781b      	ldrb	r3, [r3, #0]
2000143a:	4313      	orrs	r3, r2
2000143c:	b2da      	uxtb	r2, r3
2000143e:	0008      	movs	r0, r1
20001440:	187b      	adds	r3, r7, r1
20001442:	2104      	movs	r1, #4
20001444:	430a      	orrs	r2, r1
20001446:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c;
20001448:	4a04      	ldr	r2, [pc, #16]	; (2000145c <ascii_ctrl_bit_set+0x40>)
2000144a:	0001      	movs	r1, r0
2000144c:	187b      	adds	r3, r7, r1
2000144e:	781b      	ldrb	r3, [r3, #0]
20001450:	7013      	strb	r3, [r2, #0]
}
20001452:	46c0      	nop			; (mov r8, r8)
20001454:	46bd      	mov	sp, r7
20001456:	b004      	add	sp, #16
20001458:	bd80      	pop	{r7, pc}
2000145a:	46c0      	nop			; (mov r8, r8)
2000145c:	40021014 	andmi	r1, r2, r4, lsl r0

20001460 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20001460:	b580      	push	{r7, lr}
20001462:	b084      	sub	sp, #16
20001464:	af00      	add	r7, sp, #0
20001466:	0002      	movs	r2, r0
20001468:	1dfb      	adds	r3, r7, #7
2000146a:	701a      	strb	r2, [r3, #0]
	unsigned char c = *portOdrLow;
2000146c:	4a0d      	ldr	r2, [pc, #52]	; (200014a4 <ascii_ctrl_bit_clear+0x44>)
2000146e:	210f      	movs	r1, #15
20001470:	187b      	adds	r3, r7, r1
20001472:	7812      	ldrb	r2, [r2, #0]
20001474:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20001476:	1dfb      	adds	r3, r7, #7
20001478:	781b      	ldrb	r3, [r3, #0]
2000147a:	b25b      	sxtb	r3, r3
2000147c:	43db      	mvns	r3, r3
2000147e:	b25b      	sxtb	r3, r3
20001480:	187a      	adds	r2, r7, r1
20001482:	7812      	ldrb	r2, [r2, #0]
20001484:	b252      	sxtb	r2, r2
20001486:	4013      	ands	r3, r2
20001488:	b25a      	sxtb	r2, r3
2000148a:	187b      	adds	r3, r7, r1
2000148c:	701a      	strb	r2, [r3, #0]
	*portOdrLow = c | B_SELECT;
2000148e:	4a05      	ldr	r2, [pc, #20]	; (200014a4 <ascii_ctrl_bit_clear+0x44>)
20001490:	187b      	adds	r3, r7, r1
20001492:	781b      	ldrb	r3, [r3, #0]
20001494:	2104      	movs	r1, #4
20001496:	430b      	orrs	r3, r1
20001498:	b2db      	uxtb	r3, r3
2000149a:	7013      	strb	r3, [r2, #0]
}
2000149c:	46c0      	nop			; (mov r8, r8)
2000149e:	46bd      	mov	sp, r7
200014a0:	b004      	add	sp, #16
200014a2:	bd80      	pop	{r7, pc}
200014a4:	40021014 	andmi	r1, r2, r4, lsl r0

200014a8 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
200014a8:	b580      	push	{r7, lr}
200014aa:	b082      	sub	sp, #8
200014ac:	af00      	add	r7, sp, #0
200014ae:	0002      	movs	r2, r0
200014b0:	1dfb      	adds	r3, r7, #7
200014b2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
200014b4:	2040      	movs	r0, #64	; 0x40
200014b6:	f7ff ffb1 	bl	2000141c <ascii_ctrl_bit_set>
	*portOdrHigh = c;
200014ba:	4a06      	ldr	r2, [pc, #24]	; (200014d4 <ascii_write_controller+0x2c>)
200014bc:	1dfb      	adds	r3, r7, #7
200014be:	781b      	ldrb	r3, [r3, #0]
200014c0:	7013      	strb	r3, [r2, #0]
	delay_250ns();
200014c2:	f7fe fda5 	bl	20000010 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
200014c6:	2040      	movs	r0, #64	; 0x40
200014c8:	f7ff ffca 	bl	20001460 <ascii_ctrl_bit_clear>
}
200014cc:	46c0      	nop			; (mov r8, r8)
200014ce:	46bd      	mov	sp, r7
200014d0:	b002      	add	sp, #8
200014d2:	bd80      	pop	{r7, pc}
200014d4:	40021015 	andmi	r1, r2, r5, lsl r0

200014d8 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
200014d8:	b580      	push	{r7, lr}
200014da:	b082      	sub	sp, #8
200014dc:	af00      	add	r7, sp, #0
200014de:	0002      	movs	r2, r0
200014e0:	1dfb      	adds	r3, r7, #7
200014e2:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS | B_RW);
200014e4:	2003      	movs	r0, #3
200014e6:	f7ff ffbb 	bl	20001460 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
200014ea:	1dfb      	adds	r3, r7, #7
200014ec:	781b      	ldrb	r3, [r3, #0]
200014ee:	0018      	movs	r0, r3
200014f0:	f7ff ffda 	bl	200014a8 <ascii_write_controller>
}
200014f4:	46c0      	nop			; (mov r8, r8)
200014f6:	46bd      	mov	sp, r7
200014f8:	b002      	add	sp, #8
200014fa:	bd80      	pop	{r7, pc}

200014fc <ascii_write_data>:

void ascii_write_data(unsigned char data){
200014fc:	b580      	push	{r7, lr}
200014fe:	b082      	sub	sp, #8
20001500:	af00      	add	r7, sp, #0
20001502:	0002      	movs	r2, r0
20001504:	1dfb      	adds	r3, r7, #7
20001506:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20001508:	2001      	movs	r0, #1
2000150a:	f7ff ff87 	bl	2000141c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
2000150e:	2002      	movs	r0, #2
20001510:	f7ff ffa6 	bl	20001460 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20001514:	1dfb      	adds	r3, r7, #7
20001516:	781b      	ldrb	r3, [r3, #0]
20001518:	0018      	movs	r0, r3
2000151a:	f7ff ffc5 	bl	200014a8 <ascii_write_controller>
}
2000151e:	46c0      	nop			; (mov r8, r8)
20001520:	46bd      	mov	sp, r7
20001522:	b002      	add	sp, #8
20001524:	bd80      	pop	{r7, pc}

20001526 <ascii_read_controller>:

unsigned char ascii_read_controller(void){
20001526:	b580      	push	{r7, lr}
20001528:	b082      	sub	sp, #8
2000152a:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E);
2000152c:	2040      	movs	r0, #64	; 0x40
2000152e:	f7ff ff75 	bl	2000141c <ascii_ctrl_bit_set>
	delay_250ns();
20001532:	f7fe fd6d 	bl	20000010 <delay_250ns>
	delay_250ns();
20001536:	f7fe fd6b 	bl	20000010 <delay_250ns>
	c= *portIdrHigh;
2000153a:	4a06      	ldr	r2, [pc, #24]	; (20001554 <ascii_read_controller+0x2e>)
2000153c:	1dfb      	adds	r3, r7, #7
2000153e:	7812      	ldrb	r2, [r2, #0]
20001540:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20001542:	2040      	movs	r0, #64	; 0x40
20001544:	f7ff ff8c 	bl	20001460 <ascii_ctrl_bit_clear>
	return c;
20001548:	1dfb      	adds	r3, r7, #7
2000154a:	781b      	ldrb	r3, [r3, #0]
}
2000154c:	0018      	movs	r0, r3
2000154e:	46bd      	mov	sp, r7
20001550:	b002      	add	sp, #8
20001552:	bd80      	pop	{r7, pc}
20001554:	40021011 	andmi	r1, r2, r1, lsl r0

20001558 <ascii_read_data>:

unsigned char ascii_read_data(void){
20001558:	b590      	push	{r4, r7, lr}
2000155a:	b083      	sub	sp, #12
2000155c:	af00      	add	r7, sp, #0
	unsigned char c;
	*portModer = 0x00005555;
2000155e:	4b0a      	ldr	r3, [pc, #40]	; (20001588 <ascii_read_data+0x30>)
20001560:	4a0a      	ldr	r2, [pc, #40]	; (2000158c <ascii_read_data+0x34>)
20001562:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW |B_RS);
20001564:	2003      	movs	r0, #3
20001566:	f7ff ff59 	bl	2000141c <ascii_ctrl_bit_set>
	c = ascii_read_controller();
2000156a:	1dfc      	adds	r4, r7, #7
2000156c:	f7ff ffdb 	bl	20001526 <ascii_read_controller>
20001570:	0003      	movs	r3, r0
20001572:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
20001574:	4b04      	ldr	r3, [pc, #16]	; (20001588 <ascii_read_data+0x30>)
20001576:	4a06      	ldr	r2, [pc, #24]	; (20001590 <ascii_read_data+0x38>)
20001578:	601a      	str	r2, [r3, #0]
	return c;
2000157a:	1dfb      	adds	r3, r7, #7
2000157c:	781b      	ldrb	r3, [r3, #0]
}
2000157e:	0018      	movs	r0, r3
20001580:	46bd      	mov	sp, r7
20001582:	b003      	add	sp, #12
20001584:	bd90      	pop	{r4, r7, pc}
20001586:	46c0      	nop			; (mov r8, r8)
20001588:	40021000 	andmi	r1, r2, r0
2000158c:	00005555 	andeq	r5, r0, r5, asr r5
20001590:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20001594 <ascii_read_status>:

unsigned char ascii_read_status(void){
20001594:	b590      	push	{r4, r7, lr}
20001596:	b083      	sub	sp, #12
20001598:	af00      	add	r7, sp, #0
	unsigned char c;
	*portModer = 0x00005555;
2000159a:	4b0b      	ldr	r3, [pc, #44]	; (200015c8 <ascii_read_status+0x34>)
2000159c:	4a0b      	ldr	r2, [pc, #44]	; (200015cc <ascii_read_status+0x38>)
2000159e:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200015a0:	2002      	movs	r0, #2
200015a2:	f7ff ff3b 	bl	2000141c <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
200015a6:	2001      	movs	r0, #1
200015a8:	f7ff ff5a 	bl	20001460 <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
200015ac:	1dfc      	adds	r4, r7, #7
200015ae:	f7ff ffba 	bl	20001526 <ascii_read_controller>
200015b2:	0003      	movs	r3, r0
200015b4:	7023      	strb	r3, [r4, #0]
	*portModer = 0x55555555;
200015b6:	4b04      	ldr	r3, [pc, #16]	; (200015c8 <ascii_read_status+0x34>)
200015b8:	4a05      	ldr	r2, [pc, #20]	; (200015d0 <ascii_read_status+0x3c>)
200015ba:	601a      	str	r2, [r3, #0]
	return c;
200015bc:	1dfb      	adds	r3, r7, #7
200015be:	781b      	ldrb	r3, [r3, #0]
}
200015c0:	0018      	movs	r0, r3
200015c2:	46bd      	mov	sp, r7
200015c4:	b003      	add	sp, #12
200015c6:	bd90      	pop	{r4, r7, pc}
200015c8:	40021000 	andmi	r1, r2, r0
200015cc:	00005555 	andeq	r5, r0, r5, asr r5
200015d0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200015d4 <ascii_command>:

void ascii_command(unsigned char command){
200015d4:	b580      	push	{r7, lr}
200015d6:	b082      	sub	sp, #8
200015d8:	af00      	add	r7, sp, #0
200015da:	0002      	movs	r2, r0
200015dc:	1dfb      	adds	r3, r7, #7
200015de:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80)==0x80){}	/*vänta tills display är klar att ta emot kommando */
200015e0:	46c0      	nop			; (mov r8, r8)
200015e2:	f7ff ffd7 	bl	20001594 <ascii_read_status>
200015e6:	0003      	movs	r3, r0
200015e8:	001a      	movs	r2, r3
200015ea:	2380      	movs	r3, #128	; 0x80
200015ec:	4013      	ands	r3, r2
200015ee:	2b80      	cmp	r3, #128	; 0x80
200015f0:	d0f7      	beq.n	200015e2 <ascii_command+0xe>
	delaymicros(8); 								/*latenstid för kommando*/
200015f2:	2008      	movs	r0, #8
200015f4:	f7fe fd50 	bl	20000098 <delaymicros>
	ascii_write_cmd(command);						
200015f8:	1dfb      	adds	r3, r7, #7
200015fa:	781b      	ldrb	r3, [r3, #0]
200015fc:	0018      	movs	r0, r3
200015fe:	f7ff ff6b 	bl	200014d8 <ascii_write_cmd>
	delaymillis (2); 								/*istället för 1,53 ms*/
20001602:	2002      	movs	r0, #2
20001604:	f7fe fd5d 	bl	200000c2 <delaymillis>
}
20001608:	46c0      	nop			; (mov r8, r8)
2000160a:	46bd      	mov	sp, r7
2000160c:	b002      	add	sp, #8
2000160e:	bd80      	pop	{r7, pc}

20001610 <ascii_init>:

void ascii_init(void){
20001610:	b580      	push	{r7, lr}
20001612:	af00      	add	r7, sp, #0
    delaymicros(20);
20001614:	2014      	movs	r0, #20
20001616:	f7fe fd3f 	bl	20000098 <delaymicros>
	ascii_write_controller(0x38);   //2 rader, 5x8 punkter
2000161a:	2038      	movs	r0, #56	; 0x38
2000161c:	f7ff ff44 	bl	200014a8 <ascii_write_controller>
	delaymicros(39);
20001620:	2027      	movs	r0, #39	; 0x27
20001622:	f7fe fd39 	bl	20000098 <delaymicros>
    
    delaymicros(20);
20001626:	2014      	movs	r0, #20
20001628:	f7fe fd36 	bl	20000098 <delaymicros>
	ascii_write_controller(0x0E);      // Tänd display, tänd markör ("cursor"), konstant visning.
2000162c:	200e      	movs	r0, #14
2000162e:	f7ff ff3b 	bl	200014a8 <ascii_write_controller>
	delaymicros(39);
20001632:	2027      	movs	r0, #39	; 0x27
20001634:	f7fe fd30 	bl	20000098 <delaymicros>
	
	delaymicros(20);
20001638:	2014      	movs	r0, #20
2000163a:	f7fe fd2d 	bl	20000098 <delaymicros>
	ascii_write_controller(0x01);  	// Clear disp
2000163e:	2001      	movs	r0, #1
20001640:	f7ff ff32 	bl	200014a8 <ascii_write_controller>
	delaymicros(39);
20001644:	2027      	movs	r0, #39	; 0x27
20001646:	f7fe fd27 	bl	20000098 <delaymicros>
	
	delaymicros(20);
2000164a:	2014      	movs	r0, #20
2000164c:	f7fe fd24 	bl	20000098 <delaymicros>
	ascii_write_controller(0x06);  // Adressering med "increment", inget skift av adressbuffern
20001650:	2006      	movs	r0, #6
20001652:	f7ff ff29 	bl	200014a8 <ascii_write_controller>
	delaymicros(39);					/* adressering med increment, inget skift av adressbufferten*/
20001656:	2027      	movs	r0, #39	; 0x27
20001658:	f7fe fd1e 	bl	20000098 <delaymicros>
}
2000165c:	46c0      	nop			; (mov r8, r8)
2000165e:	46bd      	mov	sp, r7
20001660:	bd80      	pop	{r7, pc}

20001662 <ascii_clear_disp>:

void ascii_clear_disp(){
20001662:	b580      	push	{r7, lr}
20001664:	af00      	add	r7, sp, #0
    delaymicros(20);
20001666:	2014      	movs	r0, #20
20001668:	f7fe fd16 	bl	20000098 <delaymicros>
	ascii_write_controller(0x01);  	// Clear disp
2000166c:	2001      	movs	r0, #1
2000166e:	f7ff ff1b 	bl	200014a8 <ascii_write_controller>
	delaymicros(39);
20001672:	2027      	movs	r0, #39	; 0x27
20001674:	f7fe fd10 	bl	20000098 <delaymicros>
}
20001678:	46c0      	nop			; (mov r8, r8)
2000167a:	46bd      	mov	sp, r7
2000167c:	bd80      	pop	{r7, pc}

2000167e <ascii_write_char>:

void ascii_write_char(unsigned char c){
2000167e:	b580      	push	{r7, lr}
20001680:	b082      	sub	sp, #8
20001682:	af00      	add	r7, sp, #0
20001684:	0002      	movs	r2, r0
20001686:	1dfb      	adds	r3, r7, #7
20001688:	701a      	strb	r2, [r3, #0]
	while ((ascii_read_status() & 0x80)==0x80){}	/*vänta tills display är klar att ta emot kommando */
2000168a:	46c0      	nop			; (mov r8, r8)
2000168c:	f7ff ff82 	bl	20001594 <ascii_read_status>
20001690:	0003      	movs	r3, r0
20001692:	001a      	movs	r2, r3
20001694:	2380      	movs	r3, #128	; 0x80
20001696:	4013      	ands	r3, r2
20001698:	2b80      	cmp	r3, #128	; 0x80
2000169a:	d0f7      	beq.n	2000168c <ascii_write_char+0xe>
	delaymicros(8); 
2000169c:	2008      	movs	r0, #8
2000169e:	f7fe fcfb 	bl	20000098 <delaymicros>
	ascii_write_data(c);
200016a2:	1dfb      	adds	r3, r7, #7
200016a4:	781b      	ldrb	r3, [r3, #0]
200016a6:	0018      	movs	r0, r3
200016a8:	f7ff ff28 	bl	200014fc <ascii_write_data>
	delaymillis (2); 
200016ac:	2002      	movs	r0, #2
200016ae:	f7fe fd08 	bl	200000c2 <delaymillis>
}
200016b2:	46c0      	nop			; (mov r8, r8)
200016b4:	46bd      	mov	sp, r7
200016b6:	b002      	add	sp, #8
200016b8:	bd80      	pop	{r7, pc}

200016ba <ascii_gotoxy>:

void ascii_gotoxy( int column, int row){
200016ba:	b580      	push	{r7, lr}
200016bc:	b084      	sub	sp, #16
200016be:	af00      	add	r7, sp, #0
200016c0:	6078      	str	r0, [r7, #4]
200016c2:	6039      	str	r1, [r7, #0]
	if(row >=1 && row <=20 && column >=1 && column <=2){
200016c4:	683b      	ldr	r3, [r7, #0]
200016c6:	2b00      	cmp	r3, #0
200016c8:	dd1a      	ble.n	20001700 <ascii_gotoxy+0x46>
200016ca:	683b      	ldr	r3, [r7, #0]
200016cc:	2b14      	cmp	r3, #20
200016ce:	dc17      	bgt.n	20001700 <ascii_gotoxy+0x46>
200016d0:	687b      	ldr	r3, [r7, #4]
200016d2:	2b00      	cmp	r3, #0
200016d4:	dd14      	ble.n	20001700 <ascii_gotoxy+0x46>
200016d6:	687b      	ldr	r3, [r7, #4]
200016d8:	2b02      	cmp	r3, #2
200016da:	dc11      	bgt.n	20001700 <ascii_gotoxy+0x46>
		unsigned int adress = row-1;
200016dc:	683b      	ldr	r3, [r7, #0]
200016de:	3b01      	subs	r3, #1
200016e0:	60fb      	str	r3, [r7, #12]
		if (column == 2){
200016e2:	687b      	ldr	r3, [r7, #4]
200016e4:	2b02      	cmp	r3, #2
200016e6:	d102      	bne.n	200016ee <ascii_gotoxy+0x34>
			adress = adress + 0x40;
200016e8:	68fb      	ldr	r3, [r7, #12]
200016ea:	3340      	adds	r3, #64	; 0x40
200016ec:	60fb      	str	r3, [r7, #12]
		}
		ascii_write_cmd(0x80 | adress);
200016ee:	68fb      	ldr	r3, [r7, #12]
200016f0:	b2db      	uxtb	r3, r3
200016f2:	2280      	movs	r2, #128	; 0x80
200016f4:	4252      	negs	r2, r2
200016f6:	4313      	orrs	r3, r2
200016f8:	b2db      	uxtb	r3, r3
200016fa:	0018      	movs	r0, r3
200016fc:	f7ff feec 	bl	200014d8 <ascii_write_cmd>
	}
}
20001700:	46c0      	nop			; (mov r8, r8)
20001702:	46bd      	mov	sp, r7
20001704:	b004      	add	sp, #16
20001706:	bd80      	pop	{r7, pc}

20001708 <stringToAscii>:

void stringToAscii(char str[], int col, int row){
20001708:	b580      	push	{r7, lr}
2000170a:	b086      	sub	sp, #24
2000170c:	af00      	add	r7, sp, #0
2000170e:	60f8      	str	r0, [r7, #12]
20001710:	60b9      	str	r1, [r7, #8]
20001712:	607a      	str	r2, [r7, #4]
    graphic_ctrl_bit_clear(B_E);
20001714:	2040      	movs	r0, #64	; 0x40
20001716:	f7ff fb39 	bl	20000d8c <graphic_ctrl_bit_clear>
    ascii_ctrl_bit_set(B_E);
2000171a:	2040      	movs	r0, #64	; 0x40
2000171c:	f7ff fe7e 	bl	2000141c <ascii_ctrl_bit_set>
    
	char *s;
	ascii_gotoxy(col,row);
20001720:	687a      	ldr	r2, [r7, #4]
20001722:	68bb      	ldr	r3, [r7, #8]
20001724:	0011      	movs	r1, r2
20001726:	0018      	movs	r0, r3
20001728:	f7ff ffc7 	bl	200016ba <ascii_gotoxy>
	s = str;
2000172c:	68fb      	ldr	r3, [r7, #12]
2000172e:	617b      	str	r3, [r7, #20]
	while (*s)
20001730:	e006      	b.n	20001740 <stringToAscii+0x38>
		ascii_write_char(*s++);
20001732:	697b      	ldr	r3, [r7, #20]
20001734:	1c5a      	adds	r2, r3, #1
20001736:	617a      	str	r2, [r7, #20]
20001738:	781b      	ldrb	r3, [r3, #0]
2000173a:	0018      	movs	r0, r3
2000173c:	f7ff ff9f 	bl	2000167e <ascii_write_char>
	while (*s)
20001740:	697b      	ldr	r3, [r7, #20]
20001742:	781b      	ldrb	r3, [r3, #0]
20001744:	2b00      	cmp	r3, #0
20001746:	d1f4      	bne.n	20001732 <stringToAscii+0x2a>
	
    ascii_ctrl_bit_clear(B_E);
20001748:	2040      	movs	r0, #64	; 0x40
2000174a:	f7ff fe89 	bl	20001460 <ascii_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_E);
2000174e:	2040      	movs	r0, #64	; 0x40
20001750:	f7ff fafa 	bl	20000d48 <graphic_ctrl_bit_set>
}
20001754:	46c0      	nop			; (mov r8, r8)
20001756:	46bd      	mov	sp, r7
20001758:	b006      	add	sp, #24
2000175a:	bd80      	pop	{r7, pc}

2000175c <__udivsi3>:
2000175c:	2200      	movs	r2, #0
2000175e:	0843      	lsrs	r3, r0, #1
20001760:	428b      	cmp	r3, r1
20001762:	d374      	bcc.n	2000184e <__udivsi3+0xf2>
20001764:	0903      	lsrs	r3, r0, #4
20001766:	428b      	cmp	r3, r1
20001768:	d35f      	bcc.n	2000182a <__udivsi3+0xce>
2000176a:	0a03      	lsrs	r3, r0, #8
2000176c:	428b      	cmp	r3, r1
2000176e:	d344      	bcc.n	200017fa <__udivsi3+0x9e>
20001770:	0b03      	lsrs	r3, r0, #12
20001772:	428b      	cmp	r3, r1
20001774:	d328      	bcc.n	200017c8 <__udivsi3+0x6c>
20001776:	0c03      	lsrs	r3, r0, #16
20001778:	428b      	cmp	r3, r1
2000177a:	d30d      	bcc.n	20001798 <__udivsi3+0x3c>
2000177c:	22ff      	movs	r2, #255	; 0xff
2000177e:	0209      	lsls	r1, r1, #8
20001780:	ba12      	rev	r2, r2
20001782:	0c03      	lsrs	r3, r0, #16
20001784:	428b      	cmp	r3, r1
20001786:	d302      	bcc.n	2000178e <__udivsi3+0x32>
20001788:	1212      	asrs	r2, r2, #8
2000178a:	0209      	lsls	r1, r1, #8
2000178c:	d065      	beq.n	2000185a <__udivsi3+0xfe>
2000178e:	0b03      	lsrs	r3, r0, #12
20001790:	428b      	cmp	r3, r1
20001792:	d319      	bcc.n	200017c8 <__udivsi3+0x6c>
20001794:	e000      	b.n	20001798 <__udivsi3+0x3c>
20001796:	0a09      	lsrs	r1, r1, #8
20001798:	0bc3      	lsrs	r3, r0, #15
2000179a:	428b      	cmp	r3, r1
2000179c:	d301      	bcc.n	200017a2 <__udivsi3+0x46>
2000179e:	03cb      	lsls	r3, r1, #15
200017a0:	1ac0      	subs	r0, r0, r3
200017a2:	4152      	adcs	r2, r2
200017a4:	0b83      	lsrs	r3, r0, #14
200017a6:	428b      	cmp	r3, r1
200017a8:	d301      	bcc.n	200017ae <__udivsi3+0x52>
200017aa:	038b      	lsls	r3, r1, #14
200017ac:	1ac0      	subs	r0, r0, r3
200017ae:	4152      	adcs	r2, r2
200017b0:	0b43      	lsrs	r3, r0, #13
200017b2:	428b      	cmp	r3, r1
200017b4:	d301      	bcc.n	200017ba <__udivsi3+0x5e>
200017b6:	034b      	lsls	r3, r1, #13
200017b8:	1ac0      	subs	r0, r0, r3
200017ba:	4152      	adcs	r2, r2
200017bc:	0b03      	lsrs	r3, r0, #12
200017be:	428b      	cmp	r3, r1
200017c0:	d301      	bcc.n	200017c6 <__udivsi3+0x6a>
200017c2:	030b      	lsls	r3, r1, #12
200017c4:	1ac0      	subs	r0, r0, r3
200017c6:	4152      	adcs	r2, r2
200017c8:	0ac3      	lsrs	r3, r0, #11
200017ca:	428b      	cmp	r3, r1
200017cc:	d301      	bcc.n	200017d2 <__udivsi3+0x76>
200017ce:	02cb      	lsls	r3, r1, #11
200017d0:	1ac0      	subs	r0, r0, r3
200017d2:	4152      	adcs	r2, r2
200017d4:	0a83      	lsrs	r3, r0, #10
200017d6:	428b      	cmp	r3, r1
200017d8:	d301      	bcc.n	200017de <__udivsi3+0x82>
200017da:	028b      	lsls	r3, r1, #10
200017dc:	1ac0      	subs	r0, r0, r3
200017de:	4152      	adcs	r2, r2
200017e0:	0a43      	lsrs	r3, r0, #9
200017e2:	428b      	cmp	r3, r1
200017e4:	d301      	bcc.n	200017ea <__udivsi3+0x8e>
200017e6:	024b      	lsls	r3, r1, #9
200017e8:	1ac0      	subs	r0, r0, r3
200017ea:	4152      	adcs	r2, r2
200017ec:	0a03      	lsrs	r3, r0, #8
200017ee:	428b      	cmp	r3, r1
200017f0:	d301      	bcc.n	200017f6 <__udivsi3+0x9a>
200017f2:	020b      	lsls	r3, r1, #8
200017f4:	1ac0      	subs	r0, r0, r3
200017f6:	4152      	adcs	r2, r2
200017f8:	d2cd      	bcs.n	20001796 <__udivsi3+0x3a>
200017fa:	09c3      	lsrs	r3, r0, #7
200017fc:	428b      	cmp	r3, r1
200017fe:	d301      	bcc.n	20001804 <__udivsi3+0xa8>
20001800:	01cb      	lsls	r3, r1, #7
20001802:	1ac0      	subs	r0, r0, r3
20001804:	4152      	adcs	r2, r2
20001806:	0983      	lsrs	r3, r0, #6
20001808:	428b      	cmp	r3, r1
2000180a:	d301      	bcc.n	20001810 <__udivsi3+0xb4>
2000180c:	018b      	lsls	r3, r1, #6
2000180e:	1ac0      	subs	r0, r0, r3
20001810:	4152      	adcs	r2, r2
20001812:	0943      	lsrs	r3, r0, #5
20001814:	428b      	cmp	r3, r1
20001816:	d301      	bcc.n	2000181c <__udivsi3+0xc0>
20001818:	014b      	lsls	r3, r1, #5
2000181a:	1ac0      	subs	r0, r0, r3
2000181c:	4152      	adcs	r2, r2
2000181e:	0903      	lsrs	r3, r0, #4
20001820:	428b      	cmp	r3, r1
20001822:	d301      	bcc.n	20001828 <__udivsi3+0xcc>
20001824:	010b      	lsls	r3, r1, #4
20001826:	1ac0      	subs	r0, r0, r3
20001828:	4152      	adcs	r2, r2
2000182a:	08c3      	lsrs	r3, r0, #3
2000182c:	428b      	cmp	r3, r1
2000182e:	d301      	bcc.n	20001834 <__udivsi3+0xd8>
20001830:	00cb      	lsls	r3, r1, #3
20001832:	1ac0      	subs	r0, r0, r3
20001834:	4152      	adcs	r2, r2
20001836:	0883      	lsrs	r3, r0, #2
20001838:	428b      	cmp	r3, r1
2000183a:	d301      	bcc.n	20001840 <__udivsi3+0xe4>
2000183c:	008b      	lsls	r3, r1, #2
2000183e:	1ac0      	subs	r0, r0, r3
20001840:	4152      	adcs	r2, r2
20001842:	0843      	lsrs	r3, r0, #1
20001844:	428b      	cmp	r3, r1
20001846:	d301      	bcc.n	2000184c <__udivsi3+0xf0>
20001848:	004b      	lsls	r3, r1, #1
2000184a:	1ac0      	subs	r0, r0, r3
2000184c:	4152      	adcs	r2, r2
2000184e:	1a41      	subs	r1, r0, r1
20001850:	d200      	bcs.n	20001854 <__udivsi3+0xf8>
20001852:	4601      	mov	r1, r0
20001854:	4152      	adcs	r2, r2
20001856:	4610      	mov	r0, r2
20001858:	4770      	bx	lr
2000185a:	e7ff      	b.n	2000185c <__udivsi3+0x100>
2000185c:	b501      	push	{r0, lr}
2000185e:	2000      	movs	r0, #0
20001860:	f000 f8f0 	bl	20001a44 <__aeabi_idiv0>
20001864:	bd02      	pop	{r1, pc}
20001866:	46c0      	nop			; (mov r8, r8)

20001868 <__aeabi_uidivmod>:
20001868:	2900      	cmp	r1, #0
2000186a:	d0f7      	beq.n	2000185c <__udivsi3+0x100>
2000186c:	e776      	b.n	2000175c <__udivsi3>
2000186e:	4770      	bx	lr

20001870 <__divsi3>:
20001870:	4603      	mov	r3, r0
20001872:	430b      	orrs	r3, r1
20001874:	d47f      	bmi.n	20001976 <__divsi3+0x106>
20001876:	2200      	movs	r2, #0
20001878:	0843      	lsrs	r3, r0, #1
2000187a:	428b      	cmp	r3, r1
2000187c:	d374      	bcc.n	20001968 <__divsi3+0xf8>
2000187e:	0903      	lsrs	r3, r0, #4
20001880:	428b      	cmp	r3, r1
20001882:	d35f      	bcc.n	20001944 <__divsi3+0xd4>
20001884:	0a03      	lsrs	r3, r0, #8
20001886:	428b      	cmp	r3, r1
20001888:	d344      	bcc.n	20001914 <__divsi3+0xa4>
2000188a:	0b03      	lsrs	r3, r0, #12
2000188c:	428b      	cmp	r3, r1
2000188e:	d328      	bcc.n	200018e2 <__divsi3+0x72>
20001890:	0c03      	lsrs	r3, r0, #16
20001892:	428b      	cmp	r3, r1
20001894:	d30d      	bcc.n	200018b2 <__divsi3+0x42>
20001896:	22ff      	movs	r2, #255	; 0xff
20001898:	0209      	lsls	r1, r1, #8
2000189a:	ba12      	rev	r2, r2
2000189c:	0c03      	lsrs	r3, r0, #16
2000189e:	428b      	cmp	r3, r1
200018a0:	d302      	bcc.n	200018a8 <__divsi3+0x38>
200018a2:	1212      	asrs	r2, r2, #8
200018a4:	0209      	lsls	r1, r1, #8
200018a6:	d065      	beq.n	20001974 <__divsi3+0x104>
200018a8:	0b03      	lsrs	r3, r0, #12
200018aa:	428b      	cmp	r3, r1
200018ac:	d319      	bcc.n	200018e2 <__divsi3+0x72>
200018ae:	e000      	b.n	200018b2 <__divsi3+0x42>
200018b0:	0a09      	lsrs	r1, r1, #8
200018b2:	0bc3      	lsrs	r3, r0, #15
200018b4:	428b      	cmp	r3, r1
200018b6:	d301      	bcc.n	200018bc <__divsi3+0x4c>
200018b8:	03cb      	lsls	r3, r1, #15
200018ba:	1ac0      	subs	r0, r0, r3
200018bc:	4152      	adcs	r2, r2
200018be:	0b83      	lsrs	r3, r0, #14
200018c0:	428b      	cmp	r3, r1
200018c2:	d301      	bcc.n	200018c8 <__divsi3+0x58>
200018c4:	038b      	lsls	r3, r1, #14
200018c6:	1ac0      	subs	r0, r0, r3
200018c8:	4152      	adcs	r2, r2
200018ca:	0b43      	lsrs	r3, r0, #13
200018cc:	428b      	cmp	r3, r1
200018ce:	d301      	bcc.n	200018d4 <__divsi3+0x64>
200018d0:	034b      	lsls	r3, r1, #13
200018d2:	1ac0      	subs	r0, r0, r3
200018d4:	4152      	adcs	r2, r2
200018d6:	0b03      	lsrs	r3, r0, #12
200018d8:	428b      	cmp	r3, r1
200018da:	d301      	bcc.n	200018e0 <__divsi3+0x70>
200018dc:	030b      	lsls	r3, r1, #12
200018de:	1ac0      	subs	r0, r0, r3
200018e0:	4152      	adcs	r2, r2
200018e2:	0ac3      	lsrs	r3, r0, #11
200018e4:	428b      	cmp	r3, r1
200018e6:	d301      	bcc.n	200018ec <__divsi3+0x7c>
200018e8:	02cb      	lsls	r3, r1, #11
200018ea:	1ac0      	subs	r0, r0, r3
200018ec:	4152      	adcs	r2, r2
200018ee:	0a83      	lsrs	r3, r0, #10
200018f0:	428b      	cmp	r3, r1
200018f2:	d301      	bcc.n	200018f8 <__divsi3+0x88>
200018f4:	028b      	lsls	r3, r1, #10
200018f6:	1ac0      	subs	r0, r0, r3
200018f8:	4152      	adcs	r2, r2
200018fa:	0a43      	lsrs	r3, r0, #9
200018fc:	428b      	cmp	r3, r1
200018fe:	d301      	bcc.n	20001904 <__divsi3+0x94>
20001900:	024b      	lsls	r3, r1, #9
20001902:	1ac0      	subs	r0, r0, r3
20001904:	4152      	adcs	r2, r2
20001906:	0a03      	lsrs	r3, r0, #8
20001908:	428b      	cmp	r3, r1
2000190a:	d301      	bcc.n	20001910 <__divsi3+0xa0>
2000190c:	020b      	lsls	r3, r1, #8
2000190e:	1ac0      	subs	r0, r0, r3
20001910:	4152      	adcs	r2, r2
20001912:	d2cd      	bcs.n	200018b0 <__divsi3+0x40>
20001914:	09c3      	lsrs	r3, r0, #7
20001916:	428b      	cmp	r3, r1
20001918:	d301      	bcc.n	2000191e <__divsi3+0xae>
2000191a:	01cb      	lsls	r3, r1, #7
2000191c:	1ac0      	subs	r0, r0, r3
2000191e:	4152      	adcs	r2, r2
20001920:	0983      	lsrs	r3, r0, #6
20001922:	428b      	cmp	r3, r1
20001924:	d301      	bcc.n	2000192a <__divsi3+0xba>
20001926:	018b      	lsls	r3, r1, #6
20001928:	1ac0      	subs	r0, r0, r3
2000192a:	4152      	adcs	r2, r2
2000192c:	0943      	lsrs	r3, r0, #5
2000192e:	428b      	cmp	r3, r1
20001930:	d301      	bcc.n	20001936 <__divsi3+0xc6>
20001932:	014b      	lsls	r3, r1, #5
20001934:	1ac0      	subs	r0, r0, r3
20001936:	4152      	adcs	r2, r2
20001938:	0903      	lsrs	r3, r0, #4
2000193a:	428b      	cmp	r3, r1
2000193c:	d301      	bcc.n	20001942 <__divsi3+0xd2>
2000193e:	010b      	lsls	r3, r1, #4
20001940:	1ac0      	subs	r0, r0, r3
20001942:	4152      	adcs	r2, r2
20001944:	08c3      	lsrs	r3, r0, #3
20001946:	428b      	cmp	r3, r1
20001948:	d301      	bcc.n	2000194e <__divsi3+0xde>
2000194a:	00cb      	lsls	r3, r1, #3
2000194c:	1ac0      	subs	r0, r0, r3
2000194e:	4152      	adcs	r2, r2
20001950:	0883      	lsrs	r3, r0, #2
20001952:	428b      	cmp	r3, r1
20001954:	d301      	bcc.n	2000195a <__divsi3+0xea>
20001956:	008b      	lsls	r3, r1, #2
20001958:	1ac0      	subs	r0, r0, r3
2000195a:	4152      	adcs	r2, r2
2000195c:	0843      	lsrs	r3, r0, #1
2000195e:	428b      	cmp	r3, r1
20001960:	d301      	bcc.n	20001966 <__divsi3+0xf6>
20001962:	004b      	lsls	r3, r1, #1
20001964:	1ac0      	subs	r0, r0, r3
20001966:	4152      	adcs	r2, r2
20001968:	1a41      	subs	r1, r0, r1
2000196a:	d200      	bcs.n	2000196e <__divsi3+0xfe>
2000196c:	4601      	mov	r1, r0
2000196e:	4152      	adcs	r2, r2
20001970:	4610      	mov	r0, r2
20001972:	4770      	bx	lr
20001974:	e05d      	b.n	20001a32 <__divsi3+0x1c2>
20001976:	0fca      	lsrs	r2, r1, #31
20001978:	d000      	beq.n	2000197c <__divsi3+0x10c>
2000197a:	4249      	negs	r1, r1
2000197c:	1003      	asrs	r3, r0, #32
2000197e:	d300      	bcc.n	20001982 <__divsi3+0x112>
20001980:	4240      	negs	r0, r0
20001982:	4053      	eors	r3, r2
20001984:	2200      	movs	r2, #0
20001986:	469c      	mov	ip, r3
20001988:	0903      	lsrs	r3, r0, #4
2000198a:	428b      	cmp	r3, r1
2000198c:	d32d      	bcc.n	200019ea <__divsi3+0x17a>
2000198e:	0a03      	lsrs	r3, r0, #8
20001990:	428b      	cmp	r3, r1
20001992:	d312      	bcc.n	200019ba <__divsi3+0x14a>
20001994:	22fc      	movs	r2, #252	; 0xfc
20001996:	0189      	lsls	r1, r1, #6
20001998:	ba12      	rev	r2, r2
2000199a:	0a03      	lsrs	r3, r0, #8
2000199c:	428b      	cmp	r3, r1
2000199e:	d30c      	bcc.n	200019ba <__divsi3+0x14a>
200019a0:	0189      	lsls	r1, r1, #6
200019a2:	1192      	asrs	r2, r2, #6
200019a4:	428b      	cmp	r3, r1
200019a6:	d308      	bcc.n	200019ba <__divsi3+0x14a>
200019a8:	0189      	lsls	r1, r1, #6
200019aa:	1192      	asrs	r2, r2, #6
200019ac:	428b      	cmp	r3, r1
200019ae:	d304      	bcc.n	200019ba <__divsi3+0x14a>
200019b0:	0189      	lsls	r1, r1, #6
200019b2:	d03a      	beq.n	20001a2a <__divsi3+0x1ba>
200019b4:	1192      	asrs	r2, r2, #6
200019b6:	e000      	b.n	200019ba <__divsi3+0x14a>
200019b8:	0989      	lsrs	r1, r1, #6
200019ba:	09c3      	lsrs	r3, r0, #7
200019bc:	428b      	cmp	r3, r1
200019be:	d301      	bcc.n	200019c4 <__divsi3+0x154>
200019c0:	01cb      	lsls	r3, r1, #7
200019c2:	1ac0      	subs	r0, r0, r3
200019c4:	4152      	adcs	r2, r2
200019c6:	0983      	lsrs	r3, r0, #6
200019c8:	428b      	cmp	r3, r1
200019ca:	d301      	bcc.n	200019d0 <__divsi3+0x160>
200019cc:	018b      	lsls	r3, r1, #6
200019ce:	1ac0      	subs	r0, r0, r3
200019d0:	4152      	adcs	r2, r2
200019d2:	0943      	lsrs	r3, r0, #5
200019d4:	428b      	cmp	r3, r1
200019d6:	d301      	bcc.n	200019dc <__divsi3+0x16c>
200019d8:	014b      	lsls	r3, r1, #5
200019da:	1ac0      	subs	r0, r0, r3
200019dc:	4152      	adcs	r2, r2
200019de:	0903      	lsrs	r3, r0, #4
200019e0:	428b      	cmp	r3, r1
200019e2:	d301      	bcc.n	200019e8 <__divsi3+0x178>
200019e4:	010b      	lsls	r3, r1, #4
200019e6:	1ac0      	subs	r0, r0, r3
200019e8:	4152      	adcs	r2, r2
200019ea:	08c3      	lsrs	r3, r0, #3
200019ec:	428b      	cmp	r3, r1
200019ee:	d301      	bcc.n	200019f4 <__divsi3+0x184>
200019f0:	00cb      	lsls	r3, r1, #3
200019f2:	1ac0      	subs	r0, r0, r3
200019f4:	4152      	adcs	r2, r2
200019f6:	0883      	lsrs	r3, r0, #2
200019f8:	428b      	cmp	r3, r1
200019fa:	d301      	bcc.n	20001a00 <__divsi3+0x190>
200019fc:	008b      	lsls	r3, r1, #2
200019fe:	1ac0      	subs	r0, r0, r3
20001a00:	4152      	adcs	r2, r2
20001a02:	d2d9      	bcs.n	200019b8 <__divsi3+0x148>
20001a04:	0843      	lsrs	r3, r0, #1
20001a06:	428b      	cmp	r3, r1
20001a08:	d301      	bcc.n	20001a0e <__divsi3+0x19e>
20001a0a:	004b      	lsls	r3, r1, #1
20001a0c:	1ac0      	subs	r0, r0, r3
20001a0e:	4152      	adcs	r2, r2
20001a10:	1a41      	subs	r1, r0, r1
20001a12:	d200      	bcs.n	20001a16 <__divsi3+0x1a6>
20001a14:	4601      	mov	r1, r0
20001a16:	4663      	mov	r3, ip
20001a18:	4152      	adcs	r2, r2
20001a1a:	105b      	asrs	r3, r3, #1
20001a1c:	4610      	mov	r0, r2
20001a1e:	d301      	bcc.n	20001a24 <__divsi3+0x1b4>
20001a20:	4240      	negs	r0, r0
20001a22:	2b00      	cmp	r3, #0
20001a24:	d500      	bpl.n	20001a28 <__divsi3+0x1b8>
20001a26:	4249      	negs	r1, r1
20001a28:	4770      	bx	lr
20001a2a:	4663      	mov	r3, ip
20001a2c:	105b      	asrs	r3, r3, #1
20001a2e:	d300      	bcc.n	20001a32 <__divsi3+0x1c2>
20001a30:	4240      	negs	r0, r0
20001a32:	b501      	push	{r0, lr}
20001a34:	2000      	movs	r0, #0
20001a36:	f000 f805 	bl	20001a44 <__aeabi_idiv0>
20001a3a:	bd02      	pop	{r1, pc}

20001a3c <__aeabi_idivmod>:
20001a3c:	2900      	cmp	r1, #0
20001a3e:	d0f8      	beq.n	20001a32 <__divsi3+0x1c2>
20001a40:	e716      	b.n	20001870 <__divsi3>
20001a42:	4770      	bx	lr

20001a44 <__aeabi_idiv0>:
20001a44:	4770      	bx	lr
20001a46:	46c0      	nop			; (mov r8, r8)

20001a48 <__itoa>:
20001a48:	1e93      	subs	r3, r2, #2
20001a4a:	b510      	push	{r4, lr}
20001a4c:	000c      	movs	r4, r1
20001a4e:	2b22      	cmp	r3, #34	; 0x22
20001a50:	d904      	bls.n	20001a5c <__itoa+0x14>
20001a52:	2300      	movs	r3, #0
20001a54:	001c      	movs	r4, r3
20001a56:	700b      	strb	r3, [r1, #0]
20001a58:	0020      	movs	r0, r4
20001a5a:	bd10      	pop	{r4, pc}
20001a5c:	2a0a      	cmp	r2, #10
20001a5e:	d109      	bne.n	20001a74 <__itoa+0x2c>
20001a60:	2800      	cmp	r0, #0
20001a62:	da07      	bge.n	20001a74 <__itoa+0x2c>
20001a64:	232d      	movs	r3, #45	; 0x2d
20001a66:	700b      	strb	r3, [r1, #0]
20001a68:	2101      	movs	r1, #1
20001a6a:	4240      	negs	r0, r0
20001a6c:	1861      	adds	r1, r4, r1
20001a6e:	f000 f811 	bl	20001a94 <__utoa>
20001a72:	e7f1      	b.n	20001a58 <__itoa+0x10>
20001a74:	2100      	movs	r1, #0
20001a76:	e7f9      	b.n	20001a6c <__itoa+0x24>

20001a78 <itoa>:
20001a78:	b510      	push	{r4, lr}
20001a7a:	f7ff ffe5 	bl	20001a48 <__itoa>
20001a7e:	bd10      	pop	{r4, pc}

20001a80 <memcpy>:
20001a80:	2300      	movs	r3, #0
20001a82:	b510      	push	{r4, lr}
20001a84:	429a      	cmp	r2, r3
20001a86:	d100      	bne.n	20001a8a <memcpy+0xa>
20001a88:	bd10      	pop	{r4, pc}
20001a8a:	5ccc      	ldrb	r4, [r1, r3]
20001a8c:	54c4      	strb	r4, [r0, r3]
20001a8e:	3301      	adds	r3, #1
20001a90:	e7f8      	b.n	20001a84 <memcpy+0x4>
	...

20001a94 <__utoa>:
20001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
20001a96:	0017      	movs	r7, r2
20001a98:	b08d      	sub	sp, #52	; 0x34
20001a9a:	2225      	movs	r2, #37	; 0x25
20001a9c:	0006      	movs	r6, r0
20001a9e:	000d      	movs	r5, r1
20001aa0:	a802      	add	r0, sp, #8
20001aa2:	4914      	ldr	r1, [pc, #80]	; (20001af4 <__utoa+0x60>)
20001aa4:	f7ff ffec 	bl	20001a80 <memcpy>
20001aa8:	aa02      	add	r2, sp, #8
20001aaa:	1ebb      	subs	r3, r7, #2
20001aac:	2400      	movs	r4, #0
20001aae:	9201      	str	r2, [sp, #4]
20001ab0:	2b22      	cmp	r3, #34	; 0x22
20001ab2:	d905      	bls.n	20001ac0 <__utoa+0x2c>
20001ab4:	702c      	strb	r4, [r5, #0]
20001ab6:	0025      	movs	r5, r4
20001ab8:	0028      	movs	r0, r5
20001aba:	b00d      	add	sp, #52	; 0x34
20001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
20001abe:	0014      	movs	r4, r2
20001ac0:	0030      	movs	r0, r6
20001ac2:	0039      	movs	r1, r7
20001ac4:	f7ff fed0 	bl	20001868 <__aeabi_uidivmod>
20001ac8:	4684      	mov	ip, r0
20001aca:	9801      	ldr	r0, [sp, #4]
20001acc:	1c62      	adds	r2, r4, #1
20001ace:	18ab      	adds	r3, r5, r2
20001ad0:	5c41      	ldrb	r1, [r0, r1]
20001ad2:	1e5e      	subs	r6, r3, #1
20001ad4:	7031      	strb	r1, [r6, #0]
20001ad6:	4666      	mov	r6, ip
20001ad8:	2e00      	cmp	r6, #0
20001ada:	d1f0      	bne.n	20001abe <__utoa+0x2a>
20001adc:	701e      	strb	r6, [r3, #0]
20001ade:	002b      	movs	r3, r5
20001ae0:	1b5a      	subs	r2, r3, r5
20001ae2:	4294      	cmp	r4, r2
20001ae4:	dde8      	ble.n	20001ab8 <__utoa+0x24>
20001ae6:	781a      	ldrb	r2, [r3, #0]
20001ae8:	5d29      	ldrb	r1, [r5, r4]
20001aea:	7019      	strb	r1, [r3, #0]
20001aec:	552a      	strb	r2, [r5, r4]
20001aee:	3301      	adds	r3, #1
20001af0:	3c01      	subs	r4, #1
20001af2:	e7f5      	b.n	20001ae0 <__utoa+0x4c>
20001af4:	2000253c 	andcs	r2, r0, ip, lsr r5

20001af8 <utoa>:
20001af8:	b510      	push	{r4, lr}
20001afa:	f7ff ffcb 	bl	20001a94 <__utoa>
20001afe:	bd10      	pop	{r4, pc}

20001b00 <facingLeft>:
20001b00:	00000000 	andeq	r0, r0, r0

20001b04 <buffer.5307>:
	...

20001b18 <seed>:
20001b18:	00000000 	andeq	r0, r0, r0

20001b1c <backBuffer>:
	...

2000231c <pedro_still>:
2000231c:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20002320:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20002324:	1f1f7fff 	svcne	0x001f7fff
20002328:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
2000232c:	00806030 	addeq	r6, r0, r0, lsr r0
20002330:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20002334:	01831f1f 	orreq	r1, r3, pc, lsl pc
20002338:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
2000233c:	24000004 	strcs	r0, [r0], #-4
20002340:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20002344:	03010000 	movweq	r0, #4096	; 0x1000
20002348:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
2000234c:	148c8040 	strne	r8, [ip], #64	; 0x40
20002350:	1a283828 	bne	20a103f8 <Pedro+0xa0df9c>
20002354:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20002358:	06000000 	streq	r0, [r0], -r0
2000235c:	a47b0609 	ldrbtge	r0, [fp], #-1545	; 0xfffff9f7
20002360:	e53ed5a4 	ldr	sp, [lr, #-1444]!	; 0xfffffa5c
20002364:	0ac6bea5 	beq	1f1b1e00 <startup-0xe4e200>
20002368:	00000106 	andeq	r0, r0, r6, lsl #2

2000236c <pedro_jump>:
2000236c:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20002370:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20002374:	1f1f7fff 	svcne	0x001f7fff
20002378:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
2000237c:	00806030 	addeq	r6, r0, r0, lsr r0
20002380:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20002384:	01831f1f 	orreq	r1, r3, pc, lsl pc
20002388:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
2000238c:	24000004 	strcs	r0, [r0], #-4
20002390:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20002394:	03010000 	movweq	r0, #4096	; 0x1000
20002398:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
2000239c:	148c8040 	strne	r8, [ip], #64	; 0x40
200023a0:	1a283828 	bne	20a10448 <Pedro+0xa0dfec>
200023a4:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
200023a8:	76000000 	strvc	r0, [r0], -r0
200023ac:	242b7e49 	strtcs	r7, [fp], #-3657	; 0xfffff1b7
200023b0:	150e1514 	strne	r1, [lr, #-1300]	; 0xfffffaec
200023b4:	3a2a2615 	bcc	20a8bc10 <Pedro+0xa897b4>
200023b8:	00001d26 	andeq	r1, r0, r6, lsr #26

200023bc <pedro_walk1>:
200023bc:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
200023c0:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
200023c4:	1f1f7fff 	svcne	0x001f7fff
200023c8:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
200023cc:	00806030 	addeq	r6, r0, r0, lsr r0
200023d0:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
200023d4:	01831f1f 	orreq	r1, r3, pc, lsl pc
200023d8:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
200023dc:	24000004 	strcs	r0, [r0], #-4
200023e0:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
200023e4:	83010000 	movwhi	r0, #4096	; 0x1000
200023e8:	22b12c46 	adcscs	r2, r1, #17920	; 0x4600
200023ec:	148c8040 	strne	r8, [ip], #64	; 0x40
200023f0:	1a283828 	bne	20a10498 <Pedro+0xa0e03c>
200023f4:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
200023f8:	07000000 	streq	r0, [r0, -r0]
200023fc:	641b050a 	ldrvs	r0, [fp], #-1290	; 0xfffffaf6
20002400:	a5deb5a4 	ldrbge	fp, [lr, #1444]	; 0x5a4
20002404:	0a06ceb5 	beq	201b5ee0 <Pedro+0x1b3a84>
20002408:	00000106 	andeq	r0, r0, r6, lsl #2

2000240c <pedro_walk2>:
2000240c:	f0e0c000 			; <UNDEFINED> instruction: 0xf0e0c000
20002410:	fefcfcf8 	mrc2	12, 7, pc, cr12, cr8, {7}
20002414:	3e3efefe 	mrccc	14, 1, APSR_nzcv, cr14, cr14, {7}
20002418:	30381c1e 	eorscc	r1, r8, lr, lsl ip
2000241c:	0000c060 	andeq	ip, r0, r0, rrx
20002420:	8fffff3e 	svchi	0x00ffff3e
20002424:	03073f3f 	movweq	r3, #32575	; 0x7f3f
20002428:	68480817 	stmdavs	r8, {r0, r1, r2, r4, fp}^
2000242c:	48000008 	stmdami	r0, {r3}
20002430:	f00f04e4 			; <UNDEFINED> instruction: 0xf00f04e4
20002434:	07030000 	streq	r0, [r3, -r0]
20002438:	44a338cc 	strtmi	r3, [r3], #2252	; 0x8cc
2000243c:	28180080 	ldmdacs	r8, {r7}
20002440:	34507050 	ldrbcc	r7, [r0], #-80	; 0xffffffb0
20002444:	0ff00304 	svceq	0x00f00304
20002448:	00000000 	andeq	r0, r0, r0
2000244c:	a5ae7300 	strge	r7, [lr, #768]!	; 0x300
20002450:	e61d0bd6 			; <UNDEFINED> instruction: 0xe61d0bd6
20002454:	04c4bca6 	strbeq	fp, [r4], #3238	; 0xca6
20002458:	00010204 	andeq	r0, r1, r4, lsl #4

2000245c <Pedro>:
2000245c:	00000020 	andeq	r0, r0, r0, lsr #32
20002460:	00000014 	andeq	r0, r0, r4, lsl r0
20002464:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20002480:	2000231c 	andcs	r2, r0, ip, lsl r3
	...
2000248c:	00000020 	andeq	r0, r0, r0, lsr #32
20002490:	00000014 	andeq	r0, r0, r4, lsl r0
20002494:	00000010 	andeq	r0, r0, r0, lsl r0
	...
200024b0:	2000231c 	andcs	r2, r0, ip, lsl r3
	...
200024bc:	0a030201 	beq	200c2cc8 <Pedro+0xc086c>
200024c0:	0b060504 	bleq	201838d8 <Pedro+0x18147c>
200024c4:	0c090807 	stceq	8, cr0, [r9], {7}
200024c8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20002498 <Pedro+0x3c>
200024cc:	1c0c07f8 	stcne	7, cr0, [ip], {248}	; 0xf8
200024d0:	e00c3004 	and	r3, ip, r4
200024d4:	d81c87e8 	ldmdale	ip, {r3, r5, r6, r7, r8, r9, sl, pc}
200024d8:	20076006 	andcs	r6, r7, r6
200024dc:	600b200f 	andvs	r2, fp, pc
200024e0:	8fcdd039 	svchi	0x00cdd039
200024e4:	6004c004 	andvs	ip, r4, r4
200024e8:	1ff8300c 	svcne	0x00f8300c
200024ec:	5f5f5f5f 	svcpl	0x005f5f5f
200024f0:	5f6f6f5f 	svcpl	0x006f6f5f
200024f4:	5f5f385f 	svcpl	0x005f385f
200024f8:	6f5f6f5f 	svcvs	0x005f6f5f
200024fc:	6f5f5f6f 	svcvs	0x005f5f6f
20002500:	5f5f6f5f 	svcpl	0x005f6f5f
20002504:	5f385f5f 	svcpl	0x00385f5f
20002508:	5f386f5f 	svcpl	0x00386f5f
2000250c:	5f6f5f5f 	svcpl	0x006f5f5f
20002510:	5f5f5f5f 	svcpl	0x005f5f5f
20002514:	5f5f5f5f 	svcpl	0x005f5f5f
20002518:	5f5f5f6f 	svcpl	0x005f5f6f
2000251c:	6f5f5f5f 	svcvs	0x005f5f5f
20002520:	5f6f5f6f 	svcpl	0x006f5f6f
20002524:	5f6f385f 	svcpl	0x006f385f
20002528:	5f5f6f5f 	svcpl	0x005f6f5f
2000252c:	5f6f5f5f 	svcpl	0x006f5f5f
20002530:	5f5f5f6f 	svcpl	0x005f5f6f
20002534:	6f5f5f5f 	svcvs	0x005f5f5f
20002538:	5f5f5f5f 	svcpl	0x005f5f5f
2000253c:	33323130 	teqcc	r2, #48, 2
20002540:	37363534 			; <UNDEFINED> instruction: 0x37363534
20002544:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
20002548:	66656463 	strbtvs	r6, [r5], -r3, ror #8
2000254c:	6a696867 	bvs	21a5c6f0 <Pedro+0x1a5a294>
20002550:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
20002554:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
20002558:	76757473 			; <UNDEFINED> instruction: 0x76757473
2000255c:	7a797877 	bvc	21e60740 <Pedro+0x1e5e2e4>
20002560:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	000000a9 	andeq	r0, r0, r9, lsr #1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000035 	andeq	r0, r0, r5, lsr r0
      10:	0000cd0c 	andeq	ip, r0, ip, lsl #26
      14:	00000000 	andeq	r0, r0, r0
      18:	00001000 	andeq	r1, r0, r0
      1c:	0000d620 	andeq	sp, r0, r0, lsr #12
      20:	00000000 	andeq	r0, r0, r0
      24:	00f30200 	rscseq	r0, r3, r0, lsl #4
      28:	1f010000 	svcne	0x00010000
      2c:	200000c2 	andcs	r0, r0, r2, asr #1
      30:	00000024 	andeq	r0, r0, r4, lsr #32
      34:	00499c01 	subeq	r9, r9, r1, lsl #24
      38:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
      3c:	01000000 	mrseq	r0, (UNDEF: 0)
      40:	0000491f 	andeq	r4, r0, pc, lsl r9
      44:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      48:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
      4c:	00746e69 	rsbseq	r6, r4, r9, ror #28
      50:	00002902 	andeq	r2, r0, r2, lsl #18
      54:	98150100 	ldmdals	r5, {r8}
      58:	2a200000 	bcs	800060 <startup-0x1f7fffa0>
      5c:	01000000 	mrseq	r0, (UNDEF: 0)
      60:	00008a9c 	muleq	r0, ip, sl
      64:	002e0300 	eoreq	r0, lr, r0, lsl #6
      68:	15010000 	strne	r0, [r1, #-0]
      6c:	00000049 	andeq	r0, r0, r9, asr #32
      70:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
      74:	200000a0 	andcs	r0, r0, r0, lsr #1
      78:	0000001a 	andeq	r0, r0, sl, lsl r0
      7c:	01006906 	tsteq	r0, r6, lsl #18
      80:	00004919 	andeq	r4, r0, r9, lsl r9
      84:	74910200 	ldrvc	r0, [r1], #512	; 0x200
      88:	1d070000 	stcne	0, cr0, [r7, #-0]
      8c:	01000000 	mrseq	r0, (UNDEF: 0)
      90:	0000540c 	andeq	r5, r0, ip, lsl #8
      94:	00004420 	andeq	r4, r0, r0, lsr #8
      98:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
      9c:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
      a0:	00100301 	andseq	r0, r0, r1, lsl #6
      a4:	00442000 	subeq	r2, r4, r0
      a8:	9c010000 	stcls	0, cr0, [r1], {-0}
      ac:	00050e00 	andeq	r0, r5, r0, lsl #28
      b0:	76000400 	strvc	r0, [r0], -r0, lsl #8
      b4:	04000000 	streq	r0, [r0], #-0
      b8:	00003501 	andeq	r3, r0, r1, lsl #10
      bc:	01460c00 	cmpeq	r6, r0, lsl #24
      c0:	00000000 	andeq	r0, r0, r0
      c4:	00e80000 	rsceq	r0, r8, r0
      c8:	07302000 	ldreq	r2, [r0, -r0]!
      cc:	00870000 	addeq	r0, r7, r0
      d0:	41020000 	mrsmi	r0, (UNDEF: 2)
      d4:	30000002 	andcc	r0, r0, r2
      d8:	00c20b02 	sbceq	r0, r2, r2, lsl #22
      dc:	17030000 	strne	r0, [r3, -r0]
      e0:	02000002 	andeq	r0, r0, #2
      e4:	0000c20c 	andeq	ip, r0, ip, lsl #4
      e8:	a4030000 	strge	r0, [r3], #-0
      ec:	02000001 	andeq	r0, r0, #1
      f0:	0000c20d 	andeq	ip, r0, sp, lsl #4
      f4:	0b030400 	bleq	c10fc <startup-0x1ff3ef04>
      f8:	02000001 	andeq	r0, r0, #1
      fc:	0000c20e 	andeq	ip, r0, lr, lsl #4
     100:	ac030800 	stcge	8, cr0, [r3], {-0}
     104:	02000002 	andeq	r0, r0, #2
     108:	0000c20e 	andeq	ip, r0, lr, lsl #4
     10c:	c3030c00 	movwgt	r0, #15360	; 0x3c00
     110:	02000001 	andeq	r0, r0, #1
     114:	0000c20f 	andeq	ip, r0, pc, lsl #4
     118:	c8031000 	stmdagt	r3, {ip}
     11c:	02000001 	andeq	r0, r0, #1
     120:	0000c20f 	andeq	ip, r0, pc, lsl #4
     124:	80031400 	andhi	r1, r3, r0, lsl #8
     128:	02000001 	andeq	r0, r0, #1
     12c:	0000c210 	andeq	ip, r0, r0, lsl r2
     130:	85031800 	strhi	r1, [r3, #-2048]	; 0xfffff800
     134:	02000001 	andeq	r0, r0, #1
     138:	0000c210 	andeq	ip, r0, r0, lsl r2
     13c:	38031c00 	stmdacc	r3, {sl, fp, ip}
     140:	02000002 	andeq	r0, r0, #2
     144:	0000c211 	andeq	ip, r0, r1, lsl r2
     148:	1e032000 	cdpne	0, 0, cr2, cr3, cr0, {0}
     14c:	02000002 	andeq	r0, r0, #2
     150:	0000c912 	andeq	ip, r0, r2, lsl r9
     154:	71032400 	tstvc	r3, r0, lsl #8
     158:	02000002 	andeq	r0, r0, #2
     15c:	0000e713 	andeq	lr, r0, r3, lsl r7
     160:	2d032800 	stccs	8, cr2, [r3, #-0]
     164:	02000001 	andeq	r0, r0, #1
     168:	0000e714 	andeq	lr, r0, r4, lsl r7
     16c:	04002c00 	streq	r2, [r0], #-3072	; 0xfffff400
     170:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     174:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     178:	000000cf 	andeq	r0, r0, pc, asr #1
     17c:	e8080106 	stmda	r8, {r1, r2, r8}
     180:	07000001 	streq	r0, [r0, -r1]
     184:	000000e1 	andeq	r0, r0, r1, ror #1
     188:	0000e108 	andeq	lr, r0, r8, lsl #2
     18c:	04050000 	streq	r0, [r5], #-0
     190:	00000025 	andeq	r0, r0, r5, lsr #32
     194:	00d60405 	sbcseq	r0, r6, r5, lsl #8
     198:	83090000 	movwhi	r0, #36864	; 0x9000
     19c:	02000002 	andeq	r0, r0, #2
     1a0:	00002515 	andeq	r2, r0, r5, lsl r5
     1a4:	06010600 	streq	r0, [r1], -r0, lsl #12
     1a8:	000001e1 	andeq	r0, r0, r1, ror #3
     1ac:	df080106 	svcle	0x00080106
     1b0:	0a000001 	beq	1bc <startup-0x1ffffe44>
     1b4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     1b8:	32050206 	andcc	r0, r5, #1610612736	; 0x60000000
     1bc:	06000001 	streq	r0, [r0], -r1
     1c0:	02250702 	eoreq	r0, r5, #524288	; 0x80000
     1c4:	04060000 	streq	r0, [r6], #-0
     1c8:	0001af05 	andeq	sl, r1, r5, lsl #30
     1cc:	07040600 	streq	r0, [r4, -r0, lsl #12]
     1d0:	000001f7 	strdeq	r0, [r0], -r7
     1d4:	aa050806 	bge	1421f4 <startup-0x1febde0c>
     1d8:	06000001 	streq	r0, [r0], -r1
     1dc:	01f20708 	mvnseq	r0, r8, lsl #14
     1e0:	04060000 	streq	r0, [r6], #-0
     1e4:	0001fc07 	andeq	pc, r1, r7, lsl #24
     1e8:	00cf0b00 	sbceq	r0, pc, r0, lsl #22
     1ec:	01520000 	cmpeq	r2, r0
     1f0:	350c0000 	strcc	r0, [ip, #-0]
     1f4:	ff000001 			; <UNDEFINED> instruction: 0xff000001
     1f8:	0001350c 	andeq	r3, r1, ip, lsl #10
     1fc:	0d000700 	stceq	7, cr0, [r0, #-0]
     200:	00000957 	andeq	r0, r0, r7, asr r9
     204:	013c0501 	teqeq	ip, r1, lsl #10
     208:	060b0000 	streq	r0, [fp], -r0
     20c:	73000001 	movwvc	r0, #1
     210:	0c000001 	stceq	0, cr0, [r0], {1}
     214:	00000135 	andeq	r0, r0, r5, lsr r1
     218:	01350c03 	teqeq	r5, r3, lsl #24
     21c:	00130000 	andseq	r0, r3, r0
     220:	00015d0a 	andeq	r5, r1, sl, lsl #26
     224:	02650e00 	rsbeq	r0, r5, #0, 28
     228:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
     22c:	00000173 	andeq	r0, r0, r3, ror r1
     230:	231c0305 	tstcs	ip, #335544320	; 0x14000000
     234:	270e2000 	strcs	r2, [lr, -r0]
     238:	01000001 	tsteq	r0, r1
     23c:	0001730c 	andeq	r7, r1, ip, lsl #6
     240:	6c030500 	cfstr32vs	mvfx0, [r3], {-0}
     244:	0e200023 	cdpeq	0, 2, cr0, cr0, cr3, {1}
     248:	000002c1 	andeq	r0, r0, r1, asr #5
     24c:	01731001 	cmneq	r3, r1
     250:	03050000 	movweq	r0, #20480	; 0x5000
     254:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
     258:	0002cd0e 	andeq	ip, r2, lr, lsl #26
     25c:	73140100 	tstvc	r4, #0, 2
     260:	05000001 	streq	r0, [r0, #-1]
     264:	00240c03 	eoreq	r0, r4, r3, lsl #24
     268:	00170e20 	andseq	r0, r7, r0, lsr #28
     26c:	1b010000 	blne	40274 <startup-0x1ffbfd8c>
     270:	000000ed 	andeq	r0, r0, sp, ror #1
     274:	245c0305 	ldrbcs	r0, [ip], #-773	; 0xfffffcfb
     278:	750f2000 	strvc	r2, [pc, #-0]	; 280 <startup-0x1ffffd80>
     27c:	01000001 	tsteq	r0, r1
     280:	0000cf9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
     284:	00030500 	andeq	r0, r3, r0, lsl #10
     288:	1020001b 	eorne	r0, r0, fp, lsl r0
     28c:	0000019c 	muleq	r0, ip, r1
     290:	c2011301 	andgt	r1, r1, #67108864	; 0x4000000
     294:	04000000 	streq	r0, [r0], #-0
     298:	14200008 	strtne	r0, [r0], #-8
     29c:	01000000 	mrseq	r0, (UNDEF: 0)
     2a0:	029c109c 	addseq	r1, ip, #156	; 0x9c
     2a4:	10010000 	andne	r0, r1, r0
     2a8:	0000c201 	andeq	ip, r0, r1, lsl #4
     2ac:	0007f000 	andeq	pc, r7, r0
     2b0:	00001420 	andeq	r1, r0, r0, lsr #8
     2b4:	119c0100 	orrsne	r0, ip, r0, lsl #2
     2b8:	0000011a 	andeq	r0, r0, sl, lsl r1
     2bc:	c2010001 	andgt	r0, r1, #1
     2c0:	40000000 	andmi	r0, r0, r0
     2c4:	b0200007 	eorlt	r0, r0, r7
     2c8:	01000000 	mrseq	r0, (UNDEF: 0)
     2cc:	0002859c 	muleq	r2, ip, r5
     2d0:	02a81200 	adceq	r1, r8, #0, 4
     2d4:	00010000 	andeq	r0, r1, r0
     2d8:	0000c201 	andeq	ip, r0, r1, lsl #4
     2dc:	5c910200 	lfmpl	f0, 4, [r1], {0}
     2e0:	6e616d13 	mcrvs	13, 3, r6, cr1, cr3, {0}
     2e4:	01010100 	mrseq	r0, (UNDEF: 17)
     2e8:	00000285 	andeq	r0, r0, r5, lsl #5
     2ec:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     2f0:	02010069 	andeq	r0, r1, #105	; 0x69
     2f4:	0000ff01 	andeq	pc, r0, r1, lsl #30
     2f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     2fc:	01007313 	tsteq	r0, r3, lsl r3
     300:	00c20103 	sbceq	r0, r2, r3, lsl #2
     304:	91020000 	mrsls	r0, (UNDEF: 2)
     308:	075c1470 			; <UNDEFINED> instruction: 0x075c1470
     30c:	00582000 	subseq	r2, r8, r0
     310:	ed150000 	ldc	0, cr0, [r5, #-0]
     314:	01000001 	tsteq	r0, r1
     318:	00ff0105 	rscseq	r0, pc, r5, lsl #2
     31c:	91020000 	mrsls	r0, (UNDEF: 2)
     320:	01b8156b 			; <UNDEFINED> instruction: 0x01b8156b
     324:	06010000 	streq	r0, [r1], -r0
     328:	0000c201 	andeq	ip, r0, r1, lsl #4
     32c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     330:	04050000 	streq	r0, [r5], #-0
     334:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     338:	00020916 	andeq	r0, r2, r6, lsl r9
     33c:	cfed0100 	svcgt	0x00ed0100
     340:	74000000 	strvc	r0, [r0], #-0
     344:	cc200006 	stcgt	0, cr0, [r0], #-24	; 0xffffffe8
     348:	01000000 	mrseq	r0, (UNDEF: 0)
     34c:	0002fd9c 	muleq	r2, ip, sp
     350:	02510e00 	subseq	r0, r1, #0, 28
     354:	f1010000 	setend	le
     358:	00000135 	andeq	r0, r0, r5, lsr r1
     35c:	0e749102 	expeqs	f1, f2
     360:	0000016b 	andeq	r0, r0, fp, ror #2
     364:	00c2f801 	sbceq	pc, r2, r1, lsl #16
     368:	91020000 	mrsls	r0, (UNDEF: 2)
     36c:	067e146c 	ldrbteq	r1, [lr], -ip, ror #8
     370:	00962000 	addseq	r2, r6, r0
     374:	69170000 	ldmdbvs	r7, {}	; <UNPREDICTABLE>
     378:	c2f20100 	rscsgt	r0, r2, #0, 2
     37c:	02000000 	andeq	r0, r0, #0
     380:	84147091 	ldrhi	r7, [r4], #-145	; 0xffffff6f
     384:	84200006 	strthi	r0, [r0], #-6
     388:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     38c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     390:	00cff301 	sbceq	pc, pc, r1, lsl #6
     394:	91020000 	mrsls	r0, (UNDEF: 2)
     398:	027e0e6b 	rsbseq	r0, lr, #1712	; 0x6b0
     39c:	f4010000 	vst4.8	{d0-d3}, [r1], r0
     3a0:	000000cf 	andeq	r0, r0, pc, asr #1
     3a4:	006a9102 	rsbeq	r9, sl, r2, lsl #2
     3a8:	61180000 	tstvs	r8, r0
     3ac:	01007362 	tsteq	r0, r2, ror #6
     3b0:	0000c2e4 	andeq	ip, r0, r4, ror #5
     3b4:	00065800 	andeq	r5, r6, r0, lsl #16
     3b8:	00001c20 	andeq	r1, r0, r0, lsr #24
     3bc:	239c0100 	orrscs	r0, ip, #0, 2
     3c0:	19000003 	stmdbne	r0, {r0, r1}
     3c4:	e4010078 	str	r0, [r1], #-120	; 0xffffff88
     3c8:	000000c2 	andeq	r0, r0, r2, asr #1
     3cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
     3d0:	0002941a 	andeq	r9, r2, sl, lsl r4
     3d4:	90d70100 	sbcsls	r0, r7, r0, lsl #2
     3d8:	c8200005 	stmdagt	r0!, {r0, r2}
     3dc:	01000000 	mrseq	r0, (UNDEF: 0)
     3e0:	0003769c 	muleq	r3, ip, r6
     3e4:	00691700 	rsbeq	r1, r9, r0, lsl #14
     3e8:	00ffd901 	rscseq	sp, pc, r1, lsl #18
     3ec:	91020000 	mrsls	r0, (UNDEF: 2)
     3f0:	006a1777 	rsbeq	r1, sl, r7, ror r7
     3f4:	00ffd901 	rscseq	sp, pc, r1, lsl #18
     3f8:	91020000 	mrsls	r0, (UNDEF: 2)
     3fc:	616d1776 	smcvs	53622	; 0xd176
     400:	da01006e 	ble	405c0 <startup-0x1ffbfa40>
     404:	00000285 	andeq	r0, r0, r5, lsl #5
     408:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
     40c:	200005a4 	andcs	r0, r0, r4, lsr #11
     410:	0000008a 	andeq	r0, r0, sl, lsl #1
     414:	7362611b 	cmnvc	r2, #-1073741818	; 0xc0000006
     418:	c2000300 	andgt	r0, r0, #0, 6
     41c:	1c000000 	stcne	0, cr0, [r0], {-0}
     420:	1a000000 	bne	428 <startup-0x1ffffbd8>
     424:	00000271 	andeq	r0, r0, r1, ror r2
     428:	0350b001 	cmpeq	r0, #1
     42c:	02402000 	subeq	r2, r0, #0
     430:	9c010000 	stcls	0, cr0, [r1], {-0}
     434:	00000428 	andeq	r0, r0, r8, lsr #8
     438:	01006917 	tsteq	r0, r7, lsl r9
     43c:	0000ffb4 			; <UNDEFINED> instruction: 0x0000ffb4
     440:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
     444:	01006a17 	tsteq	r0, r7, lsl sl
     448:	0000ffb4 			; <UNDEFINED> instruction: 0x0000ffb4
     44c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
     450:	6e616d17 	mcrvs	13, 3, r6, cr1, cr7, {0}
     454:	85b50100 	ldrhi	r0, [r5, #256]!	; 0x100
     458:	02000002 	andeq	r0, r0, #2
     45c:	bd0e7091 	stclt	0, cr7, [lr, #-580]	; 0xfffffdbc
     460:	01000001 	tsteq	r0, r1
     464:	0000c2b6 			; <UNDEFINED> instruction: 0x0000c2b6
     468:	6c910200 	lfmvs	f0, 4, [r1], {0}
     46c:	0004061d 	andeq	r0, r4, sp, lsl r6
     470:	00004020 	andeq	r4, r0, r0, lsr #32
     474:	0003e900 	andeq	lr, r3, r0, lsl #18
     478:	025e0e00 	subseq	r0, lr, #0, 28
     47c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
     480:	00000285 	andeq	r0, r0, r5, lsl #5
     484:	0e609102 	lgneqs	f1, f2
     488:	000001da 	ldrdeq	r0, [r0], -sl
     48c:	00ffbf01 	rscseq	fp, pc, r1, lsl #30
     490:	91020000 	mrsls	r0, (UNDEF: 2)
     494:	4814005f 	ldmdami	r4, {r0, r1, r2, r3, r4, r6}
     498:	f0200004 			; <UNDEFINED> instruction: 0xf0200004
     49c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
     4a0:	0000025e 	andeq	r0, r0, lr, asr r2
     4a4:	0285c401 	addeq	ip, r5, #16777216	; 0x1000000
     4a8:	91020000 	mrsls	r0, (UNDEF: 2)
     4ac:	01da0e68 	bicseq	r0, sl, r8, ror #28
     4b0:	c5010000 	strgt	r0, [r1, #-0]
     4b4:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     4b8:	14759102 	ldrbtne	r9, [r5], #-258	; 0xfffffefe
     4bc:	20000490 	mulcs	r0, r0, r4
     4c0:	00000050 	andeq	r0, r0, r0, asr r0
     4c4:	00018a0e 	andeq	r8, r1, lr, lsl #20
     4c8:	ffc80100 			; <UNDEFINED> instruction: 0xffc80100
     4cc:	02000000 	andeq	r0, r0, #0
     4d0:	00006791 	muleq	r0, r1, r7
     4d4:	028a1e00 	addeq	r1, sl, #0, 28
     4d8:	9b010000 	blls	404e0 <startup-0x1ffbfb20>
     4dc:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     4e0:	00000080 	andeq	r0, r0, r0, lsl #1
     4e4:	3c1f9c01 	ldccc	12, cr9, [pc], {1}
     4e8:	01000001 	tsteq	r0, r1
     4ec:	0000cf94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
     4f0:	0002a800 	andeq	sl, r2, r0, lsl #16
     4f4:	00002820 	andeq	r2, r0, r0, lsr #16
     4f8:	209c0100 	addscs	r0, ip, r0, lsl #2
     4fc:	000001cd 	andeq	r0, r0, sp, asr #3
     500:	02708b01 	rsbseq	r8, r0, #1024	; 0x400
     504:	00382000 	eorseq	r2, r8, r0
     508:	9c010000 	stcls	0, cr0, [r1], {-0}
     50c:	0001101a 	andeq	r1, r1, sl, lsl r0
     510:	98590100 	ldmdals	r9, {r8}^
     514:	d8200001 	stmdale	r0!, {r0}
     518:	01000000 	mrseq	r0, (UNDEF: 0)
     51c:	0004b89c 	muleq	r4, ip, r8
     520:	019c1d00 	orrseq	r1, ip, r0, lsl #26
     524:	007c2000 	rsbseq	r2, ip, r0
     528:	04a00000 	strteq	r0, [r0], #0
     52c:	b1210000 			; <UNDEFINED> instruction: 0xb1210000
     530:	01000002 	tsteq	r0, r2
     534:	0000c25a 	andeq	ip, r0, sl, asr r2
     538:	00049200 	andeq	r9, r4, r0, lsl #4
     53c:	22001c00 	andcs	r1, r0, #0, 24
     540:	00000192 	muleq	r0, r2, r1
     544:	00c25a01 	sbceq	r5, r2, r1, lsl #20
     548:	001c0000 	andseq	r0, ip, r0
     54c:	02441400 	subeq	r1, r4, #0, 8
     550:	001c2000 	andseq	r2, ip, r0
     554:	76220000 	strtvc	r0, [r2], -r0
     558:	01000002 	tsteq	r0, r2
     55c:	0000c282 	andeq	ip, r0, r2, lsl #5
     560:	00001c00 	andeq	r1, r0, r0, lsl #24
     564:	02bc1a00 	adcseq	r1, ip, #0, 20
     568:	3f010000 	svccc	0x00010000
     56c:	20000110 	andcs	r0, r0, r0, lsl r1
     570:	00000088 	andeq	r0, r0, r8, lsl #1
     574:	05009c01 	streq	r9, [r0, #-3073]	; 0xfffff3ff
     578:	241d0000 	ldrcs	r0, [sp], #-0
     57c:	22200001 	eorcs	r0, r0, #1
     580:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
     584:	22000004 	andcs	r0, r0, #4
     588:	000000f3 	strdeq	r0, [r0], -r3
     58c:	00c24701 	sbceq	r4, r2, r1, lsl #14
     590:	001c0000 	andseq	r0, ip, r0
     594:	01501400 	cmpeq	r0, r0, lsl #8
     598:	00242000 	eoreq	r2, r4, r0
     59c:	f3220000 	vhadd.u32	d0, d2, d0
     5a0:	01000000 	mrseq	r0, (UNDEF: 0)
     5a4:	0000c247 	andeq	ip, r0, r7, asr #4
     5a8:	00001c00 	andeq	r1, r0, r0, lsl #24
     5ac:	02462000 	subeq	r2, r6, #0
     5b0:	2c010000 	stccs	0, cr0, [r1], {-0}
     5b4:	200000e8 	andcs	r0, r0, r8, ror #1
     5b8:	00000028 	andeq	r0, r0, r8, lsr #32
     5bc:	1d009c01 	stcne	12, cr9, [r0, #-4]
     5c0:	04000001 	streq	r0, [r0], #-1
     5c4:	00028d00 	andeq	r8, r2, r0, lsl #26
     5c8:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
     5cc:	0c000000 	stceq	0, cr0, [r0], {-0}
     5d0:	000002fe 	strdeq	r0, [r0], -lr
     5d4:	00000000 	andeq	r0, r0, r0
     5d8:	20000818 	andcs	r0, r0, r8, lsl r8
     5dc:	000000a8 	andeq	r0, r0, r8, lsr #1
     5e0:	0000023b 	andeq	r0, r0, fp, lsr r2
     5e4:	e1060102 	tst	r6, r2, lsl #2
     5e8:	02000001 	andeq	r0, r0, #1
     5ec:	01df0801 	bicseq	r0, pc, r1, lsl #16
     5f0:	02020000 	andeq	r0, r2, #0
     5f4:	00013205 	andeq	r3, r1, r5, lsl #4
     5f8:	07020200 	streq	r0, [r2, -r0, lsl #4]
     5fc:	00000225 	andeq	r0, r0, r5, lsr #4
     600:	af050402 	svcge	0x00050402
     604:	03000001 	movweq	r0, #1
     608:	000002e1 	andeq	r0, r0, r1, ror #5
     60c:	00534f02 	subseq	r4, r3, r2, lsl #30
     610:	04020000 	streq	r0, [r2], #-0
     614:	0001f707 	andeq	pc, r1, r7, lsl #14
     618:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     61c:	000001aa 	andeq	r0, r0, sl, lsr #3
     620:	f2070802 	vadd.i8	d0, d7, d2
     624:	04000001 	streq	r0, [r0], #-1
     628:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     62c:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     630:	0001fc07 	andeq	pc, r1, r7, lsl #24
     634:	02e30300 	rsceq	r0, r3, #0, 6
     638:	30030000 	andcc	r0, r3, r0
     63c:	00000048 	andeq	r0, r0, r8, asr #32
     640:	0002ec03 	andeq	lr, r2, r3, lsl #24
     644:	76070400 	strvc	r0, [r7], -r0, lsl #8
     648:	05000000 	streq	r0, [r0, #-0]
     64c:	000002f6 	strdeq	r0, [r0], -r6
     650:	00810c01 	addeq	r0, r1, r1, lsl #24
     654:	084a0000 	stmdaeq	sl, {}^	; <UNPREDICTABLE>
     658:	00762000 	rsbseq	r2, r6, r0
     65c:	9c010000 	stcls	0, cr0, [r1], {-0}
     660:	000000d6 	ldrdeq	r0, [r0], -r6
     664:	00060e06 	andeq	r0, r6, r6, lsl #28
     668:	d60c0100 	strle	r0, [ip], -r0, lsl #2
     66c:	02000000 	andeq	r0, r0, #0
     670:	78076c91 	stmdavc	r7, {r0, r4, r7, sl, fp, sp, lr}
     674:	810e0100 	mrshi	r0, (UNDEF: 30)
     678:	02000000 	andeq	r0, r0, #0
     67c:	88087491 	stmdahi	r8, {r0, r4, r7, sl, ip, sp, lr}
     680:	2a200008 	bcs	8006a8 <startup-0x1f7ff958>
     684:	07000000 	streq	r0, [r0, -r0]
     688:	0f010069 	svceq	0x00010069
     68c:	00000068 	andeq	r0, r0, r8, rrx
     690:	00709102 	rsbseq	r9, r0, r2, lsl #2
     694:	81040900 	tsthi	r4, r0, lsl #18
     698:	0a000000 	beq	6a0 <startup-0x1ffff960>
     69c:	000002d9 	ldrdeq	r0, [r0], -r9
     6a0:	08180501 	ldmdaeq	r8, {r0, r8, sl}
     6a4:	00322000 	eorseq	r2, r2, r0
     6a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     6ac:	00060e06 	andeq	r0, r6, r6, lsl #28
     6b0:	d6050100 	strle	r0, [r5], -r0, lsl #2
     6b4:	02000000 	andeq	r0, r0, #0
     6b8:	da066c91 	ble	19b904 <startup-0x1fe646fc>
     6bc:	01000006 	tsteq	r0, r6
     6c0:	00007605 	andeq	r7, r0, r5, lsl #12
     6c4:	68910200 	ldmvs	r1, {r9}
     6c8:	00082808 	andeq	r2, r8, r8, lsl #16
     6cc:	00001a20 	andeq	r1, r0, r0, lsr #20
     6d0:	00690700 	rsbeq	r0, r9, r0, lsl #14
     6d4:	00680701 	rsbeq	r0, r8, r1, lsl #14
     6d8:	91020000 	mrsls	r0, (UNDEF: 2)
     6dc:	00000074 	andeq	r0, r0, r4, ror r0
     6e0:	000001e3 	andeq	r0, r0, r3, ror #3
     6e4:	03280004 			; <UNDEFINED> instruction: 0x03280004
     6e8:	01040000 	mrseq	r0, (UNDEF: 4)
     6ec:	00000035 	andeq	r0, r0, r5, lsr r0
     6f0:	0003270c 	andeq	r2, r3, ip, lsl #14
     6f4:	00000000 	andeq	r0, r0, r0
     6f8:	0008c000 	andeq	ip, r8, r0
     6fc:	0001c820 	andeq	ip, r1, r0, lsr #16
     700:	00036c00 	andeq	r6, r3, r0, lsl #24
     704:	02020200 	andeq	r0, r2, #0, 4
     708:	0000460c 	andeq	r4, r0, ip, lsl #12
     70c:	03760300 	cmneq	r6, #0, 6
     710:	0d020000 	stceq	0, cr0, [r2, #-0]
     714:	00000046 	andeq	r0, r0, r6, asr #32
     718:	03a90300 			; <UNDEFINED> instruction: 0x03a90300
     71c:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     720:	00000046 	andeq	r0, r0, r6, asr #32
     724:	01040001 	tsteq	r4, r1
     728:	0001df08 	andeq	sp, r1, r8, lsl #30
     72c:	02040500 	andeq	r0, r4, #0, 10
     730:	0000660a 	andeq	r6, r0, sl, lsl #12
     734:	64690600 	strbtvs	r0, [r9], #-1536	; 0xfffffa00
     738:	0b020072 	bleq	80908 <startup-0x1ff7f6f8>
     73c:	00000066 	andeq	r0, r0, r6, rrx
     740:	00002507 	andeq	r2, r0, r7, lsl #10
     744:	04040000 	streq	r0, [r4], #-0
     748:	0001fc07 	andeq	pc, r1, r7, lsl #24
     74c:	02020200 	andeq	r0, r2, #0, 4
     750:	00008e13 	andeq	r8, r0, r3, lsl lr
     754:	036f0300 	cmneq	pc, #0, 6
     758:	14020000 	strne	r0, [r2], #-0
     75c:	00000046 	andeq	r0, r0, r6, asr #32
     760:	035a0300 	cmpeq	sl, #0, 6
     764:	15020000 	strne	r0, [r2, #-0]
     768:	00000046 	andeq	r0, r0, r6, asr #32
     76c:	04050001 	streq	r0, [r5], #-1
     770:	00a71102 	adceq	r1, r7, r2, lsl #2
     774:	6f060000 	svcvs	0x00060000
     778:	02007264 	andeq	r7, r0, #100, 4	; 0x40000006
     77c:	00006612 	andeq	r6, r0, r2, lsl r6
     780:	006d0700 	rsbeq	r0, sp, r0, lsl #14
     784:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     788:	00000392 	muleq	r0, r2, r3
     78c:	f0040218 			; <UNDEFINED> instruction: 0xf0040218
     790:	03000000 	movweq	r0, #0
     794:	0000034f 	andeq	r0, r0, pc, asr #6
     798:	00660502 	rsbeq	r0, r6, r2, lsl #10
     79c:	03000000 	movweq	r0, #0
     7a0:	00000362 	andeq	r0, r0, r2, ror #6
     7a4:	00660602 	rsbeq	r0, r6, r2, lsl #12
     7a8:	03040000 	movweq	r0, #16384	; 0x4000
     7ac:	000003b1 			; <UNDEFINED> instruction: 0x000003b1
     7b0:	00660702 	rsbeq	r0, r6, r2, lsl #14
     7b4:	03080000 	movweq	r0, #32768	; 0x8000
     7b8:	00000369 	andeq	r0, r0, r9, ror #6
     7bc:	00660802 	rsbeq	r0, r6, r2, lsl #16
     7c0:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     7c4:	0000004d 	andeq	r0, r0, sp, asr #32
     7c8:	008e0910 	addeq	r0, lr, r0, lsl r9
     7cc:	00140000 	andseq	r0, r4, r0
     7d0:	0003a40a 	andeq	sl, r3, sl, lsl #8
     7d4:	a7180200 	ldrge	r0, [r8, -r0, lsl #4]
     7d8:	0b000000 	bleq	7e0 <startup-0x1ffff820>
     7dc:	00000355 	andeq	r0, r0, r5, asr r3
     7e0:	00465001 	subeq	r5, r6, r1
     7e4:	0a1c0000 	beq	7007ec <startup-0x1f8ff814>
     7e8:	006c2000 	rsbeq	r2, ip, r0
     7ec:	9c010000 	stcls	0, cr0, [r1], {-0}
     7f0:	0000013f 	andeq	r0, r0, pc, lsr r1
     7f4:	79656b0c 	stmdbvc	r5!, {r2, r3, r8, r9, fp, sp, lr}^
     7f8:	3f510100 	svccc	0x00510100
     7fc:	02000001 	andeq	r0, r0, #1
     800:	720c5891 	andvc	r5, ip, #9502720	; 0x910000
     804:	0100776f 	tsteq	r0, pc, ror #14
     808:	00015652 	andeq	r5, r1, r2, asr r6
     80c:	6c910200 	lfmvs	f0, 4, [r1], {0}
     810:	6c6f630c 	stclvs	3, cr6, [pc], #-48	; 7e8 <startup-0x1ffff818>
     814:	56530100 	ldrbpl	r0, [r3], -r0, lsl #2
     818:	02000001 	andeq	r0, r0, #1
     81c:	0d006891 	stceq	8, cr6, [r0, #-580]	; 0xfffffdbc
     820:	0000014f 	andeq	r0, r0, pc, asr #2
     824:	0000014f 	andeq	r0, r0, pc, asr #2
     828:	0000660e 	andeq	r6, r0, lr, lsl #12
     82c:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
     830:	01e80801 	mvneq	r0, r1, lsl #16
     834:	040f0000 	streq	r0, [pc], #-0	; 83c <startup-0x1ffff7c4>
     838:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     83c:	037d1000 	cmneq	sp, #0
     840:	44010000 	strmi	r0, [r1], #-0
     844:	0000014f 	andeq	r0, r0, pc, asr #2
     848:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
     84c:	0000002c 	andeq	r0, r0, ip, lsr #32
     850:	92109c01 	andsls	r9, r0, #256	; 0x100
     854:	01000001 	tsteq	r0, r1
     858:	00014f38 	andeq	r4, r1, r8, lsr pc
     85c:	0009c400 	andeq	ip, r9, r0, lsl #8
     860:	00002c20 	andeq	r2, r0, r0, lsr #24
     864:	109c0100 	addsne	r0, ip, r0, lsl #2
     868:	000002b1 			; <UNDEFINED> instruction: 0x000002b1
     86c:	014f2e01 	cmpeq	pc, r1, lsl #28
     870:	09980000 	ldmibeq	r8, {}	; <UNPREDICTABLE>
     874:	002c2000 	eoreq	r2, ip, r0
     878:	9c010000 	stcls	0, cr0, [r1], {-0}
     87c:	00027610 	andeq	r7, r2, r0, lsl r6
     880:	4f240100 	svcmi	0x00240100
     884:	6c000001 	stcvs	0, cr0, [r0], {1}
     888:	2c200009 	stccs	0, cr0, [r0], #-36	; 0xffffffdc
     88c:	01000000 	mrseq	r0, (UNDEF: 0)
     890:	0388119c 	orreq	r1, r8, #156, 2	; 0x27
     894:	17010000 	strne	r0, [r1, -r0]
     898:	00000156 	andeq	r0, r0, r6, asr r1
     89c:	20000914 	andcs	r0, r0, r4, lsl r9
     8a0:	00000058 	andeq	r0, r0, r8, asr r0
     8a4:	98129c01 	ldmdals	r2, {r0, sl, fp, ip, pc}
     8a8:	01000003 	tsteq	r0, r3
     8ac:	0008c004 	andeq	ip, r8, r4
     8b0:	00005420 	andeq	r5, r0, r0, lsr #8
     8b4:	139c0100 	orrsne	r0, ip, #0, 2
     8b8:	00776f72 	rsbseq	r6, r7, r2, ror pc
     8bc:	00660401 	rsbeq	r0, r6, r1, lsl #8
     8c0:	91020000 	mrsls	r0, (UNDEF: 2)
     8c4:	5a000074 	bpl	a9c <startup-0x1ffff564>
     8c8:	0400000c 	streq	r0, [r0], #-12
     8cc:	00044600 	andeq	r4, r4, r0, lsl #12
     8d0:	35010400 	strcc	r0, [r1, #-1024]	; 0xfffffc00
     8d4:	0c000000 	stceq	0, cr0, [r0], {-0}
     8d8:	000005a1 	andeq	r0, r0, r1, lsr #11
	...
     8e8:	0000041b 	andeq	r0, r0, fp, lsl r4
     8ec:	e1060102 	tst	r6, r2, lsl #2
     8f0:	02000001 	andeq	r0, r0, #1
     8f4:	01df0801 	bicseq	r0, pc, r1, lsl #16
     8f8:	02020000 	andeq	r0, r2, #0
     8fc:	00013205 	andeq	r3, r1, r5, lsl #4
     900:	07020200 	streq	r0, [r2, -r0, lsl #4]
     904:	00000225 	andeq	r0, r0, r5, lsr #4
     908:	af050402 	svcge	0x00050402
     90c:	03000001 	movweq	r0, #1
     910:	000002e1 	andeq	r0, r0, r1, ror #5
     914:	00534f02 	subseq	r4, r3, r2, lsl #30
     918:	04020000 	streq	r0, [r2], #-0
     91c:	0001f707 	andeq	pc, r1, r7, lsl #14
     920:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
     924:	000001aa 	andeq	r0, r0, sl, lsr #3
     928:	f2070802 	vadd.i8	d0, d7, d2
     92c:	04000001 	streq	r0, [r0], #-1
     930:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     934:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
     938:	0001fc07 	andeq	pc, r1, r7, lsl #24
     93c:	02e30300 	rsceq	r0, r3, #0, 6
     940:	30030000 	andcc	r0, r3, r0
     944:	00000048 	andeq	r0, r0, r8, asr #32
     948:	0c040205 	sfmeq	f0, 4, [r4], {5}
     94c:	000000a2 	andeq	r0, r0, r2, lsr #1
     950:	00037606 	andeq	r7, r3, r6, lsl #12
     954:	2c0d0400 	cfstrscs	mvf0, [sp], {-0}
     958:	00000000 	andeq	r0, r0, r0
     95c:	0003a906 	andeq	sl, r3, r6, lsl #18
     960:	2c0e0400 	cfstrscs	mvf0, [lr], {-0}
     964:	01000000 	mrseq	r0, (UNDEF: 0)
     968:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
     96c:	0000bb0a 	andeq	fp, r0, sl, lsl #22
     970:	64690800 	strbtvs	r0, [r9], #-2048	; 0xfffff800
     974:	0b040072 	bleq	100b44 <startup-0x1feff4bc>
     978:	0000006f 	andeq	r0, r0, pc, rrx
     97c:	00008109 	andeq	r8, r0, r9, lsl #2
     980:	02050000 	andeq	r0, r5, #0
     984:	00dc1304 	sbcseq	r1, ip, r4, lsl #6
     988:	6f060000 	svcvs	0x00060000
     98c:	04000003 	streq	r0, [r0], #-3
     990:	00002c14 	andeq	r2, r0, r4, lsl ip
     994:	5a060000 	bpl	18099c <startup-0x1fe7f664>
     998:	04000003 	streq	r0, [r0], #-3
     99c:	00002c15 	andeq	r2, r0, r5, lsl ip
     9a0:	07000100 	streq	r0, [r0, -r0, lsl #2]
     9a4:	f5110404 			; <UNDEFINED> instruction: 0xf5110404
     9a8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9ac:	0072646f 	rsbseq	r6, r2, pc, ror #8
     9b0:	006f1204 	rsbeq	r1, pc, r4, lsl #4
     9b4:	bb090000 	bllt	2409bc <startup-0x1fdbf644>
     9b8:	00000000 	andeq	r0, r0, r0
     9bc:	0003920a 	andeq	r9, r3, sl, lsl #4
     9c0:	04041800 	streq	r1, [r4], #-2048	; 0xfffff800
     9c4:	0000013e 	andeq	r0, r0, lr, lsr r1
     9c8:	00034f06 	andeq	r4, r3, r6, lsl #30
     9cc:	6f050400 	svcvs	0x00050400
     9d0:	00000000 	andeq	r0, r0, r0
     9d4:	00036206 	andeq	r6, r3, r6, lsl #4
     9d8:	6f060400 	svcvs	0x00060400
     9dc:	04000000 	streq	r0, [r0], #-0
     9e0:	0003b106 	andeq	fp, r3, r6, lsl #2
     9e4:	6f070400 	svcvs	0x00070400
     9e8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     9ec:	00036906 	andeq	r6, r3, r6, lsl #18
     9f0:	6f080400 	svcvs	0x00080400
     9f4:	0c000000 	stceq	0, cr0, [r0], {-0}
     9f8:	0000a20b 	andeq	sl, r0, fp, lsl #4
     9fc:	dc0b1000 	stcle	0, cr1, [fp], {-0}
     a00:	14000000 	strne	r0, [r0], #-0
     a04:	03a40300 			; <UNDEFINED> instruction: 0x03a40300
     a08:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
     a0c:	000000f5 	strdeq	r0, [r0], -r5
     a10:	014f040c 	cmpeq	pc, ip, lsl #8
     a14:	01020000 	mrseq	r0, (UNDEF: 2)
     a18:	0001e808 	andeq	lr, r1, r8, lsl #16
     a1c:	014f0d00 	cmpeq	pc, r0, lsl #26
     a20:	73030000 	movwvc	r0, #12288	; 0x3000
     a24:	05000005 	streq	r0, [r0, #-5]
     a28:	00016622 	andeq	r6, r1, r2, lsr #12
     a2c:	6c040c00 	stcvs	12, cr0, [r4], {-0}
     a30:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     a34:	000006e7 	andeq	r0, r0, r7, ror #13
     a38:	0005e803 	andeq	lr, r5, r3, lsl #16
     a3c:	412c0600 			; <UNDEFINED> instruction: 0x412c0600
     a40:	03000000 	movweq	r0, #0
     a44:	000006f9 	strdeq	r0, [r0], -r9
     a48:	00417206 	subeq	r7, r1, r6, lsl #4
     a4c:	7b0f0000 	blvc	3c0a54 <startup-0x1fc3f5ac>
     a50:	07000005 	streq	r0, [r0, -r5]
     a54:	006f0165 	rsbeq	r0, pc, r5, ror #2
     a58:	04070000 	streq	r0, [r7], #-0
     a5c:	01b2a606 			; <UNDEFINED> instruction: 0x01b2a606
     a60:	6d100000 	ldcvs	0, cr0, [r0, #-0]
     a64:	06000005 	streq	r0, [r0], -r5
     a68:	000187a8 	andeq	r8, r1, r8, lsr #15
     a6c:	050c1000 	streq	r1, [ip, #-0]
     a70:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
     a74:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
     a78:	002c1100 	eoreq	r1, ip, r0, lsl #2
     a7c:	01c20000 	biceq	r0, r2, r0
     a80:	6f120000 	svcvs	0x00120000
     a84:	03000000 	movweq	r0, #0
     a88:	06080500 	streq	r0, [r8], -r0, lsl #10
     a8c:	0001e3a3 	andeq	lr, r1, r3, lsr #7
     a90:	06df0600 	ldrbeq	r0, [pc], r0, lsl #12
     a94:	a5060000 	strge	r0, [r6, #-0]
     a98:	00000068 	andeq	r0, r0, r8, rrx
     a9c:	07530600 	ldrbeq	r0, [r3, -r0, lsl #12]
     aa0:	aa060000 	bge	180aa8 <startup-0x1fe7f558>
     aa4:	00000193 	muleq	r0, r3, r1
     aa8:	61030004 	tstvs	r3, r4
     aac:	06000006 	streq	r0, [r0], -r6
     ab0:	0001c2ab 	andeq	ip, r1, fp, lsr #5
     ab4:	04d50300 	ldrbeq	r0, [r5], #768	; 0x300
     ab8:	af060000 	svcge	0x00060000
     abc:	0000015b 	andeq	r0, r0, fp, asr r1
     ac0:	69030413 	stmdbvs	r3, {r0, r1, r4, sl}
     ac4:	08000007 	stmdaeq	r0, {r0, r1, r2}
     ac8:	00005316 	andeq	r5, r0, r6, lsl r3
     acc:	04e60a00 	strbteq	r0, [r6], #2560	; 0xa00
     ad0:	08180000 	ldmdaeq	r8, {}	; <UNPREDICTABLE>
     ad4:	0002592f 	andeq	r5, r2, pc, lsr #18
     ad8:	06820600 	streq	r0, [r2], r0, lsl #12
     adc:	31080000 	mrscc	r0, (UNDEF: 8)
     ae0:	00000259 	andeq	r0, r0, r9, asr r2
     ae4:	6b5f1400 	blvs	17c5aec <startup-0x1e83a514>
     ae8:	68320800 	ldmdavs	r2!, {fp}
     aec:	04000000 	streq	r0, [r0], #-0
     af0:	0006ca06 	andeq	ip, r6, r6, lsl #20
     af4:	68320800 	ldmdavs	r2!, {fp}
     af8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     afc:	0004cf06 	andeq	ip, r4, r6, lsl #30
     b00:	68320800 	ldmdavs	r2!, {fp}
     b04:	0c000000 	stceq	0, cr0, [r0], {-0}
     b08:	00079e06 	andeq	r9, r7, r6, lsl #28
     b0c:	68320800 	ldmdavs	r2!, {fp}
     b10:	10000000 	andne	r0, r0, r0
     b14:	00785f14 	rsbseq	r5, r8, r4, lsl pc
     b18:	025f3308 	subseq	r3, pc, #8, 6	; 0x20000000
     b1c:	00140000 	andseq	r0, r4, r0
     b20:	0206040c 	andeq	r0, r6, #12, 8	; 0xc000000
     b24:	fb110000 	blx	440b2e <startup-0x1fbbf4d2>
     b28:	6f000001 	svcvs	0x00000001
     b2c:	12000002 	andne	r0, r0, #2
     b30:	0000006f 	andeq	r0, r0, pc, rrx
     b34:	070a0000 	streq	r0, [sl, -r0]
     b38:	24000005 	strcs	r0, [r0], #-5
     b3c:	02e83708 	rsceq	r3, r8, #8, 14	; 0x200000
     b40:	3b060000 	blcc	180b48 <startup-0x1fe7f4b8>
     b44:	08000004 	stmdaeq	r0, {r2}
     b48:	00006839 	andeq	r6, r0, r9, lsr r8
     b4c:	0f060000 	svceq	0x00060000
     b50:	08000007 	stmdaeq	r0, {r0, r1, r2}
     b54:	0000683a 	andeq	r6, r0, sl, lsr r8
     b58:	55060400 	strpl	r0, [r6, #-1024]	; 0xfffffc00
     b5c:	08000004 	stmdaeq	r0, {r2}
     b60:	0000683b 	andeq	r6, r0, fp, lsr r8
     b64:	2f060800 	svccs	0x00060800
     b68:	08000008 	stmdaeq	r0, {r3}
     b6c:	0000683c 	andeq	r6, r0, ip, lsr r8
     b70:	cc060c00 	stcgt	12, cr0, [r6], {-0}
     b74:	08000005 	stmdaeq	r0, {r0, r2}
     b78:	0000683d 	andeq	r6, r0, sp, lsr r8
     b7c:	97061000 	strls	r1, [r6, -r0]
     b80:	08000005 	stmdaeq	r0, {r0, r2}
     b84:	0000683e 	andeq	r6, r0, lr, lsr r8
     b88:	a3061400 	movwge	r1, #25600	; 0x6400
     b8c:	08000007 	stmdaeq	r0, {r0, r1, r2}
     b90:	0000683f 	andeq	r6, r0, pc, lsr r8
     b94:	43061800 	movwmi	r1, #26624	; 0x6800
     b98:	08000006 	stmdaeq	r0, {r1, r2}
     b9c:	00006840 	andeq	r6, r0, r0, asr #16
     ba0:	de061c00 	cdple	12, 0, cr1, cr6, cr0, {0}
     ba4:	08000007 	stmdaeq	r0, {r0, r1, r2}
     ba8:	00006841 	andeq	r6, r0, r1, asr #16
     bac:	15002000 	strne	r2, [r0, #-0]
     bb0:	00000701 	andeq	r0, r0, r1, lsl #14
     bb4:	4a080108 	bmi	200fdc <startup-0x1fdff024>
     bb8:	00000328 	andeq	r0, r0, r8, lsr #6
     bbc:	0004c206 	andeq	ip, r4, r6, lsl #4
     bc0:	284b0800 	stmdacs	fp, {fp}^
     bc4:	00000003 	andeq	r0, r0, r3
     bc8:	0003b906 	andeq	fp, r3, r6, lsl #18
     bcc:	284c0800 	stmdacs	ip, {fp}^
     bd0:	80000003 	andhi	r0, r0, r3
     bd4:	00075b16 	andeq	r5, r7, r6, lsl fp
     bd8:	fb4e0800 	blx	1382be2 <startup-0x1ec7d41e>
     bdc:	00000001 	andeq	r0, r0, r1
     be0:	047b1601 	ldrbteq	r1, [fp], #-1537	; 0xfffff9ff
     be4:	51080000 	mrspl	r0, (UNDEF: 8)
     be8:	000001fb 	strdeq	r0, [r0], -fp
     bec:	11000104 	tstne	r0, r4, lsl #2
     bf0:	000001f9 	strdeq	r0, [r0], -r9
     bf4:	00000338 	andeq	r0, r0, r8, lsr r3
     bf8:	00006f12 	andeq	r6, r0, r2, lsl pc
     bfc:	15001f00 	strne	r1, [r0, #-3840]	; 0xfffff100
     c00:	000005d5 	ldrdeq	r0, [r0], -r5
     c04:	5d080190 	stfpls	f0, [r8, #-576]	; 0xfffffdc0
     c08:	00000376 	andeq	r0, r0, r6, ror r3
     c0c:	00068206 	andeq	r8, r6, r6, lsl #4
     c10:	765e0800 	ldrbvc	r0, [lr], -r0, lsl #16
     c14:	00000003 	andeq	r0, r0, r3
     c18:	00069a06 	andeq	r9, r6, r6, lsl #20
     c1c:	685f0800 	ldmdavs	pc, {fp}^	; <UNPREDICTABLE>
     c20:	04000000 	streq	r0, [r0], #-0
     c24:	0004ca06 	andeq	ip, r4, r6, lsl #20
     c28:	7c610800 	stclvc	8, cr0, [r1], #-0
     c2c:	08000003 	stmdaeq	r0, {r0, r1}
     c30:	00070106 	andeq	r0, r7, r6, lsl #2
     c34:	e8620800 	stmda	r2!, {fp}^
     c38:	88000002 	stmdahi	r0, {r1}
     c3c:	38040c00 	stmdacc	r4, {sl, fp}
     c40:	11000003 	tstne	r0, r3
     c44:	0000038c 	andeq	r0, r0, ip, lsl #7
     c48:	0000038c 	andeq	r0, r0, ip, lsl #7
     c4c:	00006f12 	andeq	r6, r0, r2, lsl pc
     c50:	0c001f00 	stceq	15, cr1, [r0], {-0}
     c54:	00039204 	andeq	r9, r3, r4, lsl #4
     c58:	4d0a1700 	stcmi	7, cr1, [sl, #-0]
     c5c:	08000006 	stmdaeq	r0, {r1, r2}
     c60:	03b87508 			; <UNDEFINED> instruction: 0x03b87508
     c64:	4f060000 	svcmi	0x00060000
     c68:	08000004 	stmdaeq	r0, {r2}
     c6c:	0003b876 	andeq	fp, r3, r6, ror r8
     c70:	c5060000 	strgt	r0, [r6, #-0]
     c74:	08000003 	stmdaeq	r0, {r0, r1}
     c78:	00006877 	andeq	r6, r0, r7, ror r8
     c7c:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     c80:	00002c04 	andeq	r2, r0, r4, lsl #24
     c84:	066c0a00 	strbteq	r0, [ip], -r0, lsl #20
     c88:	08680000 	stmdaeq	r8!, {}^	; <UNPREDICTABLE>
     c8c:	0004e8b5 			; <UNDEFINED> instruction: 0x0004e8b5
     c90:	705f1400 	subsvc	r1, pc, r0, lsl #8
     c94:	b8b60800 	ldmlt	r6!, {fp}
     c98:	00000003 	andeq	r0, r0, r3
     c9c:	00725f14 	rsbseq	r5, r2, r4, lsl pc
     ca0:	0068b708 	rsbeq	fp, r8, r8, lsl #14
     ca4:	14040000 	strne	r0, [r4], #-0
     ca8:	0800775f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}
     cac:	000068b8 			; <UNDEFINED> instruction: 0x000068b8
     cb0:	74060800 	strvc	r0, [r6], #-2048	; 0xfffff800
     cb4:	08000004 	stmdaeq	r0, {r2}
     cb8:	000033b9 			; <UNDEFINED> instruction: 0x000033b9
     cbc:	2b060c00 	blcs	183cc4 <startup-0x1fe7c33c>
     cc0:	08000005 	stmdaeq	r0, {r0, r2}
     cc4:	000033ba 			; <UNDEFINED> instruction: 0x000033ba
     cc8:	5f140e00 	svcpl	0x00140e00
     ccc:	08006662 	stmdaeq	r0, {r1, r5, r6, r9, sl, sp, lr}
     cd0:	000393bb 			; <UNDEFINED> instruction: 0x000393bb
     cd4:	13061000 	movwne	r1, #24576	; 0x6000
     cd8:	08000004 	stmdaeq	r0, {r2}
     cdc:	000068bc 			; <UNDEFINED> instruction: 0x000068bc
     ce0:	64061800 	strvs	r1, [r6], #-2048	; 0xfffff800
     ce4:	08000004 	stmdaeq	r0, {r2}
     ce8:	0001f9c3 	andeq	pc, r1, r3, asr #19
     cec:	cb061c00 	blgt	187cf4 <startup-0x1fe7830c>
     cf0:	08000008 	stmdaeq	r0, {r3}
     cf4:	000643c5 	andeq	r4, r6, r5, asr #7
     cf8:	37062000 	strcc	r2, [r6, -r0]
     cfc:	08000009 	stmdaeq	r0, {r0, r3}
     d00:	00066dc7 	andeq	r6, r6, r7, asr #27
     d04:	ee062400 	cfcpys	mvf2, mvf6
     d08:	08000006 	stmdaeq	r0, {r1, r2}
     d0c:	000691ca 	andeq	r9, r6, sl, asr #3
     d10:	f8062800 			; <UNDEFINED> instruction: 0xf8062800
     d14:	08000007 	stmdaeq	r0, {r0, r1, r2}
     d18:	0006abcb 	andeq	sl, r6, fp, asr #23
     d1c:	5f142c00 	svcpl	0x00142c00
     d20:	08006275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr}
     d24:	000393ce 	andeq	r9, r3, lr, asr #7
     d28:	5f143000 	svcpl	0x00143000
     d2c:	08007075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr}
     d30:	0003b8cf 	andeq	fp, r3, pc, asr #17
     d34:	5f143800 	svcpl	0x00143800
     d38:	08007275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, ip, sp, lr}
     d3c:	000068d0 	ldrdeq	r6, [r0], -r0
     d40:	49063c00 	stmdbmi	r6, {sl, fp, ip, sp}
     d44:	08000004 	stmdaeq	r0, {r2}
     d48:	0006b1d3 	ldrdeq	fp, [r6], -r3
     d4c:	d0064000 	andle	r4, r6, r0
     d50:	08000007 	stmdaeq	r0, {r0, r1, r2}
     d54:	0006c1d4 	ldrdeq	ip, [r6], -r4
     d58:	5f144300 	svcpl	0x00144300
     d5c:	0800626c 	stmdaeq	r0, {r2, r3, r5, r6, r9, sp, lr}
     d60:	000393d7 	ldrdeq	r9, [r3], -r7
     d64:	8a064400 	bhi	191d6c <startup-0x1fe6e294>
     d68:	08000004 	stmdaeq	r0, {r2}
     d6c:	000068da 	ldrdeq	r6, [r0], -sl
     d70:	9b064c00 	blls	193d78 <startup-0x1fe6c288>
     d74:	08000004 	stmdaeq	r0, {r2}
     d78:	000171db 	ldrdeq	r7, [r1], -fp
     d7c:	e8065000 	stmda	r6, {ip, lr}
     d80:	08000008 	stmdaeq	r0, {r3}
     d84:	000506de 	ldrdeq	r0, [r5], -lr
     d88:	e8065400 	stmda	r6, {sl, ip, lr}
     d8c:	08000006 	stmdaeq	r0, {r1, r2}
     d90:	0001eee2 	andeq	lr, r1, r2, ror #29
     d94:	74065800 	strvc	r5, [r6], #-2048	; 0xfffff800
     d98:	08000006 	stmdaeq	r0, {r1, r2}
     d9c:	0001e3e4 	andeq	lr, r1, r4, ror #7
     da0:	82065c00 	andhi	r5, r6, #0, 24
     da4:	08000005 	stmdaeq	r0, {r0, r2}
     da8:	000068e5 	andeq	r6, r0, r5, ror #17
     dac:	18006400 	stmdane	r0, {sl, sp, lr}
     db0:	00000068 	andeq	r0, r0, r8, rrx
     db4:	00000506 	andeq	r0, r0, r6, lsl #10
     db8:	00050619 	andeq	r0, r5, r9, lsl r6
     dbc:	01f91900 	mvnseq	r1, r0, lsl #18
     dc0:	49190000 	ldmdbmi	r9, {}	; <UNPREDICTABLE>
     dc4:	19000001 	stmdbne	r0, {r0}
     dc8:	00000068 	andeq	r0, r0, r8, rrx
     dcc:	11040c00 	tstne	r4, r0, lsl #24
     dd0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     dd4:	00000506 	andeq	r0, r0, r6, lsl #10
     dd8:	0006d21a 	andeq	sp, r6, sl, lsl r2
     ddc:	08042800 	stmdaeq	r4, {fp, sp}
     de0:	06430239 			; <UNDEFINED> instruction: 0x06430239
     de4:	3c1b0000 	ldccc	0, cr0, [fp], {-0}
     de8:	08000006 	stmdaeq	r0, {r1, r2}
     dec:	0068023b 	rsbeq	r0, r8, fp, lsr r2
     df0:	1b000000 	blne	df8 <startup-0x1ffff208>
     df4:	00000483 	andeq	r0, r0, r3, lsl #9
     df8:	18024008 	stmdane	r2, {r3, lr}
     dfc:	04000007 	streq	r0, [r0], #-7
     e00:	0005131b 	andeq	r1, r5, fp, lsl r3
     e04:	02400800 	subeq	r0, r0, #0, 16
     e08:	00000718 	andeq	r0, r0, r8, lsl r7
     e0c:	04de1b08 	ldrbeq	r1, [lr], #2824	; 0xb08
     e10:	40080000 	andmi	r0, r8, r0
     e14:	00071802 	andeq	r1, r7, r2, lsl #16
     e18:	951b0c00 	ldrls	r0, [fp, #-3072]	; 0xfffff400
     e1c:	08000006 	stmdaeq	r0, {r1, r2}
     e20:	00680242 	rsbeq	r0, r8, r2, asr #4
     e24:	1b100000 	blne	400e2c <startup-0x1fbff1d4>
     e28:	000003e3 	andeq	r0, r0, r3, ror #7
     e2c:	fa024308 	blx	91a54 <startup-0x1ff6e5ac>
     e30:	14000008 	strne	r0, [r0], #-8
     e34:	0006b11b 	andeq	fp, r6, fp, lsl r1
     e38:	02460800 	subeq	r0, r6, #0, 16
     e3c:	00000068 	andeq	r0, r0, r8, rrx
     e40:	069f1b30 			; <UNDEFINED> instruction: 0x069f1b30
     e44:	47080000 	strmi	r0, [r8, -r0]
     e48:	00090f02 	andeq	r0, r9, r2, lsl #30
     e4c:	dd1b3400 	cfldrsle	mvf3, [fp, #-0]
     e50:	08000005 	stmdaeq	r0, {r0, r2}
     e54:	00680249 	rsbeq	r0, r8, r9, asr #4
     e58:	1b380000 	blne	e00e60 <startup-0x1f1ff1a0>
     e5c:	000006a7 	andeq	r0, r0, r7, lsr #13
     e60:	20024b08 	andcs	r4, r2, r8, lsl #22
     e64:	3c000009 	stccc	0, cr0, [r0], {9}
     e68:	0005651b 	andeq	r6, r5, fp, lsl r5
     e6c:	024e0800 	subeq	r0, lr, #0, 16
     e70:	00000259 	andeq	r0, r0, r9, asr r2
     e74:	04fd1b40 	ldrbteq	r1, [sp], #2880	; 0xb40
     e78:	4f080000 	svcmi	0x00080000
     e7c:	00006802 	andeq	r6, r0, r2, lsl #16
     e80:	251b4400 	ldrcs	r4, [fp, #-1024]	; 0xfffffc00
     e84:	08000008 	stmdaeq	r0, {r3}
     e88:	02590250 	subseq	r0, r9, #80, 4
     e8c:	1b480000 	blne	1200e94 <startup-0x1edff16c>
     e90:	000005fc 	strdeq	r0, [r0], -ip
     e94:	26025108 	strcs	r5, [r2], -r8, lsl #2
     e98:	4c000009 	stcmi	0, cr0, [r0], {9}
     e9c:	00051b1b 	andeq	r1, r5, fp, lsl fp
     ea0:	02540800 	subseq	r0, r4, #0, 16
     ea4:	00000068 	andeq	r0, r0, r8, rrx
     ea8:	04931b50 	ldreq	r1, [r3], #2896	; 0xb50
     eac:	55080000 	strpl	r0, [r8, #-0]
     eb0:	00014902 	andeq	r4, r1, r2, lsl #18
     eb4:	351b5400 	ldrcc	r5, [fp, #-1024]	; 0xfffffc00
     eb8:	08000006 	stmdaeq	r0, {r1, r2}
     ebc:	08d80278 	ldmeq	r8, {r3, r4, r5, r6, r9}^
     ec0:	1c580000 	mrane	r0, r8, acc0
     ec4:	000005d5 	ldrdeq	r0, [r0], -r5
     ec8:	76027c08 	strvc	r7, [r2], -r8, lsl #24
     ecc:	48000003 	stmdami	r0, {r0, r1}
     ed0:	053d1c01 	ldreq	r1, [sp, #-3073]!	; 0xfffff3ff
     ed4:	7d080000 	stcvc	0, cr0, [r8, #-0]
     ed8:	00033802 	andeq	r3, r3, r2, lsl #16
     edc:	1c014c00 	stcne	12, cr4, [r1], {-0}
     ee0:	000007c6 	andeq	r0, r0, r6, asr #15
     ee4:	37028108 	strcc	r8, [r2, -r8, lsl #2]
     ee8:	dc000009 	stcle	0, cr0, [r0], {9}
     eec:	046c1c02 	strbteq	r1, [ip], #-3074	; 0xfffff3fe
     ef0:	86080000 	strhi	r0, [r8], -r0
     ef4:	0006dd02 	andeq	sp, r6, r2, lsl #26
     ef8:	1c02e000 	stcne	0, cr14, [r2], {-0}
     efc:	0000045f 	andeq	r0, r0, pc, asr r4
     f00:	43028808 	movwmi	r8, #10248	; 0x2808
     f04:	ec000009 	stc	0, cr0, [r0], {9}
     f08:	040c0002 	streq	r0, [ip], #-2
     f0c:	000004e8 	andeq	r0, r0, r8, ror #9
     f10:	00006818 	andeq	r6, r0, r8, lsl r8
     f14:	00066700 	andeq	r6, r6, r0, lsl #14
     f18:	05061900 	streq	r1, [r6, #-2304]	; 0xfffff700
     f1c:	f9190000 			; <UNDEFINED> instruction: 0xf9190000
     f20:	19000001 	stmdbne	r0, {r0}
     f24:	00000667 	andeq	r0, r0, r7, ror #12
     f28:	00006819 	andeq	r6, r0, r9, lsl r8
     f2c:	040c0000 	streq	r0, [ip], #-0
     f30:	00000156 	andeq	r0, r0, r6, asr r1
     f34:	0649040c 	strbeq	r0, [r9], -ip, lsl #8
     f38:	7c180000 	ldcvc	0, cr0, [r8], {-0}
     f3c:	91000001 	tstls	r0, r1
     f40:	19000006 	stmdbne	r0, {r1, r2}
     f44:	00000506 	andeq	r0, r0, r6, lsl #10
     f48:	0001f919 	andeq	pc, r1, r9, lsl r9	; <UNPREDICTABLE>
     f4c:	017c1900 	cmneq	ip, r0, lsl #18
     f50:	68190000 	ldmdavs	r9, {}	; <UNPREDICTABLE>
     f54:	00000000 	andeq	r0, r0, r0
     f58:	0673040c 	ldrbteq	r0, [r3], -ip, lsl #8
     f5c:	68180000 	ldmdavs	r8, {}	; <UNPREDICTABLE>
     f60:	ab000000 	blge	f68 <startup-0x1ffff098>
     f64:	19000006 	stmdbne	r0, {r1, r2}
     f68:	00000506 	andeq	r0, r0, r6, lsl #10
     f6c:	0001f919 	andeq	pc, r1, r9, lsl r9	; <UNPREDICTABLE>
     f70:	040c0000 	streq	r0, [ip], #-0
     f74:	00000697 	muleq	r0, r7, r6
     f78:	00002c11 	andeq	r2, r0, r1, lsl ip
     f7c:	0006c100 	andeq	ip, r6, r0, lsl #2
     f80:	006f1200 	rsbeq	r1, pc, r0, lsl #4
     f84:	00020000 	andeq	r0, r2, r0
     f88:	00002c11 	andeq	r2, r0, r1, lsl ip
     f8c:	0006d100 	andeq	sp, r6, r0, lsl #2
     f90:	006f1200 	rsbeq	r1, pc, r0, lsl #4
     f94:	00000000 	andeq	r0, r0, r0
     f98:	00065a0f 	andeq	r5, r6, pc, lsl #20
     f9c:	011f0800 	tsteq	pc, r0, lsl #16
     fa0:	000003be 			; <UNDEFINED> instruction: 0x000003be
     fa4:	0007ad1d 	andeq	sl, r7, sp, lsl sp
     fa8:	23080c00 	movwcs	r0, #35840	; 0x8c00
     fac:	00071201 	andeq	r1, r7, r1, lsl #4
     fb0:	06821b00 	streq	r1, [r2], r0, lsl #22
     fb4:	25080000 	strcs	r0, [r8, #-0]
     fb8:	00071201 	andeq	r1, r7, r1, lsl #4
     fbc:	361b0000 	ldrcc	r0, [fp], -r0
     fc0:	08000005 	stmdaeq	r0, {r0, r2}
     fc4:	00680126 	rsbeq	r0, r8, r6, lsr #2
     fc8:	1b040000 	blne	100fd0 <startup-0x1feff030>
     fcc:	00000654 	andeq	r0, r0, r4, asr r6
     fd0:	18012708 	stmdane	r1, {r3, r8, r9, sl, sp}
     fd4:	08000007 	stmdaeq	r0, {r0, r1, r2}
     fd8:	dd040c00 	stcle	12, cr0, [r4, #-0]
     fdc:	0c000006 	stceq	0, cr0, [r0], {6}
     fe0:	0006d104 	andeq	sp, r6, r4, lsl #2
     fe4:	03db1d00 	bicseq	r1, fp, #0, 26
     fe8:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
     fec:	0753013f 	smmlareq	r3, pc, r1, r0	; <UNPREDICTABLE>
     ff0:	d91b0000 	ldmdble	fp, {}	; <UNPREDICTABLE>
     ff4:	08000006 	stmdaeq	r0, {r1, r2}
     ff8:	07530140 	ldrbeq	r0, [r3, -r0, asr #2]
     ffc:	1b000000 	blne	1004 <startup-0x1fffeffc>
    1000:	00000727 	andeq	r0, r0, r7, lsr #14
    1004:	53014108 	movwpl	r4, #4360	; 0x1108
    1008:	06000007 	streq	r0, [r0], -r7
    100c:	0007641b 	andeq	r6, r7, fp, lsl r4
    1010:	01420800 	cmpeq	r2, r0, lsl #16
    1014:	0000003a 	andeq	r0, r0, sl, lsr r0
    1018:	3a11000c 	bcc	441050 <startup-0x1fbbefb0>
    101c:	63000000 	movwvs	r0, #0
    1020:	12000007 	andne	r0, r0, #7
    1024:	0000006f 	andeq	r0, r0, pc, rrx
    1028:	d01e0002 	andsle	r0, lr, r2
    102c:	64025908 	strvs	r5, [r2], #-2312	; 0xfffff6f8
    1030:	1b000008 	blne	1058 <startup-0x1fffefa8>
    1034:	00000791 	muleq	r0, r1, r7
    1038:	6f025b08 	svcvs	0x00025b08
    103c:	00000000 	andeq	r0, r0, r0
    1040:	0007461b 	andeq	r4, r7, fp, lsl r6
    1044:	025c0800 	subseq	r0, ip, #0, 16
    1048:	00000149 	andeq	r0, r0, r9, asr #2
    104c:	05521b04 	ldrbeq	r1, [r2, #-2820]	; 0xfffff4fc
    1050:	5d080000 	stcpl	0, cr0, [r8, #-0]
    1054:	00086402 	andeq	r6, r8, r2, lsl #8
    1058:	e91b0800 	ldmdb	fp, {fp}
    105c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    1060:	026f025e 	rsbeq	r0, pc, #-536870907	; 0xe0000005
    1064:	1b240000 	blne	90106c <startup-0x1f6fef94>
    1068:	000004ee 	andeq	r0, r0, lr, ror #9
    106c:	68025f08 	stmdavs	r2, {r3, r8, r9, sl, fp, ip, lr}
    1070:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    1074:	00067d1b 	andeq	r7, r6, fp, lsl sp
    1078:	02600800 	rsbeq	r0, r0, #0, 16
    107c:	00000061 	andeq	r0, r0, r1, rrx
    1080:	080c1b50 	stmdaeq	ip, {r4, r6, r8, r9, fp, ip}
    1084:	61080000 	mrsvs	r0, (UNDEF: 8)
    1088:	00071e02 	andeq	r1, r7, r2, lsl #28
    108c:	881b5800 	ldmdahi	fp, {fp, ip, lr}
    1090:	08000006 	stmdaeq	r0, {r1, r2}
    1094:	01e30262 	mvneq	r0, r2, ror #4
    1098:	1b680000 	blne	1a010a0 <startup-0x1e5fef60>
    109c:	00000817 	andeq	r0, r0, r7, lsl r8
    10a0:	e3026308 	movw	r6, #8968	; 0x2308
    10a4:	70000001 	andvc	r0, r0, r1
    10a8:	0006061b 	andeq	r0, r6, fp, lsl r6
    10ac:	02640800 	rsbeq	r0, r4, #0, 16
    10b0:	000001e3 	andeq	r0, r0, r3, ror #3
    10b4:	07bc1b78 			; <UNDEFINED> instruction: 0x07bc1b78
    10b8:	65080000 	strvs	r0, [r8, #-0]
    10bc:	00087402 	andeq	r7, r8, r2, lsl #8
    10c0:	461b8000 	ldrmi	r8, [fp], -r0
    10c4:	08000005 	stmdaeq	r0, {r0, r2}
    10c8:	08840266 	stmeq	r4, {r1, r2, r5, r6, r9}
    10cc:	1b880000 	blne	fe2010d4 <Pedro+0xde1fec78>
    10d0:	00000771 	andeq	r0, r0, r1, ror r7
    10d4:	68026708 	stmdavs	r2, {r3, r8, r9, sl, sp, lr}
    10d8:	a0000000 	andge	r0, r0, r0
    10dc:	0004b41b 	andeq	fp, r4, fp, lsl r4
    10e0:	02680800 	rsbeq	r0, r8, #0, 16
    10e4:	000001e3 	andeq	r0, r0, r3, ror #3
    10e8:	042c1ba4 	strteq	r1, [ip], #-2980	; 0xfffff45c
    10ec:	69080000 	stmdbvs	r8, {}	; <UNPREDICTABLE>
    10f0:	0001e302 	andeq	lr, r1, r2, lsl #6
    10f4:	a31bac00 	tstge	fp, #0, 24
    10f8:	08000004 	stmdaeq	r0, {r2}
    10fc:	01e3026a 	mvneq	r0, sl, ror #4
    1100:	1bb40000 	blne	fed01108 <Pedro+0xdecfecac>
    1104:	000003f3 	strdeq	r0, [r0], -r3
    1108:	e3026b08 	movw	r6, #11016	; 0x2b08
    110c:	bc000001 	stclt	0, cr0, [r0], {1}
    1110:	0004021b 	andeq	r0, r4, fp, lsl r2
    1114:	026c0800 	rsbeq	r0, ip, #0, 16
    1118:	000001e3 	andeq	r0, r0, r3, ror #3
    111c:	063a1bc4 	ldrteq	r1, [sl], -r4, asr #23
    1120:	6d080000 	stcvs	0, cr0, [r8, #-0]
    1124:	00006802 	andeq	r6, r0, r2, lsl #16
    1128:	1100cc00 	tstne	r0, r0, lsl #24
    112c:	0000014f 	andeq	r0, r0, pc, asr #2
    1130:	00000874 	andeq	r0, r0, r4, ror r8
    1134:	00006f12 	andeq	r6, r0, r2, lsl pc
    1138:	11001900 	tstne	r0, r0, lsl #18
    113c:	0000014f 	andeq	r0, r0, pc, asr #2
    1140:	00000884 	andeq	r0, r0, r4, lsl #17
    1144:	00006f12 	andeq	r6, r0, r2, lsl pc
    1148:	11000700 	tstne	r0, r0, lsl #14
    114c:	0000014f 	andeq	r0, r0, pc, asr #2
    1150:	00000894 	muleq	r0, r4, r8
    1154:	00006f12 	andeq	r6, r0, r2, lsl pc
    1158:	1e001700 	cdpne	7, 0, cr1, cr0, cr0, {0}
    115c:	027208f0 	rsbseq	r0, r2, #240, 16	; 0xf00000
    1160:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1164:	0005c51b 	andeq	ip, r5, fp, lsl r5
    1168:	02750800 	rsbseq	r0, r5, #0, 16
    116c:	000008b8 			; <UNDEFINED> instruction: 0x000008b8
    1170:	07b31b00 	ldreq	r1, [r3, r0, lsl #22]!
    1174:	76080000 	strvc	r0, [r8], -r0
    1178:	0008c802 	andeq	ip, r8, r2, lsl #16
    117c:	11007800 	tstne	r0, r0, lsl #16
    1180:	000003b8 			; <UNDEFINED> instruction: 0x000003b8
    1184:	000008c8 	andeq	r0, r0, r8, asr #17
    1188:	00006f12 	andeq	r6, r0, r2, lsl pc
    118c:	11001d00 	tstne	r0, r0, lsl #26
    1190:	0000006f 	andeq	r0, r0, pc, rrx
    1194:	000008d8 	ldrdeq	r0, [r0], -r8
    1198:	00006f12 	andeq	r6, r0, r2, lsl pc
    119c:	1f001d00 	svcne	0x00001d00
    11a0:	025708f0 	subseq	r0, r7, #240, 16	; 0xf00000
    11a4:	000008fa 	strdeq	r0, [r0], -sl
    11a8:	0006d220 	andeq	sp, r6, r0, lsr #4
    11ac:	026e0800 	rsbeq	r0, lr, #0, 16
    11b0:	00000763 	andeq	r0, r0, r3, ror #14
    11b4:	0007d620 	andeq	sp, r7, r0, lsr #12
    11b8:	02770800 	rsbseq	r0, r7, #0, 16
    11bc:	00000894 	muleq	r0, r4, r8
    11c0:	014f1100 	mrseq	r1, (UNDEF: 95)
    11c4:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    11c8:	6f120000 	svcvs	0x00120000
    11cc:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    11d0:	04210e00 	strteq	r0, [r1], #-3584	; 0xfffff200
    11d4:	040c0000 	streq	r0, [ip], #-0
    11d8:	0000090a 	andeq	r0, r0, sl, lsl #18
    11dc:	00092021 	andeq	r2, r9, r1, lsr #32
    11e0:	05061900 	streq	r1, [r6, #-2304]	; 0xfffff700
    11e4:	0c000000 	stceq	0, cr0, [r0], {-0}
    11e8:	00091504 	andeq	r1, r9, r4, lsl #10
    11ec:	59040c00 	stmdbpl	r4, {sl, fp}
    11f0:	21000002 	tstcs	r0, r2
    11f4:	00000937 	andeq	r0, r0, r7, lsr r9
    11f8:	00006819 	andeq	r6, r0, r9, lsl r8
    11fc:	040c0000 	streq	r0, [ip], #-0
    1200:	0000093d 	andeq	r0, r0, sp, lsr r9
    1204:	092c040c 	stmdbeq	ip!, {r2, r3, sl}
    1208:	d1110000 	tstle	r1, r0
    120c:	53000006 	movwpl	r0, #6
    1210:	12000009 	andne	r0, r0, #9
    1214:	0000006f 	andeq	r0, r0, pc, rrx
    1218:	85220002 	strhi	r0, [r2, #-2]!
    121c:	08000007 	stmdaeq	r0, {r0, r1, r2}
    1220:	05060307 	streq	r0, [r6, #-775]	; 0xfffffcf9
    1224:	7e220000 	cdpvc	0, 2, cr0, cr2, cr0, {0}
    1228:	08000007 	stmdaeq	r0, {r0, r1, r2}
    122c:	050c0308 	streq	r0, [ip, #-776]	; 0xfffffcf8
    1230:	4f110000 	svcmi	0x00110000
    1234:	81000001 	tsthi	r0, r1
    1238:	12000009 	andne	r0, r0, #9
    123c:	0000006f 	andeq	r0, r0, pc, rrx
    1240:	006f12ff 	strdeq	r1, [pc], #-47	; <UNPREDICTABLE>
    1244:	00070000 	andeq	r0, r7, r0
    1248:	00095723 	andeq	r5, r9, r3, lsr #14
    124c:	6b3b0100 	blvs	ec1654 <startup-0x1f13e9ac>
    1250:	24000009 	strcs	r0, [r0], #-9
    1254:	000006da 	ldrdeq	r0, [r0], -sl
    1258:	00763c01 	rsbseq	r3, r6, r1, lsl #24
    125c:	03050000 	movweq	r0, #20480	; 0x5000
    1260:	20001b18 	andcs	r1, r0, r8, lsl fp
    1264:	00082a25 	andeq	r2, r8, r5, lsr #20
    1268:	01150100 	tsteq	r5, r0, lsl #2
    126c:	20000d18 	andcs	r0, r0, r8, lsl sp
    1270:	00000030 	andeq	r0, r0, r0, lsr r0
    1274:	09ee9c01 	stmibeq	lr!, {r0, sl, fp, ip, pc}^
    1278:	20260000 	eorcs	r0, r6, r0
    127c:	01000007 	tsteq	r0, r7
    1280:	09ee0118 	stmibeq	lr!, {r3, r4, r8}^
    1284:	91020000 	mrsls	r0, (UNDEF: 2)
    1288:	0061275c 	rsbeq	r2, r1, ip, asr r7
    128c:	68011901 	stmdavs	r1, {r0, r8, fp, ip}
    1290:	02000000 	andeq	r0, r0, #0
    1294:	f4287491 	vld3.32	{d7-d9}, [r8 :64], r1
    1298:	01000006 	tsteq	r0, r6
    129c:	000068fd 	strdeq	r6, [r0], -sp
    12a0:	0009e000 	andeq	lr, r9, r0
    12a4:	27002900 	strcs	r2, [r0, -r0, lsl #18]
    12a8:	1c010070 	stcne	0, cr0, [r1], {112}	; 0x70
    12ac:	00006801 	andeq	r6, r0, r1, lsl #16
    12b0:	70910200 	addsvc	r0, r1, r0, lsl #4
    12b4:	014f1100 	mrseq	r1, (UNDEF: 95)
    12b8:	09fe0000 	ldmibeq	lr!, {}^	; <UNPREDICTABLE>
    12bc:	6f120000 	svcvs	0x00120000
    12c0:	13000000 	movwne	r0, #0
    12c4:	058a2a00 	streq	r2, [sl, #2560]	; 0xa00
    12c8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    12cc:	20000cc6 	andcs	r0, r0, r6, asr #25
    12d0:	00000052 	andeq	r0, r0, r2, asr r0
    12d4:	0a589c01 	beq	16282e0 <startup-0x1e9d7d20>
    12d8:	202b0000 	eorcs	r0, fp, r0
    12dc:	01000007 	tsteq	r0, r7
    12e0:	0009eef8 	strdeq	lr, [r9], -r8
    12e4:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
    12e8:	2c20001b 	stccs	0, cr0, [r0], #-108	; 0xffffff94
    12ec:	fc010064 	stc2	0, cr0, [r1], {100}	; 0x64
    12f0:	00000068 	andeq	r0, r0, r8, rrx
    12f4:	28709102 	ldmdacs	r0!, {r1, r8, ip, pc}^
    12f8:	000006f4 	strdeq	r0, [r0], -r4
    12fc:	0068fd01 	rsbeq	pc, r8, r1, lsl #26
    1300:	0a410000 	beq	1041308 <startup-0x1efbecf8>
    1304:	00290000 	eoreq	r0, r9, r0
    1308:	000ccc2d 	andeq	ip, ip, sp, lsr #24
    130c:	00001c20 	andeq	r1, r0, r0, lsr #24
    1310:	00692c00 	rsbeq	r2, r9, r0, lsl #24
    1314:	0068f901 	rsbeq	pc, r8, r1, lsl #18
    1318:	91020000 	mrsls	r0, (UNDEF: 2)
    131c:	2e000074 	mcrcs	0, 0, r0, cr0, cr4, {3}
    1320:	0000055f 	andeq	r0, r0, pc, asr r5
    1324:	0cbcf101 	ldfeqd	f7, [ip], #4
    1328:	000a2000 	andeq	r2, sl, r0
    132c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1330:	0005232f 	andeq	r2, r5, pc, lsr #6
    1334:	4cd90100 	ldfmie	f0, [r9], {0}
    1338:	7020000c 	eorvc	r0, r0, ip
    133c:	01000000 	mrseq	r0, (UNDEF: 0)
    1340:	000ac19c 	muleq	sl, ip, r1
    1344:	08113000 	ldmdaeq	r1, {ip, sp}
    1348:	d9010000 	stmdble	r1, {}	; <UNPREDICTABLE>
    134c:	00000068 	andeq	r0, r0, r8, rrx
    1350:	7f9c9103 	svcvc	0x009c9103
    1354:	0007992b 	andeq	r9, r7, fp, lsr #18
    1358:	68db0100 	ldmvs	fp, {r8}^
    135c:	02000000 	andeq	r0, r0, #0
    1360:	ef2b7091 	svc	0x002b7091
    1364:	01000005 	tsteq	r0, r5
    1368:	000ac1dd 	ldrdeq	ip, [sl], -sp
    136c:	a0910300 	addsge	r0, r1, r0, lsl #6
    1370:	0c7c2d7f 	ldcleq	13, cr2, [ip], #-508	; 0xfffffe04
    1374:	00302000 	eorseq	r2, r0, r0
    1378:	692c0000 	stmdbvs	ip!, {}	; <UNPREDICTABLE>
    137c:	68e00100 	stmiavs	r0!, {r8}^
    1380:	02000000 	andeq	r0, r0, #0
    1384:	00007491 	muleq	r0, r1, r4
    1388:	00014f11 	andeq	r4, r1, r1, lsl pc
    138c:	000ad700 	andeq	sp, sl, r0, lsl #14
    1390:	006f1200 	rsbeq	r1, pc, r0, lsl #4
    1394:	12130000 	andsne	r0, r3, #0
    1398:	0000006f 	andeq	r0, r0, pc, rrx
    139c:	cb2f0003 	blgt	bc13b0 <startup-0x1f43ec50>
    13a0:	01000003 	tsteq	r0, r3
    13a4:	000c00c8 	andeq	r0, ip, r8, asr #1
    13a8:	00004c20 	andeq	r4, r0, r0, lsr #24
    13ac:	099c0100 	ldmibeq	ip, {r8}
    13b0:	3000000b 	andcc	r0, r0, fp
    13b4:	00000811 	andeq	r0, r0, r1, lsl r8
    13b8:	0068c801 	rsbeq	ip, r8, r1, lsl #16
    13bc:	91020000 	mrsls	r0, (UNDEF: 2)
    13c0:	03ee3074 	mvneq	r3, #116	; 0x74
    13c4:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    13c8:	0000014f 	andeq	r0, r0, pc, asr #2
    13cc:	00739102 	rsbseq	r9, r3, r2, lsl #2
    13d0:	0007ff2f 	andeq	pc, r7, pc, lsr #30
    13d4:	90aa0100 	adcls	r0, sl, r0, lsl #2
    13d8:	7020000b 	eorvc	r0, r0, fp
    13dc:	01000000 	mrseq	r0, (UNDEF: 0)
    13e0:	000b739c 	muleq	fp, ip, r3
    13e4:	041c3000 	ldreq	r3, [ip], #-0
    13e8:	aa010000 	bge	413f0 <startup-0x1ffbec10>
    13ec:	00000068 	andeq	r0, r0, r8, rrx
    13f0:	30449102 	subcc	r9, r4, r2, lsl #2
    13f4:	00000531 	andeq	r0, r0, r1, lsr r5
    13f8:	0068aa01 	rsbeq	sl, r8, r1, lsl #20
    13fc:	91020000 	mrsls	r0, (UNDEF: 2)
    1400:	00622c40 	rsbeq	r2, r2, r0, asr #24
    1404:	0b73ab01 	bleq	1cec010 <startup-0x1e313ff0>
    1408:	91020000 	mrsls	r0, (UNDEF: 2)
    140c:	0bac2d48 	bleq	feb0c934 <Pedro+0xdeb0a4d8>
    1410:	00462000 	subeq	r2, r6, r0
    1414:	6a2c0000 	bvs	b0141c <startup-0x1f4febe4>
    1418:	68bf0100 	ldmvs	pc!, {r8}	; <UNPREDICTABLE>
    141c:	02000000 	andeq	r0, r0, #0
    1420:	b22d6c91 	eorlt	r6, sp, #37120	; 0x9100
    1424:	3420000b 	strtcc	r0, [r0], #-11
    1428:	2c000000 	stccs	0, cr0, [r0], {-0}
    142c:	c0010069 	andgt	r0, r1, r9, rrx
    1430:	00000068 	andeq	r0, r0, r8, rrx
    1434:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1438:	4f110000 	svcmi	0x00110000
    143c:	89000001 	stmdbhi	r0, {r0}
    1440:	1200000b 	andne	r0, r0, #11
    1444:	0000006f 	andeq	r0, r0, pc, rrx
    1448:	006f120f 	rsbeq	r1, pc, pc, lsl #4
    144c:	00010000 	andeq	r0, r1, r0
    1450:	00072d2a 	andeq	r2, r7, sl, lsr #26
    1454:	80a40100 	adchi	r0, r4, r0, lsl #2
    1458:	1020000b 	eorne	r0, r0, fp
    145c:	01000000 	mrseq	r0, (UNDEF: 0)
    1460:	000bac9c 	muleq	fp, ip, ip
    1464:	05233100 	streq	r3, [r3, #-256]!	; 0xffffff00
    1468:	a1010000 	mrsge	r0, (UNDEF: 1)
    146c:	00000068 	andeq	r0, r0, r8, rrx
    1470:	2a000029 	bcs	151c <startup-0x1fffeae4>
    1474:	00000614 	andeq	r0, r0, r4, lsl r6
    1478:	0b70a001 	bleq	1c29484 <startup-0x1e3d6b7c>
    147c:	00102000 	andseq	r2, r0, r0
    1480:	9c010000 	stcls	0, cr0, [r1], {-0}
    1484:	00000bcf 	andeq	r0, r0, pc, asr #23
    1488:	00052331 	andeq	r2, r5, r1, lsr r3
    148c:	68a10100 	stmiavs	r1!, {r8}
    1490:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    1494:	442a0000 	strtmi	r0, [sl], #-0
    1498:	01000004 	tsteq	r0, r4
    149c:	000b2470 	andeq	r2, fp, r0, ror r4
    14a0:	00004c20 	andeq	r4, r0, r0, lsr #24
    14a4:	2a9c0100 	bcs	fe7018ac <Pedro+0xde6ff450>
    14a8:	2d00000c 	stccs	0, cr0, [r0, #-48]	; 0xffffffd0
    14ac:	20000b28 	andcs	r0, r0, r8, lsr #22
    14b0:	00000042 	andeq	r0, r0, r2, asr #32
    14b4:	00058a28 	andeq	r8, r5, r8, lsr #20
    14b8:	688a0100 	stmvs	sl, {r8}
    14bc:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
    14c0:	2900000b 	stmdbcs	r0, {r0, r1, r3}
    14c4:	0c113200 	lfmeq	f3, 4, [r1], {-0}
    14c8:	14310000 	ldrtne	r0, [r1], #-0
    14cc:	01000006 	tsteq	r0, r6
    14d0:	00006882 	andeq	r6, r0, r2, lsl #17
    14d4:	00002900 	andeq	r2, r0, r0, lsl #18
    14d8:	000b3a2d 	andeq	r3, fp, sp, lsr #20
    14dc:	00000420 	andeq	r0, r0, r0, lsr #8
    14e0:	072d3100 	streq	r3, [sp, -r0, lsl #2]!
    14e4:	85010000 	strhi	r0, [r1, #-0]
    14e8:	00000068 	andeq	r0, r0, r8, rrx
    14ec:	00000029 	andeq	r0, r0, r9, lsr #32
    14f0:	08d73300 	ldmeq	r7, {r8, r9, ip, sp}^
    14f4:	50010000 	andpl	r0, r1, r0
    14f8:	20000ae8 	andcs	r0, r0, r8, ror #21
    14fc:	0000003c 	andeq	r0, r0, ip, lsr r0
    1500:	2c2e9c01 	stccs	12, cr9, [lr], #-4
    1504:	01000006 	tsteq	r0, r6
    1508:	000a8841 	andeq	r8, sl, r1, asr #16
    150c:	00006020 	andeq	r6, r0, r0, lsr #32
    1510:	349c0100 	ldrcc	r0, [ip], #256	; 0x100
    1514:	00000718 	andeq	r0, r0, r8, lsl r7
    1518:	00002f01 	andeq	r2, r0, r1, lsl #30
    151c:	000c2000 	andeq	r2, ip, r0
    1520:	9c010000 	stcls	0, cr0, [r1], {-0}
    1524:	00088900 	andeq	r8, r8, r0, lsl #18
    1528:	17000400 	strne	r0, [r0, -r0, lsl #8]
    152c:	04000007 	streq	r0, [r0], #-7
    1530:	00003501 	andeq	r3, r0, r1, lsl #10
    1534:	0a2c0c00 	beq	b0453c <startup-0x1f4fbac4>
    1538:	00000000 	andeq	r0, r0, r0
    153c:	0d480000 	stcleq	0, cr0, [r8, #-0]
    1540:	0a142000 	beq	509548 <startup-0x1faf6ab8>
    1544:	06360000 	ldrteq	r0, [r6], -r0
    1548:	01020000 	mrseq	r0, (UNDEF: 2)
    154c:	0001e106 	andeq	lr, r1, r6, lsl #2
    1550:	08ee0300 	stmiaeq	lr!, {r8, r9}^
    1554:	2b020000 	blcs	8155c <startup-0x1ff7eaa4>
    1558:	00000037 	andeq	r0, r0, r7, lsr r0
    155c:	df080102 	svcle	0x00080102
    1560:	02000001 	andeq	r0, r0, #1
    1564:	01320502 	teqeq	r2, r2, lsl #10
    1568:	02020000 	andeq	r0, r2, #0
    156c:	00022507 	andeq	r2, r2, r7, lsl #10
    1570:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1574:	000001af 	andeq	r0, r0, pc, lsr #3
    1578:	f7070402 			; <UNDEFINED> instruction: 0xf7070402
    157c:	02000001 	andeq	r0, r0, #1
    1580:	01aa0508 			; <UNDEFINED> instruction: 0x01aa0508
    1584:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1588:	0001f207 	andeq	pc, r1, r7, lsl #4
    158c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1590:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1594:	fc070402 	stc2	4, cr0, [r7], {2}
    1598:	03000001 	movweq	r0, #1
    159c:	000008f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    15a0:	002c1803 	eoreq	r1, ip, r3, lsl #16
    15a4:	02050000 	andeq	r0, r5, #0
    15a8:	00a20c04 	adceq	r0, r2, r4, lsl #24
    15ac:	76060000 	strvc	r0, [r6], -r0
    15b0:	04000003 	streq	r0, [r0], #-3
    15b4:	0000370d 	andeq	r3, r0, sp, lsl #14
    15b8:	a9060000 	stmdbge	r6, {}	; <UNPREDICTABLE>
    15bc:	04000003 	streq	r0, [r0], #-3
    15c0:	0000370e 	andeq	r3, r0, lr, lsl #14
    15c4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    15c8:	bb0a0404 	bllt	2825e0 <startup-0x1fd7da20>
    15cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    15d0:	00726469 	rsbseq	r6, r2, r9, ror #8
    15d4:	006f0b04 	rsbeq	r0, pc, r4, lsl #22
    15d8:	81090000 	mrshi	r0, (UNDEF: 9)
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	13040205 	movwne	r0, #16901	; 0x4205
    15e4:	000000dc 	ldrdeq	r0, [r0], -ip
    15e8:	00036f06 	andeq	r6, r3, r6, lsl #30
    15ec:	37140400 	ldrcc	r0, [r4, -r0, lsl #8]
    15f0:	00000000 	andeq	r0, r0, r0
    15f4:	00035a06 	andeq	r5, r3, r6, lsl #20
    15f8:	37150400 	ldrcc	r0, [r5, -r0, lsl #8]
    15fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1600:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    1604:	0000f511 	andeq	pc, r0, r1, lsl r5	; <UNPREDICTABLE>
    1608:	646f0800 	strbtvs	r0, [pc], #-2048	; 1610 <startup-0x1fffe9f0>
    160c:	12040072 	andne	r0, r4, #114	; 0x72
    1610:	0000006f 	andeq	r0, r0, pc, rrx
    1614:	0000bb09 	andeq	fp, r0, r9, lsl #22
    1618:	920a0000 	andls	r0, sl, #0
    161c:	18000003 	stmdane	r0, {r0, r1}
    1620:	013e0404 	teqeq	lr, r4, lsl #8
    1624:	4f060000 	svcmi	0x00060000
    1628:	04000003 	streq	r0, [r0], #-3
    162c:	00006f05 	andeq	r6, r0, r5, lsl #30
    1630:	62060000 	andvs	r0, r6, #0
    1634:	04000003 	streq	r0, [r0], #-3
    1638:	00006f06 	andeq	r6, r0, r6, lsl #30
    163c:	b1060400 	tstlt	r6, r0, lsl #8
    1640:	04000003 	streq	r0, [r0], #-3
    1644:	00006f07 	andeq	r6, r0, r7, lsl #30
    1648:	69060800 	stmdbvs	r6, {fp}
    164c:	04000003 	streq	r0, [r0], #-3
    1650:	00006f08 	andeq	r6, r0, r8, lsl #30
    1654:	a20b0c00 	andge	r0, fp, #0, 24
    1658:	10000000 	andne	r0, r0, r0
    165c:	0000dc0b 	andeq	sp, r0, fp, lsl #24
    1660:	03001400 	movweq	r1, #1024	; 0x400
    1664:	000003a4 	andeq	r0, r0, r4, lsr #7
    1668:	00f51804 	rscseq	r1, r5, r4, lsl #16
    166c:	760c0000 	strvc	r0, [ip], -r0
    1670:	5f000000 	svcpl	0x00000000
    1674:	0d000001 	stceq	0, cr0, [r0, #-4]
    1678:	0000006f 	andeq	r0, r0, pc, rrx
    167c:	006f0dff 	strdeq	r0, [pc], #-223	; <UNPREDICTABLE>
    1680:	00070000 	andeq	r0, r7, r0
    1684:	0009570e 	andeq	r5, r9, lr, lsl #14
    1688:	49060100 	stmdbmi	r6, {r8}
    168c:	05000001 	streq	r0, [r0, #-1]
    1690:	001b1c03 	andseq	r1, fp, r3, lsl #24
    1694:	0a710f20 	beq	1c4531c <startup-0x1e3bace4>
    1698:	64010000 	strvs	r0, [r1], #-0
    169c:	00170801 	andseq	r0, r7, r1, lsl #16
    16a0:	00005420 	andeq	r5, r0, r0, lsr #8
    16a4:	c19c0100 	orrsgt	r0, ip, r0, lsl #2
    16a8:	10000001 	andne	r0, r0, r1
    16ac:	00727473 	rsbseq	r7, r2, r3, ror r4
    16b0:	c1016401 	tstgt	r1, r1, lsl #8
    16b4:	02000001 	andeq	r0, r0, #1
    16b8:	63106c91 	tstvs	r0, #37120	; 0x9100
    16bc:	01006c6f 	tsteq	r0, pc, ror #24
    16c0:	00680164 	rsbeq	r0, r8, r4, ror #2
    16c4:	91020000 	mrsls	r0, (UNDEF: 2)
    16c8:	6f721068 	svcvs	0x00721068
    16cc:	64010077 	strvs	r0, [r1], #-119	; 0xffffff89
    16d0:	00006801 	andeq	r6, r0, r1, lsl #16
    16d4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    16d8:	01007311 	tsteq	r0, r1, lsl r3
    16dc:	01c10168 	biceq	r0, r1, r8, ror #2
    16e0:	91020000 	mrsls	r0, (UNDEF: 2)
    16e4:	04120074 	ldreq	r0, [r2], #-116	; 0xffffff8c
    16e8:	000001c7 	andeq	r0, r0, r7, asr #3
    16ec:	e8080102 	stmda	r8, {r1, r8}
    16f0:	0f000001 	svceq	0x00000001
    16f4:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    16f8:	ba015a01 	blt	57f04 <startup-0x1ffa80fc>
    16fc:	4e200016 	miami	acc0, r6, r0
    1700:	01000000 	mrseq	r0, (UNDEF: 0)
    1704:	00021c9c 	muleq	r2, ip, ip
    1708:	083f1300 	ldmdaeq	pc!, {r8, r9, ip}	; <UNPREDICTABLE>
    170c:	5a010000 	bpl	41714 <startup-0x1ffbe8ec>
    1710:	00006801 	andeq	r6, r0, r1, lsl #16
    1714:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1718:	776f7210 			; <UNDEFINED> instruction: 0x776f7210
    171c:	015a0100 	cmpeq	sl, r0, lsl #2
    1720:	00000068 	andeq	r0, r0, r8, rrx
    1724:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
    1728:	200016dc 	ldrdcs	r1, [r0], -ip
    172c:	00000024 	andeq	r0, r0, r4, lsr #32
    1730:	00025e15 	andeq	r5, r2, r5, lsl lr
    1734:	015c0100 	cmpeq	ip, r0, lsl #2
    1738:	0000006f 	andeq	r0, r0, pc, rrx
    173c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1740:	09930f00 	ldmibeq	r3, {r8, r9, sl, fp}
    1744:	53010000 	movwpl	r0, #4096	; 0x1000
    1748:	00167e01 	andseq	r7, r6, r1, lsl #28
    174c:	00003c20 	andeq	r3, r0, r0, lsr #24
    1750:	5e9c0100 	fmlple	f0, f4, f0
    1754:	10000002 	andne	r0, r0, r2
    1758:	53010063 	movwpl	r0, #4195	; 0x1063
    175c:	00003701 	andeq	r3, r0, r1, lsl #14
    1760:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1764:	00002916 	andeq	r2, r0, r6, lsl r9
    1768:	682e0100 	stmdavs	lr!, {r8}
    176c:	50000000 	andpl	r0, r0, r0
    1770:	17000002 	strne	r0, [r0, -r2]
    1774:	00f31800 	rscseq	r1, r3, r0, lsl #16
    1778:	30010000 	andcc	r0, r1, r0
    177c:	00000068 	andeq	r0, r0, r8, rrx
    1780:	19000017 	stmdbne	r0, {r0, r1, r2, r4}
    1784:	0000096d 	andeq	r0, r0, sp, ror #18
    1788:	62014d01 	andvs	r4, r1, #1, 26	; 0x40
    178c:	1c200016 	stcne	0, cr0, [r0], #-88	; 0xffffffa8
    1790:	01000000 	mrseq	r0, (UNDEF: 0)
    1794:	0002829c 	muleq	r2, ip, r2
    1798:	00291800 	eoreq	r1, r9, r0, lsl #16
    179c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    17a0:	00000068 	andeq	r0, r0, r8, rrx
    17a4:	0f000017 	svceq	0x00000017
    17a8:	000008d1 	ldrdeq	r0, [r0], -r1
    17ac:	10013b01 	andne	r3, r1, r1, lsl #22
    17b0:	52200016 	eorpl	r0, r0, #22
    17b4:	01000000 	mrseq	r0, (UNDEF: 0)
    17b8:	0002a69c 	muleq	r2, ip, r6
    17bc:	00291800 	eoreq	r1, r9, r0, lsl #16
    17c0:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    17c4:	00000068 	andeq	r0, r0, r8, rrx
    17c8:	0f000017 	svceq	0x00000017
    17cc:	0000090b 	andeq	r0, r0, fp, lsl #18
    17d0:	d4013401 	strle	r3, [r1], #-1025	; 0xfffffbff
    17d4:	3c200015 	stccc	0, cr0, [r0], #-84	; 0xffffffac
    17d8:	01000000 	mrseq	r0, (UNDEF: 0)
    17dc:	0002ea9c 	muleq	r2, ip, sl
    17e0:	08851300 	stmeq	r5, {r8, r9, ip}
    17e4:	34010000 	strcc	r0, [r1], #-0
    17e8:	00003701 	andeq	r3, r0, r1, lsl #14
    17ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    17f0:	00002916 	andeq	r2, r0, r6, lsl r9
    17f4:	682e0100 	stmdavs	lr!, {r8}
    17f8:	dc000000 	stcle	0, cr0, [r0], {-0}
    17fc:	17000002 	strne	r0, [r0, -r2]
    1800:	00f31800 	rscseq	r1, r3, r0, lsl #16
    1804:	30010000 	andcc	r0, r1, r0
    1808:	00000068 	andeq	r0, r0, r8, rrx
    180c:	1a000017 	bne	1870 <startup-0x1fffe790>
    1810:	00000a03 	andeq	r0, r0, r3, lsl #20
    1814:	37012a01 	strcc	r2, [r1, -r1, lsl #20]
    1818:	94000000 	strls	r0, [r0], #-0
    181c:	40200015 	eormi	r0, r0, r5, lsl r0
    1820:	01000000 	mrseq	r0, (UNDEF: 0)
    1824:	0003129c 	muleq	r3, ip, r2
    1828:	00631100 	rsbeq	r1, r3, r0, lsl #2
    182c:	37012b01 	strcc	r2, [r1, -r1, lsl #22]
    1830:	02000000 	andeq	r0, r0, #0
    1834:	1a006f91 	bne	1d680 <startup-0x1ffe2980>
    1838:	00000a61 	andeq	r0, r0, r1, ror #20
    183c:	37012101 	strcc	r2, [r1, -r1, lsl #2]
    1840:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    1844:	3c200015 	stccc	0, cr0, [r0], #-84	; 0xffffffac
    1848:	01000000 	mrseq	r0, (UNDEF: 0)
    184c:	00033a9c 	muleq	r3, ip, sl
    1850:	00631100 	rsbeq	r1, r3, r0, lsl #2
    1854:	37012201 	strcc	r2, [r1, -r1, lsl #4]
    1858:	02000000 	andeq	r0, r0, #0
    185c:	1a006f91 	bne	1d6a8 <startup-0x1ffe2958>
    1860:	000009a4 	andeq	r0, r0, r4, lsr #19
    1864:	37011701 	strcc	r1, [r1, -r1, lsl #14]
    1868:	26000000 	strcs	r0, [r0], -r0
    186c:	32200015 	eorcc	r0, r0, #21
    1870:	01000000 	mrseq	r0, (UNDEF: 0)
    1874:	0003709c 	muleq	r3, ip, r0
    1878:	00631100 	rsbeq	r1, r3, r0, lsl #2
    187c:	37011801 	strcc	r1, [r1, -r1, lsl #16]
    1880:	02000000 	andeq	r0, r0, #0
    1884:	ff1b7791 			; <UNDEFINED> instruction: 0xff1b7791
    1888:	01000000 	mrseq	r0, (UNDEF: 0)
    188c:	00680108 	rsbeq	r0, r8, r8, lsl #2
    1890:	00170000 	andseq	r0, r7, r0
    1894:	09ba0f00 	ldmibeq	sl!, {r8, r9, sl, fp}
    1898:	11010000 	mrsne	r0, (UNDEF: 1)
    189c:	0014fc01 	andseq	pc, r4, r1, lsl #24
    18a0:	00002a20 	andeq	r2, r0, r0, lsr #20
    18a4:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    18a8:	13000003 	movwne	r0, #3
    18ac:	000008e9 	andeq	r0, r0, r9, ror #17
    18b0:	37011101 	strcc	r1, [r1, -r1, lsl #2]
    18b4:	02000000 	andeq	r0, r0, #0
    18b8:	0f007791 	svceq	0x00007791
    18bc:	00000a7f 	andeq	r0, r0, pc, ror sl
    18c0:	d8010c01 	stmdale	r1, {r0, sl, fp}
    18c4:	24200014 	strtcs	r0, [r0], #-20	; 0xffffffec
    18c8:	01000000 	mrseq	r0, (UNDEF: 0)
    18cc:	0003bc9c 	muleq	r3, ip, ip
    18d0:	08851300 	stmeq	r5, {r8, r9, ip}
    18d4:	0c010000 	stceq	0, cr0, [r1], {-0}
    18d8:	00003701 	andeq	r3, r0, r1, lsl #14
    18dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    18e0:	0a150f00 	beq	5454e8 <startup-0x1fabab18>
    18e4:	05010000 	streq	r0, [r1, #-0]
    18e8:	0014a801 	andseq	sl, r4, r1, lsl #16
    18ec:	00003020 	andeq	r3, r0, r0, lsr #32
    18f0:	ee9c0100 	fmle	f0, f4, f0
    18f4:	10000003 	andne	r0, r0, r3
    18f8:	05010063 	streq	r0, [r1, #-99]	; 0xffffff9d
    18fc:	00003701 	andeq	r3, r0, r1, lsl #14
    1900:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1904:	0000ff1b 	andeq	pc, r0, fp, lsl pc	; <UNPREDICTABLE>
    1908:	01080100 	mrseq	r0, (UNDEF: 24)
    190c:	00000068 	andeq	r0, r0, r8, rrx
    1910:	1c000017 	stcne	0, cr0, [r0], {23}
    1914:	0000088d 	andeq	r0, r0, sp, lsl #17
    1918:	1460ff01 	strbtne	pc, [r0], #-3841	; 0xfffff0ff	; <UNPREDICTABLE>
    191c:	00482000 	subeq	r2, r8, r0
    1920:	9c010000 	stcls	0, cr0, [r1], {-0}
    1924:	0000041d 	andeq	r0, r0, sp, lsl r4
    1928:	0100781d 	tsteq	r0, sp, lsl r8
    192c:	000037ff 	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
    1930:	6f910200 	svcvs	0x00910200
    1934:	01006311 	tsteq	r0, r1, lsl r3
    1938:	00370100 	eorseq	r0, r7, r0, lsl #2
    193c:	91020000 	mrsls	r0, (UNDEF: 2)
    1940:	461c0077 			; <UNDEFINED> instruction: 0x461c0077
    1944:	01000008 	tsteq	r0, r8
    1948:	00141cf9 			; <UNDEFINED> instruction: 0x00141cf9
    194c:	00004420 	andeq	r4, r0, r0, lsr #8
    1950:	4b9c0100 	blmi	fe701d58 <Pedro+0xde6ff8fc>
    1954:	1d000004 	stcne	0, cr0, [r0, #-16]
    1958:	f9010078 			; <UNDEFINED> instruction: 0xf9010078
    195c:	00000037 	andeq	r0, r0, r7, lsr r0
    1960:	1e6f9102 	lgnnee	f1, f2
    1964:	fa010063 	blx	41af8 <startup-0x1ffbe508>
    1968:	00000037 	andeq	r0, r0, r7, lsr r0
    196c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    1970:	0008591f 	andeq	r5, r8, pc, lsl r9
    1974:	a4ea0100 	strbtge	r0, [sl], #256	; 0x100
    1978:	78200013 	stmdavc	r0!, {r0, r1, r4}
    197c:	01000000 	mrseq	r0, (UNDEF: 0)
    1980:	0004a79c 	muleq	r4, ip, r7
    1984:	13aa2000 			; <UNDEFINED> instruction: 0x13aa2000
    1988:	00442000 	subeq	r2, r4, r0
    198c:	04900000 	ldreq	r0, [r0], #0
    1990:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    1994:	68eb0100 	stmiavs	fp!, {r8}^
    1998:	02000000 	andeq	r0, r0, #0
    199c:	b0147491 	mulslt	r4, r1, r4
    19a0:	32200013 	eorcc	r0, r0, #19
    19a4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    19a8:	ec01006a 	stc	0, cr0, [r1], {106}	; 0x6a
    19ac:	00000068 	andeq	r0, r0, r8, rrx
    19b0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    19b4:	13ee1400 	mvnne	r1, #0, 8
    19b8:	00222000 	eoreq	r2, r2, r0
    19bc:	6a1e0000 	bvs	7819c4 <startup-0x1f87e63c>
    19c0:	68f00100 	ldmvs	r0!, {r8}^
    19c4:	02000000 	andeq	r0, r0, #0
    19c8:	00006c91 	muleq	r0, r1, ip
    19cc:	0009621f 	andeq	r6, r9, pc, lsl r2
    19d0:	30e00100 	rsccc	r0, r0, r0, lsl #2
    19d4:	74200013 	strtvc	r0, [r0], #-19	; 0xffffffed
    19d8:	01000000 	mrseq	r0, (UNDEF: 0)
    19dc:	0005039c 	muleq	r5, ip, r3
    19e0:	13362000 	teqne	r6, #0
    19e4:	00442000 	subeq	r2, r4, r0
    19e8:	04ec0000 	strbteq	r0, [ip], #0
    19ec:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    19f0:	68e10100 	stmiavs	r1!, {r8}^
    19f4:	02000000 	andeq	r0, r0, #0
    19f8:	3c147491 	cfldrscc	mvf7, [r4], {145}	; 0x91
    19fc:	32200013 	eorcc	r0, r0, #19
    1a00:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1a04:	e201006a 	and	r0, r1, #106	; 0x6a
    1a08:	00000068 	andeq	r0, r0, r8, rrx
    1a0c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1a10:	137a1400 	cmnne	sl, #0, 8
    1a14:	001c2000 	andseq	r2, ip, r0
    1a18:	6a1e0000 	bvs	781a20 <startup-0x1f87e5e0>
    1a1c:	68e60100 	stmiavs	r6!, {r8}^
    1a20:	02000000 	andeq	r0, r0, #0
    1a24:	00006c91 	muleq	r0, r1, ip
    1a28:	00086321 	andeq	r6, r8, r1, lsr #6
    1a2c:	50b00100 	adcspl	r0, r0, r0, lsl #2
    1a30:	e0200012 	eor	r0, r0, r2, lsl r0
    1a34:	01000000 	mrseq	r0, (UNDEF: 0)
    1a38:	0005579c 	muleq	r5, ip, r7
    1a3c:	00691e00 	rsbeq	r1, r9, r0, lsl #28
    1a40:	0076b101 	rsbseq	fp, r6, r1, lsl #2
    1a44:	91020000 	mrsls	r0, (UNDEF: 2)
    1a48:	006a1e6f 	rsbeq	r1, sl, pc, ror #28
    1a4c:	0076b101 	rsbseq	fp, r6, r1, lsl #2
    1a50:	91020000 	mrsls	r0, (UNDEF: 2)
    1a54:	09af226e 	stmibeq	pc!, {r1, r2, r3, r5, r6, r9, sp}	; <UNPREDICTABLE>
    1a58:	b1010000 	mrslt	r0, (UNDEF: 1)
    1a5c:	00000076 	andeq	r0, r0, r6, ror r0
    1a60:	1e679102 	lgnnes	f1, f2
    1a64:	b1010063 	tstlt	r1, r3, rrx
    1a68:	00000076 	andeq	r0, r0, r6, ror r0
    1a6c:	1e6d9102 	lgnnee	f1, f2
    1a70:	b201006b 	andlt	r0, r1, #107	; 0x6b
    1a74:	0000006f 	andeq	r0, r0, pc, rrx
    1a78:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1a7c:	00093e1c 	andeq	r3, r9, ip, lsl lr
    1a80:	20ac0100 	adccs	r0, ip, r0, lsl #2
    1a84:	30200012 	eorcc	r0, r0, r2, lsl r0
    1a88:	01000000 	mrseq	r0, (UNDEF: 0)
    1a8c:	0005959c 	muleq	r5, ip, r5
    1a90:	041c2300 	ldreq	r2, [ip], #-768	; 0xfffffd00
    1a94:	ac010000 	stcge	0, cr0, [r1], {-0}
    1a98:	00000068 	andeq	r0, r0, r8, rrx
    1a9c:	23749102 	cmncs	r4, #-2147483648	; 0x80000000
    1aa0:	00000531 	andeq	r0, r0, r1, lsr r5
    1aa4:	0068ac01 	rsbeq	sl, r8, r1, lsl #24
    1aa8:	91020000 	mrsls	r0, (UNDEF: 2)
    1aac:	00631d70 	rsbeq	r1, r3, r0, ror sp
    1ab0:	01c7ac01 	biceq	sl, r7, r1, lsl #24
    1ab4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ab8:	541c006f 	ldrpl	r0, [ip], #-111	; 0xffffff91
    1abc:	0100000a 	tsteq	r0, sl
    1ac0:	0011f4a9 	andseq	pc, r1, r9, lsr #9
    1ac4:	00002c20 	andeq	r2, r0, r0, lsr #24
    1ac8:	d39c0100 	orrsle	r0, ip, #0, 2
    1acc:	23000005 	movwcs	r0, #5
    1ad0:	0000041c 	andeq	r0, r0, ip, lsl r4
    1ad4:	0068a901 	rsbeq	sl, r8, r1, lsl #18
    1ad8:	91020000 	mrsls	r0, (UNDEF: 2)
    1adc:	05312374 	ldreq	r2, [r1, #-884]!	; 0xfffffc8c
    1ae0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1ae4:	00000068 	andeq	r0, r0, r8, rrx
    1ae8:	1d709102 	ldfnep	f1, [r0, #-8]!
    1aec:	a9010063 	stmdbge	r1, {r0, r1, r5, r6}
    1af0:	000001c7 	andeq	r0, r0, r7, asr #3
    1af4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    1af8:	0008391c 	andeq	r3, r8, ip, lsl r9
    1afc:	409d0100 	addsmi	r0, sp, r0, lsl #2
    1b00:	b4200011 	strtlt	r0, [r0], #-17	; 0xffffffef
    1b04:	01000000 	mrseq	r0, (UNDEF: 0)
    1b08:	00061d9c 	muleq	r6, ip, sp
    1b0c:	00781d00 	rsbseq	r1, r8, r0, lsl #26
    1b10:	00689d01 	rsbeq	r9, r8, r1, lsl #26
    1b14:	91020000 	mrsls	r0, (UNDEF: 2)
    1b18:	00791d6c 	rsbseq	r1, r9, ip, ror #26
    1b1c:	00689d01 	rsbeq	r9, r8, r1, lsl #26
    1b20:	91020000 	mrsls	r0, (UNDEF: 2)
    1b24:	65731d68 	ldrbvs	r1, [r3, #-3432]!	; 0xfffff298
    1b28:	9d010074 	stcls	0, cr0, [r1, #-464]	; 0xfffffe30
    1b2c:	00000068 	andeq	r0, r0, r8, rrx
    1b30:	22649102 	rsbcs	r9, r4, #-2147483648	; 0x80000000
    1b34:	0000027e 	andeq	r0, r0, lr, ror r2
    1b38:	00769f01 	rsbseq	r9, r6, r1, lsl #30
    1b3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b40:	511f0077 	tstpl	pc, r7, ror r0	; <UNPREDICTABLE>
    1b44:	01000009 	tsteq	r0, r9
    1b48:	0010f896 	mulseq	r0, r6, r8
    1b4c:	00004820 	andeq	r4, r0, r0, lsr #16
    1b50:	5f9c0100 	svcpl	0x009c0100
    1b54:	14000006 	strne	r0, [r0], #-6
    1b58:	200010fe 	strdcs	r1, [r0], -lr
    1b5c:	00000034 	andeq	r0, r0, r4, lsr r0
    1b60:	0100691e 	tsteq	r0, lr, lsl r9
    1b64:	00006897 	muleq	r0, r7, r8
    1b68:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b6c:	00110414 	andseq	r0, r1, r4, lsl r4
    1b70:	00002220 	andeq	r2, r0, r0, lsr #4
    1b74:	006a1e00 	rsbeq	r1, sl, r0, lsl #28
    1b78:	00689801 	rsbeq	r9, r8, r1, lsl #16
    1b7c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b80:	00000070 	andeq	r0, r0, r0, ror r0
    1b84:	0008a221 	andeq	sl, r8, r1, lsr #4
    1b88:	ba8d0100 	blt	fe341f90 <Pedro+0xde33fb34>
    1b8c:	3e200010 	miacc	acc0, r0, r0
    1b90:	01000000 	mrseq	r0, (UNDEF: 0)
    1b94:	0006a19c 	muleq	r6, ip, r1
    1b98:	10c01400 	sbcne	r1, r0, r0, lsl #8
    1b9c:	00302000 	eorseq	r2, r0, r0
    1ba0:	691e0000 	ldmdbvs	lr, {}	; <UNPREDICTABLE>
    1ba4:	688e0100 	stmvs	lr, {r8}
    1ba8:	02000000 	andeq	r0, r0, #0
    1bac:	c6147491 			; <UNDEFINED> instruction: 0xc6147491
    1bb0:	1e200010 	miane	acc0, r0, r0
    1bb4:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    1bb8:	8f01006a 	svchi	0x0001006a
    1bbc:	00000068 	andeq	r0, r0, r8, rrx
    1bc0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    1bc4:	f8210000 			; <UNDEFINED> instruction: 0xf8210000
    1bc8:	01000008 	tsteq	r0, r8
    1bcc:	00107486 	andseq	r7, r0, r6, lsl #9
    1bd0:	00004620 	andeq	r4, r0, r0, lsr #12
    1bd4:	d39c0100 	orrsle	r0, ip, #0, 2
    1bd8:	23000006 	movwcs	r0, #6
    1bdc:	000008e9 	andeq	r0, r0, r9, ror #17
    1be0:	00768601 	rsbseq	r8, r6, r1, lsl #12
    1be4:	91020000 	mrsls	r0, (UNDEF: 2)
    1be8:	09af2377 	stmibeq	pc!, {r0, r1, r2, r4, r5, r6, r8, r9, sp}	; <UNPREDICTABLE>
    1bec:	86010000 	strhi	r0, [r1], -r0
    1bf0:	00000076 	andeq	r0, r0, r6, ror r0
    1bf4:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1bf8:	00087721 	andeq	r7, r8, r1, lsr #14
    1bfc:	34800100 	strcc	r0, [r0], #256	; 0x100
    1c00:	40200010 	eormi	r0, r0, r0, lsl r0
    1c04:	01000000 	mrseq	r0, (UNDEF: 0)
    1c08:	0007059c 	muleq	r7, ip, r5
    1c0c:	08852300 	stmeq	r5, {r8, r9, sp}
    1c10:	80010000 	andhi	r0, r1, r0
    1c14:	00000076 	andeq	r0, r0, r6, ror r0
    1c18:	23779102 	cmncs	r7, #-2147483648	; 0x80000000
    1c1c:	000009af 	andeq	r0, r0, pc, lsr #19
    1c20:	00768001 	rsbseq	r8, r6, r1
    1c24:	91020000 	mrsls	r0, (UNDEF: 2)
    1c28:	30210076 	eorcc	r0, r1, r6, ror r0
    1c2c:	01000009 	tsteq	r0, r9
    1c30:	000fbe6b 	andeq	fp, pc, fp, ror #28
    1c34:	00007620 	andeq	r7, r0, r0, lsr #12
    1c38:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
    1c3c:	23000007 	movwcs	r0, #7
    1c40:	00000755 	andeq	r0, r0, r5, asr r7
    1c44:	00766b01 	rsbseq	r6, r6, r1, lsl #22
    1c48:	91020000 	mrsls	r0, (UNDEF: 2)
    1c4c:	09af2377 	stmibeq	pc!, {r0, r1, r2, r4, r5, r6, r8, r9, sp}	; <UNPREDICTABLE>
    1c50:	6b010000 	blvs	41c58 <startup-0x1ffbe3a8>
    1c54:	00000076 	andeq	r0, r0, r6, ror r0
    1c58:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
    1c5c:	0000001d 	andeq	r0, r0, sp, lsl r0
    1c60:	00684201 	rsbeq	r4, r8, r1, lsl #4
    1c64:	00170000 	andseq	r0, r7, r0
    1c68:	08dc2400 	ldmeq	ip, {sl, sp}^
    1c6c:	66010000 	strvs	r0, [r1], -r0
    1c70:	00000076 	andeq	r0, r0, r6, ror r0
    1c74:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
    1c78:	0000002a 	andeq	r0, r0, sl, lsr #32
    1c7c:	076c9c01 	strbeq	r9, [ip, -r1, lsl #24]!
    1c80:	af230000 	svcge	0x00230000
    1c84:	01000009 	tsteq	r0, r9
    1c88:	00007666 	andeq	r7, r0, r6, ror #12
    1c8c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1c90:	08c42400 	stmiaeq	r4, {sl, sp}^
    1c94:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    1c98:	00000076 	andeq	r0, r0, r6, ror r0
    1c9c:	20000f04 	andcs	r0, r0, r4, lsl #30
    1ca0:	00000090 	muleq	r0, r0, r0
    1ca4:	07ad9c01 	streq	r9, [sp, r1, lsl #24]!
    1ca8:	af230000 	svcge	0x00230000
    1cac:	01000009 	tsteq	r0, r9
    1cb0:	0000764e 	andeq	r7, r0, lr, asr #12
    1cb4:	6f910200 	svcvs	0x00910200
    1cb8:	0100631e 	tsteq	r0, lr, lsl r3
    1cbc:	0000764f 	andeq	r7, r0, pc, asr #12
    1cc0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1cc4:	00001d18 	andeq	r1, r0, r8, lsl sp
    1cc8:	68420100 	stmdavs	r2, {r8}^
    1ccc:	17000000 	strne	r0, [r0, -r0]
    1cd0:	cb250000 	blgt	941cd8 <startup-0x1f6be328>
    1cd4:	01000009 	tsteq	r0, r9
    1cd8:	000e9a3c 	andeq	r9, lr, ip, lsr sl
    1cdc:	00006a20 	andeq	r6, r0, r0, lsr #20
    1ce0:	dc9c0100 	ldfles	f0, [ip], {0}
    1ce4:	1e000007 	cdpne	0, 0, cr0, cr0, cr7, {0}
    1ce8:	3d010063 	stccc	0, cr0, [r1, #-396]	; 0xfffffe74
    1cec:	00000076 	andeq	r0, r0, r6, ror r0
    1cf0:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    1cf4:	0000001d 	andeq	r0, r0, sp, lsl r0
    1cf8:	00684201 	rsbeq	r4, r8, r1, lsl #4
    1cfc:	00170000 	andseq	r0, r7, r0
    1d00:	09f02100 	ldmibeq	r0!, {r8, sp}^
    1d04:	2c010000 	stccs	0, cr0, [r1], {-0}
    1d08:	20000e36 	andcs	r0, r0, r6, lsr lr
    1d0c:	00000064 	andeq	r0, r0, r4, rrx
    1d10:	08109c01 	ldmdaeq	r0, {r0, sl, fp, ip, pc}
    1d14:	29160000 	ldmdbcs	r6, {}	; <UNPREDICTABLE>
    1d18:	01000000 	mrseq	r0, (UNDEF: 0)
    1d1c:	0000682e 	andeq	r6, r0, lr, lsr #16
    1d20:	00080200 	andeq	r0, r8, r0, lsl #4
    1d24:	18001700 	stmdane	r0, {r8, r9, sl, ip}
    1d28:	000000f3 	strdeq	r0, [r0], -r3
    1d2c:	00683001 	rsbeq	r3, r8, r1
    1d30:	00170000 	andseq	r0, r7, r0
    1d34:	09de2500 	ldmibeq	lr, {r8, sl, sp}^
    1d38:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1d3c:	20000ddc 	ldrdcs	r0, [r0], -ip
    1d40:	0000005a 	andeq	r0, r0, sl, asr r0
    1d44:	08349c01 	ldmdaeq	r4!, {r0, sl, fp, ip, pc}
    1d48:	af230000 	svcge	0x00230000
    1d4c:	01000009 	tsteq	r0, r9
    1d50:	00007619 	andeq	r7, r0, r9, lsl r6
    1d54:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1d58:	09192600 	ldmdbeq	r9, {r9, sl, sp}
    1d5c:	11010000 	mrsne	r0, (UNDEF: 1)
    1d60:	20000d8c 	andcs	r0, r0, ip, lsl #27
    1d64:	00000050 	andeq	r0, r0, r0, asr r0
    1d68:	08629c01 	stmdaeq	r2!, {r0, sl, fp, ip, pc}^
    1d6c:	781d0000 	ldmdavc	sp, {}	; <UNPREDICTABLE>
    1d70:	37110100 	ldrcc	r0, [r1, -r0, lsl #2]
    1d74:	02000000 	andeq	r0, r0, #0
    1d78:	631e6f91 	tstvs	lr, #580	; 0x244
    1d7c:	c7120100 	ldrgt	r0, [r2, -r0, lsl #2]
    1d80:	02000001 	andeq	r0, r0, #1
    1d84:	27007791 			; <UNDEFINED> instruction: 0x27007791
    1d88:	0000097e 	andeq	r0, r0, lr, ror r9
    1d8c:	0d480901 	vstreq.16	s1, [r8, #-2]	; <UNPREDICTABLE>
    1d90:	00442000 	subeq	r2, r4, r0
    1d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d98:	0100781d 	tsteq	r0, sp, lsl r8
    1d9c:	00003709 	andeq	r3, r0, r9, lsl #14
    1da0:	6f910200 	svcvs	0x00910200
    1da4:	0100631e 	tsteq	r0, lr, lsl r3
    1da8:	0001c70a 	andeq	ip, r1, sl, lsl #14
    1dac:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  20:	06120111 			; <UNDEFINED> instruction: 0x06120111
  24:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  28:	00130119 	andseq	r0, r3, r9, lsl r1
  2c:	00050300 	andeq	r0, r5, r0, lsl #6
  30:	0b3a0e03 	bleq	e83844 <startup-0x1f17c7bc>
  34:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  38:	00001802 	andeq	r1, r0, r2, lsl #16
  3c:	0b002404 	bleq	9054 <startup-0x1fff6fac>
  40:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  44:	05000008 	streq	r0, [r0, #-8]
  48:	0111010b 	tsteq	r1, fp, lsl #2
  4c:	00000612 	andeq	r0, r0, r2, lsl r6
  50:	03003406 	movweq	r3, #1030	; 0x406
  54:	3b0b3a08 	blcc	2ce87c <startup-0x1fd31784>
  58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  5c:	07000018 	smladeq	r0, r8, r0, r0
  60:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
  64:	0b3a0e03 	bleq	e83878 <startup-0x1f17c788>
  68:	01110b3b 	tsteq	r1, fp, lsr fp
  6c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  70:	00194297 	mulseq	r9, r7, r2
  74:	11010000 	mrsne	r0, (UNDEF: 1)
  78:	130e2501 	movwne	r2, #58625	; 0xe501
  7c:	1b0e030b 	blne	380cb0 <startup-0x1fc7f350>
  80:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
  84:	00171006 	andseq	r1, r7, r6
  88:	01130200 	tsteq	r3, r0, lsl #4
  8c:	0b0b0e03 	bleq	2c38a0 <startup-0x1fd3c760>
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	00001301 	andeq	r1, r0, r1, lsl #6
  98:	03000d03 	movweq	r0, #3331	; 0xd03
  9c:	3b0b3a0e 	blcc	2ce8dc <startup-0x1fd31724>
  a0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  a4:	0400000b 	streq	r0, [r0], #-11
  a8:	0b0b0024 	bleq	2c0140 <startup-0x1fd3fec0>
  ac:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  b0:	0f050000 	svceq	0x00050000
  b4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b8:	06000013 			; <UNDEFINED> instruction: 0x06000013
  bc:	0b0b0024 	bleq	2c0154 <startup-0x1fd3feac>
  c0:	0e030b3e 	vmoveq.16	d3[0], r0
  c4:	15070000 	strne	r0, [r7, #-0]
  c8:	01192701 	tsteq	r9, r1, lsl #14
  cc:	08000013 	stmdaeq	r0, {r0, r1, r4}
  d0:	13490005 	movtne	r0, #36869	; 0x9005
  d4:	16090000 	strne	r0, [r9], -r0
  d8:	3a0e0300 	bcc	380ce0 <startup-0x1fc7f320>
  dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e0:	0a000013 	beq	134 <startup-0x1ffffecc>
  e4:	13490035 	movtne	r0, #36917	; 0x9035
  e8:	010b0000 	mrseq	r0, (UNDEF: 11)
  ec:	01134901 	tsteq	r3, r1, lsl #18
  f0:	0c000013 	stceq	0, cr0, [r0], {19}
  f4:	13490021 	movtne	r0, #36897	; 0x9021
  f8:	00000b2f 	andeq	r0, r0, pc, lsr #22
  fc:	0300340d 	movweq	r3, #1037	; 0x40d
 100:	3b0b3a0e 	blcc	2ce940 <startup-0x1fd316c0>
 104:	3f13490b 	svccc	0x0013490b
 108:	00193c19 	andseq	r3, r9, r9, lsl ip
 10c:	00340e00 	eorseq	r0, r4, r0, lsl #28
 110:	0b3a0e03 	bleq	e83924 <startup-0x1f17c6dc>
 114:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 118:	00001802 	andeq	r1, r0, r2, lsl #16
 11c:	0300340f 	movweq	r3, #1039	; 0x40f
 120:	3b0b3a0e 	blcc	2ce960 <startup-0x1fd316a0>
 124:	3f13490b 	svccc	0x0013490b
 128:	00180219 	andseq	r0, r8, r9, lsl r2
 12c:	002e1000 	eoreq	r1, lr, r0
 130:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 138:	01111349 	tsteq	r1, r9, asr #6
 13c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 140:	00194297 	mulseq	r9, r7, r2
 144:	012e1100 			; <UNDEFINED> instruction: 0x012e1100
 148:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 14c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 150:	13491927 	movtne	r1, #39207	; 0x9927
 154:	06120111 			; <UNDEFINED> instruction: 0x06120111
 158:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 15c:	00130119 	andseq	r0, r3, r9, lsl r1
 160:	00051200 	andeq	r1, r5, r0, lsl #4
 164:	0b3a0e03 	bleq	e83978 <startup-0x1f17c688>
 168:	1349053b 	movtne	r0, #38203	; 0x953b
 16c:	00001802 	andeq	r1, r0, r2, lsl #16
 170:	03003413 	movweq	r3, #1043	; 0x413
 174:	3b0b3a08 	blcc	2ce99c <startup-0x1fd31664>
 178:	02134905 	andseq	r4, r3, #81920	; 0x14000
 17c:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 180:	0111010b 	tsteq	r1, fp, lsl #2
 184:	00000612 	andeq	r0, r0, r2, lsl r6
 188:	03003415 	movweq	r3, #1045	; 0x415
 18c:	3b0b3a0e 	blcc	2ce9cc <startup-0x1fd31634>
 190:	02134905 	andseq	r4, r3, #81920	; 0x14000
 194:	16000018 			; <UNDEFINED> instruction: 0x16000018
 198:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 19c:	0b3a0e03 	bleq	e839b0 <startup-0x1f17c650>
 1a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1ac:	00130119 	andseq	r0, r3, r9, lsl r1
 1b0:	00341700 	eorseq	r1, r4, r0, lsl #14
 1b4:	0b3a0803 	bleq	e821c8 <startup-0x1f17de38>
 1b8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1bc:	00001802 	andeq	r1, r0, r2, lsl #16
 1c0:	3f012e18 	svccc	0x00012e18
 1c4:	3a080319 	bcc	200e30 <startup-0x1fdff1d0>
 1c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1cc:	11134919 	tstne	r3, r9, lsl r9
 1d0:	40061201 	andmi	r1, r6, r1, lsl #4
 1d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1d8:	00001301 	andeq	r1, r0, r1, lsl #6
 1dc:	03000519 	movweq	r0, #1305	; 0x519
 1e0:	3b0b3a08 	blcc	2cea08 <startup-0x1fd315f8>
 1e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1e8:	1a000018 	bne	250 <startup-0x1ffffdb0>
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	01110b3b 	tsteq	r1, fp, lsr fp
 1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 200:	1b000013 	blne	254 <startup-0x1ffffdac>
 204:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 208:	0b3a0803 	bleq	e8221c <startup-0x1f17dde4>
 20c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 210:	0000193c 	andeq	r1, r0, ip, lsr r9
 214:	0000181c 	andeq	r1, r0, ip, lsl r8
 218:	010b1d00 	tsteq	fp, r0, lsl #26
 21c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 220:	00001301 	andeq	r1, r0, r1, lsl #6
 224:	3f002e1e 	svccc	0x00002e1e
 228:	3a0e0319 	bcc	380e94 <startup-0x1fc7f16c>
 22c:	110b3b0b 	tstne	fp, fp, lsl #22
 230:	40061201 	andmi	r1, r6, r1, lsl #4
 234:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 238:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 23c:	03193f00 	tsteq	r9, #0, 30
 240:	3b0b3a0e 	blcc	2cea80 <startup-0x1fd31580>
 244:	1113490b 	tstne	r3, fp, lsl #18
 248:	40061201 	andmi	r1, r6, r1, lsl #4
 24c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 250:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 254:	03193f00 	tsteq	r9, #0, 30
 258:	3b0b3a0e 	blcc	2cea98 <startup-0x1fd31568>
 25c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 260:	97184006 	ldrls	r4, [r8, -r6]
 264:	00001942 	andeq	r1, r0, r2, asr #18
 268:	3f012e21 	svccc	0x00012e21
 26c:	3a0e0319 	bcc	380ed8 <startup-0x1fc7f128>
 270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	01193c13 	tsteq	r9, r3, lsl ip
 278:	22000013 	andcs	r0, r0, #19
 27c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 280:	0b3a0e03 	bleq	e83a94 <startup-0x1f17c56c>
 284:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 288:	0000193c 	andeq	r1, r0, ip, lsr r9
 28c:	01110100 	tsteq	r1, r0, lsl #2
 290:	0b130e25 	bleq	4c3b2c <startup-0x1fb3c4d4>
 294:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 298:	06120111 			; <UNDEFINED> instruction: 0x06120111
 29c:	00001710 	andeq	r1, r0, r0, lsl r7
 2a0:	0b002402 	bleq	92b0 <startup-0x1fff6d50>
 2a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2a8:	0300000e 	movweq	r0, #14
 2ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 2b0:	0b3b0b3a 	bleq	ec2fa0 <startup-0x1f13d060>
 2b4:	00001349 	andeq	r1, r0, r9, asr #6
 2b8:	0b002404 	bleq	92d0 <startup-0x1fff6d30>
 2bc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2c0:	05000008 	streq	r0, [r0, #-8]
 2c4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2c8:	0b3a0e03 	bleq	e83adc <startup-0x1f17c524>
 2cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2d0:	01111349 	tsteq	r1, r9, asr #6
 2d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2dc:	06000013 			; <UNDEFINED> instruction: 0x06000013
 2e0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2e4:	0b3b0b3a 	bleq	ec2fd4 <startup-0x1f13d02c>
 2e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 2ec:	34070000 	strcc	r0, [r7], #-0
 2f0:	3a080300 	bcc	200ef8 <startup-0x1fdff108>
 2f4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f8:	00180213 	andseq	r0, r8, r3, lsl r2
 2fc:	010b0800 	tsteq	fp, r0, lsl #16
 300:	06120111 			; <UNDEFINED> instruction: 0x06120111
 304:	0f090000 	svceq	0x00090000
 308:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 30c:	0a000013 	beq	360 <startup-0x1ffffca0>
 310:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 314:	0b3a0e03 	bleq	e83b28 <startup-0x1f17c4d8>
 318:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 31c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 320:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 324:	00000019 	andeq	r0, r0, r9, lsl r0
 328:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 32c:	030b130e 	movweq	r1, #45838	; 0xb30e
 330:	110e1b0e 	tstne	lr, lr, lsl #22
 334:	10061201 	andne	r1, r6, r1, lsl #4
 338:	02000017 	andeq	r0, r0, #23
 33c:	0b0b0113 	bleq	2c0790 <startup-0x1fd3f870>
 340:	0b3b0b3a 	bleq	ec3030 <startup-0x1f13cfd0>
 344:	00001301 	andeq	r1, r0, r1, lsl #6
 348:	03000d03 	movweq	r0, #3331	; 0xd03
 34c:	3b0b3a0e 	blcc	2ceb8c <startup-0x1fd31474>
 350:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 354:	0400000b 	streq	r0, [r0], #-11
 358:	0b0b0024 	bleq	2c03f0 <startup-0x1fd3fc10>
 35c:	0e030b3e 	vmoveq.16	d3[0], r0
 360:	17050000 	strne	r0, [r5, -r0]
 364:	3a0b0b01 	bcc	2c2f70 <startup-0x1fd3d090>
 368:	010b3b0b 	tsteq	fp, fp, lsl #22
 36c:	06000013 			; <UNDEFINED> instruction: 0x06000013
 370:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 374:	0b3b0b3a 	bleq	ec3064 <startup-0x1f13cf9c>
 378:	00001349 	andeq	r1, r0, r9, asr #6
 37c:	49000d07 	stmdbmi	r0, {r0, r1, r2, r8, sl, fp}
 380:	08000013 	stmdaeq	r0, {r0, r1, r4}
 384:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 388:	0b3a0b0b 	bleq	e82fbc <startup-0x1f17d044>
 38c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 390:	0d090000 	stceq	0, cr0, [r9, #-0]
 394:	38134900 	ldmdacc	r3, {r8, fp, lr}
 398:	0a00000b 	beq	3cc <startup-0x1ffffc34>
 39c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3a0:	0b3b0b3a 	bleq	ec3090 <startup-0x1f13cf70>
 3a4:	00001349 	andeq	r1, r0, r9, asr #6
 3a8:	3f012e0b 	svccc	0x00012e0b
 3ac:	3a0e0319 	bcc	381018 <startup-0x1fc7efe8>
 3b0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 3b8:	96184006 	ldrls	r4, [r8], -r6
 3bc:	13011942 	movwne	r1, #6466	; 0x1942
 3c0:	340c0000 	strcc	r0, [ip], #-0
 3c4:	3a080300 	bcc	200fcc <startup-0x1fdff034>
 3c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3cc:	00180213 	andseq	r0, r8, r3, lsl r2
 3d0:	01010d00 	tsteq	r1, r0, lsl #26
 3d4:	13011349 	movwne	r1, #4937	; 0x1349
 3d8:	210e0000 	mrscs	r0, (UNDEF: 14)
 3dc:	2f134900 	svccs	0x00134900
 3e0:	0f00000b 	svceq	0x0000000b
 3e4:	0b0b0024 	bleq	2c047c <startup-0x1fd3fb84>
 3e8:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3ec:	2e100000 	cdpcs	0, 1, cr0, cr0, cr0, {0}
 3f0:	03193f00 	tsteq	r9, #0, 30
 3f4:	3b0b3a0e 	blcc	2cec34 <startup-0x1fd313cc>
 3f8:	1113490b 	tstne	r3, fp, lsl #18
 3fc:	40061201 	andmi	r1, r6, r1, lsl #4
 400:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 404:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 408:	03193f00 	tsteq	r9, #0, 30
 40c:	3b0b3a0e 	blcc	2cec4c <startup-0x1fd313b4>
 410:	1113490b 	tstne	r3, fp, lsl #18
 414:	40061201 	andmi	r1, r6, r1, lsl #4
 418:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 41c:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 420:	03193f01 	tsteq	r9, #1, 30
 424:	3b0b3a0e 	blcc	2cec64 <startup-0x1fd3139c>
 428:	1119270b 	tstne	r9, fp, lsl #14
 42c:	40061201 	andmi	r1, r6, r1, lsl #4
 430:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 434:	05130000 	ldreq	r0, [r3, #-0]
 438:	3a080300 	bcc	201040 <startup-0x1fdfefc0>
 43c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 440:	00180213 	andseq	r0, r8, r3, lsl r2
 444:	11010000 	mrsne	r0, (UNDEF: 1)
 448:	130e2501 	movwne	r2, #58625	; 0xe501
 44c:	1b0e030b 	blne	381080 <startup-0x1fc7ef80>
 450:	1117550e 	tstne	r7, lr, lsl #10
 454:	00171001 	andseq	r1, r7, r1
 458:	00240200 	eoreq	r0, r4, r0, lsl #4
 45c:	0b3e0b0b 	bleq	f83090 <startup-0x1f07cf70>
 460:	00000e03 	andeq	r0, r0, r3, lsl #28
 464:	03001603 	movweq	r1, #1539	; 0x603
 468:	3b0b3a0e 	blcc	2ceca8 <startup-0x1fd31358>
 46c:	0013490b 	andseq	r4, r3, fp, lsl #18
 470:	00240400 	eoreq	r0, r4, r0, lsl #8
 474:	0b3e0b0b 	bleq	f830a8 <startup-0x1f07cf58>
 478:	00000803 	andeq	r0, r0, r3, lsl #16
 47c:	0b011305 	bleq	45098 <startup-0x1ffbaf68>
 480:	3b0b3a0b 	blcc	2cecb4 <startup-0x1fd3134c>
 484:	0013010b 	andseq	r0, r3, fp, lsl #2
 488:	000d0600 	andeq	r0, sp, r0, lsl #12
 48c:	0b3a0e03 	bleq	e83ca0 <startup-0x1f17c360>
 490:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 494:	00000b38 	andeq	r0, r0, r8, lsr fp
 498:	0b011707 	bleq	460bc <startup-0x1ffb9f44>
 49c:	3b0b3a0b 	blcc	2cecd0 <startup-0x1fd31330>
 4a0:	0013010b 	andseq	r0, r3, fp, lsl #2
 4a4:	000d0800 	andeq	r0, sp, r0, lsl #16
 4a8:	0b3a0803 	bleq	e824bc <startup-0x1f17db44>
 4ac:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4b0:	0d090000 	stceq	0, cr0, [r9, #-0]
 4b4:	00134900 	andseq	r4, r3, r0, lsl #18
 4b8:	01130a00 	tsteq	r3, r0, lsl #20
 4bc:	0b0b0e03 	bleq	2c3cd0 <startup-0x1fd3c330>
 4c0:	0b3b0b3a 	bleq	ec31b0 <startup-0x1f13ce50>
 4c4:	00001301 	andeq	r1, r0, r1, lsl #6
 4c8:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 4cc:	000b3813 	andeq	r3, fp, r3, lsl r8
 4d0:	000f0c00 	andeq	r0, pc, r0, lsl #24
 4d4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 4d8:	260d0000 	strcs	r0, [sp], -r0
 4dc:	00134900 	andseq	r4, r3, r0, lsl #18
 4e0:	00130e00 	andseq	r0, r3, r0, lsl #28
 4e4:	193c0e03 	ldmdbne	ip!, {r0, r1, r9, sl, fp}
 4e8:	160f0000 	strne	r0, [pc], -r0
 4ec:	3a0e0300 	bcc	3810f4 <startup-0x1fc7ef0c>
 4f0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 4f4:	10000013 	andne	r0, r0, r3, lsl r0
 4f8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 4fc:	0b3b0b3a 	bleq	ec31ec <startup-0x1f13ce14>
 500:	00001349 	andeq	r1, r0, r9, asr #6
 504:	49010111 	stmdbmi	r1, {r0, r4, r8}
 508:	00130113 	andseq	r0, r3, r3, lsl r1
 50c:	00211200 	eoreq	r1, r1, r0, lsl #4
 510:	0b2f1349 	bleq	bc523c <startup-0x1f43adc4>
 514:	0f130000 	svceq	0x00130000
 518:	000b0b00 	andeq	r0, fp, r0, lsl #22
 51c:	000d1400 	andeq	r1, sp, r0, lsl #8
 520:	0b3a0803 	bleq	e82534 <startup-0x1f17dacc>
 524:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 528:	00000b38 	andeq	r0, r0, r8, lsr fp
 52c:	03011315 	movweq	r1, #4885	; 0x1315
 530:	3a050b0e 	bcc	143170 <startup-0x1febce90>
 534:	010b3b0b 	tsteq	fp, fp, lsl #22
 538:	16000013 			; <UNDEFINED> instruction: 0x16000013
 53c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 540:	0b3b0b3a 	bleq	ec3230 <startup-0x1f13cdd0>
 544:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 548:	15170000 	ldrne	r0, [r7, #-0]
 54c:	00192700 	andseq	r2, r9, r0, lsl #14
 550:	01151800 	tsteq	r5, r0, lsl #16
 554:	13491927 	movtne	r1, #39207	; 0x9927
 558:	00001301 	andeq	r1, r0, r1, lsl #6
 55c:	49000519 	stmdbmi	r0, {r0, r3, r4, r8, sl}
 560:	1a000013 	bne	5b4 <startup-0x1ffffa4c>
 564:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 568:	0b3a050b 	bleq	e8199c <startup-0x1f17e664>
 56c:	1301053b 	movwne	r0, #5435	; 0x153b
 570:	0d1b0000 	ldceq	0, cr0, [fp, #-0]
 574:	3a0e0300 	bcc	38117c <startup-0x1fc7ee84>
 578:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 57c:	000b3813 	andeq	r3, fp, r3, lsl r8
 580:	000d1c00 	andeq	r1, sp, r0, lsl #24
 584:	0b3a0e03 	bleq	e83d98 <startup-0x1f17c268>
 588:	1349053b 	movtne	r0, #38203	; 0x953b
 58c:	00000538 	andeq	r0, r0, r8, lsr r5
 590:	0301131d 	movweq	r1, #4893	; 0x131d
 594:	3a0b0b0e 	bcc	2c31d4 <startup-0x1fd3ce2c>
 598:	01053b0b 	tsteq	r5, fp, lsl #22
 59c:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 5a0:	0b0b0113 	bleq	2c09f4 <startup-0x1fd3f60c>
 5a4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5a8:	00001301 	andeq	r1, r0, r1, lsl #6
 5ac:	0b01171f 	bleq	46230 <startup-0x1ffb9dd0>
 5b0:	3b0b3a0b 	blcc	2cede4 <startup-0x1fd3121c>
 5b4:	00130105 	andseq	r0, r3, r5, lsl #2
 5b8:	000d2000 	andeq	r2, sp, r0
 5bc:	0b3a0e03 	bleq	e83dd0 <startup-0x1f17c230>
 5c0:	1349053b 	movtne	r0, #38203	; 0x953b
 5c4:	15210000 	strne	r0, [r1, #-0]!
 5c8:	01192701 	tsteq	r9, r1, lsl #14
 5cc:	22000013 	andcs	r0, r0, #19
 5d0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 5d8:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 5dc:	0000193c 	andeq	r1, r0, ip, lsr r9
 5e0:	03003423 	movweq	r3, #1059	; 0x423
 5e4:	3b0b3a0e 	blcc	2cee24 <startup-0x1fd311dc>
 5e8:	3f13490b 	svccc	0x0013490b
 5ec:	00193c19 	andseq	r3, r9, r9, lsl ip
 5f0:	00342400 	eorseq	r2, r4, r0, lsl #8
 5f4:	0b3a0e03 	bleq	e83e08 <startup-0x1f17c1f8>
 5f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5fc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 600:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 604:	03193f01 	tsteq	r9, #1, 30
 608:	3b0b3a0e 	blcc	2cee48 <startup-0x1fd311b8>
 60c:	11192705 	tstne	r9, r5, lsl #14
 610:	40061201 	andmi	r1, r6, r1, lsl #4
 614:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 618:	00001301 	andeq	r1, r0, r1, lsl #6
 61c:	03003426 	movweq	r3, #1062	; 0x426
 620:	3b0b3a0e 	blcc	2cee60 <startup-0x1fd311a0>
 624:	02134905 	andseq	r4, r3, #81920	; 0x14000
 628:	27000018 	smladcs	r0, r8, r0, r0
 62c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 630:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 634:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 638:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 63c:	03193f01 	tsteq	r9, #1, 30
 640:	3b0b3a0e 	blcc	2cee80 <startup-0x1fd31180>
 644:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 648:	00130119 	andseq	r0, r3, r9, lsl r1
 64c:	00182900 	andseq	r2, r8, r0, lsl #18
 650:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 654:	03193f01 	tsteq	r9, #1, 30
 658:	3b0b3a0e 	blcc	2cee98 <startup-0x1fd31168>
 65c:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 660:	96184006 	ldrls	r4, [r8], -r6
 664:	13011942 	movwne	r1, #6466	; 0x1942
 668:	342b0000 	strtcc	r0, [fp], #-0
 66c:	3a0e0300 	bcc	381274 <startup-0x1fc7ed8c>
 670:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 674:	00180213 	andseq	r0, r8, r3, lsl r2
 678:	00342c00 	eorseq	r2, r4, r0, lsl #24
 67c:	0b3a0803 	bleq	e82690 <startup-0x1f17d970>
 680:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 684:	00001802 	andeq	r1, r0, r2, lsl #16
 688:	11010b2d 	tstne	r1, sp, lsr #22
 68c:	00061201 	andeq	r1, r6, r1, lsl #4
 690:	002e2e00 	eoreq	r2, lr, r0, lsl #28
 694:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 698:	0b3b0b3a 	bleq	ec3388 <startup-0x1f13cc78>
 69c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 6a4:	2f000019 	svccs	0x00000019
 6a8:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 6ac:	0b3a0e03 	bleq	e83ec0 <startup-0x1f17c140>
 6b0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 6b4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 6b8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 6bc:	00130119 	andseq	r0, r3, r9, lsl r1
 6c0:	00053000 	andeq	r3, r5, r0
 6c4:	0b3a0e03 	bleq	e83ed8 <startup-0x1f17c128>
 6c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 6cc:	00001802 	andeq	r1, r0, r2, lsl #16
 6d0:	3f012e31 	svccc	0x00012e31
 6d4:	3a0e0319 	bcc	381340 <startup-0x1fc7ecc0>
 6d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6dc:	00193c13 	andseq	r3, r9, r3, lsl ip
 6e0:	010b3200 	mrseq	r3, R11_fiq
 6e4:	00001301 	andeq	r1, r0, r1, lsl #6
 6e8:	3f002e33 	svccc	0x00002e33
 6ec:	3a0e0319 	bcc	381358 <startup-0x1fc7eca8>
 6f0:	110b3b0b 	tstne	fp, fp, lsl #22
 6f4:	40061201 	andmi	r1, r6, r1, lsl #4
 6f8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6fc:	2e340000 	cdpcs	0, 3, cr0, cr4, cr0, {0}
 700:	03193f00 	tsteq	r9, #0, 30
 704:	3b0b3a0e 	blcc	2cef44 <startup-0x1fd310bc>
 708:	1119270b 	tstne	r9, fp, lsl #14
 70c:	40061201 	andmi	r1, r6, r1, lsl #4
 710:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 714:	01000000 	mrseq	r0, (UNDEF: 0)
 718:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 71c:	0e030b13 	vmoveq.32	d3[0], r0
 720:	01110e1b 	tsteq	r1, fp, lsl lr
 724:	17100612 			; <UNDEFINED> instruction: 0x17100612
 728:	24020000 	strcs	r0, [r2], #-0
 72c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 730:	000e030b 	andeq	r0, lr, fp, lsl #6
 734:	00160300 	andseq	r0, r6, r0, lsl #6
 738:	0b3a0e03 	bleq	e83f4c <startup-0x1f17c0b4>
 73c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 740:	24040000 	strcs	r0, [r4], #-0
 744:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 748:	0008030b 	andeq	r0, r8, fp, lsl #6
 74c:	01130500 	tsteq	r3, r0, lsl #10
 750:	0b3a0b0b 	bleq	e83384 <startup-0x1f17cc7c>
 754:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 758:	0d060000 	stceq	0, cr0, [r6, #-0]
 75c:	3a0e0300 	bcc	381364 <startup-0x1fc7ec9c>
 760:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 764:	000b3813 	andeq	r3, fp, r3, lsl r8
 768:	01170700 	tsteq	r7, r0, lsl #14
 76c:	0b3a0b0b 	bleq	e833a0 <startup-0x1f17cc60>
 770:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 774:	0d080000 	stceq	0, cr0, [r8, #-0]
 778:	3a080300 	bcc	201380 <startup-0x1fdfec80>
 77c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 780:	09000013 	stmdbeq	r0, {r0, r1, r4}
 784:	1349000d 	movtne	r0, #36877	; 0x900d
 788:	130a0000 	movwne	r0, #40960	; 0xa000
 78c:	0b0e0301 	bleq	381398 <startup-0x1fc7ec68>
 790:	3b0b3a0b 	blcc	2cefc4 <startup-0x1fd3103c>
 794:	0013010b 	andseq	r0, r3, fp, lsl #2
 798:	000d0b00 	andeq	r0, sp, r0, lsl #22
 79c:	0b381349 	bleq	e054c8 <startup-0x1f1fab38>
 7a0:	010c0000 	mrseq	r0, (UNDEF: 12)
 7a4:	01134901 	tsteq	r3, r1, lsl #18
 7a8:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 7ac:	13490021 	movtne	r0, #36897	; 0x9021
 7b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 7b4:	0300340e 	movweq	r3, #1038	; 0x40e
 7b8:	3b0b3a0e 	blcc	2ceff8 <startup-0x1fd31008>
 7bc:	3f13490b 	svccc	0x0013490b
 7c0:	00180219 	andseq	r0, r8, r9, lsl r2
 7c4:	012e0f00 			; <UNDEFINED> instruction: 0x012e0f00
 7c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7d0:	01111927 	tsteq	r1, r7, lsr #18
 7d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7d8:	01194296 			; <UNDEFINED> instruction: 0x01194296
 7dc:	10000013 	andne	r0, r0, r3, lsl r0
 7e0:	08030005 	stmdaeq	r3, {r0, r2}
 7e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 7e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 7ec:	34110000 	ldrcc	r0, [r1], #-0
 7f0:	3a080300 	bcc	2013f8 <startup-0x1fdfec08>
 7f4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 7f8:	00180213 	andseq	r0, r8, r3, lsl r2
 7fc:	000f1200 	andeq	r1, pc, r0, lsl #4
 800:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 804:	05130000 	ldreq	r0, [r3, #-0]
 808:	3a0e0300 	bcc	381410 <startup-0x1fc7ebf0>
 80c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 810:	00180213 	andseq	r0, r8, r3, lsl r2
 814:	010b1400 	tsteq	fp, r0, lsl #8
 818:	06120111 			; <UNDEFINED> instruction: 0x06120111
 81c:	34150000 	ldrcc	r0, [r5], #-0
 820:	3a0e0300 	bcc	381428 <startup-0x1fc7ebd8>
 824:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 828:	00180213 	andseq	r0, r8, r3, lsl r2
 82c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 830:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 834:	0b3b0b3a 	bleq	ec3524 <startup-0x1f13cadc>
 838:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 83c:	00001301 	andeq	r1, r0, r1, lsl #6
 840:	00001817 	andeq	r1, r0, r7, lsl r8
 844:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 848:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 84c:	0b3b0b3a 	bleq	ec353c <startup-0x1f13cac4>
 850:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 854:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 858:	03193f01 	tsteq	r9, #1, 30
 85c:	3b0b3a0e 	blcc	2cf09c <startup-0x1fd30f64>
 860:	12011105 	andne	r1, r1, #1073741825	; 0x40000001
 864:	96184006 	ldrls	r4, [r8], -r6
 868:	13011942 	movwne	r1, #6466	; 0x1942
 86c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 870:	03193f01 	tsteq	r9, #1, 30
 874:	3b0b3a0e 	blcc	2cf0b4 <startup-0x1fd30f4c>
 878:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 87c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 880:	96184006 	ldrls	r4, [r8], -r6
 884:	13011942 	movwne	r1, #6466	; 0x1942
 888:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 88c:	03193f01 	tsteq	r9, #1, 30
 890:	3b0b3a0e 	blcc	2cf0d0 <startup-0x1fd30f30>
 894:	3c134905 			; <UNDEFINED> instruction: 0x3c134905
 898:	1c000019 	stcne	0, cr0, [r0], {25}
 89c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8a0:	0b3a0e03 	bleq	e840b4 <startup-0x1f17bf4c>
 8a4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 8a8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 8ac:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 8b0:	00130119 	andseq	r0, r3, r9, lsl r1
 8b4:	00051d00 	andeq	r1, r5, r0, lsl #26
 8b8:	0b3a0803 	bleq	e828cc <startup-0x1f17d734>
 8bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 8c0:	00001802 	andeq	r1, r0, r2, lsl #16
 8c4:	0300341e 	movweq	r3, #1054	; 0x41e
 8c8:	3b0b3a08 	blcc	2cf0f0 <startup-0x1fd30f10>
 8cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 8d0:	1f000018 	svcne	0x00000018
 8d4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 8d8:	0b3a0e03 	bleq	e840ec <startup-0x1f17bf14>
 8dc:	01110b3b 	tsteq	r1, fp, lsr fp
 8e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 8e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 8e8:	20000013 	andcs	r0, r0, r3, lsl r0
 8ec:	0111010b 	tsteq	r1, fp, lsl #2
 8f0:	13010612 	movwne	r0, #5650	; 0x1612
 8f4:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 8f8:	03193f01 	tsteq	r9, #1, 30
 8fc:	3b0b3a0e 	blcc	2cf13c <startup-0x1fd30ec4>
 900:	1119270b 	tstne	r9, fp, lsl #14
 904:	40061201 	andmi	r1, r6, r1, lsl #4
 908:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 90c:	00001301 	andeq	r1, r0, r1, lsl #6
 910:	03003422 	movweq	r3, #1058	; 0x422
 914:	3b0b3a0e 	blcc	2cf154 <startup-0x1fd30eac>
 918:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 91c:	23000018 	movwcs	r0, #24
 920:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 924:	0b3b0b3a 	bleq	ec3614 <startup-0x1f13c9ec>
 928:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 92c:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 930:	3a0e0301 	bcc	38153c <startup-0x1fc7eac4>
 934:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 938:	11134919 	tstne	r3, r9, lsl r9
 93c:	40061201 	andmi	r1, r6, r1, lsl #4
 940:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 944:	00001301 	andeq	r1, r0, r1, lsl #6
 948:	03012e25 	movweq	r2, #7717	; 0x1e25
 94c:	3b0b3a0e 	blcc	2cf18c <startup-0x1fd30e74>
 950:	1119270b 	tstne	r9, fp, lsl #14
 954:	40061201 	andmi	r1, r6, r1, lsl #4
 958:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 95c:	00001301 	andeq	r1, r0, r1, lsl #6
 960:	03012e26 	movweq	r2, #7718	; 0x1e26
 964:	3b0b3a0e 	blcc	2cf1a4 <startup-0x1fd30e5c>
 968:	1119270b 	tstne	r9, fp, lsl #14
 96c:	40061201 	andmi	r1, r6, r1, lsl #4
 970:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 974:	00001301 	andeq	r1, r0, r1, lsl #6
 978:	03012e27 	movweq	r2, #7719	; 0x1e27
 97c:	3b0b3a0e 	blcc	2cf1bc <startup-0x1fd30e44>
 980:	1119270b 	tstne	r9, fp, lsl #14
 984:	40061201 	andmi	r1, r6, r1, lsl #4
 988:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 98c:	Address 0x0000098c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000d6 	ldrdeq	r0, [r0], -r6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00ad0002 	adceq	r0, sp, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000e8 	andcs	r0, r0, r8, ror #1
  34:	00000730 	andeq	r0, r0, r0, lsr r7
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	05bf0002 	ldreq	r0, [pc, #2]!	; 4e <startup-0x1fffffb2>
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000818 	andcs	r0, r0, r8, lsl r8
  54:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	06e00002 	strbteq	r0, [r0], r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200008c0 	andcs	r0, r0, r0, asr #17
  74:	000001c8 	andeq	r0, r0, r8, asr #3
	...
  80:	00000024 	andeq	r0, r0, r4, lsr #32
  84:	08c70002 	stmiaeq	r7, {r1}^
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	20000a88 	andcs	r0, r0, r8, lsl #21
  94:	000002c0 	andeq	r0, r0, r0, asr #5
  98:	20000000 	andcs	r0, r0, r0
  9c:	0000000c 	andeq	r0, r0, ip
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	15250002 	strne	r0, [r5, #-2]!
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000d48 	andcs	r0, r0, r8, asr #26
  bc:	00000a14 	andeq	r0, r0, r4, lsl sl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000083 	andeq	r0, r0, r3, lsl #1
   4:	003c0002 	eorseq	r0, ip, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
  24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  2c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
  30:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
  34:	006f7264 	rsbeq	r7, pc, r4, ror #4
  38:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  3c:	2e737961 	vsubcs.f16	s15, s6, s3	; <UNPREDICTABLE>
  40:	00010063 	andeq	r0, r1, r3, rrx
  44:	05000000 	streq	r0, [r0, #-0]
  48:	00001002 	andeq	r1, r0, r2
  4c:	3d2f1420 	cfstrscc	mvf1, [pc, #-128]!	; ffffffd4 <Pedro+0xdfffdb78>
  50:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
  54:	06010402 	streq	r0, [r1], -r2, lsl #8
  58:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
  5c:	3d3d2fa0 	ldccc	15, cr2, [sp, #-640]!	; 0xfffffd80
  60:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
  64:	20060104 	andcs	r0, r6, r4, lsl #2
  68:	a03d6706 	eorsge	r6, sp, r6, lsl #14
  6c:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
  70:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
  74:	002d0304 	eoreq	r0, sp, r4, lsl #6
  78:	06010402 	streq	r0, [r1], -r2, lsl #8
  7c:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
  80:	04029f4b 	streq	r9, [r2], #-3915	; 0xfffff0b5
  84:	b0010100 	andlt	r0, r1, r0, lsl #2
  88:	02000001 	andeq	r0, r0, #1
  8c:	00005400 	andeq	r5, r0, r0, lsl #8
  90:	fb010200 	blx	4089a <startup-0x1ffbf766>
  94:	01000d0e 	tsteq	r0, lr, lsl #26
  98:	00010101 	andeq	r0, r1, r1, lsl #2
  9c:	00010000 	andeq	r0, r1, r0
  a0:	3a5a0100 	bcc	16804a8 <startup-0x1e97fb58>
  a4:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  a8:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
  ac:	2f65646f 	svccs	0x0065646f
  b0:	2f706f6d 	svccs	0x00706f6d
  b4:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
  b8:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
  bc:	00006f72 	andeq	r6, r0, r2, ror pc
  c0:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  c4:	00632e6f 	rsbeq	r2, r3, pc, ror #28
  c8:	70000001 	andvc	r0, r0, r1
  cc:	6f726465 	svcvs	0x00726465
  d0:	0100682e 	tsteq	r0, lr, lsr #16
  d4:	623c0000 	eorsvs	r0, ip, #0
  d8:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
  dc:	3e6e692d 	vmulcc.f16	s13, s28, s27	; <UNPREDICTABLE>
  e0:	00000000 	andeq	r0, r0, r0
  e4:	02050000 	andeq	r0, r5, #0
  e8:	200000e8 	andcs	r0, r0, r8, ror #1
  ec:	2f012b03 	svccs	0x00012b03
  f0:	859e0f03 	ldrhi	r0, [lr, #3843]	; 0xf03
  f4:	4b303030 	blmi	c0c1bc <startup-0x1f3f3e44>
  f8:	4b689f2f 	blmi	1a27dbc <startup-0x1e5d8244>
  fc:	005cad2f 	subseq	sl, ip, pc, lsr #26
 100:	06010402 	streq	r0, [r1], -r2, lsl #8
 104:	2f4b064a 	svccs	0x004b064a
 108:	002f6931 	eoreq	r6, pc, r1, lsr r9	; <UNPREDICTABLE>
 10c:	06010402 	streq	r0, [r1], -r2, lsl #8
 110:	4b4b064a 	blmi	12c1a40 <startup-0x1ed3e5c0>
 114:	2738243b 			; <UNDEFINED> instruction: 0x2738243b
 118:	01040200 	mrseq	r0, R12_usr
 11c:	4c064a06 			; <UNDEFINED> instruction: 0x4c064a06
 120:	3824494b 	stmdacc	r4!, {r0, r1, r3, r6, r8, fp, lr}
 124:	3d200903 			; <UNDEFINED> instruction: 0x3d200903
 128:	5c4b5a4b 	mcrrpl	10, 4, r5, fp, cr11
 12c:	403d3d4b 	eorsmi	r3, sp, fp, asr #26
 130:	4a0b034b 	bmi	2c0e64 <startup-0x1fd3f19c>
 134:	4b207903 	blmi	81e548 <startup-0x1f7e1ab8>
 138:	84404b3d 	strbhi	r4, [r0], #-2877	; 0xfffff4c3
 13c:	76757630 			; <UNDEFINED> instruction: 0x76757630
 140:	02002f5a 	andeq	r2, r0, #360	; 0x168
 144:	4a060204 	bmi	18095c <startup-0x1fe7f6a4>
 148:	03040200 	movweq	r0, #16896	; 0x4200
 14c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 150:	02002e04 	andeq	r2, r0, #4, 28	; 0x40
 154:	00200604 	eoreq	r0, r0, r4, lsl #12
 158:	06060402 	streq	r0, [r6], -r2, lsl #8
 15c:	4b2f6b21 	blmi	bdade8 <startup-0x1f425218>
 160:	4b3e4b3e 	blmi	f92e60 <startup-0x1f06d1a0>
 164:	033c0b03 	teqeq	ip, #3072	; 0xc00
 168:	444b2077 	strbmi	r2, [fp], #-119	; 0xffffff89
 16c:	9f207a03 	svcls	0x00207a03
 170:	e63e1e41 	ldrt	r1, [lr], -r1, asr #28
 174:	ad3d313e 	ldfges	f3, [sp, #-248]!	; 0xffffff08
 178:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 17c:	06740601 	ldrbteq	r0, [r4], -r1, lsl #12
 180:	ad9108ca 	ldcge	8, cr0, [r1, #808]	; 0x328
 184:	4bd75959 	blmi	ff5d66f0 <Pedro+0xdf5d4294>
 188:	59e57783 	stmibpl	r5!, {r0, r1, r7, r8, r9, sl, ip, sp, lr}^
 18c:	e5919f67 	ldr	r9, [r1, #3943]	; 0xf67
 190:	08ad8483 	stmiaeq	sp!, {r0, r1, r7, sl, pc}
 194:	04020092 	streq	r0, [r2], #-146	; 0xffffff6e
 198:	746c0302 	strbtvc	r0, [ip], #-770	; 0xfffffcfe
 19c:	01040200 	mrseq	r0, R12_usr
 1a0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
 1a4:	7d060204 	sfmvc	f0, 4, [r6, #-16]
 1a8:	01040200 	mrseq	r0, R12_usr
 1ac:	03066606 	movweq	r6, #26118	; 0x6606
 1b0:	3eafc81e 	mcrcc	8, 5, ip, cr15, cr14, {0}
 1b4:	9f084b3d 	svcls	0x00084b3d
 1b8:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
 1bc:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 1c0:	00f10304 	rscseq	r0, r1, r4, lsl #6
 1c4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1c8:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 1cc:	00630602 	rsbeq	r0, r3, r2, lsl #12
 1d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1d4:	68a50658 	stmiavs	r5!, {r3, r4, r6, r9, sl}
 1d8:	22313d4b 	eorscs	r3, r1, #4800	; 0x12c0
 1dc:	002f404c 	eoreq	r4, pc, ip, asr #32
 1e0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 1e4:	03040200 	movweq	r0, #16896	; 0x4200
 1e8:	02003d08 	andeq	r3, r0, #8, 26	; 0x200
 1ec:	13080304 	movwne	r0, #33540	; 0x8304
 1f0:	03040200 	movweq	r0, #16896	; 0x4200
 1f4:	04020075 	streq	r0, [r2], #-117	; 0xffffff8b
 1f8:	00540803 	subseq	r0, r4, r3, lsl #16
 1fc:	06010402 	streq	r0, [r1], -r2, lsl #8
 200:	5942063c 	stmdbpl	r2, {r2, r3, r4, r5, r9, sl}^
 204:	a022304b 	eorge	r3, r2, fp, asr #32
 208:	002f3e4b 	eoreq	r3, pc, fp, asr #28
 20c:	59030402 	stmdbpl	r3, {r1, sl}
 210:	03040200 	movweq	r0, #16896	; 0x4200
 214:	02004b08 	andeq	r4, r0, #8, 22	; 0x2000
 218:	003d0304 	eorseq	r0, sp, r4, lsl #6
 21c:	83030402 	movwhi	r0, #13314	; 0x3402
 220:	03040200 	movweq	r0, #16896	; 0x4200
 224:	040200b6 	streq	r0, [r2], #-182	; 0xffffff4a
 228:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 22c:	21764b7a 	cmncs	r6, sl, ror fp
 230:	672f2f68 	strvs	r2, [pc, -r8, ror #30]!
 234:	06022f2f 	streq	r2, [r2], -pc, lsr #30
 238:	2d010100 	stfcss	f0, [r1, #-0]
 23c:	02000001 	andeq	r0, r0, #1
 240:	0000e900 	andeq	lr, r0, r0, lsl #18
 244:	fb010200 	blx	40a4e <startup-0x1ffbf5b2>
 248:	01000d0e 	tsteq	r0, lr, lsl #26
 24c:	00010101 	andeq	r0, r1, r1, lsl #2
 250:	00010000 	andeq	r0, r1, r0
 254:	3a5a0100 	bcc	168065c <startup-0x1e97f9a4>
 258:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 25c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 260:	2f65646f 	svccs	0x0065646f
 264:	2f706f6d 	svccs	0x00706f6d
 268:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 26c:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 270:	63006f72 	movwvs	r6, #3954	; 0xf72
 274:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 278:	70706165 	rsbsvc	r6, r0, r5, ror #2
 27c:	646f635c 	strbtvs	r6, [pc], #-860	; 284 <startup-0x1ffffd7c>
 280:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 284:	6f745c65 	svcvs	0x00745c65
 288:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 28c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 290:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 294:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 298:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 29c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 2a0:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 2a4:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 2a8:	616d5c65 	cmnvs	sp, r5, ror #24
 2ac:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 2b0:	3a630065 	bcc	18c044c <startup-0x1e73fbb4>
 2b4:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 2b8:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 2bc:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 2c0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 2c4:	6f6f745c 	svcvs	0x006f745c
 2c8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 2cc:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 2d0:	615c6d72 	cmpvs	ip, r2, ror sp
 2d4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 2d8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 2dc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 2e0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 2e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 2e8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 2ec:	61720000 	cmnvs	r2, r0
 2f0:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 140 <startup-0x1ffffec0>
 2f4:	2e6d754e 	cdpcs	5, 6, cr7, cr13, cr14, {2}
 2f8:	00010063 	andeq	r0, r1, r3, rrx
 2fc:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 300:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 304:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 308:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 30c:	00020068 	andeq	r0, r2, r8, rrx
 310:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 314:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 318:	0300682e 	movweq	r6, #2094	; 0x82e
 31c:	61720000 	cmnvs	r2, r0
 320:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; 170 <startup-0x1ffffe90>
 324:	2e6d754e 	cdpcs	5, 6, cr7, cr13, cr14, {2}
 328:	00010068 	andeq	r0, r1, r8, rrx
 32c:	05000000 	streq	r0, [r0, #-0]
 330:	00081802 	andeq	r1, r8, r2, lsl #16
 334:	3d591620 	ldclcc	6, cr1, [r9, #-128]	; 0xffffff80
 338:	03040200 	movweq	r0, #16896	; 0x4200
 33c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 340:	02004903 	andeq	r4, r0, #49152	; 0xc000
 344:	3c060104 	stfccs	f0, [r6], {4}
 348:	4b4c3f06 	blmi	130ff68 <startup-0x1ecf0098>
 34c:	003d7508 	eorseq	r7, sp, r8, lsl #10
 350:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 354:	03040200 	movweq	r0, #16896	; 0x4200
 358:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
 35c:	02004803 	andeq	r4, r0, #196608	; 0x30000
 360:	3c060104 	stfccs	f0, [r6], {4}
 364:	02214006 	eoreq	r4, r1, #6
 368:	01010006 	tsteq	r1, r6
 36c:	000000ab 	andeq	r0, r0, fp, lsr #1
 370:	00480002 	subeq	r0, r8, r2
 374:	01020000 	mrseq	r0, (UNDEF: 2)
 378:	000d0efb 	strdeq	r0, [sp], -fp
 37c:	01010101 	tsteq	r1, r1, lsl #2
 380:	01000000 	mrseq	r0, (UNDEF: 0)
 384:	5a010000 	bpl	4038c <startup-0x1ffbfc74>
 388:	4f4d2f3a 	svcmi	0x004d2f3a
 38c:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 390:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 394:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 398:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 39c:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 3a0:	006f7264 	rsbeq	r7, pc, r4, ror #4
 3a4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 3a8:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
 3ac:	00632e73 	rsbeq	r2, r3, r3, ror lr
 3b0:	67000001 	strvs	r0, [r0, -r1]
 3b4:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3b8:	00010068 	andeq	r0, r1, r8, rrx
 3bc:	05000000 	streq	r0, [r0, #-0]
 3c0:	0008c002 	andeq	ip, r8, r2
 3c4:	bc4b1520 	cfstr64lt	mvdx1, [fp], {32}
 3c8:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 3cc:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 3d0:	752f763e 	strvc	r7, [pc, #-1598]!	; fffffd9a <Pedro+0xdfffd93e>
 3d4:	752f752f 	strvc	r7, [pc, #-1327]!	; fffffead <Pedro+0xdfffda51>
 3d8:	212f752f 			; <UNDEFINED> instruction: 0x212f752f
 3dc:	593e2f5b 	ldmdbpl	lr!, {r0, r1, r3, r4, r6, r8, r9, sl, fp, sp}
 3e0:	213d303d 	teqcs	sp, sp, lsr r0
 3e4:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 3e8:	223d303d 	eorscs	r3, sp, #61	; 0x3d
 3ec:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 3f0:	223d303d 	eorscs	r3, sp, #61	; 0x3d
 3f4:	593d2f3f 	ldmdbpl	sp!, {r0, r1, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 3f8:	213d303d 	teqcs	sp, sp, lsr r0
 3fc:	30683d40 	rsbcc	r3, r8, r0, asr #26
 400:	3d754b3d 	fldmdbxcc	r5!, {d20-d49}	;@ Deprecated
 404:	02040200 	andeq	r0, r4, #0, 4
 408:	040200b6 	streq	r0, [r2], #-182	; 0xffffff4a
 40c:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 410:	04020043 	streq	r0, [r2], #-67	; 0xffffffbd
 414:	07022101 	streq	r2, [r2, -r1, lsl #2]
 418:	17010100 	strne	r0, [r1, -r0, lsl #2]
 41c:	02000002 	andeq	r0, r0, #2
 420:	00015100 	andeq	r5, r1, r0, lsl #2
 424:	fb010200 	blx	40c2e <startup-0x1ffbf3d2>
 428:	01000d0e 	tsteq	r0, lr, lsl #26
 42c:	00010101 	andeq	r0, r1, r1, lsl #2
 430:	00010000 	andeq	r0, r1, r0
 434:	3a5a0100 	bcc	168083c <startup-0x1e97f7c4>
 438:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 43c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 440:	2f65646f 	svccs	0x0065646f
 444:	2f706f6d 	svccs	0x00706f6d
 448:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 44c:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 450:	63006f72 	movwvs	r6, #3954	; 0xf72
 454:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 458:	70706165 	rsbsvc	r6, r0, r5, ror #2
 45c:	646f635c 	strbtvs	r6, [pc], #-860	; 464 <startup-0x1ffffb9c>
 460:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 464:	6f745c65 	svcvs	0x00745c65
 468:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 46c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 470:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 474:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 478:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 47c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 480:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 484:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 488:	616d5c65 	cmnvs	sp, r5, ror #24
 48c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 490:	3a630065 	bcc	18c062c <startup-0x1e73f9d4>
 494:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 498:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 49c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 4a0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 4a4:	6f6f745c 	svcvs	0x006f745c
 4a8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 4ac:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 4b0:	615c6d72 	cmpvs	ip, r2, ror sp
 4b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 4c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 4c8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 4cc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 4d0:	61657363 	cmnvs	r5, r3, ror #6
 4d4:	635c7070 	cmpvs	ip, #112	; 0x70
 4d8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 4dc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 4e0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 318 <startup-0x1ffffce8>
 4e4:	63675c73 	cmnvs	r7, #29440	; 0x7300
 4e8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 4ec:	696c5c6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
 4f0:	63675c62 	cmnvs	r7, #25088	; 0x6200
 4f4:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
 4f8:	6f6e2d6d 	svcvs	0x006e2d6d
 4fc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 500:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 504:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 508:	6e695c31 	mcrvs	12, 3, r5, cr9, cr1, {1}
 50c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 510:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
 514:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 518:	00010063 	andeq	r0, r1, r3, rrx
 51c:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
 520:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
 524:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 528:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
 52c:	00020068 	andeq	r0, r2, r8, rrx
 530:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 534:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 538:	0300682e 	movweq	r6, #2094	; 0x82e
 53c:	70670000 	rsbvc	r0, r7, r0
 540:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
 544:	00000100 	andeq	r0, r0, r0, lsl #2
 548:	6b636f6c 	blvs	18dc300 <startup-0x1e723d00>
 54c:	0300682e 	movweq	r6, #2094	; 0x82e
 550:	745f0000 	ldrbvc	r0, [pc], #-0	; 558 <startup-0x1ffffaa8>
 554:	73657079 	cmnvc	r5, #121	; 0x79
 558:	0300682e 	movweq	r6, #2094	; 0x82e
 55c:	74730000 	ldrbtvc	r0, [r3], #-0
 560:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 564:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 568:	65720000 	ldrbvs	r0, [r2, #-0]!
 56c:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 570:	00030068 	andeq	r0, r3, r8, rrx
 574:	05000000 	streq	r0, [r0, #-0]
 578:	00000002 	andeq	r0, r0, r2
 57c:	012f0320 			; <UNDEFINED> instruction: 0x012f0320
 580:	03025e13 	movweq	r5, #11795	; 0x2e13
 584:	00010100 	andeq	r0, r1, r0, lsl #2
 588:	0a880205 	beq	fe200da4 <Pedro+0xde1fe948>
 58c:	c0032000 	andgt	r2, r3, r0
 590:	3d300100 	ldfccs	f0, [r0, #-0]
 594:	6776673e 			; <UNDEFINED> instruction: 0x6776673e
 598:	3036e868 	eorscc	lr, r6, r8, ror #16
 59c:	763d3030 			; <UNDEFINED> instruction: 0x763d3030
 5a0:	0c03302f 	stceq	0, cr3, [r3], {47}	; 0x2f
 5a4:	2e110382 	cdpcs	3, 1, cr0, cr1, cr2, {4}
 5a8:	30317531 	eorscc	r7, r1, r1, lsr r5
 5ac:	302f4b32 	eorcc	r4, pc, r2, lsr fp	; <UNPREDICTABLE>
 5b0:	272f2f59 			; <UNDEFINED> instruction: 0x272f2f59
 5b4:	3e3d2f40 	cdpcc	15, 3, cr2, cr13, cr0, {2}
 5b8:	59403d2f 	stmdbpl	r0, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}^
 5bc:	3d901403 	cfldrscc	mvf1, [r0, #12]
 5c0:	03040200 	movweq	r0, #16896	; 0x4200
 5c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 5c8:	0200ff03 	andeq	pc, r0, #3, 30
 5cc:	3c060104 	stfccs	f0, [r6], {4}
 5d0:	02040200 	andeq	r0, r4, #0, 4
 5d4:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 5d8:	3c060104 	stfccs	f0, [r6], {4}
 5dc:	76784106 	ldrbtvc	r4, [r8], -r6, lsl #2
 5e0:	03820c03 	orreq	r0, r2, #768	; 0x300
 5e4:	22592078 	subscs	r2, r9, #120	; 0x78
 5e8:	79035959 	stmdbvc	r3, {r0, r3, r4, r6, r8, fp, ip, lr}
 5ec:	200a0320 	andcs	r0, sl, r0, lsr #6
 5f0:	93ae4c4d 			; <UNDEFINED> instruction: 0x93ae4c4d
 5f4:	03040200 	movweq	r0, #16896	; 0x4200
 5f8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 5fc:	0200e303 	andeq	lr, r0, #201326592	; 0xc000000
 600:	3c060104 	stfccs	f0, [r6], {4}
 604:	0c034106 	stfeqs	f4, [r3], {6}
 608:	3e403082 	cdpcc	0, 4, cr3, cr0, cr2, {4}
 60c:	03040200 	movweq	r0, #16896	; 0x4200
 610:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 614:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 618:	3c060104 	stfccs	f0, [r6], {4}
 61c:	674b3f06 	strbvs	r3, [fp, -r6, lsl #30]
 620:	1503672f 	strne	r6, [r3, #-1839]	; 0xfffff8d1
 624:	2f313d66 	svccs	0x00313d66
 628:	02006767 	andeq	r6, r0, #27000832	; 0x19c0000
 62c:	0b030104 	bleq	c0a44 <startup-0x1ff3f5bc>
 630:	0003022e 	andeq	r0, r3, lr, lsr #4
 634:	02f00101 	rscseq	r0, r0, #1073741824	; 0x40000000
 638:	00020000 	andeq	r0, r2, r0
 63c:	000000e3 	andeq	r0, r0, r3, ror #1
 640:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 644:	0101000d 	tsteq	r1, sp
 648:	00000101 	andeq	r0, r0, r1, lsl #2
 64c:	00000100 	andeq	r0, r0, r0, lsl #2
 650:	2f3a5a01 	svccs	0x003a5a01
 654:	2f504f4d 	svccs	0x00504f4d
 658:	6f632d63 	svcvs	0x00632d63
 65c:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 4d4 <startup-0x1ffffb2c>
 660:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 664:	72657075 	rsbvc	r7, r5, #117	; 0x75
 668:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 66c:	3a63006f 	bcc	18c0830 <startup-0x1e73f7d0>
 670:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 674:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 678:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 67c:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 680:	6f6f745c 	svcvs	0x006f745c
 684:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 688:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 68c:	615c6d72 	cmpvs	ip, r2, ror sp
 690:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 694:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 698:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 69c:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 6a0:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 6a4:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 6a8:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 6ac:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 6b0:	61657363 	cmnvs	r5, r3, ror #6
 6b4:	635c7070 	cmpvs	ip, #112	; 0x70
 6b8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 6bc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 6c0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 4f8 <startup-0x1ffffb08>
 6c4:	63675c73 	cmnvs	r7, #29440	; 0x7300
 6c8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 6cc:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 6d0:	6f6e2d6d 	svcvs	0x006e2d6d
 6d4:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 6d8:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 6dc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 6e0:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 6e4:	00737973 	rsbseq	r7, r3, r3, ror r9
 6e8:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
 6ec:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 6f0:	00632e69 	rsbeq	r2, r3, r9, ror #28
 6f4:	5f000001 	svcpl	0x00000001
 6f8:	61666564 	cmnvs	r6, r4, ror #10
 6fc:	5f746c75 	svcpl	0x00746c75
 700:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 704:	00682e73 	rsbeq	r2, r8, r3, ror lr
 708:	5f000002 	svcpl	0x00000002
 70c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 710:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 714:	00000300 	andeq	r0, r0, r0, lsl #6
 718:	6f697067 	svcvs	0x00697067
 71c:	0100682e 	tsteq	r0, lr, lsr #16
 720:	00000000 	andeq	r0, r0, r0
 724:	0d480205 	sfmeq	f0, 2, [r8, #-20]	; 0xffffffec
 728:	681a2000 	ldmdavs	sl, {sp}
 72c:	4b677559 	blmi	19ddc98 <startup-0x1e622368>
 730:	bb596868 	bllt	165a8d8 <startup-0x1e9a5728>
 734:	67684b75 			; <UNDEFINED> instruction: 0x67684b75
 738:	03741003 	cmneq	r4, #3
 73c:	10032070 	andne	r2, r3, r0, ror r0
 740:	2072034a 	rsbscs	r0, r2, sl, asr #6
 744:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 748:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 74c:	2f4c223d 	svccs	0x004c223d
 750:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 754:	4b4b3d3d 	blmi	12cfc50 <startup-0x1ed303b0>
 758:	4b4b4b4b 	blmi	12d348c <startup-0x1ed2cb74>
 75c:	3d3e3e3d 	ldccc	14, cr3, [lr, #-244]!	; 0xffffff0c
 760:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 764:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 768:	2225452f 	eorcs	r4, r5, #197132288	; 0xbc00000
 76c:	3d68a03d 	stclcc	0, cr10, [r8, #-244]!	; 0xffffff0c
 770:	2f593d3d 	svccs	0x00593d3d
 774:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 778:	303d593e 	eorscc	r5, sp, lr, lsr r9
 77c:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 780:	675967ae 	ldrbvs	r6, [r9, -lr, lsr #15]
 784:	2f4b914c 	svccs	0x004b914c
 788:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 78c:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 790:	3e3d3d31 	mrccc	13, 1, r3, cr13, cr1, {1}
 794:	593d9175 	ldmdbpl	sp!, {r0, r2, r4, r5, r6, r8, ip, pc}
 798:	914b833d 	cmpls	fp, sp, lsr r3
 79c:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 7a0:	3d3d4b83 	fldmdbxcc	sp!, {d4-d68}	;@ Deprecated
 7a4:	03040200 	movweq	r0, #16896	; 0x4200
 7a8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 7ac:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 7b0:	3c060104 	stfccs	f0, [r6], {4}
 7b4:	02040200 	andeq	r0, r4, #0, 4
 7b8:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 7bc:	3c060104 	stfccs	f0, [r6], {4}
 7c0:	3d4d4106 	stfcce	f4, [sp, #-24]	; 0xffffffe8
 7c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 7c8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 7cc:	00810304 	addeq	r0, r1, r4, lsl #6
 7d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 7d4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 7d8:	003b0602 	eorseq	r0, fp, r2, lsl #12
 7dc:	06010402 	streq	r0, [r1], -r2, lsl #8
 7e0:	7640063c 			; <UNDEFINED> instruction: 0x7640063c
 7e4:	3d140868 	ldccc	8, cr0, [r4, #-416]	; 0xfffffe60
 7e8:	081e8708 	ldmdaeq	lr, {r3, r8, r9, sl, pc}
 7ec:	917584ca 	cmnls	r5, sl, asr #9
 7f0:	769f7567 	ldrvc	r7, [pc], r7, ror #10
 7f4:	00592f3e 	subseq	r2, r9, lr, lsr pc
 7f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 7fc:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 800:	02002e02 	andeq	r2, r0, #2, 28
 804:	00200404 	eoreq	r0, r0, r4, lsl #8
 808:	06040402 	streq	r0, [r4], -r2, lsl #8
 80c:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 810:	03040200 	movweq	r0, #16896	; 0x4200
 814:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 818:	00570803 	subseq	r0, r7, r3, lsl #16
 81c:	06010402 	streq	r0, [r1], -r2, lsl #8
 820:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 824:	00550602 	subseq	r0, r5, r2, lsl #12
 828:	06010402 	streq	r0, [r1], -r2, lsl #8
 82c:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 830:	00560602 	subseq	r0, r6, r2, lsl #12
 834:	06010402 	streq	r0, [r1], -r2, lsl #8
 838:	0a030666 	beq	c21d8 <startup-0x1ff3de28>
 83c:	66230358 			; <UNDEFINED> instruction: 0x66230358
 840:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 844:	003d0304 	eorseq	r0, sp, r4, lsl #6
 848:	f1030402 			; <UNDEFINED> instruction: 0xf1030402
 84c:	01040200 	mrseq	r0, R12_usr
 850:	02003c06 	andeq	r3, r0, #1536	; 0x600
 854:	3b060204 	blcc	18106c <startup-0x1fe7ef94>
 858:	01040200 	mrseq	r0, R12_usr
 85c:	41063c06 	tstmi	r6, r6, lsl #24
 860:	03040200 	movweq	r0, #16896	; 0x4200
 864:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 868:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 86c:	3c060104 	stfccs	f0, [r6], {4}
 870:	3d753f06 	ldclcc	15, cr3, [r5, #-24]!	; 0xffffffe8
 874:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 878:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 87c:	00f10304 	rscseq	r0, r1, r4, lsl #6
 880:	06010402 	streq	r0, [r1], -r2, lsl #8
 884:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 888:	003b0602 	eorseq	r0, fp, r2, lsl #12
 88c:	06010402 	streq	r0, [r1], -r2, lsl #8
 890:	0041063c 	subeq	r0, r1, ip, lsr r6
 894:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 898:	03040200 	movweq	r0, #16896	; 0x4200
 89c:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
 8a0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 8a4:	59676c3f 	stmdbpl	r7!, {r0, r1, r2, r3, r4, r5, sl, fp, sp, lr}^
 8a8:	677659ad 	ldrbvs	r5, [r6, -sp, lsr #19]!
 8ac:	6875bb59 	ldmdavs	r5!, {r0, r3, r4, r6, r8, r9, fp, ip, sp, pc}^
 8b0:	2f4b3d67 	svccs	0x004b3d67
 8b4:	3d67683d 	stclcc	8, cr6, [r7, #-244]!	; 0xffffff0c
 8b8:	3d674c59 	stclcc	12, cr4, [r7, #-356]!	; 0xfffffe9c
 8bc:	3e4c593d 			; <UNDEFINED> instruction: 0x3e4c593d
 8c0:	4b2f2f3d 	blmi	bcc5bc <startup-0x1f433a44>
 8c4:	3e682f3d 	mcrcc	15, 3, r2, cr8, cr13, {1}
 8c8:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 8cc:	3d3eae2f 	ldccc	14, cr10, [lr, #-188]!	; 0xffffff44
 8d0:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 8d4:	0067a02f 	rsbeq	sl, r7, pc, lsr #32
 8d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 8dc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 8e0:	2f4c3d59 	svccs	0x004c3d59
 8e4:	3d3e3d3d 	ldccc	13, cr3, [lr, #-244]!	; 0xffffff0c
 8e8:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
 8ec:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 8f0:	3d3d2f3e 	ldccc	15, cr2, [sp, #-248]!	; 0xffffff08
 8f4:	00673e3d 	rsbeq	r3, r7, sp, lsr lr
 8f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 8fc:	3d830620 	stccc	6, cr0, [r3, #128]	; 0x80
 900:	594c3d59 	stmdbpl	ip, {r0, r3, r4, r6, r8, sl, fp, ip, sp}^
 904:	01040200 	mrseq	r0, R12_usr
 908:	02003c06 	andeq	r3, r0, #1536	; 0x600
 90c:	003c0204 	eorseq	r0, ip, r4, lsl #4
 910:	3c030402 	cfstrscc	mvf0, [r3], {2}
 914:	3d3d3d06 	ldccc	13, cr3, [sp, #-24]!	; 0xffffffe8
 918:	674c923e 	smlaldxvs	r9, ip, lr, r2
 91c:	2f673f3d 	svccs	0x00673f3d
 920:	3d4d7321 	stclcc	3, cr7, [sp, #-132]	; 0xffffff7c
 924:	0004023d 	andeq	r0, r4, sp, lsr r2
 928:	Address 0x00000928 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4d5c3a5a 	vldrmi	s7, [ip, #-360]	; 0xfffffe98
   4:	635c504f 	cmpvs	ip, #79	; 0x4f
   8:	646f632d 	strbtvs	r6, [pc], #-813	; 10 <startup-0x1ffffff0>
   c:	6f6d5c65 	svcvs	0x006d5c65
  10:	75535c70 	ldrbvc	r5, [r3, #-3184]	; 0xfffff390
  14:	50726570 	rsbspl	r6, r2, r0, ror r5
  18:	6f726465 	svcvs	0x00726465
  1c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  20:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff6c7 <Pedro+0xdfffd26b>
  24:	736e3030 	cmnvc	lr, #48	; 0x30
  28:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  2c:	696d7961 	stmdbvs	sp!, {r0, r5, r6, r8, fp, ip, sp, lr}^
  30:	736f7263 	cmnvc	pc, #805306374	; 0x30000006
  34:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  38:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffceb2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  80:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  84:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  8c:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  90:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  94:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  98:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  9c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  a0:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  a4:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  a8:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  ac:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  b0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  b4:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  b8:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  bc:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  c0:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  c4:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  c8:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  cc:	2f3a5a00 	svccs	0x003a5a00
  d0:	2f504f4d 	svccs	0x00504f4d
  d4:	6f632d63 	svcvs	0x00632d63
  d8:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; ffffff50 <Pedro+0xdfffdaf4>
  dc:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
  e0:	72657075 	rsbvc	r7, r5, #117	; 0x75
  e4:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  e8:	65642f6f 	strbvs	r2, [r4, #-3951]!	; 0xfffff091
  ec:	7379616c 	cmnvc	r9, #108, 2
  f0:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
  f4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  f8:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
  fc:	64007369 	strvs	r7, [r0], #-873	; 0xfffffc97
 100:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 104:	3035325f 	eorscc	r3, r5, pc, asr r2
 108:	7000736e 	andvc	r7, r0, lr, ror #6
 10c:	0078736f 	rsbseq	r7, r8, pc, ror #6
 110:	63656863 	cmnvs	r5, #6488064	; 0x630000
 114:	79654b6b 	stmdbvc	r5!, {r0, r1, r3, r5, r6, r8, r9, fp, lr}^
 118:	65670073 	strbvs	r0, [r7, #-115]!	; 0xffffff8d
 11c:	746f4274 	strbtvc	r4, [pc], #-628	; 124 <startup-0x1ffffedc>
 120:	526d6f74 	rsbpl	r6, sp, #116, 30	; 0x1d0
 124:	7000776f 	andvc	r7, r0, pc, ror #14
 128:	6f726465 	svcvs	0x00726465
 12c:	6d756a5f 	vldmdbvs	r5!, {s13-s107}
 130:	68730070 	ldmdavs	r3!, {r4, r5, r6}^
 134:	2074726f 	rsbscs	r7, r4, pc, ror #4
 138:	00746e69 	rsbseq	r6, r4, r9, ror #28
 13c:	754a7369 	strbvc	r7, [sl, #-873]	; 0xfffffc97
 140:	6e69706d 	cdpvs	0, 6, cr7, cr9, cr13, {3}
 144:	3a5a0067 	bcc	16802e8 <startup-0x1e97fd18>
 148:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 14c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 150:	2f65646f 	svccs	0x0065646f
 154:	2f706f6d 	svccs	0x00706f6d
 158:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 15c:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 160:	502f6f72 	eorpl	r6, pc, r2, ror pc	; <UNPREDICTABLE>
 164:	6f726465 	svcvs	0x00726465
 168:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
 16c:	6f74746f 	svcvs	0x0074746f
 170:	776f526d 	strbvc	r5, [pc, -sp, ror #4]!
 174:	63616600 	cmnvs	r1, #0, 12
 178:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
 17c:	00746665 	rsbseq	r6, r4, r5, ror #12
 180:	78636361 	stmdavc	r3!, {r0, r5, r6, r8, r9, sp, lr}^
 184:	63636100 	cmnvs	r3, #0, 2
 188:	69740079 	ldmdbvs	r4!, {r0, r3, r4, r5, r6}^
 18c:	67616c6c 	strbvs	r6, [r1, -ip, ror #24]!
 190:	73690067 	cmnvc	r9, #103	; 0x67
 194:	7466654c 	strbtvc	r6, [r6], #-1356	; 0xfffffab4
 198:	0079654b 	rsbseq	r6, r9, fp, asr #10
 19c:	56746567 	ldrbtpl	r6, [r4], -r7, ror #10
 1a0:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1a4:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 1a8:	6f6c0068 	svcvs	0x006c0068
 1ac:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1b0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1b8:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
 1bc:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 1c0:	76007466 	strvc	r7, [r0], -r6, ror #8
 1c4:	00786c65 	rsbseq	r6, r8, r5, ror #24
 1c8:	796c6576 	stmdbvc	ip!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
 1cc:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 1d0:	6850796c 	ldmdavs	r0, {r2, r3, r5, r6, r8, fp, ip, sp, lr}^
 1d4:	63697379 	cmnvs	r9, #-469762047	; 0xe4000001
 1d8:	79620073 	stmdbvc	r2!, {r0, r1, r4, r5, r6}^
 1dc:	75006574 	strvc	r6, [r0, #-1396]	; 0xfffffa8c
 1e0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1e4:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1e8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1ec:	6b617400 	blvs	185d1f4 <startup-0x1e7a2e0c>
 1f0:	6f6c0065 	svcvs	0x006c0065
 1f4:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1f8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1fc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 200:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 204:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 208:	756f7400 	strbvc	r7, [pc, #-1024]!	; fffffe10 <Pedro+0xdfffd9b4>
 20c:	73656863 	cmnvc	r5, #6488064	; 0x630000
 210:	70706550 	rsbsvc	r6, r0, r0, asr r5
 214:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 218:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 21c:	70730074 	rsbsvc	r0, r3, r4, ror r0
 220:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 224:	6f687300 	svcvs	0x00687300
 228:	75207472 	strvc	r7, [r0, #-1138]!	; 0xfffffb8e
 22c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 230:	2064656e 	rsbcs	r6, r4, lr, ror #10
 234:	00746e69 	rsbseq	r6, r4, r9, ror #28
 238:	74736964 	ldrbtvc	r6, [r3], #-2404	; 0xfffff69c
 23c:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 240:	624f7400 	subvs	r7, pc, #0, 8
 244:	6572006a 	ldrbvs	r0, [r2, #-106]!	; 0xffffff96
 248:	50746573 	rsbspl	r6, r4, r3, ror r5
 24c:	6f726465 	svcvs	0x00726465
 250:	70657000 	rsbvc	r7, r5, r0
 254:	53726570 	cmnpl	r2, #112, 10	; 0x1c000000
 258:	70697274 	rsbvc	r7, r9, r4, ror r2
 25c:	64610065 	strbtvs	r0, [r1], #-101	; 0xffffff9b
 260:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 264:	64657000 	strbtvs	r7, [r5], #-0
 268:	735f6f72 	cmpvc	pc, #456	; 0x1c8
 26c:	6c6c6974 			; <UNDEFINED> instruction: 0x6c6c6974
 270:	61726400 	cmnvs	r2, r0, lsl #8
 274:	73690077 	cmnvc	r9, #119	; 0x77
 278:	654b7055 	strbvs	r7, [fp, #-85]	; 0xffffffab
 27c:	616d0079 	smcvs	53257	; 0xd009
 280:	4f006b73 	svcmi	0x00006b73
 284:	43454a42 	movtmi	r4, #23106	; 0x5a42
 288:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
 28c:	72705374 	rsbsvc	r5, r0, #116, 6	; 0xd0000001
 290:	00657469 	rsbeq	r7, r5, r9, ror #8
 294:	44646c6f 	strbtmi	r6, [r4], #-3183	; 0xfffff391
 298:	00776172 	rsbseq	r6, r7, r2, ror r1
 29c:	44746567 	ldrbtmi	r6, [r4], #-1383	; 0xfffffa99
 2a0:	61747369 	cmnvs	r4, r9, ror #6
 2a4:	0065636e 	rsbeq	r6, r5, lr, ror #6
 2a8:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2ac:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2b0:	52736900 	rsbspl	r6, r3, #0, 18
 2b4:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 2b8:	0079654b 	rsbseq	r6, r9, fp, asr #10
 2bc:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 2c0:	64657000 	strbtvs	r7, [r5], #-0
 2c4:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2c8:	316b6c61 	cmncc	fp, r1, ror #24
 2cc:	64657000 	strbtvs	r7, [r5], #-0
 2d0:	775f6f72 			; <UNDEFINED> instruction: 0x775f6f72
 2d4:	326b6c61 	rsbcc	r6, fp, #24832	; 0x6100
 2d8:	65657300 	strbvs	r7, [r5, #-768]!	; 0xfffffd00
 2dc:	676e5264 	strbvs	r5, [lr, -r4, ror #4]!
 2e0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff3e8 <Pedro+0xdfffcf8c>
 2e4:	33746e69 	cmncc	r4, #1680	; 0x690
 2e8:	00745f32 	rsbseq	r5, r4, r2, lsr pc
 2ec:	77676e72 			; <UNDEFINED> instruction: 0x77676e72
 2f0:	5f64726f 	svcpl	0x0064726f
 2f4:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 2f8:	6e527478 	mrcvs	4, 2, r7, cr2, cr8, {3}
 2fc:	3a5a0064 	bcc	1680494 <startup-0x1e97fb6c>
 300:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 304:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 308:	2f65646f 	svccs	0x0065646f
 30c:	2f706f6d 	svccs	0x00706f6d
 310:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 314:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 318:	722f6f72 	eorvc	r6, pc, #456	; 0x1c8
 31c:	6f646e61 	svcvs	0x00646e61
 320:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
 324:	5a00632e 	bpl	18fe4 <startup-0x1ffe701c>
 328:	4f4d2f3a 	svcmi	0x004d2f3a
 32c:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 330:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 334:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 338:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 33c:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 340:	2f6f7264 	svccs	0x006f7264
 344:	4679656b 	ldrbtmi	r6, [r9], -fp, ror #10
 348:	73636e75 	cmnvc	r3, #1872	; 0x750
 34c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
 350:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 354:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 358:	646f0062 	strbtvs	r0, [pc], #-98	; 360 <startup-0x1ffffca0>
 35c:	67694872 			; <UNDEFINED> instruction: 0x67694872
 360:	746f0068 	strbtvc	r0, [pc], #-104	; 368 <startup-0x1ffffc98>
 364:	72657079 	rsbvc	r7, r5, #121	; 0x79
 368:	70757000 	rsbsvc	r7, r5, r0
 36c:	6f007264 	svcvs	0x00007264
 370:	6f4c7264 	svcvs	0x004c7264
 374:	64690077 	strbtvs	r0, [r9], #-119	; 0xffffff89
 378:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 37c:	52736900 	rsbspl	r6, r3, #0, 18
 380:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
 384:	0079654b 	rsbseq	r6, r9, fp, asr #10
 388:	4764626b 	strbmi	r6, [r4, -fp, ror #4]!
 38c:	6f437465 	svcvs	0x00437465
 390:	675f006c 	ldrbvs	r0, [pc, -ip, rrx]
 394:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
 398:	4164626b 	cmnmi	r4, fp, ror #4
 39c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 3a0:	00657461 	rsbeq	r7, r5, r1, ror #8
 3a4:	4f495047 	svcmi	0x00495047
 3a8:	72646900 	rsbvc	r6, r4, #0, 18
 3ac:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 3b0:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 3b4:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 3b8:	73645f00 	cmnvc	r4, #0, 30
 3bc:	61685f6f 	cmnvs	r8, pc, ror #30
 3c0:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
 3c4:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 3c8:	6c00657a 	cfstr32vs	mvfx6, [r0], {122}	; 0x7a
 3cc:	5064616f 	rsbpl	r6, r4, pc, ror #2
 3d0:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 3d4:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
 3d8:	5f007069 	svcpl	0x00007069
 3dc:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 3e0:	5f003834 	svcpl	0x00003834
 3e4:	72656d65 	rsbvc	r6, r5, #6464	; 0x1940
 3e8:	636e6567 	cmnvs	lr, #432013312	; 0x19c00000
 3ec:	79740079 	ldmdbvc	r4!, {r0, r3, r4, r5, r6}^
 3f0:	5f006570 	svcpl	0x00006570
 3f4:	74726377 	ldrbtvc	r6, [r2], #-887	; 0xfffffc89
 3f8:	5f626d6f 	svcpl	0x00626d6f
 3fc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 400:	775f0065 	ldrbvc	r0, [pc, -r5, rrx]
 404:	74727363 	ldrbtvc	r7, [r2], #-867	; 0xfffffc9d
 408:	73626d6f 	cmnvc	r2, #7104	; 0x1bc0
 40c:	6174735f 	cmnvs	r4, pc, asr r3
 410:	5f006574 	svcpl	0x00006574
 414:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
 418:	00657a69 	rsbeq	r7, r5, r9, ror #20
 41c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 420:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 424:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 428:	00745f65 	rsbseq	r5, r4, r5, ror #30
 42c:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 430:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 434:	6174735f 	cmnvs	r4, pc, asr r3
 438:	5f006574 	svcpl	0x00006574
 43c:	5f6d745f 	svcpl	0x006d745f
 440:	00636573 	rsbeq	r6, r3, r3, ror r5
 444:	706f6f6c 	rsbvc	r6, pc, ip, ror #30
 448:	62755f00 	rsbsvs	r5, r5, #0, 30
 44c:	5f006675 	svcpl	0x00006675
 450:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 454:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 45c <startup-0x1ffffba4>
 458:	6f685f6d 	svcvs	0x00685f6d
 45c:	5f007275 	svcpl	0x00007275
 460:	0066735f 	rsbeq	r7, r6, pc, asr r3
 464:	6f6f635f 	svcvs	0x006f635f
 468:	0065696b 	rsbeq	r6, r5, fp, ror #18
 46c:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 470:	0065756c 	rsbeq	r7, r5, ip, ror #10
 474:	616c665f 	cmnvs	ip, pc, asr r6
 478:	5f007367 	svcpl	0x00007367
 47c:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 480:	5f006178 	svcpl	0x00006178
 484:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 488:	625f006e 	subsvs	r0, pc, #110	; 0x6e
 48c:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 490:	5f00657a 	svcpl	0x0000657a
 494:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
 498:	5f006675 	svcpl	0x00006675
 49c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 4a0:	5f007465 	svcpl	0x00007465
 4a4:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
 4a8:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 4ac:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 4b0:	00657461 	rsbeq	r7, r5, r1, ror #8
 4b4:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 4b8:	5f6e656c 	svcpl	0x006e656c
 4bc:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 4c0:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 4c4:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 4c8:	665f0073 			; <UNDEFINED> instruction: 0x665f0073
 4cc:	5f00736e 	svcpl	0x0000736e
 4d0:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 4d4:	6c665f00 	stclvs	15, cr5, [r6], #-0
 4d8:	5f6b636f 	svcpl	0x006b636f
 4dc:	735f0074 	cmpvc	pc, #116	; 0x74
 4e0:	72656474 	rsbvc	r6, r5, #116, 8	; 0x74000000
 4e4:	425f0072 	subsmi	r0, pc, #114	; 0x72
 4e8:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
 4ec:	675f0074 			; <UNDEFINED> instruction: 0x675f0074
 4f0:	616d6d61 	cmnvs	sp, r1, ror #26
 4f4:	6769735f 			; <UNDEFINED> instruction: 0x6769735f
 4f8:	6d61676e 	stclvs	7, cr6, [r1, #-440]!	; 0xfffffe48
 4fc:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 500:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 504:	5f006b5f 	svcpl	0x00006b5f
 508:	006d745f 	rsbeq	r7, sp, pc, asr r4
 50c:	63775f5f 	cmnvs	r7, #380	; 0x17c
 510:	5f006268 	svcpl	0x00006268
 514:	6f647473 	svcvs	0x00647473
 518:	5f007475 	svcpl	0x00007475
 51c:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
 520:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
 524:	4c64616f 	stfmie	f6, [r4], #-444	; 0xfffffe44
 528:	5f006c76 	svcpl	0x00006c76
 52c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 530:	67617000 	strbvs	r7, [r1, -r0]!
 534:	6e5f0065 	cdpvs	0, 5, cr0, cr15, cr5, {3}
 538:	73626f69 	cmnvc	r2, #420	; 0x1a4
 53c:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 540:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 544:	735f0030 	cmpvc	pc, #48	; 0x30
 548:	616e6769 	cmnvs	lr, r9, ror #14
 54c:	75625f6c 	strbvc	r5, [r2, #-3948]!	; 0xfffff094
 550:	615f0066 	cmpvs	pc, r6, rrx
 554:	69746373 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 558:	625f656d 	subsvs	r6, pc, #457179136	; 0x1b400000
 55c:	6f006675 	svcvs	0x00006675
 560:	6e69576e 	cdpvs	7, 6, cr5, cr9, cr14, {3}
 564:	65725f00 	ldrbvs	r5, [r2, #-3840]!	; 0xfffff100
 568:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 56c:	775f5f00 	ldrbvc	r5, [pc, -r0, lsl #30]
 570:	5f006863 	svcpl	0x00006863
 574:	4b434f4c 	blmi	10d42ac <startup-0x1ef2bd54>
 578:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
 57c:	5f746e69 	svcpl	0x00746e69
 580:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 584:	7367616c 	cmnvc	r7, #108, 2
 588:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
 58c:	6944776f 	stmdbvs	r4, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}^
 590:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
 594:	5f006563 	svcpl	0x00006563
 598:	5f6d745f 	svcpl	0x006d745f
 59c:	72616579 	rsbvc	r6, r1, #507510784	; 0x1e400000
 5a0:	2f3a5a00 	svccs	0x003a5a00
 5a4:	2f504f4d 	svccs	0x00504f4d
 5a8:	6f632d63 	svcvs	0x00632d63
 5ac:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 424 <startup-0x1ffffbdc>
 5b0:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 5b4:	72657075 	rsbvc	r7, r5, #117	; 0x75
 5b8:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 5bc:	616d2f6f 	cmnvs	sp, pc, ror #30
 5c0:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 5c4:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 5c8:	00667478 	rsbeq	r7, r6, r8, ror r4
 5cc:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 5d0:	6e6f6d5f 	mcrvs	13, 3, r6, cr15, cr15, {2}
 5d4:	74615f00 	strbtvc	r5, [r1], #-3840	; 0xfffff100
 5d8:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 5dc:	735f5f00 	cmpvc	pc, #0, 30
 5e0:	69646964 	stmdbvs	r4!, {r2, r5, r6, r8, fp, sp, lr}^
 5e4:	0074696e 	rsbseq	r6, r4, lr, ror #18
 5e8:	66666f5f 	uqsaxvs	r6, r6, pc	; <UNPREDICTABLE>
 5ec:	5000745f 	andpl	r7, r0, pc, asr r4
 5f0:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 5f4:	72745372 	rsbsvc	r5, r4, #-939524095	; 0xc8000001
 5f8:	00737069 	rsbseq	r7, r3, r9, rrx
 5fc:	6572665f 	ldrbvs	r6, [r2, #-1631]!	; 0xfffff9a1
 600:	73696c65 	cmnvc	r9, #25856	; 0x6500
 604:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
 608:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 484 <startup-0x1ffffb7c>
 60c:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 610:	00657461 	rsbeq	r7, r5, r1, ror #8
 614:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 618:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
 61c:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 620:	6d676553 	cfstr64vs	mvdx6, [r7, #-332]!	; 0xfffffeb4
 624:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
 628:	00746665 	rsbseq	r6, r4, r5, ror #12
 62c:	6f697067 	svcvs	0x00697067
 630:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 634:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 638:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
 63c:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 640:	5f006f6e 	svcpl	0x00006f6e
 644:	5f6d745f 	svcpl	0x006d745f
 648:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 64c:	735f5f00 	cmpvc	pc, #0, 30
 650:	00667562 	rsbeq	r7, r6, r2, ror #10
 654:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 658:	5f5f0073 	svcpl	0x005f0073
 65c:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 660:	626d5f00 	rsbvs	r5, sp, #0, 30
 664:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 668:	00745f65 	rsbseq	r5, r4, r5, ror #30
 66c:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
 670:	00454c49 	subeq	r4, r5, r9, asr #24
 674:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 678:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 67c:	61725f00 	cmnvs	r2, r0, lsl #30
 680:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 684:	00747865 	rsbseq	r7, r4, r5, ror #16
 688:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 68c:	735f6e65 	cmpvc	pc, #1616	; 0x650
 690:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 694:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 698:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 69c:	5f00646e 	svcpl	0x0000646e
 6a0:	61636f6c 	cmnvs	r3, ip, ror #30
 6a4:	5f00656c 	svcpl	0x0000656c
 6a8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 6ac:	70756e61 	rsbsvc	r6, r5, r1, ror #28
 6b0:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 6b4:	63657073 	cmnvs	r5, #115	; 0x73
 6b8:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 6bc:	6f6c5f64 	svcvs	0x006c5f64
 6c0:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 6c4:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 6c8:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 514 <startup-0x1ffffaec>
 6cc:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
 6d0:	725f0073 	subsvc	r0, pc, #115	; 0x73
 6d4:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 6d8:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 6dc:	5f006465 	svcpl	0x00006465
 6e0:	756f635f 	strbvc	r6, [pc, #-863]!	; 389 <startup-0x1ffffc77>
 6e4:	5f00746e 	svcpl	0x0000746e
 6e8:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 6ec:	735f006b 	cmpvc	pc, #107	; 0x6b
 6f0:	006b6565 	rsbeq	r6, fp, r5, ror #10
 6f4:	616f7469 	cmnvs	pc, r9, ror #8
 6f8:	70665f00 	rsbvc	r5, r6, r0, lsl #30
 6fc:	745f736f 	ldrbvc	r7, [pc], #-879	; 704 <startup-0x1ffff8fc>
 700:	6e6f5f00 	cdpvs	15, 6, cr5, cr15, cr0, {0}
 704:	6978655f 	ldmdbvs	r8!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 708:	72615f74 	rsbvc	r5, r1, #116, 30	; 0x1d0
 70c:	5f007367 	svcpl	0x00007367
 710:	5f6d745f 	svcpl	0x006d745f
 714:	006e696d 	rsbeq	r6, lr, sp, ror #18
 718:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 71c:	00707574 	rsbseq	r7, r0, r4, ror r5
 720:	66667562 	strbtvs	r7, [r6], -r2, ror #10
 724:	5f007265 	svcpl	0x00007265
 728:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 72c:	616f6c00 	cmnvs	pc, r0, lsl #24
 730:	77654e64 	strbvc	r4, [r5, -r4, ror #28]!
 734:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
 738:	6765536c 	strbvs	r5, [r5, -ip, ror #6]!
 73c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 740:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 744:	735f0074 	cmpvc	pc, #116	; 0x74
 748:	6f747274 	svcvs	0x00747274
 74c:	616c5f6b 	cmnvs	ip, fp, ror #30
 750:	5f007473 	svcpl	0x00007473
 754:	6c61765f 	stclvs	6, cr7, [r1], #-380	; 0xfffffe84
 758:	5f006575 	svcpl	0x00006575
 75c:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 760:	00736570 	rsbseq	r6, r3, r0, ror r5
 764:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 768:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff870 <Pedro+0xdfffd414>
 76c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 770:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
 774:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
 778:	72655f65 	rsbvc	r5, r5, #404	; 0x194
 77c:	675f0072 			; <UNDEFINED> instruction: 0x675f0072
 780:	61626f6c 	cmnvs	r2, ip, ror #30
 784:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 788:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 78c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 790:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 794:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 798:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 79c:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
 7a0:	5f007364 	svcpl	0x00007364
 7a4:	5f6d745f 	svcpl	0x006d745f
 7a8:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
 7ac:	6c675f00 	stclvs	15, cr5, [r7], #-0
 7b0:	5f006575 	svcpl	0x00006575
 7b4:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 7b8:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 7bc:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 7c0:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 7c4:	735f0066 	cmpvc	pc, #102	; 0x66
 7c8:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 7cc:	00636e75 	rsbeq	r6, r3, r5, ror lr
 7d0:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
 7d4:	755f0066 	ldrbvc	r0, [pc, #-102]	; 776 <startup-0x1ffff88a>
 7d8:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 7dc:	5f5f0064 	svcpl	0x005f0064
 7e0:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 7e4:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 7e8:	6f6c5f00 	svcvs	0x006c5f00
 7ec:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 7f0:	5f656d69 	svcpl	0x00656d69
 7f4:	00667562 	rsbeq	r7, r6, r2, ror #10
 7f8:	6f6c635f 	svcvs	0x006c635f
 7fc:	6c006573 	cfstr32vs	mvfx6, [r0], {115}	; 0x73
 800:	5064616f 	rsbpl	r6, r4, pc, ror #2
 804:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 808:	00744172 	rsbseq	r4, r4, r2, ror r1
 80c:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
 810:	61747300 	cmnvs	r4, r0, lsl #6
 814:	5f007472 	svcpl	0x00007472
 818:	6f74626d 	svcvs	0x0074626d
 81c:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 820:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 824:	35705f00 	ldrbcc	r5, [r0, #-3840]!	; 0xfffff100
 828:	616d0073 	smcvs	53251	; 0xd003
 82c:	5f006e69 	svcpl	0x00006e69
 830:	5f6d745f 	svcpl	0x006d745f
 834:	7961646d 	stmdbvc	r1!, {r0, r2, r3, r5, r6, sl, sp, lr}^
 838:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 83c:	63006c65 	movwvs	r6, #3173	; 0xc65
 840:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 844:	7361006e 	cmnvc	r1, #110	; 0x6e
 848:	5f696963 	svcpl	0x00696963
 84c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 850:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 854:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 858:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 85c:	654c7466 	strbvs	r7, [ip, #-1126]	; 0xfffffb9a
 860:	67007466 	strvs	r7, [r0, -r6, ror #8]
 864:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 868:	645f6369 	ldrbvs	r6, [pc], #-873	; 870 <startup-0x1ffff790>
 86c:	5f776172 	svcpl	0x00776172
 870:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 874:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 878:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 87c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 880:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 884:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 710 <startup-0x1ffff8f0>
 888:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 88c:	63736100 	cmnvs	r3, #0, 2
 890:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 894:	5f6c7274 	svcpl	0x006c7274
 898:	5f746962 	svcpl	0x00746962
 89c:	61656c63 	cmnvs	r5, r3, ror #24
 8a0:	72670072 	rsbvc	r0, r7, #114	; 0x72
 8a4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 8a8:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 8ac:	5f726165 	svcpl	0x00726165
 8b0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 8b4:	61006e65 	tstvs	r0, r5, ror #28
 8b8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 8bc:	746f675f 	strbtvc	r6, [pc], #-1887	; 8c4 <startup-0x1ffff73c>
 8c0:	0079786f 	rsbseq	r7, r9, pc, ror #16
 8c4:	70617267 	rsbvc	r7, r1, r7, ror #4
 8c8:	5f636968 	svcpl	0x00636968
 8cc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8d0:	63736100 	cmnvs	r3, #0, 2
 8d4:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 8d8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 8dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 8e0:	5f636968 	svcpl	0x00636968
 8e4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 8e8:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 8ec:	5f5f0061 	svcpl	0x005f0061
 8f0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 8f4:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 8f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 8fc:	5f636968 	svcpl	0x00636968
 900:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 904:	61645f65 	cmnvs	r4, r5, ror #30
 908:	61006174 	tstvs	r0, r4, ror r1
 90c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 910:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 79c <startup-0x1ffff864>
 914:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 918:	61726700 	cmnvs	r2, r0, lsl #14
 91c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 920:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 924:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 928:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 92c:	00726165 	rsbseq	r6, r2, r5, ror #2
 930:	70617267 	rsbvc	r7, r1, r7, ror #4
 934:	5f636968 	svcpl	0x00636968
 938:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 93c:	79620065 	stmdbvc	r2!, {r0, r2, r5, r6}^
 940:	6f546574 	svcvs	0x00546574
 944:	65726353 	ldrbvs	r6, [r2, #-851]!	; 0xfffffcad
 948:	75426e65 	strbvc	r6, [r2, #-3685]	; 0xfffff19b
 94c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 950:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 954:	625f7261 	subsvs	r7, pc, #268435462	; 0x10000006
 958:	426b6361 	rsbmi	r6, fp, #-2080374783	; 0x84000001
 95c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 960:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
 964:	52746669 	rsbspl	r6, r4, #110100480	; 0x6900000
 968:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 96c:	63736100 	cmnvs	r3, #0, 2
 970:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 974:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 978:	7369645f 	cmnvc	r9, #1593835520	; 0x5f000000
 97c:	72670070 	rsbvc	r0, r7, #112	; 0x70
 980:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 984:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 988:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 98c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 990:	61007465 	tstvs	r0, r5, ror #8
 994:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 998:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 99c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 9a0:	00726168 	rsbseq	r6, r2, r8, ror #2
 9a4:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 9a8:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 9ac:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 9b0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 9b4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 9b8:	73610072 	cmnvc	r1, #114	; 0x72
 9bc:	5f696963 	svcpl	0x00696963
 9c0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 9c4:	61645f65 	cmnvs	r4, r5, ror #30
 9c8:	67006174 	smlsdxvs	r0, r4, r1, r6
 9cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 9d0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 9d4:	5f746961 	svcpl	0x00746961
 9d8:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 9dc:	65730079 	ldrbvs	r0, [r3, #-121]!	; 0xffffff87
 9e0:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 9e4:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 9e8:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 820 <startup-0x1ffff7e0>
 9ec:	0072656c 	rsbseq	r6, r2, ip, ror #10
 9f0:	70617267 	rsbvc	r7, r1, r7, ror #4
 9f4:	5f636968 	svcpl	0x00636968
 9f8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 9fc:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 a00:	6100657a 	tstvs	r0, sl, ror r5
 a04:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 a08:	6165725f 	cmnvs	r5, pc, asr r2
 a0c:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 a10:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 a14:	63736100 	cmnvs	r3, #0, 2
 a18:	775f6969 	ldrbvc	r6, [pc, -r9, ror #18]
 a1c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 a20:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 a24:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 85c <startup-0x1ffff7a4>
 a28:	0072656c 	rsbseq	r6, r2, ip, ror #10
 a2c:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 a30:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 a34:	646f632d 	strbtvs	r6, [pc], #-813	; a3c <startup-0x1ffff5c4>
 a38:	6f6d2f65 	svcvs	0x006d2f65
 a3c:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 a40:	50726570 	rsbspl	r6, r2, r0, ror r5
 a44:	6f726465 	svcvs	0x00726465
 a48:	64634c2f 	strbtvs	r4, [r3], #-3119	; 0xfffff3d1
 a4c:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 a50:	00632e69 	rsbeq	r2, r3, r9, ror #28
 a54:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 a58:	75426f54 	strbvc	r6, [r2, #-3924]	; 0xfffff0ac
 a5c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 a60:	63736100 	cmnvs	r3, #0, 2
 a64:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 a68:	5f646165 	svcpl	0x00646165
 a6c:	61746164 	cmnvs	r4, r4, ror #2
 a70:	72747300 	rsbsvc	r7, r4, #0, 6
 a74:	54676e69 	strbtpl	r6, [r7], #-3689	; 0xfffff197
 a78:	6373416f 	cmnvs	r3, #-1073741797	; 0xc000001b
 a7c:	61006969 	tstvs	r0, r9, ror #18
 a80:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 a84:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 a88:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 a8c:	Address 0x00000a8c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffceb2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	00000018 	andeq	r0, r0, r8, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000044 	andeq	r0, r0, r4, asr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	00000000 	andeq	r0, r0, r0
  34:	20000054 	andcs	r0, r0, r4, asr r0
  38:	00000044 	andeq	r0, r0, r4, asr #32
  3c:	40080e41 	andmi	r0, r8, r1, asr #28
  40:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  44:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	20000098 	mulcs	r0, r8, r0
  54:	0000002a 	andeq	r0, r0, sl, lsr #32
  58:	40080e41 	andmi	r0, r8, r1, asr #28
  5c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  60:	180e4101 	stmdane	lr, {r0, r8, lr}
  64:	00070d41 	andeq	r0, r7, r1, asr #26
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	200000c2 	andcs	r0, r0, r2, asr #1
  74:	00000024 	andeq	r0, r0, r4, lsr #32
  78:	40080e41 	andmi	r0, r8, r1, asr #28
  7c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  80:	100e4101 	andne	r4, lr, r1, lsl #2
  84:	00070d41 	andeq	r0, r7, r1, asr #26
  88:	0000000c 	andeq	r0, r0, ip
  8c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  90:	7c020001 	stcvc	0, cr0, [r2], {1}
  94:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000088 	andeq	r0, r0, r8, lsl #1
  a0:	200000e8 	andcs	r0, r0, r8, ror #1
  a4:	00000028 	andeq	r0, r0, r8, lsr #32
  a8:	400c0e41 	andmi	r0, ip, r1, asr #28
  ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  b0:	018e4002 	orreq	r4, lr, r2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	00000018 	andeq	r0, r0, r8, lsl r0
  bc:	00000088 	andeq	r0, r0, r8, lsl #1
  c0:	20000110 	andcs	r0, r0, r0, lsl r1
  c4:	00000088 	andeq	r0, r0, r8, lsl #1
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  d4:	00000018 	andeq	r0, r0, r8, lsl r0
  d8:	00000088 	andeq	r0, r0, r8, lsl #1
  dc:	20000198 	mulcs	r0, r8, r1
  e0:	000000d8 	ldrdeq	r0, [r0], -r8
  e4:	40080e41 	andmi	r0, r8, r1, asr #28
  e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  f0:	00000018 	andeq	r0, r0, r8, lsl r0
  f4:	00000088 	andeq	r0, r0, r8, lsl #1
  f8:	20000270 	andcs	r0, r0, r0, ror r2
  fc:	00000038 	andeq	r0, r0, r8, lsr r0
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 10c:	00000018 	andeq	r0, r0, r8, lsl r0
 110:	00000088 	andeq	r0, r0, r8, lsl #1
 114:	200002a8 	andcs	r0, r0, r8, lsr #5
 118:	00000028 	andeq	r0, r0, r8, lsr #32
 11c:	40080e41 	andmi	r0, r8, r1, asr #28
 120:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 124:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 128:	00000018 	andeq	r0, r0, r8, lsl r0
 12c:	00000088 	andeq	r0, r0, r8, lsl #1
 130:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 134:	00000080 	andeq	r0, r0, r0, lsl #1
 138:	40080e41 	andmi	r0, r8, r1, asr #28
 13c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 140:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 144:	0000001c 	andeq	r0, r0, ip, lsl r0
 148:	00000088 	andeq	r0, r0, r8, lsl #1
 14c:	20000350 	andcs	r0, r0, r0, asr r3
 150:	00000240 	andeq	r0, r0, r0, asr #4
 154:	40080e41 	andmi	r0, r8, r1, asr #28
 158:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 15c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 160:	00070d41 	andeq	r0, r7, r1, asr #26
 164:	0000001c 	andeq	r0, r0, ip, lsl r0
 168:	00000088 	andeq	r0, r0, r8, lsl #1
 16c:	20000590 	mulcs	r0, r0, r5
 170:	000000c8 	andeq	r0, r0, r8, asr #1
 174:	40080e41 	andmi	r0, r8, r1, asr #28
 178:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 17c:	100e4101 	andne	r4, lr, r1, lsl #2
 180:	00070d41 	andeq	r0, r7, r1, asr #26
 184:	0000001c 	andeq	r0, r0, ip, lsl r0
 188:	00000088 	andeq	r0, r0, r8, lsl #1
 18c:	20000658 	andcs	r0, r0, r8, asr r6
 190:	0000001c 	andeq	r0, r0, ip, lsl r0
 194:	40080e41 	andmi	r0, r8, r1, asr #28
 198:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 19c:	100e4101 	andne	r4, lr, r1, lsl #2
 1a0:	00070d41 	andeq	r0, r7, r1, asr #26
 1a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a8:	00000088 	andeq	r0, r0, r8, lsl #1
 1ac:	20000674 	andcs	r0, r0, r4, ror r6
 1b0:	000000cc 	andeq	r0, r0, ip, asr #1
 1b4:	40080e41 	andmi	r0, r8, r1, asr #28
 1b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 1c0:	00070d41 	andeq	r0, r7, r1, asr #26
 1c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c8:	00000088 	andeq	r0, r0, r8, lsl #1
 1cc:	20000740 	andcs	r0, r0, r0, asr #14
 1d0:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 1d4:	40080e41 	andmi	r0, r8, r1, asr #28
 1d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1dc:	280e4101 	stmdacs	lr, {r0, r8, lr}
 1e0:	00070d41 	andeq	r0, r7, r1, asr #26
 1e4:	00000018 	andeq	r0, r0, r8, lsl r0
 1e8:	00000088 	andeq	r0, r0, r8, lsl #1
 1ec:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 1f0:	00000014 	andeq	r0, r0, r4, lsl r0
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 200:	00000018 	andeq	r0, r0, r8, lsl r0
 204:	00000088 	andeq	r0, r0, r8, lsl #1
 208:	20000804 	andcs	r0, r0, r4, lsl #16
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 21c:	0000000c 	andeq	r0, r0, ip
 220:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 224:	7c020001 	stcvc	0, cr0, [r2], {1}
 228:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 22c:	0000001c 	andeq	r0, r0, ip, lsl r0
 230:	0000021c 	andeq	r0, r0, ip, lsl r2
 234:	20000818 	andcs	r0, r0, r8, lsl r8
 238:	00000032 	andeq	r0, r0, r2, lsr r0
 23c:	40080e41 	andmi	r0, r8, r1, asr #28
 240:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 244:	180e4101 	stmdane	lr, {r0, r8, lr}
 248:	00070d41 	andeq	r0, r7, r1, asr #26
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	0000021c 	andeq	r0, r0, ip, lsl r2
 254:	2000084a 	andcs	r0, r0, sl, asr #16
 258:	00000076 	andeq	r0, r0, r6, ror r0
 25c:	40080e41 	andmi	r0, r8, r1, asr #28
 260:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 264:	180e4101 	stmdane	lr, {r0, r8, lr}
 268:	00070d41 	andeq	r0, r7, r1, asr #26
 26c:	0000000c 	andeq	r0, r0, ip
 270:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 274:	7c020001 	stcvc	0, cr0, [r2], {1}
 278:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000026c 	andeq	r0, r0, ip, ror #4
 284:	200008c0 	andcs	r0, r0, r0, asr #17
 288:	00000054 	andeq	r0, r0, r4, asr r0
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	0000026c 	andeq	r0, r0, ip, ror #4
 2a4:	20000914 	andcs	r0, r0, r4, lsl r9
 2a8:	00000058 	andeq	r0, r0, r8, asr r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	00000018 	andeq	r0, r0, r8, lsl r0
 2bc:	0000026c 	andeq	r0, r0, ip, ror #4
 2c0:	2000096c 	andcs	r0, r0, ip, ror #18
 2c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d4:	00000018 	andeq	r0, r0, r8, lsl r0
 2d8:	0000026c 	andeq	r0, r0, ip, ror #4
 2dc:	20000998 	mulcs	r0, r8, r9
 2e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2f0:	00000018 	andeq	r0, r0, r8, lsl r0
 2f4:	0000026c 	andeq	r0, r0, ip, ror #4
 2f8:	200009c4 	andcs	r0, r0, r4, asr #19
 2fc:	0000002c 	andeq	r0, r0, ip, lsr #32
 300:	40080e41 	andmi	r0, r8, r1, asr #28
 304:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 308:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 30c:	00000018 	andeq	r0, r0, r8, lsl r0
 310:	0000026c 	andeq	r0, r0, ip, ror #4
 314:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 318:	0000002c 	andeq	r0, r0, ip, lsr #32
 31c:	40080e41 	andmi	r0, r8, r1, asr #28
 320:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 324:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 328:	00000020 	andeq	r0, r0, r0, lsr #32
 32c:	0000026c 	andeq	r0, r0, ip, ror #4
 330:	20000a1c 	andcs	r0, r0, ip, lsl sl
 334:	0000006c 	andeq	r0, r0, ip, rrx
 338:	400c0e41 	andmi	r0, ip, r1, asr #28
 33c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 340:	018e4002 	orreq	r4, lr, r2
 344:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 348:	0000070d 	andeq	r0, r0, sp, lsl #14
 34c:	0000000c 	andeq	r0, r0, ip
 350:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 354:	7c020001 	stcvc	0, cr0, [r2], {1}
 358:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 35c:	0000000c 	andeq	r0, r0, ip
 360:	0000034c 	andeq	r0, r0, ip, asr #6
 364:	20000000 	andcs	r0, r0, r0
 368:	0000000c 	andeq	r0, r0, ip
 36c:	00000018 	andeq	r0, r0, r8, lsl r0
 370:	0000034c 	andeq	r0, r0, ip, asr #6
 374:	20000a88 	andcs	r0, r0, r8, lsl #21
 378:	00000060 	andeq	r0, r0, r0, rrx
 37c:	40080e41 	andmi	r0, r8, r1, asr #28
 380:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 384:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 388:	00000018 	andeq	r0, r0, r8, lsl r0
 38c:	0000034c 	andeq	r0, r0, ip, asr #6
 390:	20000ae8 	andcs	r0, r0, r8, ror #21
 394:	0000003c 	andeq	r0, r0, ip, lsr r0
 398:	40080e41 	andmi	r0, r8, r1, asr #28
 39c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a4:	00000018 	andeq	r0, r0, r8, lsl r0
 3a8:	0000034c 	andeq	r0, r0, ip, asr #6
 3ac:	20000b24 	andcs	r0, r0, r4, lsr #22
 3b0:	0000004c 	andeq	r0, r0, ip, asr #32
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3c0:	00000018 	andeq	r0, r0, r8, lsl r0
 3c4:	0000034c 	andeq	r0, r0, ip, asr #6
 3c8:	20000b70 	andcs	r0, r0, r0, ror fp
 3cc:	00000010 	andeq	r0, r0, r0, lsl r0
 3d0:	40080e41 	andmi	r0, r8, r1, asr #28
 3d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3dc:	00000018 	andeq	r0, r0, r8, lsl r0
 3e0:	0000034c 	andeq	r0, r0, ip, asr #6
 3e4:	20000b80 	andcs	r0, r0, r0, lsl #23
 3e8:	00000010 	andeq	r0, r0, r0, lsl r0
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3f8:	00000020 	andeq	r0, r0, r0, lsr #32
 3fc:	0000034c 	andeq	r0, r0, ip, asr #6
 400:	20000b90 	mulcs	r0, r0, fp
 404:	00000070 	andeq	r0, r0, r0, ror r0
 408:	400c0e41 	andmi	r0, ip, r1, asr #28
 40c:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 410:	018e4002 	orreq	r4, lr, r2
 414:	41400e41 	cmpmi	r0, r1, asr #28
 418:	0000070d 	andeq	r0, r0, sp, lsl #14
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	0000034c 	andeq	r0, r0, ip, asr #6
 424:	20000c00 	andcs	r0, r0, r0, lsl #24
 428:	0000004c 	andeq	r0, r0, ip, asr #32
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	100e4101 	andne	r4, lr, r1, lsl #2
 438:	00070d41 	andeq	r0, r7, r1, asr #26
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	0000034c 	andeq	r0, r0, ip, asr #6
 444:	20000c4c 	andcs	r0, r0, ip, asr #24
 448:	00000070 	andeq	r0, r0, r0, ror r0
 44c:	40080e41 	andmi	r0, r8, r1, asr #28
 450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 454:	680e4101 	stmdavs	lr, {r0, r8, lr}
 458:	00070d41 	andeq	r0, r7, r1, asr #26
 45c:	00000018 	andeq	r0, r0, r8, lsl r0
 460:	0000034c 	andeq	r0, r0, ip, asr #6
 464:	20000cbc 			; <UNDEFINED> instruction: 0x20000cbc
 468:	0000000a 	andeq	r0, r0, sl
 46c:	40080e41 	andmi	r0, r8, r1, asr #28
 470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 474:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 478:	0000001c 	andeq	r0, r0, ip, lsl r0
 47c:	0000034c 	andeq	r0, r0, ip, asr #6
 480:	20000cc6 	andcs	r0, r0, r6, asr #25
 484:	00000052 	andeq	r0, r0, r2, asr r0
 488:	40080e41 	andmi	r0, r8, r1, asr #28
 48c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 490:	100e4101 	andne	r4, lr, r1, lsl #2
 494:	00070d41 	andeq	r0, r7, r1, asr #26
 498:	0000001c 	andeq	r0, r0, ip, lsl r0
 49c:	0000034c 	andeq	r0, r0, ip, asr #6
 4a0:	20000d18 	andcs	r0, r0, r8, lsl sp
 4a4:	00000030 	andeq	r0, r0, r0, lsr r0
 4a8:	40080e41 	andmi	r0, r8, r1, asr #28
 4ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b0:	280e4101 	stmdacs	lr, {r0, r8, lr}
 4b4:	00070d41 	andeq	r0, r7, r1, asr #26
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4d0:	20000d48 	andcs	r0, r0, r8, asr #26
 4d4:	00000044 	andeq	r0, r0, r4, asr #32
 4d8:	40080e41 	andmi	r0, r8, r1, asr #28
 4dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 4e4:	00070d41 	andeq	r0, r7, r1, asr #26
 4e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 4ec:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4f0:	20000d8c 	andcs	r0, r0, ip, lsl #27
 4f4:	00000050 	andeq	r0, r0, r0, asr r0
 4f8:	40080e41 	andmi	r0, r8, r1, asr #28
 4fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 500:	180e4101 	stmdane	lr, {r0, r8, lr}
 504:	00070d41 	andeq	r0, r7, r1, asr #26
 508:	0000001c 	andeq	r0, r0, ip, lsl r0
 50c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 510:	20000ddc 	ldrdcs	r0, [r0], -ip
 514:	0000005a 	andeq	r0, r0, sl, asr r0
 518:	40080e41 	andmi	r0, r8, r1, asr #28
 51c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 520:	100e4101 	andne	r4, lr, r1, lsl #2
 524:	00070d41 	andeq	r0, r7, r1, asr #26
 528:	00000018 	andeq	r0, r0, r8, lsl r0
 52c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 530:	20000e36 	andcs	r0, r0, r6, lsr lr
 534:	00000064 	andeq	r0, r0, r4, rrx
 538:	40080e41 	andmi	r0, r8, r1, asr #28
 53c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 540:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 544:	0000001c 	andeq	r0, r0, ip, lsl r0
 548:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 54c:	20000e9a 	mulcs	r0, sl, lr
 550:	0000006a 	andeq	r0, r0, sl, rrx
 554:	40080e41 	andmi	r0, r8, r1, asr #28
 558:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 55c:	100e4101 	andne	r4, lr, r1, lsl #2
 560:	00070d41 	andeq	r0, r7, r1, asr #26
 564:	0000001c 	andeq	r0, r0, ip, lsl r0
 568:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 56c:	20000f04 	andcs	r0, r0, r4, lsl #30
 570:	00000090 	muleq	r0, r0, r0
 574:	40080e41 	andmi	r0, r8, r1, asr #28
 578:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 57c:	180e4101 	stmdane	lr, {r0, r8, lr}
 580:	00070d41 	andeq	r0, r7, r1, asr #26
 584:	0000001c 	andeq	r0, r0, ip, lsl r0
 588:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 58c:	20000f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>
 590:	0000002a 	andeq	r0, r0, sl, lsr #32
 594:	40080e41 	andmi	r0, r8, r1, asr #28
 598:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 59c:	100e4101 	andne	r4, lr, r1, lsl #2
 5a0:	00070d41 	andeq	r0, r7, r1, asr #26
 5a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 5ac:	20000fbe 			; <UNDEFINED> instruction: 0x20000fbe
 5b0:	00000076 	andeq	r0, r0, r6, ror r0
 5b4:	40080e41 	andmi	r0, r8, r1, asr #28
 5b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5bc:	100e4101 	andne	r4, lr, r1, lsl #2
 5c0:	00070d41 	andeq	r0, r7, r1, asr #26
 5c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 5cc:	20001034 	andcs	r1, r0, r4, lsr r0
 5d0:	00000040 	andeq	r0, r0, r0, asr #32
 5d4:	40080e41 	andmi	r0, r8, r1, asr #28
 5d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5dc:	100e4101 	andne	r4, lr, r1, lsl #2
 5e0:	00070d41 	andeq	r0, r7, r1, asr #26
 5e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 5ec:	20001074 	andcs	r1, r0, r4, ror r0
 5f0:	00000046 	andeq	r0, r0, r6, asr #32
 5f4:	40080e41 	andmi	r0, r8, r1, asr #28
 5f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5fc:	100e4101 	andne	r4, lr, r1, lsl #2
 600:	00070d41 	andeq	r0, r7, r1, asr #26
 604:	0000001c 	andeq	r0, r0, ip, lsl r0
 608:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 60c:	200010ba 	strhcs	r1, [r0], -sl
 610:	0000003e 	andeq	r0, r0, lr, lsr r0
 614:	40080e41 	andmi	r0, r8, r1, asr #28
 618:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 61c:	100e4101 	andne	r4, lr, r1, lsl #2
 620:	00070d41 	andeq	r0, r7, r1, asr #26
 624:	0000001c 	andeq	r0, r0, ip, lsl r0
 628:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 62c:	200010f8 	strdcs	r1, [r0], -r8
 630:	00000048 	andeq	r0, r0, r8, asr #32
 634:	40080e41 	andmi	r0, r8, r1, asr #28
 638:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 63c:	100e4101 	andne	r4, lr, r1, lsl #2
 640:	00070d41 	andeq	r0, r7, r1, asr #26
 644:	0000001c 	andeq	r0, r0, ip, lsl r0
 648:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 64c:	20001140 	andcs	r1, r0, r0, asr #2
 650:	000000b4 	strheq	r0, [r0], -r4
 654:	40080e41 	andmi	r0, r8, r1, asr #28
 658:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 65c:	200e4101 	andcs	r4, lr, r1, lsl #2
 660:	00070d41 	andeq	r0, r7, r1, asr #26
 664:	0000001c 	andeq	r0, r0, ip, lsl r0
 668:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 66c:	200011f4 	strdcs	r1, [r0], -r4
 670:	0000002c 	andeq	r0, r0, ip, lsr #32
 674:	40080e41 	andmi	r0, r8, r1, asr #28
 678:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 67c:	180e4101 	stmdane	lr, {r0, r8, lr}
 680:	00070d41 	andeq	r0, r7, r1, asr #26
 684:	0000001c 	andeq	r0, r0, ip, lsl r0
 688:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 68c:	20001220 	andcs	r1, r0, r0, lsr #4
 690:	00000030 	andeq	r0, r0, r0, lsr r0
 694:	40080e41 	andmi	r0, r8, r1, asr #28
 698:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 69c:	180e4101 	stmdane	lr, {r0, r8, lr}
 6a0:	00070d41 	andeq	r0, r7, r1, asr #26
 6a4:	00000020 	andeq	r0, r0, r0, lsr #32
 6a8:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 6ac:	20001250 	andcs	r1, r0, r0, asr r2
 6b0:	000000e0 	andeq	r0, r0, r0, ror #1
 6b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 6b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 6bc:	018e4002 	orreq	r4, lr, r2
 6c0:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 6c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 6c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 6d0:	20001330 	andcs	r1, r0, r0, lsr r3
 6d4:	00000074 	andeq	r0, r0, r4, ror r0
 6d8:	40080e41 	andmi	r0, r8, r1, asr #28
 6dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 6e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 6e4:	00070d41 	andeq	r0, r7, r1, asr #26
 6e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 6ec:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 6f0:	200013a4 	andcs	r1, r0, r4, lsr #7
 6f4:	00000078 	andeq	r0, r0, r8, ror r0
 6f8:	40080e41 	andmi	r0, r8, r1, asr #28
 6fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 700:	180e4101 	stmdane	lr, {r0, r8, lr}
 704:	00070d41 	andeq	r0, r7, r1, asr #26
 708:	0000001c 	andeq	r0, r0, ip, lsl r0
 70c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 710:	2000141c 	andcs	r1, r0, ip, lsl r4
 714:	00000044 	andeq	r0, r0, r4, asr #32
 718:	40080e41 	andmi	r0, r8, r1, asr #28
 71c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 720:	180e4101 	stmdane	lr, {r0, r8, lr}
 724:	00070d41 	andeq	r0, r7, r1, asr #26
 728:	0000001c 	andeq	r0, r0, ip, lsl r0
 72c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 730:	20001460 	andcs	r1, r0, r0, ror #8
 734:	00000048 	andeq	r0, r0, r8, asr #32
 738:	40080e41 	andmi	r0, r8, r1, asr #28
 73c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 740:	180e4101 	stmdane	lr, {r0, r8, lr}
 744:	00070d41 	andeq	r0, r7, r1, asr #26
 748:	0000001c 	andeq	r0, r0, ip, lsl r0
 74c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 750:	200014a8 	andcs	r1, r0, r8, lsr #9
 754:	00000030 	andeq	r0, r0, r0, lsr r0
 758:	40080e41 	andmi	r0, r8, r1, asr #28
 75c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 760:	100e4101 	andne	r4, lr, r1, lsl #2
 764:	00070d41 	andeq	r0, r7, r1, asr #26
 768:	0000001c 	andeq	r0, r0, ip, lsl r0
 76c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 770:	200014d8 	ldrdcs	r1, [r0], -r8
 774:	00000024 	andeq	r0, r0, r4, lsr #32
 778:	40080e41 	andmi	r0, r8, r1, asr #28
 77c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 780:	100e4101 	andne	r4, lr, r1, lsl #2
 784:	00070d41 	andeq	r0, r7, r1, asr #26
 788:	0000001c 	andeq	r0, r0, ip, lsl r0
 78c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 790:	200014fc 	strdcs	r1, [r0], -ip
 794:	0000002a 	andeq	r0, r0, sl, lsr #32
 798:	40080e41 	andmi	r0, r8, r1, asr #28
 79c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7a0:	100e4101 	andne	r4, lr, r1, lsl #2
 7a4:	00070d41 	andeq	r0, r7, r1, asr #26
 7a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 7ac:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 7b0:	20001526 	andcs	r1, r0, r6, lsr #10
 7b4:	00000032 	andeq	r0, r0, r2, lsr r0
 7b8:	40080e41 	andmi	r0, r8, r1, asr #28
 7bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 7c0:	100e4101 	andne	r4, lr, r1, lsl #2
 7c4:	00070d41 	andeq	r0, r7, r1, asr #26
 7c8:	00000020 	andeq	r0, r0, r0, lsr #32
 7cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 7d0:	20001558 	andcs	r1, r0, r8, asr r5
 7d4:	0000003c 	andeq	r0, r0, ip, lsr r0
 7d8:	400c0e41 	andmi	r0, ip, r1, asr #28
 7dc:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 7e0:	018e4002 	orreq	r4, lr, r2
 7e4:	41180e41 	tstmi	r8, r1, asr #28
 7e8:	0000070d 	andeq	r0, r0, sp, lsl #14
 7ec:	00000020 	andeq	r0, r0, r0, lsr #32
 7f0:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 7f4:	20001594 	mulcs	r0, r4, r5
 7f8:	00000040 	andeq	r0, r0, r0, asr #32
 7fc:	400c0e41 	andmi	r0, ip, r1, asr #28
 800:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 804:	018e4002 	orreq	r4, lr, r2
 808:	41180e41 	tstmi	r8, r1, asr #28
 80c:	0000070d 	andeq	r0, r0, sp, lsl #14
 810:	0000001c 	andeq	r0, r0, ip, lsl r0
 814:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 818:	200015d4 	ldrdcs	r1, [r0], -r4
 81c:	0000003c 	andeq	r0, r0, ip, lsr r0
 820:	40080e41 	andmi	r0, r8, r1, asr #28
 824:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 828:	100e4101 	andne	r4, lr, r1, lsl #2
 82c:	00070d41 	andeq	r0, r7, r1, asr #26
 830:	00000018 	andeq	r0, r0, r8, lsl r0
 834:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 838:	20001610 	andcs	r1, r0, r0, lsl r6
 83c:	00000052 	andeq	r0, r0, r2, asr r0
 840:	40080e41 	andmi	r0, r8, r1, asr #28
 844:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 848:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 84c:	00000018 	andeq	r0, r0, r8, lsl r0
 850:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 854:	20001662 	andcs	r1, r0, r2, ror #12
 858:	0000001c 	andeq	r0, r0, ip, lsl r0
 85c:	40080e41 	andmi	r0, r8, r1, asr #28
 860:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 864:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 868:	0000001c 	andeq	r0, r0, ip, lsl r0
 86c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 870:	2000167e 	andcs	r1, r0, lr, ror r6
 874:	0000003c 	andeq	r0, r0, ip, lsr r0
 878:	40080e41 	andmi	r0, r8, r1, asr #28
 87c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 880:	100e4101 	andne	r4, lr, r1, lsl #2
 884:	00070d41 	andeq	r0, r7, r1, asr #26
 888:	0000001c 	andeq	r0, r0, ip, lsl r0
 88c:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 890:	200016ba 			; <UNDEFINED> instruction: 0x200016ba
 894:	0000004e 	andeq	r0, r0, lr, asr #32
 898:	40080e41 	andmi	r0, r8, r1, asr #28
 89c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8a0:	180e4101 	stmdane	lr, {r0, r8, lr}
 8a4:	00070d41 	andeq	r0, r7, r1, asr #26
 8a8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8ac:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 8b0:	20001708 	andcs	r1, r0, r8, lsl #14
 8b4:	00000054 	andeq	r0, r0, r4, asr r0
 8b8:	40080e41 	andmi	r0, r8, r1, asr #28
 8bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 8c0:	200e4101 	andcs	r4, lr, r1, lsl #2
 8c4:	00070d41 	andeq	r0, r7, r1, asr #26
 8c8:	0000000c 	andeq	r0, r0, ip
 8cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8d0:	7c010001 	stcvc	0, cr0, [r1], {1}
 8d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8d8:	0000000c 	andeq	r0, r0, ip
 8dc:	000008c8 	andeq	r0, r0, r8, asr #17
 8e0:	2000175d 	andcs	r1, r0, sp, asr r7
 8e4:	0000010a 	andeq	r0, r0, sl, lsl #2
 8e8:	0000000c 	andeq	r0, r0, ip
 8ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8f0:	7c010001 	stcvc	0, cr0, [r1], {1}
 8f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 8f8:	0000000c 	andeq	r0, r0, ip
 8fc:	000008e8 	andeq	r0, r0, r8, ror #17
 900:	20001871 	andcs	r1, r0, r1, ror r8
 904:	000001cc 	andeq	r0, r0, ip, asr #3
 908:	0000000c 	andeq	r0, r0, ip
 90c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 910:	7c020001 	stcvc	0, cr0, [r2], {1}
 914:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 918:	00000014 	andeq	r0, r0, r4, lsl r0
 91c:	00000908 	andeq	r0, r0, r8, lsl #18
 920:	20001a48 	andcs	r1, r0, r8, asr #20
 924:	00000030 	andeq	r0, r0, r0, lsr r0
 928:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 92c:	00018e02 	andeq	r8, r1, r2, lsl #28
 930:	00000014 	andeq	r0, r0, r4, lsl r0
 934:	00000908 	andeq	r0, r0, r8, lsl #18
 938:	20001a78 	andcs	r1, r0, r8, ror sl
 93c:	00000008 	andeq	r0, r0, r8
 940:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 944:	00018e02 	andeq	r8, r1, r2, lsl #28
 948:	0000000c 	andeq	r0, r0, ip
 94c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 950:	7c020001 	stcvc	0, cr0, [r2], {1}
 954:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 958:	00000014 	andeq	r0, r0, r4, lsl r0
 95c:	00000948 	andeq	r0, r0, r8, asr #18
 960:	20001a80 	andcs	r1, r0, r0, lsl #21
 964:	00000012 	andeq	r0, r0, r2, lsl r0
 968:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 96c:	00018e02 	andeq	r8, r1, r2, lsl #28
 970:	0000000c 	andeq	r0, r0, ip
 974:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 978:	7c020001 	stcvc	0, cr0, [r2], {1}
 97c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 980:	0000001c 	andeq	r0, r0, ip, lsl r0
 984:	00000970 	andeq	r0, r0, r0, ror r9
 988:	20001a94 	mulcs	r0, r4, sl
 98c:	00000064 	andeq	r0, r0, r4, rrx
 990:	84140e41 	ldrhi	r0, [r4], #-3649	; 0xfffff1bf
 994:	86048505 	strhi	r8, [r4], -r5, lsl #10
 998:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 99c:	480e4201 	stmdami	lr, {r0, r9, lr}
 9a0:	00000014 	andeq	r0, r0, r4, lsl r0
 9a4:	00000970 	andeq	r0, r0, r0, ror r9
 9a8:	20001af8 	strdcs	r1, [r0], -r8
 9ac:	00000008 	andeq	r0, r0, r8
 9b0:	84080e41 	strhi	r0, [r8], #-3649	; 0xfffff1bf
 9b4:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000a88 	andcs	r0, r0, r8, lsl #21
   4:	20000d48 	andcs	r0, r0, r8, asr #26
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
