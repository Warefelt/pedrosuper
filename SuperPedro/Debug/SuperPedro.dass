
./Debug/SuperPedro.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f98b 	bl	2000031e <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <seedRng>:
#include "randomNum.h"

//typedef uint32_t rngword_t;

void seedRng(rngword_t* state, uint32_t seed) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	6078      	str	r0, [r7, #4]
20000018:	6039      	str	r1, [r7, #0]
	*state = seed;
2000001a:	687b      	ldr	r3, [r7, #4]
2000001c:	683a      	ldr	r2, [r7, #0]
2000001e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 10; i++) {
20000020:	2300      	movs	r3, #0
20000022:	60fb      	str	r3, [r7, #12]
20000024:	e006      	b.n	20000034 <seedRng+0x24>
		nextRnd(state);
20000026:	687b      	ldr	r3, [r7, #4]
20000028:	0018      	movs	r0, r3
2000002a:	f000 f80a 	bl	20000042 <nextRnd>
	for(int i = 0; i < 10; i++) {
2000002e:	68fb      	ldr	r3, [r7, #12]
20000030:	3301      	adds	r3, #1
20000032:	60fb      	str	r3, [r7, #12]
20000034:	68fb      	ldr	r3, [r7, #12]
20000036:	2b09      	cmp	r3, #9
20000038:	ddf5      	ble.n	20000026 <seedRng+0x16>
	}
}
2000003a:	46c0      	nop			; (mov r8, r8)
2000003c:	46bd      	mov	sp, r7
2000003e:	b004      	add	sp, #16
20000040:	bd80      	pop	{r7, pc}

20000042 <nextRnd>:

rngword_t nextRnd(rngword_t* state) {
20000042:	b580      	push	{r7, lr}
20000044:	b084      	sub	sp, #16
20000046:	af00      	add	r7, sp, #0
20000048:	6078      	str	r0, [r7, #4]
	*state = *state * 0xDEADBEAD + 0x1;
2000004a:	687b      	ldr	r3, [r7, #4]
2000004c:	6819      	ldr	r1, [r3, #0]
2000004e:	000b      	movs	r3, r1
20000050:	00db      	lsls	r3, r3, #3
20000052:	1a5b      	subs	r3, r3, r1
20000054:	011a      	lsls	r2, r3, #4
20000056:	1ad2      	subs	r2, r2, r3
20000058:	0092      	lsls	r2, r2, #2
2000005a:	1a52      	subs	r2, r2, r1
2000005c:	0113      	lsls	r3, r2, #4
2000005e:	1a9b      	subs	r3, r3, r2
20000060:	00db      	lsls	r3, r3, #3
20000062:	1a5b      	subs	r3, r3, r1
20000064:	015b      	lsls	r3, r3, #5
20000066:	1a5b      	subs	r3, r3, r1
20000068:	00da      	lsls	r2, r3, #3
2000006a:	189b      	adds	r3, r3, r2
2000006c:	01da      	lsls	r2, r3, #7
2000006e:	189b      	adds	r3, r3, r2
20000070:	005b      	lsls	r3, r3, #1
20000072:	1a5b      	subs	r3, r3, r1
20000074:	1c5a      	adds	r2, r3, #1
20000076:	687b      	ldr	r3, [r7, #4]
20000078:	601a      	str	r2, [r3, #0]
	rngword_t x = *state;
2000007a:	687b      	ldr	r3, [r7, #4]
2000007c:	681b      	ldr	r3, [r3, #0]
2000007e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
20000080:	2300      	movs	r3, #0
20000082:	60bb      	str	r3, [r7, #8]
20000084:	e00e      	b.n	200000a4 <nextRnd+0x62>
		x ^= (x >> 9) ^ (x >> 17);
20000086:	68fb      	ldr	r3, [r7, #12]
20000088:	0a5a      	lsrs	r2, r3, #9
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	0c5b      	lsrs	r3, r3, #17
2000008e:	4053      	eors	r3, r2
20000090:	68fa      	ldr	r2, [r7, #12]
20000092:	4053      	eors	r3, r2
20000094:	60fb      	str	r3, [r7, #12]
		x *= 23456789;
20000096:	68fb      	ldr	r3, [r7, #12]
20000098:	4a06      	ldr	r2, [pc, #24]	; (200000b4 <nextRnd+0x72>)
2000009a:	4353      	muls	r3, r2
2000009c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 3; i++) {
2000009e:	68bb      	ldr	r3, [r7, #8]
200000a0:	3301      	adds	r3, #1
200000a2:	60bb      	str	r3, [r7, #8]
200000a4:	68bb      	ldr	r3, [r7, #8]
200000a6:	2b02      	cmp	r3, #2
200000a8:	dded      	ble.n	20000086 <nextRnd+0x44>
	}
	return x;
200000aa:	68fb      	ldr	r3, [r7, #12]
200000ac:	0018      	movs	r0, r3
200000ae:	46bd      	mov	sp, r7
200000b0:	b004      	add	sp, #16
200000b2:	bd80      	pop	{r7, pc}
200000b4:	0165ec15 	cmneq	r5, r5, lsl ip

200000b8 <gpioInit>:
extern char backBuffer[256][8];

//#define USBDM
#define NONSIMULATOR

void gpioInit(){
200000b8:	b580      	push	{r7, lr}
200000ba:	af00      	add	r7, sp, #0
	
    GPIO_E->moder=0x55555555;		//------------------------------------------------------------------------------------------------
200000bc:	4b10      	ldr	r3, [pc, #64]	; (20000100 <gpioInit+0x48>)
200000be:	4a11      	ldr	r2, [pc, #68]	; (20000104 <gpioInit+0x4c>)
200000c0:	601a      	str	r2, [r3, #0]
    GPIO_D->moder = 0x55005555;
200000c2:	4b11      	ldr	r3, [pc, #68]	; (20000108 <gpioInit+0x50>)
200000c4:	4a11      	ldr	r2, [pc, #68]	; (2000010c <gpioInit+0x54>)
200000c6:	601a      	str	r2, [r3, #0]
    
	GPIO_D->otyper &= 0xFFFF00FF;
200000c8:	4b0f      	ldr	r3, [pc, #60]	; (20000108 <gpioInit+0x50>)
200000ca:	685a      	ldr	r2, [r3, #4]
200000cc:	4b0e      	ldr	r3, [pc, #56]	; (20000108 <gpioInit+0x50>)
200000ce:	4910      	ldr	r1, [pc, #64]	; (20000110 <gpioInit+0x58>)
200000d0:	400a      	ands	r2, r1
200000d2:	605a      	str	r2, [r3, #4]
	GPIO_D->otyper |= 0x00000F00;
200000d4:	4b0c      	ldr	r3, [pc, #48]	; (20000108 <gpioInit+0x50>)
200000d6:	685a      	ldr	r2, [r3, #4]
200000d8:	4b0b      	ldr	r3, [pc, #44]	; (20000108 <gpioInit+0x50>)
200000da:	21f0      	movs	r1, #240	; 0xf0
200000dc:	0109      	lsls	r1, r1, #4
200000de:	430a      	orrs	r2, r1
200000e0:	605a      	str	r2, [r3, #4]
	// Sätter pinnar 4-0 till "pull-down"
	GPIO_D->pupdr &= 0x0000FFFF;
200000e2:	4b09      	ldr	r3, [pc, #36]	; (20000108 <gpioInit+0x50>)
200000e4:	68da      	ldr	r2, [r3, #12]
200000e6:	4b08      	ldr	r3, [pc, #32]	; (20000108 <gpioInit+0x50>)
200000e8:	0412      	lsls	r2, r2, #16
200000ea:	0c12      	lsrs	r2, r2, #16
200000ec:	60da      	str	r2, [r3, #12]
	GPIO_D->pupdr |= 0xFFAA0000;
200000ee:	4b06      	ldr	r3, [pc, #24]	; (20000108 <gpioInit+0x50>)
200000f0:	68da      	ldr	r2, [r3, #12]
200000f2:	4b05      	ldr	r3, [pc, #20]	; (20000108 <gpioInit+0x50>)
200000f4:	4907      	ldr	r1, [pc, #28]	; (20000114 <gpioInit+0x5c>)
200000f6:	430a      	orrs	r2, r1
200000f8:	60da      	str	r2, [r3, #12]

}
200000fa:	46c0      	nop			; (mov r8, r8)
200000fc:	46bd      	mov	sp, r7
200000fe:	bd80      	pop	{r7, pc}
20000100:	40021000 	andmi	r1, r2, r0
20000104:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000108:	40020c00 	andmi	r0, r2, r0, lsl #24
2000010c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000110:	ffff00ff 			; <UNDEFINED> instruction: 0xffff00ff
20000114:	ffaa0000 			; <UNDEFINED> instruction: 0xffaa0000

20000118 <init>:



void init(){
20000118:	b580      	push	{r7, lr}
2000011a:	af00      	add	r7, sp, #0
    #ifdef USBDM
		*((unsigned long*)0x40023830)=0x18;
    #endif
	
    gpioInit();
2000011c:	f7ff ffcc 	bl	200000b8 <gpioInit>
    
    graphic_initialize();
20000120:	f000 fbc9 	bl	200008b6 <graphic_initialize>
    //ascii_init();     //todo?
    
    //seedRng(0, 555);

	clear_backBuffer();
20000124:	f000 fd28 	bl	20000b78 <clear_backBuffer>
	graphic_draw_screen();
20000128:	f000 fdd2 	bl	20000cd0 <graphic_draw_screen>

}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	bd80      	pop	{r7, pc}

20000132 <loop>:





void loop(){
20000132:	b580      	push	{r7, lr}
20000134:	af00      	add	r7, sp, #0
	//(splash start)	
	//
	//	
    drawGround(64, 191);
20000136:	21bf      	movs	r1, #191	; 0xbf
20000138:	2040      	movs	r0, #64	; 0x40
2000013a:	f000 f8c1 	bl	200002c0 <drawGround>
	
	while(1){
		//
		//ändra Pedros properties
		if(backBuffer[63][7] == 0){
2000013e:	4b0d      	ldr	r3, [pc, #52]	; (20000174 <loop+0x42>)
20000140:	4a0d      	ldr	r2, [pc, #52]	; (20000178 <loop+0x46>)
20000142:	5c9b      	ldrb	r3, [r3, r2]
20000144:	2b00      	cmp	r3, #0
20000146:	d101      	bne.n	2000014c <loop+0x1a>
			loadNewLevelSegmentLeft();
20000148:	f000 f81a 	bl	20000180 <loadNewLevelSegmentLeft>
		}
		if(backBuffer[192][7] == 0){
2000014c:	4b09      	ldr	r3, [pc, #36]	; (20000174 <loop+0x42>)
2000014e:	4a0b      	ldr	r2, [pc, #44]	; (2000017c <loop+0x4a>)
20000150:	5c9b      	ldrb	r3, [r3, r2]
20000152:	2b00      	cmp	r3, #0
20000154:	d101      	bne.n	2000015a <loop+0x28>
			loadNewLevelSegmentRight();
20000156:	f000 f81b 	bl	20000190 <loadNewLevelSegmentRight>
		}
		
		move();			//flyttar hela skärmen så det ser ut som att Pedro rör sig
2000015a:	f000 f94d 	bl	200003f8 <move>
//        char* buffer;
//        itoa(getDistance(), buffer, 10);
//        stringToAscii();
			
		//win/loss
		if(touchesPepper() == 1){
2000015e:	f000 fb23 	bl	200007a8 <touchesPepper>
20000162:	0003      	movs	r3, r0
20000164:	2b01      	cmp	r3, #1
20000166:	d000      	beq.n	2000016a <loop+0x38>
		if(backBuffer[63][7] == 0){
20000168:	e7e9      	b.n	2000013e <loop+0xc>
			break;		//startar om spelet från början
2000016a:	46c0      	nop			; (mov r8, r8)
		/*if(Pedro.distance == ){
			onWin();
		}*/
	}
	
}
2000016c:	46c0      	nop			; (mov r8, r8)
2000016e:	46bd      	mov	sp, r7
20000170:	bd80      	pop	{r7, pc}
20000172:	46c0      	nop			; (mov r8, r8)
20000174:	200011ac 	andcs	r1, r0, ip, lsr #3
20000178:	000001ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
2000017c:	00000607 	andeq	r0, r0, r7, lsl #12

20000180 <loadNewLevelSegmentLeft>:



void loadNewLevelSegmentLeft(){
20000180:	b580      	push	{r7, lr}
20000182:	af00      	add	r7, sp, #0
    loadLvl(0);  //64px wide
20000184:	2000      	movs	r0, #0
20000186:	f000 f869 	bl	2000025c <loadLvl>
}
2000018a:	46c0      	nop			; (mov r8, r8)
2000018c:	46bd      	mov	sp, r7
2000018e:	bd80      	pop	{r7, pc}

20000190 <loadNewLevelSegmentRight>:

void loadNewLevelSegmentRight(){
20000190:	b580      	push	{r7, lr}
20000192:	af00      	add	r7, sp, #0
    loadLvl(192);
20000194:	20c0      	movs	r0, #192	; 0xc0
20000196:	f000 f861 	bl	2000025c <loadLvl>
}
2000019a:	46c0      	nop			; (mov r8, r8)
2000019c:	46bd      	mov	sp, r7
2000019e:	bd80      	pop	{r7, pc}

200001a0 <loadPepperAt>:


//bör fungera
void loadPepperAt(int addr, int page){
200001a0:	b590      	push	{r4, r7, lr}
200001a2:	b08d      	sub	sp, #52	; 0x34
200001a4:	af00      	add	r7, sp, #0
200001a6:	6078      	str	r0, [r7, #4]
200001a8:	6039      	str	r1, [r7, #0]
		char b[][2]= 
200001aa:	2308      	movs	r3, #8
200001ac:	18fb      	adds	r3, r7, r3
200001ae:	4a17      	ldr	r2, [pc, #92]	; (2000020c <loadPepperAt+0x6c>)
200001b0:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b2:	c313      	stmia	r3!, {r0, r1, r4}
200001b4:	ca13      	ldmia	r2!, {r0, r1, r4}
200001b6:	c313      	stmia	r3!, {r0, r1, r4}
200001b8:	ca03      	ldmia	r2!, {r0, r1}
200001ba:	c303      	stmia	r3!, {r0, r1}
				{0b00000100, 0b01100000},
				{0b00001100, 0b00110000},
				{0b11111000, 0b00011111}
				};
     
		for(int j = 0; j <1; j++){
200001bc:	2300      	movs	r3, #0
200001be:	62fb      	str	r3, [r7, #44]	; 0x2c
200001c0:	e01c      	b.n	200001fc <loadPepperAt+0x5c>
			for(int i = 0; i < 15; i++){
200001c2:	2300      	movs	r3, #0
200001c4:	62bb      	str	r3, [r7, #40]	; 0x28
200001c6:	e013      	b.n	200001f0 <loadPepperAt+0x50>
				byteToBuffer(addr + i, page + j, b[i][j]);
200001c8:	687a      	ldr	r2, [r7, #4]
200001ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
200001cc:	18d0      	adds	r0, r2, r3
200001ce:	683a      	ldr	r2, [r7, #0]
200001d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001d2:	18d1      	adds	r1, r2, r3
200001d4:	2308      	movs	r3, #8
200001d6:	18fa      	adds	r2, r7, r3
200001d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200001da:	005b      	lsls	r3, r3, #1
200001dc:	18d2      	adds	r2, r2, r3
200001de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001e0:	18d3      	adds	r3, r2, r3
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	001a      	movs	r2, r3
200001e6:	f000 fd45 	bl	20000c74 <byteToBuffer>
			for(int i = 0; i < 15; i++){
200001ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
200001ec:	3301      	adds	r3, #1
200001ee:	62bb      	str	r3, [r7, #40]	; 0x28
200001f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200001f2:	2b0e      	cmp	r3, #14
200001f4:	dde8      	ble.n	200001c8 <loadPepperAt+0x28>
		for(int j = 0; j <1; j++){
200001f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001f8:	3301      	adds	r3, #1
200001fa:	62fb      	str	r3, [r7, #44]	; 0x2c
200001fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200001fe:	2b00      	cmp	r3, #0
20000200:	dddf      	ble.n	200001c2 <loadPepperAt+0x22>
			}
		}
}
20000202:	46c0      	nop			; (mov r8, r8)
20000204:	46bd      	mov	sp, r7
20000206:	b00d      	add	sp, #52	; 0x34
20000208:	bd90      	pop	{r4, r7, pc}
2000020a:	46c0      	nop			; (mov r8, r8)
2000020c:	20001b1c 	andcs	r1, r0, ip, lsl fp

20000210 <loadPepperStrip>:


//bör fungera
void loadPepperStrip(int start, char type){
20000210:	b580      	push	{r7, lr}
20000212:	b082      	sub	sp, #8
20000214:	af00      	add	r7, sp, #0
20000216:	6078      	str	r0, [r7, #4]
20000218:	000a      	movs	r2, r1
2000021a:	1cfb      	adds	r3, r7, #3
2000021c:	701a      	strb	r2, [r3, #0]
	
	switch(type){
2000021e:	1cfb      	adds	r3, r7, #3
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	2b5f      	cmp	r3, #95	; 0x5f
20000224:	d015      	beq.n	20000252 <loadPepperStrip+0x42>
20000226:	2b6f      	cmp	r3, #111	; 0x6f
20000228:	d002      	beq.n	20000230 <loadPepperStrip+0x20>
2000022a:	2b38      	cmp	r3, #56	; 0x38
2000022c:	d006      	beq.n	2000023c <loadPepperStrip+0x2c>
			loadPepperAt(start, 6);
			loadPepperAt(start, 4);
			break;
			
	}
}
2000022e:	e011      	b.n	20000254 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
20000230:	687b      	ldr	r3, [r7, #4]
20000232:	2106      	movs	r1, #6
20000234:	0018      	movs	r0, r3
20000236:	f7ff ffb3 	bl	200001a0 <loadPepperAt>
			break;
2000023a:	e00b      	b.n	20000254 <loadPepperStrip+0x44>
			loadPepperAt(start, 6);
2000023c:	687b      	ldr	r3, [r7, #4]
2000023e:	2106      	movs	r1, #6
20000240:	0018      	movs	r0, r3
20000242:	f7ff ffad 	bl	200001a0 <loadPepperAt>
			loadPepperAt(start, 4);
20000246:	687b      	ldr	r3, [r7, #4]
20000248:	2104      	movs	r1, #4
2000024a:	0018      	movs	r0, r3
2000024c:	f7ff ffa8 	bl	200001a0 <loadPepperAt>
			break;
20000250:	e000      	b.n	20000254 <loadPepperStrip+0x44>
			break;
20000252:	46c0      	nop			; (mov r8, r8)
}
20000254:	46c0      	nop			; (mov r8, r8)
20000256:	46bd      	mov	sp, r7
20000258:	b002      	add	sp, #8
2000025a:	bd80      	pop	{r7, pc}

2000025c <loadLvl>:


void loadLvl(int start){        //loads a 64px wide levelstrip of new peppers into the backBuffer (starting at start, moving right)
2000025c:	b580      	push	{r7, lr}
2000025e:	b098      	sub	sp, #96	; 0x60
20000260:	af00      	add	r7, sp, #0
20000262:	6078      	str	r0, [r7, #4]
	
	//int type = rand() % 20;      // Returns a pseudo-random integer between 0 and 10, några olika varianter 1=____, 2=_oo_, 3=_8__, 4=_o_o mm.
    char PepperStrips[][4] = { "____", "_oo_", "_8__", "_o_o", "o__o", "_o__", "__8_", "_o8_", "__o_", "____", "____", "o___", "___o", "o_o_", "_8o_","_o__","__o_","o___", "___o","____"};
20000264:	230c      	movs	r3, #12
20000266:	18fa      	adds	r2, r7, r3
20000268:	4b14      	ldr	r3, [pc, #80]	; (200002bc <loadLvl+0x60>)
2000026a:	0010      	movs	r0, r2
2000026c:	0019      	movs	r1, r3
2000026e:	2350      	movs	r3, #80	; 0x50
20000270:	001a      	movs	r2, r3
20000272:	f000 ff91 	bl	20001198 <memcpy>
	
	
	for(int i = 0; i < 4; i++){
20000276:	2300      	movs	r3, #0
20000278:	65fb      	str	r3, [r7, #92]	; 0x5c
2000027a:	e00f      	b.n	2000029c <loadLvl+0x40>
		loadPepperStrip(start + i*16, PepperStrips[2][i]);
2000027c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
2000027e:	011a      	lsls	r2, r3, #4
20000280:	687b      	ldr	r3, [r7, #4]
20000282:	18d0      	adds	r0, r2, r3
20000284:	230c      	movs	r3, #12
20000286:	18fa      	adds	r2, r7, r3
20000288:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
2000028a:	18d3      	adds	r3, r2, r3
2000028c:	3308      	adds	r3, #8
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	0019      	movs	r1, r3
20000292:	f7ff ffbd 	bl	20000210 <loadPepperStrip>
	for(int i = 0; i < 4; i++){
20000296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
20000298:	3301      	adds	r3, #1
2000029a:	65fb      	str	r3, [r7, #92]	; 0x5c
2000029c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
2000029e:	2b03      	cmp	r3, #3
200002a0:	ddec      	ble.n	2000027c <loadLvl+0x20>
	}
	drawGround(start, start+63);
200002a2:	687b      	ldr	r3, [r7, #4]
200002a4:	333f      	adds	r3, #63	; 0x3f
200002a6:	001a      	movs	r2, r3
200002a8:	687b      	ldr	r3, [r7, #4]
200002aa:	0011      	movs	r1, r2
200002ac:	0018      	movs	r0, r3
200002ae:	f000 f807 	bl	200002c0 <drawGround>
    
}
200002b2:	46c0      	nop			; (mov r8, r8)
200002b4:	46bd      	mov	sp, r7
200002b6:	b018      	add	sp, #96	; 0x60
200002b8:	bd80      	pop	{r7, pc}
200002ba:	46c0      	nop			; (mov r8, r8)
200002bc:	20001b3c 	andcs	r1, r0, ip, lsr fp

200002c0 <drawGround>:


void drawGround(int from, int to){
200002c0:	b580      	push	{r7, lr}
200002c2:	b084      	sub	sp, #16
200002c4:	af00      	add	r7, sp, #0
200002c6:	6078      	str	r0, [r7, #4]
200002c8:	6039      	str	r1, [r7, #0]
    char c = 0b00011000;
200002ca:	230f      	movs	r3, #15
200002cc:	18fb      	adds	r3, r7, r3
200002ce:	2218      	movs	r2, #24
200002d0:	701a      	strb	r2, [r3, #0]
    for(from; from <= to; from++){
200002d2:	e014      	b.n	200002fe <drawGround+0x3e>
        backBuffer[from][7] |= c;
200002d4:	4a0e      	ldr	r2, [pc, #56]	; (20000310 <drawGround+0x50>)
200002d6:	687b      	ldr	r3, [r7, #4]
200002d8:	00db      	lsls	r3, r3, #3
200002da:	18d3      	adds	r3, r2, r3
200002dc:	3307      	adds	r3, #7
200002de:	781a      	ldrb	r2, [r3, #0]
200002e0:	230f      	movs	r3, #15
200002e2:	18fb      	adds	r3, r7, r3
200002e4:	781b      	ldrb	r3, [r3, #0]
200002e6:	4313      	orrs	r3, r2
200002e8:	b2d9      	uxtb	r1, r3
200002ea:	4a09      	ldr	r2, [pc, #36]	; (20000310 <drawGround+0x50>)
200002ec:	687b      	ldr	r3, [r7, #4]
200002ee:	00db      	lsls	r3, r3, #3
200002f0:	18d3      	adds	r3, r2, r3
200002f2:	3307      	adds	r3, #7
200002f4:	1c0a      	adds	r2, r1, #0
200002f6:	701a      	strb	r2, [r3, #0]
    for(from; from <= to; from++){
200002f8:	687b      	ldr	r3, [r7, #4]
200002fa:	3301      	adds	r3, #1
200002fc:	607b      	str	r3, [r7, #4]
200002fe:	687a      	ldr	r2, [r7, #4]
20000300:	683b      	ldr	r3, [r7, #0]
20000302:	429a      	cmp	r2, r3
20000304:	dde6      	ble.n	200002d4 <drawGround+0x14>
    }
}
20000306:	46c0      	nop			; (mov r8, r8)
20000308:	46bd      	mov	sp, r7
2000030a:	b004      	add	sp, #16
2000030c:	bd80      	pop	{r7, pc}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	200011ac 	andcs	r1, r0, ip, lsr #3

20000314 <onWin>:



void onWin(){
20000314:	b580      	push	{r7, lr}
20000316:	af00      	add	r7, sp, #0
	//ska vi ha med denna?
}
20000318:	46c0      	nop			; (mov r8, r8)
2000031a:	46bd      	mov	sp, r7
2000031c:	bd80      	pop	{r7, pc}

2000031e <main>:





void main(void){
2000031e:	b580      	push	{r7, lr}
20000320:	af00      	add	r7, sp, #0
	init();
20000322:	f7ff fef9 	bl	20000118 <init>
	while(1){
		loop();
20000326:	f7ff ff04 	bl	20000132 <loop>
2000032a:	e7fc      	b.n	20000326 <main+0x8>

2000032c <delay_250ns>:
#include "delays.h"

void delay_250ns(){
2000032c:	b580      	push	{r7, lr}
2000032e:	af00      	add	r7, sp, #0
    *STK_CTRL=0;
20000330:	4b0c      	ldr	r3, [pc, #48]	; (20000364 <delay_250ns+0x38>)
20000332:	2200      	movs	r2, #0
20000334:	601a      	str	r2, [r3, #0]
    *STK_LOAD=1;//168/4-1;
20000336:	4b0c      	ldr	r3, [pc, #48]	; (20000368 <delay_250ns+0x3c>)
20000338:	2201      	movs	r2, #1
2000033a:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
2000033c:	4b0b      	ldr	r3, [pc, #44]	; (2000036c <delay_250ns+0x40>)
2000033e:	2200      	movs	r2, #0
20000340:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000342:	4b08      	ldr	r3, [pc, #32]	; (20000364 <delay_250ns+0x38>)
20000344:	2205      	movs	r2, #5
20000346:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
20000348:	46c0      	nop			; (mov r8, r8)
2000034a:	4b06      	ldr	r3, [pc, #24]	; (20000364 <delay_250ns+0x38>)
2000034c:	681a      	ldr	r2, [r3, #0]
2000034e:	2380      	movs	r3, #128	; 0x80
20000350:	025b      	lsls	r3, r3, #9
20000352:	4013      	ands	r3, r2
20000354:	d0f9      	beq.n	2000034a <delay_250ns+0x1e>
    *STK_CTRL=0;
20000356:	4b03      	ldr	r3, [pc, #12]	; (20000364 <delay_250ns+0x38>)
20000358:	2200      	movs	r2, #0
2000035a:	601a      	str	r2, [r3, #0]
}
2000035c:	46c0      	nop			; (mov r8, r8)
2000035e:	46bd      	mov	sp, r7
20000360:	bd80      	pop	{r7, pc}
20000362:	46c0      	nop			; (mov r8, r8)
20000364:	e000e010 	and	lr, r0, r0, lsl r0
20000368:	e000e014 	and	lr, r0, r4, lsl r0
2000036c:	e000e018 	and	lr, r0, r8, lsl r0

20000370 <delay_500ns>:

void delay_500ns(){
20000370:	b580      	push	{r7, lr}
20000372:	af00      	add	r7, sp, #0
	*STK_CTRL=0;
20000374:	4b0c      	ldr	r3, [pc, #48]	; (200003a8 <delay_500ns+0x38>)
20000376:	2200      	movs	r2, #0
20000378:	601a      	str	r2, [r3, #0]
    *STK_LOAD=1;//168/2-1;
2000037a:	4b0c      	ldr	r3, [pc, #48]	; (200003ac <delay_500ns+0x3c>)
2000037c:	2201      	movs	r2, #1
2000037e:	601a      	str	r2, [r3, #0]
    *STK_VAL=0;
20000380:	4b0b      	ldr	r3, [pc, #44]	; (200003b0 <delay_500ns+0x40>)
20000382:	2200      	movs	r2, #0
20000384:	601a      	str	r2, [r3, #0]
    *STK_CTRL=5;
20000386:	4b08      	ldr	r3, [pc, #32]	; (200003a8 <delay_500ns+0x38>)
20000388:	2205      	movs	r2, #5
2000038a:	601a      	str	r2, [r3, #0]
    while((*STK_CTRL & 0x10000)==0);
2000038c:	46c0      	nop			; (mov r8, r8)
2000038e:	4b06      	ldr	r3, [pc, #24]	; (200003a8 <delay_500ns+0x38>)
20000390:	681a      	ldr	r2, [r3, #0]
20000392:	2380      	movs	r3, #128	; 0x80
20000394:	025b      	lsls	r3, r3, #9
20000396:	4013      	ands	r3, r2
20000398:	d0f9      	beq.n	2000038e <delay_500ns+0x1e>
    *STK_CTRL=0;
2000039a:	4b03      	ldr	r3, [pc, #12]	; (200003a8 <delay_500ns+0x38>)
2000039c:	2200      	movs	r2, #0
2000039e:	601a      	str	r2, [r3, #0]
}
200003a0:	46c0      	nop			; (mov r8, r8)
200003a2:	46bd      	mov	sp, r7
200003a4:	bd80      	pop	{r7, pc}
200003a6:	46c0      	nop			; (mov r8, r8)
200003a8:	e000e010 	and	lr, r0, r0, lsl r0
200003ac:	e000e014 	and	lr, r0, r4, lsl r0
200003b0:	e000e018 	and	lr, r0, r8, lsl r0

200003b4 <delaymicros>:

void delaymicros(int micros){
200003b4:	b580      	push	{r7, lr}
200003b6:	b084      	sub	sp, #16
200003b8:	af00      	add	r7, sp, #0
200003ba:	6078      	str	r0, [r7, #4]
    #ifdef NONSIMULATOR
		//micros *= 1000;
	#endif
    for(int i = 0; i < micros * 2; i++){
200003bc:	2300      	movs	r3, #0
200003be:	60fb      	str	r3, [r7, #12]
200003c0:	e004      	b.n	200003cc <delaymicros+0x18>
        delay_500ns();
200003c2:	f7ff ffd5 	bl	20000370 <delay_500ns>
    for(int i = 0; i < micros * 2; i++){
200003c6:	68fb      	ldr	r3, [r7, #12]
200003c8:	3301      	adds	r3, #1
200003ca:	60fb      	str	r3, [r7, #12]
200003cc:	687b      	ldr	r3, [r7, #4]
200003ce:	005b      	lsls	r3, r3, #1
200003d0:	68fa      	ldr	r2, [r7, #12]
200003d2:	429a      	cmp	r2, r3
200003d4:	dbf5      	blt.n	200003c2 <delaymicros+0xe>
    }
}
200003d6:	46c0      	nop			; (mov r8, r8)
200003d8:	46bd      	mov	sp, r7
200003da:	b004      	add	sp, #16
200003dc:	bd80      	pop	{r7, pc}

200003de <delaymillis>:


void delaymillis(int millis){
200003de:	b580      	push	{r7, lr}
200003e0:	b082      	sub	sp, #8
200003e2:	af00      	add	r7, sp, #0
200003e4:	6078      	str	r0, [r7, #4]
	delaymicros(millis);// * 1000);
200003e6:	687b      	ldr	r3, [r7, #4]
200003e8:	0018      	movs	r0, r3
200003ea:	f7ff ffe3 	bl	200003b4 <delaymicros>
}
200003ee:	46c0      	nop			; (mov r8, r8)
200003f0:	46bd      	mov	sp, r7
200003f2:	b002      	add	sp, #8
200003f4:	bd80      	pop	{r7, pc}
200003f6:	46c0      	nop			; (mov r8, r8)

200003f8 <move>:
	0, 
    /*komplettera?*/
};


void move(){								//Kollar knapptryck och uppdaterar alla Pedros värden
200003f8:	b580      	push	{r7, lr}
200003fa:	af00      	add	r7, sp, #0
    
    checkKeys();
200003fc:	f000 f83a 	bl	20000474 <checkKeys>

    applyPhysics();
20000400:	f000 f898 	bl	20000534 <applyPhysics>
    
    if(Pedro.velx > 0){
20000404:	4b1a      	ldr	r3, [pc, #104]	; (20000470 <move+0x78>)
20000406:	691b      	ldr	r3, [r3, #16]
20000408:	2b00      	cmp	r3, #0
2000040a:	dd11      	ble.n	20000430 <move+0x38>
        shiftLeft();
2000040c:	f000 fd0a 	bl	20000e24 <shiftLeft>
        delaymillis(200/Pedro.velx);
20000410:	4b17      	ldr	r3, [pc, #92]	; (20000470 <move+0x78>)
20000412:	691b      	ldr	r3, [r3, #16]
20000414:	0019      	movs	r1, r3
20000416:	20c8      	movs	r0, #200	; 0xc8
20000418:	f000 fdd2 	bl	20000fc0 <__divsi3>
2000041c:	0003      	movs	r3, r0
2000041e:	0018      	movs	r0, r3
20000420:	f7ff ffdd 	bl	200003de <delaymillis>
        Pedro.distance++;
20000424:	4b12      	ldr	r3, [pc, #72]	; (20000470 <move+0x78>)
20000426:	6a1b      	ldr	r3, [r3, #32]
20000428:	1c5a      	adds	r2, r3, #1
2000042a:	4b11      	ldr	r3, [pc, #68]	; (20000470 <move+0x78>)
2000042c:	621a      	str	r2, [r3, #32]
2000042e:	e015      	b.n	2000045c <move+0x64>
    }
    else if(Pedro.velx < 0){
20000430:	4b0f      	ldr	r3, [pc, #60]	; (20000470 <move+0x78>)
20000432:	691b      	ldr	r3, [r3, #16]
20000434:	2b00      	cmp	r3, #0
20000436:	da11      	bge.n	2000045c <move+0x64>
        shiftRight();
20000438:	f000 fcba 	bl	20000db0 <shiftRight>
        delaymillis(200/(-Pedro.velx));
2000043c:	4b0c      	ldr	r3, [pc, #48]	; (20000470 <move+0x78>)
2000043e:	691b      	ldr	r3, [r3, #16]
20000440:	425b      	negs	r3, r3
20000442:	0019      	movs	r1, r3
20000444:	20c8      	movs	r0, #200	; 0xc8
20000446:	f000 fdbb 	bl	20000fc0 <__divsi3>
2000044a:	0003      	movs	r3, r0
2000044c:	0018      	movs	r0, r3
2000044e:	f7ff ffc6 	bl	200003de <delaymillis>
        Pedro.distance++;
20000452:	4b07      	ldr	r3, [pc, #28]	; (20000470 <move+0x78>)
20000454:	6a1b      	ldr	r3, [r3, #32]
20000456:	1c5a      	adds	r2, r3, #1
20000458:	4b05      	ldr	r3, [pc, #20]	; (20000470 <move+0x78>)
2000045a:	621a      	str	r2, [r3, #32]

    }
    graphic_draw_screen();
2000045c:	f000 fc38 	bl	20000cd0 <graphic_draw_screen>
    draw(&Pedro);  //extra args? FLYTTA? han kan ritas ut med resten av skärmen_________________________________________________________________________________* 
20000460:	4b03      	ldr	r3, [pc, #12]	; (20000470 <move+0x78>)
20000462:	0018      	movs	r0, r3
20000464:	f000 f88e 	bl	20000584 <draw>

}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	bd80      	pop	{r7, pc}
2000046e:	46c0      	nop			; (mov r8, r8)
20000470:	20001aec 	andcs	r1, r0, ip, ror #21

20000474 <checkKeys>:

//check keypresses and change pedros properties (acceleration for <- ^ -> and velocity for ^) accordingly
void checkKeys(){
20000474:	b580      	push	{r7, lr}
20000476:	af00      	add	r7, sp, #0
    if(isRightKey() && !isLeftKey()){     //Kräver importerad keyb
20000478:	f000 fd7c 	bl	20000f74 <isRightKey>
2000047c:	1e03      	subs	r3, r0, #0
2000047e:	d00f      	beq.n	200004a0 <checkKeys+0x2c>
20000480:	f000 fd8b 	bl	20000f9a <isLeftKey>
20000484:	1e03      	subs	r3, r0, #0
20000486:	d10b      	bne.n	200004a0 <checkKeys+0x2c>
		if(Pedro.velx < MAX_VELX){
20000488:	4b28      	ldr	r3, [pc, #160]	; (2000052c <checkKeys+0xb8>)
2000048a:	691b      	ldr	r3, [r3, #16]
2000048c:	2b03      	cmp	r3, #3
2000048e:	dc03      	bgt.n	20000498 <checkKeys+0x24>
			Pedro.accx = ACCX;     //accelerate right
20000490:	4b26      	ldr	r3, [pc, #152]	; (2000052c <checkKeys+0xb8>)
20000492:	2201      	movs	r2, #1
20000494:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
20000496:	e02d      	b.n	200004f4 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
20000498:	4b24      	ldr	r3, [pc, #144]	; (2000052c <checkKeys+0xb8>)
2000049a:	2200      	movs	r2, #0
2000049c:	619a      	str	r2, [r3, #24]
		if(Pedro.velx < MAX_VELX){
2000049e:	e029      	b.n	200004f4 <checkKeys+0x80>
		}
	}
	else if(!isRightKey() && isLeftKey())
200004a0:	f000 fd68 	bl	20000f74 <isRightKey>
200004a4:	1e03      	subs	r3, r0, #0
200004a6:	d110      	bne.n	200004ca <checkKeys+0x56>
200004a8:	f000 fd77 	bl	20000f9a <isLeftKey>
200004ac:	1e03      	subs	r3, r0, #0
200004ae:	d00c      	beq.n	200004ca <checkKeys+0x56>
	{
		if(Pedro.velx > -MAX_VELX){
200004b0:	4b1e      	ldr	r3, [pc, #120]	; (2000052c <checkKeys+0xb8>)
200004b2:	691b      	ldr	r3, [r3, #16]
200004b4:	3303      	adds	r3, #3
200004b6:	db04      	blt.n	200004c2 <checkKeys+0x4e>
			Pedro.accx = -ACCX;    //accelerate left
200004b8:	4b1c      	ldr	r3, [pc, #112]	; (2000052c <checkKeys+0xb8>)
200004ba:	2201      	movs	r2, #1
200004bc:	4252      	negs	r2, r2
200004be:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200004c0:	e018      	b.n	200004f4 <checkKeys+0x80>
		}
		else{
			Pedro.accx = 0;
200004c2:	4b1a      	ldr	r3, [pc, #104]	; (2000052c <checkKeys+0xb8>)
200004c4:	2200      	movs	r2, #0
200004c6:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > -MAX_VELX){
200004c8:	e014      	b.n	200004f4 <checkKeys+0x80>
		}
	}
	else                            //decrease velocity
	{
		Pedro.accx = 0;
200004ca:	4b18      	ldr	r3, [pc, #96]	; (2000052c <checkKeys+0xb8>)
200004cc:	2200      	movs	r2, #0
200004ce:	619a      	str	r2, [r3, #24]
		if(Pedro.velx > 0){
200004d0:	4b16      	ldr	r3, [pc, #88]	; (2000052c <checkKeys+0xb8>)
200004d2:	691b      	ldr	r3, [r3, #16]
200004d4:	2b00      	cmp	r3, #0
200004d6:	dd04      	ble.n	200004e2 <checkKeys+0x6e>
			Pedro.velx -= ACCX;
200004d8:	4b14      	ldr	r3, [pc, #80]	; (2000052c <checkKeys+0xb8>)
200004da:	691b      	ldr	r3, [r3, #16]
200004dc:	1e5a      	subs	r2, r3, #1
200004de:	4b13      	ldr	r3, [pc, #76]	; (2000052c <checkKeys+0xb8>)
200004e0:	611a      	str	r2, [r3, #16]
		}
		if(Pedro.velx < 0){
200004e2:	4b12      	ldr	r3, [pc, #72]	; (2000052c <checkKeys+0xb8>)
200004e4:	691b      	ldr	r3, [r3, #16]
200004e6:	2b00      	cmp	r3, #0
200004e8:	da04      	bge.n	200004f4 <checkKeys+0x80>
			Pedro.velx += ACCX;
200004ea:	4b10      	ldr	r3, [pc, #64]	; (2000052c <checkKeys+0xb8>)
200004ec:	691b      	ldr	r3, [r3, #16]
200004ee:	1c5a      	adds	r2, r3, #1
200004f0:	4b0e      	ldr	r3, [pc, #56]	; (2000052c <checkKeys+0xb8>)
200004f2:	611a      	str	r2, [r3, #16]
		}
	}
    
    if(isJumping()){
200004f4:	f000 f83a 	bl	2000056c <isJumping>
200004f8:	1e03      	subs	r3, r0, #0
200004fa:	d003      	beq.n	20000504 <checkKeys+0x90>
        Pedro.accy = 1;
200004fc:	4b0b      	ldr	r3, [pc, #44]	; (2000052c <checkKeys+0xb8>)
200004fe:	2201      	movs	r2, #1
20000500:	61da      	str	r2, [r3, #28]
            Pedro.accy = 1;
            Pedro.sprite = pedro_jump;
		}
	}
    
}
20000502:	e00f      	b.n	20000524 <checkKeys+0xb0>
        Pedro.accy = 0;
20000504:	4b09      	ldr	r3, [pc, #36]	; (2000052c <checkKeys+0xb8>)
20000506:	2200      	movs	r2, #0
20000508:	61da      	str	r2, [r3, #28]
        if(isUpKey()){
2000050a:	f000 fd1d 	bl	20000f48 <isUpKey>
2000050e:	1e03      	subs	r3, r0, #0
20000510:	d008      	beq.n	20000524 <checkKeys+0xb0>
			Pedro.vely = VELY;    //jump
20000512:	4b06      	ldr	r3, [pc, #24]	; (2000052c <checkKeys+0xb8>)
20000514:	2205      	movs	r2, #5
20000516:	615a      	str	r2, [r3, #20]
            Pedro.accy = 1;
20000518:	4b04      	ldr	r3, [pc, #16]	; (2000052c <checkKeys+0xb8>)
2000051a:	2201      	movs	r2, #1
2000051c:	61da      	str	r2, [r3, #28]
            Pedro.sprite = pedro_jump;
2000051e:	4b03      	ldr	r3, [pc, #12]	; (2000052c <checkKeys+0xb8>)
20000520:	4a03      	ldr	r2, [pc, #12]	; (20000530 <checkKeys+0xbc>)
20000522:	625a      	str	r2, [r3, #36]	; 0x24
}
20000524:	46c0      	nop			; (mov r8, r8)
20000526:	46bd      	mov	sp, r7
20000528:	bd80      	pop	{r7, pc}
2000052a:	46c0      	nop			; (mov r8, r8)
2000052c:	20001aec 	andcs	r1, r0, ip, ror #21
20000530:	200019fc 	strdcs	r1, [r0], -ip

20000534 <applyPhysics>:

void applyPhysics(){
20000534:	b580      	push	{r7, lr}
20000536:	af00      	add	r7, sp, #0
    //physics
    Pedro.velx += Pedro.accx;
20000538:	4b0b      	ldr	r3, [pc, #44]	; (20000568 <applyPhysics+0x34>)
2000053a:	691a      	ldr	r2, [r3, #16]
2000053c:	4b0a      	ldr	r3, [pc, #40]	; (20000568 <applyPhysics+0x34>)
2000053e:	699b      	ldr	r3, [r3, #24]
20000540:	18d2      	adds	r2, r2, r3
20000542:	4b09      	ldr	r3, [pc, #36]	; (20000568 <applyPhysics+0x34>)
20000544:	611a      	str	r2, [r3, #16]
    
    Pedro.vely += Pedro.accy;
20000546:	4b08      	ldr	r3, [pc, #32]	; (20000568 <applyPhysics+0x34>)
20000548:	695a      	ldr	r2, [r3, #20]
2000054a:	4b07      	ldr	r3, [pc, #28]	; (20000568 <applyPhysics+0x34>)
2000054c:	69db      	ldr	r3, [r3, #28]
2000054e:	18d2      	adds	r2, r2, r3
20000550:	4b05      	ldr	r3, [pc, #20]	; (20000568 <applyPhysics+0x34>)
20000552:	615a      	str	r2, [r3, #20]
	Pedro.posy += Pedro.vely;
20000554:	4b04      	ldr	r3, [pc, #16]	; (20000568 <applyPhysics+0x34>)
20000556:	68da      	ldr	r2, [r3, #12]
20000558:	4b03      	ldr	r3, [pc, #12]	; (20000568 <applyPhysics+0x34>)
2000055a:	695b      	ldr	r3, [r3, #20]
2000055c:	18d2      	adds	r2, r2, r3
2000055e:	4b02      	ldr	r3, [pc, #8]	; (20000568 <applyPhysics+0x34>)
20000560:	60da      	str	r2, [r3, #12]
    
}
20000562:	46c0      	nop			; (mov r8, r8)
20000564:	46bd      	mov	sp, r7
20000566:	bd80      	pop	{r7, pc}
20000568:	20001aec 	andcs	r1, r0, ip, ror #21

2000056c <isJumping>:

char isJumping(){
2000056c:	b580      	push	{r7, lr}
2000056e:	af00      	add	r7, sp, #0
    return Pedro.posy < 0;       //groundlvl+pedroheight
20000570:	4b03      	ldr	r3, [pc, #12]	; (20000580 <isJumping+0x14>)
20000572:	68db      	ldr	r3, [r3, #12]
20000574:	0fdb      	lsrs	r3, r3, #31
20000576:	b2db      	uxtb	r3, r3
}
20000578:	0018      	movs	r0, r3
2000057a:	46bd      	mov	sp, r7
2000057c:	bd80      	pop	{r7, pc}
2000057e:	46c0      	nop			; (mov r8, r8)
20000580:	20001aec 	andcs	r1, r0, ip, ror #21

20000584 <draw>:


void draw(POBJECT object){
20000584:	b580      	push	{r7, lr}
20000586:	b08a      	sub	sp, #40	; 0x28
20000588:	af00      	add	r7, sp, #0
2000058a:	6078      	str	r0, [r7, #4]
	 unsigned char i, j;
	 unsigned char* man = object->sprite;
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000590:	623b      	str	r3, [r7, #32]
	 int shift = object->posy%8;
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	68db      	ldr	r3, [r3, #12]
20000596:	4a82      	ldr	r2, [pc, #520]	; (200007a0 <draw+0x21c>)
20000598:	4013      	ands	r3, r2
2000059a:	d504      	bpl.n	200005a6 <draw+0x22>
2000059c:	3b01      	subs	r3, #1
2000059e:	2208      	movs	r2, #8
200005a0:	4252      	negs	r2, r2
200005a2:	4313      	orrs	r3, r2
200005a4:	3301      	adds	r3, #1
200005a6:	61fb      	str	r3, [r7, #28]
        for(j = 0; j < ((object->height)/8)+1; j++) {
200005a8:	2326      	movs	r3, #38	; 0x26
200005aa:	18fb      	adds	r3, r7, r3
200005ac:	2200      	movs	r2, #0
200005ae:	701a      	strb	r2, [r3, #0]
200005b0:	e0e4      	b.n	2000077c <draw+0x1f8>
			if(!(object->posy+object->height > 64 && j < ((64-object->posy)/8))){						//If page is over his bottom position
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	68da      	ldr	r2, [r3, #12]
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	681b      	ldr	r3, [r3, #0]
200005ba:	18d3      	adds	r3, r2, r3
200005bc:	2b40      	cmp	r3, #64	; 0x40
200005be:	dd0c      	ble.n	200005da <draw+0x56>
200005c0:	2326      	movs	r3, #38	; 0x26
200005c2:	18fb      	adds	r3, r7, r3
200005c4:	781a      	ldrb	r2, [r3, #0]
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	68db      	ldr	r3, [r3, #12]
200005ca:	2140      	movs	r1, #64	; 0x40
200005cc:	1acb      	subs	r3, r1, r3
200005ce:	d500      	bpl.n	200005d2 <draw+0x4e>
200005d0:	3307      	adds	r3, #7
200005d2:	10db      	asrs	r3, r3, #3
200005d4:	429a      	cmp	r2, r3
200005d6:	da00      	bge.n	200005da <draw+0x56>
200005d8:	e0ca      	b.n	20000770 <draw+0x1ec>
				graphic_write_command(LCD_SET_PAGE | (((63-object->posy-object->height)/8)+j), B_CS1);
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	68db      	ldr	r3, [r3, #12]
200005de:	223f      	movs	r2, #63	; 0x3f
200005e0:	1ad2      	subs	r2, r2, r3
200005e2:	687b      	ldr	r3, [r7, #4]
200005e4:	681b      	ldr	r3, [r3, #0]
200005e6:	1ad3      	subs	r3, r2, r3
200005e8:	d500      	bpl.n	200005ec <draw+0x68>
200005ea:	3307      	adds	r3, #7
200005ec:	10db      	asrs	r3, r3, #3
200005ee:	b2da      	uxtb	r2, r3
200005f0:	2326      	movs	r3, #38	; 0x26
200005f2:	18fb      	adds	r3, r7, r3
200005f4:	781b      	ldrb	r3, [r3, #0]
200005f6:	18d3      	adds	r3, r2, r3
200005f8:	b2db      	uxtb	r3, r3
200005fa:	b25b      	sxtb	r3, r3
200005fc:	2248      	movs	r2, #72	; 0x48
200005fe:	4252      	negs	r2, r2
20000600:	4313      	orrs	r3, r2
20000602:	b25b      	sxtb	r3, r3
20000604:	b2db      	uxtb	r3, r3
20000606:	2108      	movs	r1, #8
20000608:	0018      	movs	r0, r3
2000060a:	f000 fa53 	bl	20000ab4 <graphic_write_command>
				graphic_write_command(LCD_SET_ADD | object->posx, B_CS1);
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	689b      	ldr	r3, [r3, #8]
20000612:	b25b      	sxtb	r3, r3
20000614:	2240      	movs	r2, #64	; 0x40
20000616:	4313      	orrs	r3, r2
20000618:	b25b      	sxtb	r3, r3
2000061a:	b2db      	uxtb	r3, r3
2000061c:	2108      	movs	r1, #8
2000061e:	0018      	movs	r0, r3
20000620:	f000 fa48 	bl	20000ab4 <graphic_write_command>
				for(i = 0; i < object->width; i++) {
20000624:	2327      	movs	r3, #39	; 0x27
20000626:	18fb      	adds	r3, r7, r3
20000628:	2200      	movs	r2, #0
2000062a:	701a      	strb	r2, [r3, #0]
2000062c:	e098      	b.n	20000760 <draw+0x1dc>
					if(j == 0){
2000062e:	2326      	movs	r3, #38	; 0x26
20000630:	18fb      	adds	r3, r7, r3
20000632:	781b      	ldrb	r3, [r3, #0]
20000634:	2b00      	cmp	r3, #0
20000636:	d121      	bne.n	2000067c <draw+0xf8>
						unsigned char* adress = (man+(j*object->width)+i);
20000638:	2326      	movs	r3, #38	; 0x26
2000063a:	18fb      	adds	r3, r7, r3
2000063c:	781a      	ldrb	r2, [r3, #0]
2000063e:	687b      	ldr	r3, [r7, #4]
20000640:	685b      	ldr	r3, [r3, #4]
20000642:	4353      	muls	r3, r2
20000644:	001a      	movs	r2, r3
20000646:	2327      	movs	r3, #39	; 0x27
20000648:	18fb      	adds	r3, r7, r3
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	18d3      	adds	r3, r2, r3
2000064e:	6a3a      	ldr	r2, [r7, #32]
20000650:	18d3      	adds	r3, r2, r3
20000652:	613b      	str	r3, [r7, #16]
						unsigned char byte = *adress;
20000654:	200f      	movs	r0, #15
20000656:	183b      	adds	r3, r7, r0
20000658:	693a      	ldr	r2, [r7, #16]
2000065a:	7812      	ldrb	r2, [r2, #0]
2000065c:	701a      	strb	r2, [r3, #0]
						byte = byte<<(8-shift);
2000065e:	183b      	adds	r3, r7, r0
20000660:	781a      	ldrb	r2, [r3, #0]
20000662:	69fb      	ldr	r3, [r7, #28]
20000664:	2108      	movs	r1, #8
20000666:	1acb      	subs	r3, r1, r3
20000668:	409a      	lsls	r2, r3
2000066a:	183b      	adds	r3, r7, r0
2000066c:	701a      	strb	r2, [r3, #0]
						graphic_write_data(byte, B_CS1);
2000066e:	183b      	adds	r3, r7, r0
20000670:	781b      	ldrb	r3, [r3, #0]
20000672:	2108      	movs	r1, #8
20000674:	0018      	movs	r0, r3
20000676:	f000 fa3d 	bl	20000af4 <graphic_write_data>
2000067a:	e06b      	b.n	20000754 <draw+0x1d0>
					}
					else{
						unsigned char* adress = (man+((j-1)*object->width)+i);
2000067c:	2026      	movs	r0, #38	; 0x26
2000067e:	183b      	adds	r3, r7, r0
20000680:	781b      	ldrb	r3, [r3, #0]
20000682:	1e5a      	subs	r2, r3, #1
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	685b      	ldr	r3, [r3, #4]
20000688:	4353      	muls	r3, r2
2000068a:	001a      	movs	r2, r3
2000068c:	2327      	movs	r3, #39	; 0x27
2000068e:	18fb      	adds	r3, r7, r3
20000690:	781b      	ldrb	r3, [r3, #0]
20000692:	18d3      	adds	r3, r2, r3
20000694:	6a3a      	ldr	r2, [r7, #32]
20000696:	18d3      	adds	r3, r2, r3
20000698:	61bb      	str	r3, [r7, #24]
						unsigned char byte = *adress;
2000069a:	2125      	movs	r1, #37	; 0x25
2000069c:	187b      	adds	r3, r7, r1
2000069e:	69ba      	ldr	r2, [r7, #24]
200006a0:	7812      	ldrb	r2, [r2, #0]
200006a2:	701a      	strb	r2, [r3, #0]
						byte = byte>>(shift);
200006a4:	187b      	adds	r3, r7, r1
200006a6:	781a      	ldrb	r2, [r3, #0]
200006a8:	69fb      	ldr	r3, [r7, #28]
200006aa:	411a      	asrs	r2, r3
200006ac:	187b      	adds	r3, r7, r1
200006ae:	701a      	strb	r2, [r3, #0]
						if(j < (object->height)/8){
200006b0:	183b      	adds	r3, r7, r0
200006b2:	781a      	ldrb	r2, [r3, #0]
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	681b      	ldr	r3, [r3, #0]
200006b8:	2b00      	cmp	r3, #0
200006ba:	da00      	bge.n	200006be <draw+0x13a>
200006bc:	3307      	adds	r3, #7
200006be:	10db      	asrs	r3, r3, #3
200006c0:	429a      	cmp	r2, r3
200006c2:	da27      	bge.n	20000714 <draw+0x190>
							unsigned char tillagg = *(adress+object->width);
200006c4:	687b      	ldr	r3, [r7, #4]
200006c6:	685b      	ldr	r3, [r3, #4]
200006c8:	001a      	movs	r2, r3
200006ca:	69bb      	ldr	r3, [r7, #24]
200006cc:	189a      	adds	r2, r3, r2
200006ce:	2117      	movs	r1, #23
200006d0:	187b      	adds	r3, r7, r1
200006d2:	7812      	ldrb	r2, [r2, #0]
200006d4:	701a      	strb	r2, [r3, #0]
							tillagg &= (0xFF>>(8-shift));		//nollställer överblivna bitar som ej ingår i bildförskjutningen
200006d6:	69fb      	ldr	r3, [r7, #28]
200006d8:	2208      	movs	r2, #8
200006da:	1ad3      	subs	r3, r2, r3
200006dc:	22ff      	movs	r2, #255	; 0xff
200006de:	411a      	asrs	r2, r3
200006e0:	0013      	movs	r3, r2
200006e2:	b25b      	sxtb	r3, r3
200006e4:	0008      	movs	r0, r1
200006e6:	183a      	adds	r2, r7, r0
200006e8:	7812      	ldrb	r2, [r2, #0]
200006ea:	b252      	sxtb	r2, r2
200006ec:	4013      	ands	r3, r2
200006ee:	b25a      	sxtb	r2, r3
200006f0:	183b      	adds	r3, r7, r0
200006f2:	701a      	strb	r2, [r3, #0]
							tillagg = tillagg<<(8-shift);
200006f4:	183b      	adds	r3, r7, r0
200006f6:	781a      	ldrb	r2, [r3, #0]
200006f8:	69fb      	ldr	r3, [r7, #28]
200006fa:	2108      	movs	r1, #8
200006fc:	1acb      	subs	r3, r1, r3
200006fe:	409a      	lsls	r2, r3
20000700:	183b      	adds	r3, r7, r0
20000702:	701a      	strb	r2, [r3, #0]
							byte |= tillagg;
20000704:	2225      	movs	r2, #37	; 0x25
20000706:	18bb      	adds	r3, r7, r2
20000708:	18b9      	adds	r1, r7, r2
2000070a:	183a      	adds	r2, r7, r0
2000070c:	7809      	ldrb	r1, [r1, #0]
2000070e:	7812      	ldrb	r2, [r2, #0]
20000710:	430a      	orrs	r2, r1
20000712:	701a      	strb	r2, [r3, #0]
						}
						byte |= backBuffer[64+(object->posx)+i][7-(object->posy)/8];
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	689b      	ldr	r3, [r3, #8]
20000718:	3340      	adds	r3, #64	; 0x40
2000071a:	001a      	movs	r2, r3
2000071c:	2327      	movs	r3, #39	; 0x27
2000071e:	18fb      	adds	r3, r7, r3
20000720:	781b      	ldrb	r3, [r3, #0]
20000722:	18d2      	adds	r2, r2, r3
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	68db      	ldr	r3, [r3, #12]
20000728:	2b00      	cmp	r3, #0
2000072a:	da00      	bge.n	2000072e <draw+0x1aa>
2000072c:	3307      	adds	r3, #7
2000072e:	10db      	asrs	r3, r3, #3
20000730:	425b      	negs	r3, r3
20000732:	3307      	adds	r3, #7
20000734:	491b      	ldr	r1, [pc, #108]	; (200007a4 <draw+0x220>)
20000736:	00d2      	lsls	r2, r2, #3
20000738:	188a      	adds	r2, r1, r2
2000073a:	5cd1      	ldrb	r1, [r2, r3]
2000073c:	2025      	movs	r0, #37	; 0x25
2000073e:	183b      	adds	r3, r7, r0
20000740:	183a      	adds	r2, r7, r0
20000742:	7812      	ldrb	r2, [r2, #0]
20000744:	430a      	orrs	r2, r1
20000746:	701a      	strb	r2, [r3, #0]
						graphic_write_data(byte, B_CS1);
20000748:	183b      	adds	r3, r7, r0
2000074a:	781b      	ldrb	r3, [r3, #0]
2000074c:	2108      	movs	r1, #8
2000074e:	0018      	movs	r0, r3
20000750:	f000 f9d0 	bl	20000af4 <graphic_write_data>
				for(i = 0; i < object->width; i++) {
20000754:	2127      	movs	r1, #39	; 0x27
20000756:	187b      	adds	r3, r7, r1
20000758:	781a      	ldrb	r2, [r3, #0]
2000075a:	187b      	adds	r3, r7, r1
2000075c:	3201      	adds	r2, #1
2000075e:	701a      	strb	r2, [r3, #0]
20000760:	2327      	movs	r3, #39	; 0x27
20000762:	18fb      	adds	r3, r7, r3
20000764:	781a      	ldrb	r2, [r3, #0]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	685b      	ldr	r3, [r3, #4]
2000076a:	429a      	cmp	r2, r3
2000076c:	da00      	bge.n	20000770 <draw+0x1ec>
2000076e:	e75e      	b.n	2000062e <draw+0xaa>
        for(j = 0; j < ((object->height)/8)+1; j++) {
20000770:	2126      	movs	r1, #38	; 0x26
20000772:	187b      	adds	r3, r7, r1
20000774:	781a      	ldrb	r2, [r3, #0]
20000776:	187b      	adds	r3, r7, r1
20000778:	3201      	adds	r2, #1
2000077a:	701a      	strb	r2, [r3, #0]
2000077c:	2326      	movs	r3, #38	; 0x26
2000077e:	18fb      	adds	r3, r7, r3
20000780:	781a      	ldrb	r2, [r3, #0]
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	681b      	ldr	r3, [r3, #0]
20000786:	2b00      	cmp	r3, #0
20000788:	da00      	bge.n	2000078c <draw+0x208>
2000078a:	3307      	adds	r3, #7
2000078c:	10db      	asrs	r3, r3, #3
2000078e:	3301      	adds	r3, #1
20000790:	429a      	cmp	r2, r3
20000792:	da00      	bge.n	20000796 <draw+0x212>
20000794:	e70d      	b.n	200005b2 <draw+0x2e>
					}
				}
			}
        }
}
20000796:	46c0      	nop			; (mov r8, r8)
20000798:	46bd      	mov	sp, r7
2000079a:	b00a      	add	sp, #40	; 0x28
2000079c:	bd80      	pop	{r7, pc}
2000079e:	46c0      	nop			; (mov r8, r8)
200007a0:	80000007 	andhi	r0, r0, r7
200007a4:	200011ac 	andcs	r1, r0, ip, lsr #3

200007a8 <touchesPepper>:

char touchesPepper(){
200007a8:	b580      	push	{r7, lr}
200007aa:	af00      	add	r7, sp, #0
    //kolla nedre hörnen (om Pedro bredare än 16px även i mitten) först, om pixeln är 1 -> Pedro.touches = 1 innan
    //jfr pedrobyte & backbufferbyte
    return 0;
200007ac:	2300      	movs	r3, #0
}
200007ae:	0018      	movs	r0, r3
200007b0:	46bd      	mov	sp, r7
200007b2:	bd80      	pop	{r7, pc}

200007b4 <getDistance>:

int getDistance(){
200007b4:	b580      	push	{r7, lr}
200007b6:	af00      	add	r7, sp, #0
    return Pedro.distance;
200007b8:	4b02      	ldr	r3, [pc, #8]	; (200007c4 <getDistance+0x10>)
200007ba:	6a1b      	ldr	r3, [r3, #32]
}
200007bc:	0018      	movs	r0, r3
200007be:	46bd      	mov	sp, r7
200007c0:	bd80      	pop	{r7, pc}
200007c2:	46c0      	nop			; (mov r8, r8)
200007c4:	20001aec 	andcs	r1, r0, ip, ror #21

200007c8 <graphic_ctrl_bit_set>:


uint8_t backBuffer[256][8]; // 256 * 64 / 8


void graphic_ctrl_bit_set(unsigned char x){
200007c8:	b580      	push	{r7, lr}
200007ca:	b084      	sub	sp, #16
200007cc:	af00      	add	r7, sp, #0
200007ce:	0002      	movs	r2, r0
200007d0:	1dfb      	adds	r3, r7, #7
200007d2:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
200007d4:	4a0c      	ldr	r2, [pc, #48]	; (20000808 <graphic_ctrl_bit_set+0x40>)
200007d6:	200f      	movs	r0, #15
200007d8:	183b      	adds	r3, r7, r0
200007da:	7d12      	ldrb	r2, [r2, #20]
200007dc:	701a      	strb	r2, [r3, #0]
    c |= x;
200007de:	183b      	adds	r3, r7, r0
200007e0:	1839      	adds	r1, r7, r0
200007e2:	1dfa      	adds	r2, r7, #7
200007e4:	7809      	ldrb	r1, [r1, #0]
200007e6:	7812      	ldrb	r2, [r2, #0]
200007e8:	430a      	orrs	r2, r1
200007ea:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200007ec:	183b      	adds	r3, r7, r0
200007ee:	183a      	adds	r2, r7, r0
200007f0:	7812      	ldrb	r2, [r2, #0]
200007f2:	2104      	movs	r1, #4
200007f4:	438a      	bics	r2, r1
200007f6:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
200007f8:	4a03      	ldr	r2, [pc, #12]	; (20000808 <graphic_ctrl_bit_set+0x40>)
200007fa:	183b      	adds	r3, r7, r0
200007fc:	781b      	ldrb	r3, [r3, #0]
200007fe:	7513      	strb	r3, [r2, #20]
}
20000800:	46c0      	nop			; (mov r8, r8)
20000802:	46bd      	mov	sp, r7
20000804:	b004      	add	sp, #16
20000806:	bd80      	pop	{r7, pc}
20000808:	40021000 	andmi	r1, r2, r0

2000080c <graphic_ctrl_bit_clear>:

void graphic_ctrl_bit_clear(unsigned char x){
2000080c:	b580      	push	{r7, lr}
2000080e:	b084      	sub	sp, #16
20000810:	af00      	add	r7, sp, #0
20000812:	0002      	movs	r2, r0
20000814:	1dfb      	adds	r3, r7, #7
20000816:	701a      	strb	r2, [r3, #0]
    char c;
    c = GPIO_E->odrLow;
20000818:	4a0f      	ldr	r2, [pc, #60]	; (20000858 <graphic_ctrl_bit_clear+0x4c>)
2000081a:	210f      	movs	r1, #15
2000081c:	187b      	adds	r3, r7, r1
2000081e:	7d12      	ldrb	r2, [r2, #20]
20000820:	701a      	strb	r2, [r3, #0]
    c &= ~x;
20000822:	1dfb      	adds	r3, r7, #7
20000824:	781b      	ldrb	r3, [r3, #0]
20000826:	b25b      	sxtb	r3, r3
20000828:	43db      	mvns	r3, r3
2000082a:	b25b      	sxtb	r3, r3
2000082c:	187a      	adds	r2, r7, r1
2000082e:	7812      	ldrb	r2, [r2, #0]
20000830:	b252      	sxtb	r2, r2
20000832:	4013      	ands	r3, r2
20000834:	b25a      	sxtb	r2, r3
20000836:	187b      	adds	r3, r7, r1
20000838:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
2000083a:	187b      	adds	r3, r7, r1
2000083c:	0008      	movs	r0, r1
2000083e:	187a      	adds	r2, r7, r1
20000840:	7812      	ldrb	r2, [r2, #0]
20000842:	2104      	movs	r1, #4
20000844:	438a      	bics	r2, r1
20000846:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrLow = c;
20000848:	4a03      	ldr	r2, [pc, #12]	; (20000858 <graphic_ctrl_bit_clear+0x4c>)
2000084a:	183b      	adds	r3, r7, r0
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	7513      	strb	r3, [r2, #20]
}
20000850:	46c0      	nop			; (mov r8, r8)
20000852:	46bd      	mov	sp, r7
20000854:	b004      	add	sp, #16
20000856:	bd80      	pop	{r7, pc}
20000858:	40021000 	andmi	r1, r2, r0

2000085c <select_controller>:

static void select_controller(uint8_t controller){  //@param controller - 0/B_CS1/B_CS2/both
2000085c:	b580      	push	{r7, lr}
2000085e:	b082      	sub	sp, #8
20000860:	af00      	add	r7, sp, #0
20000862:	0002      	movs	r2, r0
20000864:	1dfb      	adds	r3, r7, #7
20000866:	701a      	strb	r2, [r3, #0]
    switch(controller){
20000868:	1dfb      	adds	r3, r7, #7
2000086a:	781b      	ldrb	r3, [r3, #0]
2000086c:	2b08      	cmp	r3, #8
2000086e:	d00c      	beq.n	2000088a <select_controller+0x2e>
20000870:	dc02      	bgt.n	20000878 <select_controller+0x1c>
20000872:	2b00      	cmp	r3, #0
20000874:	d005      	beq.n	20000882 <select_controller+0x26>
            break;
        case B_CS1|B_CS2 :  //both
            graphic_ctrl_bit_set(B_CS1|B_CS2);
            break;
    }
}
20000876:	e01a      	b.n	200008ae <select_controller+0x52>
    switch(controller){
20000878:	2b10      	cmp	r3, #16
2000087a:	d00d      	beq.n	20000898 <select_controller+0x3c>
2000087c:	2b18      	cmp	r3, #24
2000087e:	d012      	beq.n	200008a6 <select_controller+0x4a>
}
20000880:	e015      	b.n	200008ae <select_controller+0x52>
            graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000882:	2018      	movs	r0, #24
20000884:	f7ff ffc2 	bl	2000080c <graphic_ctrl_bit_clear>
            break;
20000888:	e011      	b.n	200008ae <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1);
2000088a:	2008      	movs	r0, #8
2000088c:	f7ff ff9c 	bl	200007c8 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS2);
20000890:	2010      	movs	r0, #16
20000892:	f7ff ffbb 	bl	2000080c <graphic_ctrl_bit_clear>
            break;
20000896:	e00a      	b.n	200008ae <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS2);
20000898:	2010      	movs	r0, #16
2000089a:	f7ff ff95 	bl	200007c8 <graphic_ctrl_bit_set>
            graphic_ctrl_bit_clear(B_CS1);
2000089e:	2008      	movs	r0, #8
200008a0:	f7ff ffb4 	bl	2000080c <graphic_ctrl_bit_clear>
            break;
200008a4:	e003      	b.n	200008ae <select_controller+0x52>
            graphic_ctrl_bit_set(B_CS1|B_CS2);
200008a6:	2018      	movs	r0, #24
200008a8:	f7ff ff8e 	bl	200007c8 <graphic_ctrl_bit_set>
            break;
200008ac:	46c0      	nop			; (mov r8, r8)
}
200008ae:	46c0      	nop			; (mov r8, r8)
200008b0:	46bd      	mov	sp, r7
200008b2:	b002      	add	sp, #8
200008b4:	bd80      	pop	{r7, pc}

200008b6 <graphic_initialize>:

void graphic_initialize(void) {
200008b6:	b580      	push	{r7, lr}
200008b8:	af00      	add	r7, sp, #0
    graphic_ctrl_bit_set(B_E);
200008ba:	2040      	movs	r0, #64	; 0x40
200008bc:	f7ff ff84 	bl	200007c8 <graphic_ctrl_bit_set>
    delaymicros(10);
200008c0:	200a      	movs	r0, #10
200008c2:	f7ff fd77 	bl	200003b4 <delaymicros>
    graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200008c6:	2078      	movs	r0, #120	; 0x78
200008c8:	f7ff ffa0 	bl	2000080c <graphic_ctrl_bit_clear>
    delaymillis(30);
200008cc:	201e      	movs	r0, #30
200008ce:	f7ff fd86 	bl	200003de <delaymillis>
    graphic_ctrl_bit_set(B_RST);
200008d2:	2020      	movs	r0, #32
200008d4:	f7ff ff78 	bl	200007c8 <graphic_ctrl_bit_set>
    delaymillis(100);
200008d8:	2064      	movs	r0, #100	; 0x64
200008da:	f7ff fd80 	bl	200003de <delaymillis>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
200008de:	2118      	movs	r1, #24
200008e0:	203e      	movs	r0, #62	; 0x3e
200008e2:	f000 f8e7 	bl	20000ab4 <graphic_write_command>
    graphic_write_command(LCD_OFF, B_CS1|B_CS2);    //cmd: LCD_OFF
200008e6:	2118      	movs	r1, #24
200008e8:	203e      	movs	r0, #62	; 0x3e
200008ea:	f000 f8e3 	bl	20000ab4 <graphic_write_command>
    graphic_write_command(LCD_ON, B_CS1|B_CS2);     //...
200008ee:	2118      	movs	r1, #24
200008f0:	203f      	movs	r0, #63	; 0x3f
200008f2:	f000 f8df 	bl	20000ab4 <graphic_write_command>
    graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
200008f6:	2118      	movs	r1, #24
200008f8:	20c0      	movs	r0, #192	; 0xc0
200008fa:	f000 f8db 	bl	20000ab4 <graphic_write_command>
    graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
200008fe:	2118      	movs	r1, #24
20000900:	2040      	movs	r0, #64	; 0x40
20000902:	f000 f8d7 	bl	20000ab4 <graphic_write_command>
    graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000906:	2118      	movs	r1, #24
20000908:	20b8      	movs	r0, #184	; 0xb8
2000090a:	f000 f8d3 	bl	20000ab4 <graphic_write_command>
    select_controller(0);       //choose neither CS1/CS2
2000090e:	2000      	movs	r0, #0
20000910:	f7ff ffa4 	bl	2000085c <select_controller>
}
20000914:	46c0      	nop			; (mov r8, r8)
20000916:	46bd      	mov	sp, r7
20000918:	bd80      	pop	{r7, pc}

2000091a <graphic_wait_ready>:

static void graphic_wait_ready(void) {
2000091a:	b580      	push	{r7, lr}
2000091c:	b082      	sub	sp, #8
2000091e:	af00      	add	r7, sp, #0
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000920:	2040      	movs	r0, #64	; 0x40
20000922:	f7ff ff73 	bl	2000080c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000926:	4b14      	ldr	r3, [pc, #80]	; (20000978 <graphic_wait_ready+0x5e>)
20000928:	4a14      	ldr	r2, [pc, #80]	; (2000097c <graphic_wait_ready+0x62>)
2000092a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_RS);
2000092c:	2001      	movs	r0, #1
2000092e:	f7ff ff6d 	bl	2000080c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RW);
20000932:	2002      	movs	r0, #2
20000934:	f7ff ff48 	bl	200007c8 <graphic_ctrl_bit_set>
    delay_500ns();
20000938:	f7ff fd1a 	bl	20000370 <delay_500ns>
    while(1) {
        graphic_ctrl_bit_set(B_E);
2000093c:	2040      	movs	r0, #64	; 0x40
2000093e:	f7ff ff43 	bl	200007c8 <graphic_ctrl_bit_set>
        delay_500ns();
20000942:	f7ff fd15 	bl	20000370 <delay_500ns>
        c = GPIO_E->idrHigh & LCD_BUSY;
20000946:	4b0c      	ldr	r3, [pc, #48]	; (20000978 <graphic_wait_ready+0x5e>)
20000948:	7c5b      	ldrb	r3, [r3, #17]
2000094a:	b2da      	uxtb	r2, r3
2000094c:	1dfb      	adds	r3, r7, #7
2000094e:	217f      	movs	r1, #127	; 0x7f
20000950:	438a      	bics	r2, r1
20000952:	701a      	strb	r2, [r3, #0]
        graphic_ctrl_bit_clear(B_E);
20000954:	2040      	movs	r0, #64	; 0x40
20000956:	f7ff ff59 	bl	2000080c <graphic_ctrl_bit_clear>
        delay_500ns();
2000095a:	f7ff fd09 	bl	20000370 <delay_500ns>
        if( c == 0 ) break;
2000095e:	1dfb      	adds	r3, r7, #7
20000960:	781b      	ldrb	r3, [r3, #0]
20000962:	2b00      	cmp	r3, #0
20000964:	d000      	beq.n	20000968 <graphic_wait_ready+0x4e>
        graphic_ctrl_bit_set(B_E);
20000966:	e7e9      	b.n	2000093c <graphic_wait_ready+0x22>
        if( c == 0 ) break;
20000968:	46c0      	nop			; (mov r8, r8)
    }
    GPIO_E->moder = 0x55555555; // 15-0 outputs
2000096a:	4b03      	ldr	r3, [pc, #12]	; (20000978 <graphic_wait_ready+0x5e>)
2000096c:	4a04      	ldr	r2, [pc, #16]	; (20000980 <graphic_wait_ready+0x66>)
2000096e:	601a      	str	r2, [r3, #0]
}
20000970:	46c0      	nop			; (mov r8, r8)
20000972:	46bd      	mov	sp, r7
20000974:	b002      	add	sp, #8
20000976:	bd80      	pop	{r7, pc}
20000978:	40021000 	andmi	r1, r2, r0
2000097c:	00005555 	andeq	r5, r0, r5, asr r5
20000980:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000984 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000984:	b580      	push	{r7, lr}
20000986:	b084      	sub	sp, #16
20000988:	af00      	add	r7, sp, #0
2000098a:	0002      	movs	r2, r0
2000098c:	1dfb      	adds	r3, r7, #7
2000098e:	701a      	strb	r2, [r3, #0]
    uint8_t c;
    graphic_ctrl_bit_clear(B_E);
20000990:	2040      	movs	r0, #64	; 0x40
20000992:	f7ff ff3b 	bl	2000080c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000996:	4b1c      	ldr	r3, [pc, #112]	; (20000a08 <graphic_read+0x84>)
20000998:	4a1c      	ldr	r2, [pc, #112]	; (20000a0c <graphic_read+0x88>)
2000099a:	601a      	str	r2, [r3, #0]
    graphic_ctrl_bit_set(B_RS|B_RW);
2000099c:	2003      	movs	r0, #3
2000099e:	f7ff ff13 	bl	200007c8 <graphic_ctrl_bit_set>
    select_controller(controller);
200009a2:	1dfb      	adds	r3, r7, #7
200009a4:	781b      	ldrb	r3, [r3, #0]
200009a6:	0018      	movs	r0, r3
200009a8:	f7ff ff58 	bl	2000085c <select_controller>
    delay_500ns();
200009ac:	f7ff fce0 	bl	20000370 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
200009b0:	2040      	movs	r0, #64	; 0x40
200009b2:	f7ff ff09 	bl	200007c8 <graphic_ctrl_bit_set>
    delay_500ns();
200009b6:	f7ff fcdb 	bl	20000370 <delay_500ns>
    c = GPIO_E->idrHigh;
200009ba:	4a13      	ldr	r2, [pc, #76]	; (20000a08 <graphic_read+0x84>)
200009bc:	230f      	movs	r3, #15
200009be:	18fb      	adds	r3, r7, r3
200009c0:	7c52      	ldrb	r2, [r2, #17]
200009c2:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
200009c4:	2040      	movs	r0, #64	; 0x40
200009c6:	f7ff ff21 	bl	2000080c <graphic_ctrl_bit_clear>
    GPIO_E->moder = 0x55555555; // 15-0 outputs
200009ca:	4b0f      	ldr	r3, [pc, #60]	; (20000a08 <graphic_read+0x84>)
200009cc:	4a10      	ldr	r2, [pc, #64]	; (20000a10 <graphic_read+0x8c>)
200009ce:	601a      	str	r2, [r3, #0]

    if( controller & B_CS1 ) {
200009d0:	1dfb      	adds	r3, r7, #7
200009d2:	781b      	ldrb	r3, [r3, #0]
200009d4:	2208      	movs	r2, #8
200009d6:	4013      	ands	r3, r2
200009d8:	d004      	beq.n	200009e4 <graphic_read+0x60>
        select_controller(B_CS1);
200009da:	2008      	movs	r0, #8
200009dc:	f7ff ff3e 	bl	2000085c <select_controller>
        graphic_wait_ready();
200009e0:	f7ff ff9b 	bl	2000091a <graphic_wait_ready>
    }
    if( controller & B_CS2 ) {
200009e4:	1dfb      	adds	r3, r7, #7
200009e6:	781b      	ldrb	r3, [r3, #0]
200009e8:	2210      	movs	r2, #16
200009ea:	4013      	ands	r3, r2
200009ec:	d004      	beq.n	200009f8 <graphic_read+0x74>
        select_controller(B_CS2);
200009ee:	2010      	movs	r0, #16
200009f0:	f7ff ff34 	bl	2000085c <select_controller>
        graphic_wait_ready();
200009f4:	f7ff ff91 	bl	2000091a <graphic_wait_ready>
    }
    return c;
200009f8:	230f      	movs	r3, #15
200009fa:	18fb      	adds	r3, r7, r3
200009fc:	781b      	ldrb	r3, [r3, #0]
}
200009fe:	0018      	movs	r0, r3
20000a00:	46bd      	mov	sp, r7
20000a02:	b004      	add	sp, #16
20000a04:	bd80      	pop	{r7, pc}
20000a06:	46c0      	nop			; (mov r8, r8)
20000a08:	40021000 	andmi	r1, r2, r0
20000a0c:	00005555 	andeq	r5, r0, r5, asr r5
20000a10:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000a14 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20000a14:	b580      	push	{r7, lr}
20000a16:	b082      	sub	sp, #8
20000a18:	af00      	add	r7, sp, #0
20000a1a:	0002      	movs	r2, r0
20000a1c:	1dfb      	adds	r3, r7, #7
20000a1e:	701a      	strb	r2, [r3, #0]
    graphic_read(controller);
20000a20:	1dfb      	adds	r3, r7, #7
20000a22:	781b      	ldrb	r3, [r3, #0]
20000a24:	0018      	movs	r0, r3
20000a26:	f7ff ffad 	bl	20000984 <graphic_read>
    return graphic_read(controller);
20000a2a:	1dfb      	adds	r3, r7, #7
20000a2c:	781b      	ldrb	r3, [r3, #0]
20000a2e:	0018      	movs	r0, r3
20000a30:	f7ff ffa8 	bl	20000984 <graphic_read>
20000a34:	0003      	movs	r3, r0
}
20000a36:	0018      	movs	r0, r3
20000a38:	46bd      	mov	sp, r7
20000a3a:	b002      	add	sp, #8
20000a3c:	bd80      	pop	{r7, pc}

20000a3e <graphic_write>:

void graphic_write(uint8_t value, uint8_t controller){
20000a3e:	b580      	push	{r7, lr}
20000a40:	b082      	sub	sp, #8
20000a42:	af00      	add	r7, sp, #0
20000a44:	0002      	movs	r2, r0
20000a46:	1dfb      	adds	r3, r7, #7
20000a48:	701a      	strb	r2, [r3, #0]
20000a4a:	1dbb      	adds	r3, r7, #6
20000a4c:	1c0a      	adds	r2, r1, #0
20000a4e:	701a      	strb	r2, [r3, #0]
    GPIO_E->odrHigh = value;
20000a50:	4a17      	ldr	r2, [pc, #92]	; (20000ab0 <graphic_write+0x72>)
20000a52:	1dfb      	adds	r3, r7, #7
20000a54:	781b      	ldrb	r3, [r3, #0]
20000a56:	7553      	strb	r3, [r2, #21]
    delay_500ns();
20000a58:	f7ff fc8a 	bl	20000370 <delay_500ns>
    graphic_ctrl_bit_set(B_E);
20000a5c:	2040      	movs	r0, #64	; 0x40
20000a5e:	f7ff feb3 	bl	200007c8 <graphic_ctrl_bit_set>
    delay_500ns();
20000a62:	f7ff fc85 	bl	20000370 <delay_500ns>
    graphic_ctrl_bit_clear(B_E);
20000a66:	2040      	movs	r0, #64	; 0x40
20000a68:	f7ff fed0 	bl	2000080c <graphic_ctrl_bit_clear>
    
    if(controller & B_CS1){
20000a6c:	1dbb      	adds	r3, r7, #6
20000a6e:	781b      	ldrb	r3, [r3, #0]
20000a70:	2208      	movs	r2, #8
20000a72:	4013      	ands	r3, r2
20000a74:	d004      	beq.n	20000a80 <graphic_write+0x42>
        select_controller(B_CS1);
20000a76:	2008      	movs	r0, #8
20000a78:	f7ff fef0 	bl	2000085c <select_controller>
        graphic_wait_ready();
20000a7c:	f7ff ff4d 	bl	2000091a <graphic_wait_ready>
    }
    if(controller & B_CS2){
20000a80:	1dbb      	adds	r3, r7, #6
20000a82:	781b      	ldrb	r3, [r3, #0]
20000a84:	2210      	movs	r2, #16
20000a86:	4013      	ands	r3, r2
20000a88:	d004      	beq.n	20000a94 <graphic_write+0x56>
        select_controller(B_CS2);
20000a8a:	2010      	movs	r0, #16
20000a8c:	f7ff fee6 	bl	2000085c <select_controller>
        graphic_wait_ready();
20000a90:	f7ff ff43 	bl	2000091a <graphic_wait_ready>
    }
        
    GPIO_E->odrHigh = 0;
20000a94:	4b06      	ldr	r3, [pc, #24]	; (20000ab0 <graphic_write+0x72>)
20000a96:	2200      	movs	r2, #0
20000a98:	755a      	strb	r2, [r3, #21]
    graphic_ctrl_bit_set(B_E);
20000a9a:	2040      	movs	r0, #64	; 0x40
20000a9c:	f7ff fe94 	bl	200007c8 <graphic_ctrl_bit_set>
    select_controller(0);    
20000aa0:	2000      	movs	r0, #0
20000aa2:	f7ff fedb 	bl	2000085c <select_controller>
    
}
20000aa6:	46c0      	nop			; (mov r8, r8)
20000aa8:	46bd      	mov	sp, r7
20000aaa:	b002      	add	sp, #8
20000aac:	bd80      	pop	{r7, pc}
20000aae:	46c0      	nop			; (mov r8, r8)
20000ab0:	40021000 	andmi	r1, r2, r0

20000ab4 <graphic_write_command>:
void graphic_write_command(uint8_t command, uint8_t controller){
20000ab4:	b580      	push	{r7, lr}
20000ab6:	b082      	sub	sp, #8
20000ab8:	af00      	add	r7, sp, #0
20000aba:	0002      	movs	r2, r0
20000abc:	1dfb      	adds	r3, r7, #7
20000abe:	701a      	strb	r2, [r3, #0]
20000ac0:	1dbb      	adds	r3, r7, #6
20000ac2:	1c0a      	adds	r2, r1, #0
20000ac4:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000ac6:	2040      	movs	r0, #64	; 0x40
20000ac8:	f7ff fea0 	bl	2000080c <graphic_ctrl_bit_clear>
    select_controller(controller);
20000acc:	1dbb      	adds	r3, r7, #6
20000ace:	781b      	ldrb	r3, [r3, #0]
20000ad0:	0018      	movs	r0, r3
20000ad2:	f7ff fec3 	bl	2000085c <select_controller>
    graphic_ctrl_bit_clear(B_RS | B_RW);
20000ad6:	2003      	movs	r0, #3
20000ad8:	f7ff fe98 	bl	2000080c <graphic_ctrl_bit_clear>
    graphic_write(command, controller);
20000adc:	1dbb      	adds	r3, r7, #6
20000ade:	781a      	ldrb	r2, [r3, #0]
20000ae0:	1dfb      	adds	r3, r7, #7
20000ae2:	781b      	ldrb	r3, [r3, #0]
20000ae4:	0011      	movs	r1, r2
20000ae6:	0018      	movs	r0, r3
20000ae8:	f7ff ffa9 	bl	20000a3e <graphic_write>
}
20000aec:	46c0      	nop			; (mov r8, r8)
20000aee:	46bd      	mov	sp, r7
20000af0:	b002      	add	sp, #8
20000af2:	bd80      	pop	{r7, pc}

20000af4 <graphic_write_data>:
void graphic_write_data(uint8_t data, uint8_t controller){
20000af4:	b580      	push	{r7, lr}
20000af6:	b082      	sub	sp, #8
20000af8:	af00      	add	r7, sp, #0
20000afa:	0002      	movs	r2, r0
20000afc:	1dfb      	adds	r3, r7, #7
20000afe:	701a      	strb	r2, [r3, #0]
20000b00:	1dbb      	adds	r3, r7, #6
20000b02:	1c0a      	adds	r2, r1, #0
20000b04:	701a      	strb	r2, [r3, #0]
    graphic_ctrl_bit_clear(B_E);
20000b06:	2040      	movs	r0, #64	; 0x40
20000b08:	f7ff fe80 	bl	2000080c <graphic_ctrl_bit_clear>
    select_controller(controller);
20000b0c:	1dbb      	adds	r3, r7, #6
20000b0e:	781b      	ldrb	r3, [r3, #0]
20000b10:	0018      	movs	r0, r3
20000b12:	f7ff fea3 	bl	2000085c <select_controller>
    graphic_ctrl_bit_clear(B_RW);
20000b16:	2002      	movs	r0, #2
20000b18:	f7ff fe78 	bl	2000080c <graphic_ctrl_bit_clear>
    graphic_ctrl_bit_set(B_RS);
20000b1c:	2001      	movs	r0, #1
20000b1e:	f7ff fe53 	bl	200007c8 <graphic_ctrl_bit_set>
    graphic_write(data, controller);
20000b22:	1dbb      	adds	r3, r7, #6
20000b24:	781a      	ldrb	r2, [r3, #0]
20000b26:	1dfb      	adds	r3, r7, #7
20000b28:	781b      	ldrb	r3, [r3, #0]
20000b2a:	0011      	movs	r1, r2
20000b2c:	0018      	movs	r0, r3
20000b2e:	f7ff ff86 	bl	20000a3e <graphic_write>
}
20000b32:	46c0      	nop			; (mov r8, r8)
20000b34:	46bd      	mov	sp, r7
20000b36:	b002      	add	sp, #8
20000b38:	bd80      	pop	{r7, pc}

20000b3a <graphic_clear_screen>:
void graphic_clear_screen(void){
20000b3a:	b580      	push	{r7, lr}
20000b3c:	b082      	sub	sp, #8
20000b3e:	af00      	add	r7, sp, #0
    for(int i = 1; i <= 128; i++){
20000b40:	2301      	movs	r3, #1
20000b42:	607b      	str	r3, [r7, #4]
20000b44:	e011      	b.n	20000b6a <graphic_clear_screen+0x30>
		for(int j = 1; j <= 64; j++){
20000b46:	2301      	movs	r3, #1
20000b48:	603b      	str	r3, [r7, #0]
20000b4a:	e008      	b.n	20000b5e <graphic_clear_screen+0x24>
			pixel(i, j, 0);
20000b4c:	6839      	ldr	r1, [r7, #0]
20000b4e:	687b      	ldr	r3, [r7, #4]
20000b50:	2200      	movs	r2, #0
20000b52:	0018      	movs	r0, r3
20000b54:	f000 f834 	bl	20000bc0 <pixel>
		for(int j = 1; j <= 64; j++){
20000b58:	683b      	ldr	r3, [r7, #0]
20000b5a:	3301      	adds	r3, #1
20000b5c:	603b      	str	r3, [r7, #0]
20000b5e:	683b      	ldr	r3, [r7, #0]
20000b60:	2b40      	cmp	r3, #64	; 0x40
20000b62:	ddf3      	ble.n	20000b4c <graphic_clear_screen+0x12>
    for(int i = 1; i <= 128; i++){
20000b64:	687b      	ldr	r3, [r7, #4]
20000b66:	3301      	adds	r3, #1
20000b68:	607b      	str	r3, [r7, #4]
20000b6a:	687b      	ldr	r3, [r7, #4]
20000b6c:	2b80      	cmp	r3, #128	; 0x80
20000b6e:	ddea      	ble.n	20000b46 <graphic_clear_screen+0xc>
		}
	}
}
20000b70:	46c0      	nop			; (mov r8, r8)
20000b72:	46bd      	mov	sp, r7
20000b74:	b002      	add	sp, #8
20000b76:	bd80      	pop	{r7, pc}

20000b78 <clear_backBuffer>:


void clear_backBuffer() {
20000b78:	b580      	push	{r7, lr}
20000b7a:	b082      	sub	sp, #8
20000b7c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 256; i++){
20000b7e:	2300      	movs	r3, #0
20000b80:	607b      	str	r3, [r7, #4]
20000b82:	e013      	b.n	20000bac <clear_backBuffer+0x34>
        for(int j = 0; j < 8; j++)
20000b84:	2300      	movs	r3, #0
20000b86:	603b      	str	r3, [r7, #0]
20000b88:	e00a      	b.n	20000ba0 <clear_backBuffer+0x28>
			 backBuffer[i][j] = 0;
20000b8a:	4a0c      	ldr	r2, [pc, #48]	; (20000bbc <clear_backBuffer+0x44>)
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	00db      	lsls	r3, r3, #3
20000b90:	18d2      	adds	r2, r2, r3
20000b92:	683b      	ldr	r3, [r7, #0]
20000b94:	18d3      	adds	r3, r2, r3
20000b96:	2200      	movs	r2, #0
20000b98:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < 8; j++)
20000b9a:	683b      	ldr	r3, [r7, #0]
20000b9c:	3301      	adds	r3, #1
20000b9e:	603b      	str	r3, [r7, #0]
20000ba0:	683b      	ldr	r3, [r7, #0]
20000ba2:	2b07      	cmp	r3, #7
20000ba4:	ddf1      	ble.n	20000b8a <clear_backBuffer+0x12>
    for (int i = 0; i < 256; i++){
20000ba6:	687b      	ldr	r3, [r7, #4]
20000ba8:	3301      	adds	r3, #1
20000baa:	607b      	str	r3, [r7, #4]
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	2bff      	cmp	r3, #255	; 0xff
20000bb0:	dde8      	ble.n	20000b84 <clear_backBuffer+0xc>
	}
}
20000bb2:	46c0      	nop			; (mov r8, r8)
20000bb4:	46bd      	mov	sp, r7
20000bb6:	b002      	add	sp, #8
20000bb8:	bd80      	pop	{r7, pc}
20000bba:	46c0      	nop			; (mov r8, r8)
20000bbc:	200011ac 	andcs	r1, r0, ip, lsr #3

20000bc0 <pixel>:

void pixel(int x, int y, int set) {
20000bc0:	b580      	push	{r7, lr}
20000bc2:	b086      	sub	sp, #24
20000bc4:	af00      	add	r7, sp, #0
20000bc6:	60f8      	str	r0, [r7, #12]
20000bc8:	60b9      	str	r1, [r7, #8]
20000bca:	607a      	str	r2, [r7, #4]
    
    uint8_t mask = 1 << ((y-1)%8);
20000bcc:	68bb      	ldr	r3, [r7, #8]
20000bce:	3b01      	subs	r3, #1
20000bd0:	4a26      	ldr	r2, [pc, #152]	; (20000c6c <pixel+0xac>)
20000bd2:	4013      	ands	r3, r2
20000bd4:	d504      	bpl.n	20000be0 <pixel+0x20>
20000bd6:	3b01      	subs	r3, #1
20000bd8:	2208      	movs	r2, #8
20000bda:	4252      	negs	r2, r2
20000bdc:	4313      	orrs	r3, r2
20000bde:	3301      	adds	r3, #1
20000be0:	001a      	movs	r2, r3
20000be2:	2301      	movs	r3, #1
20000be4:	4093      	lsls	r3, r2
20000be6:	001a      	movs	r2, r3
20000be8:	2317      	movs	r3, #23
20000bea:	18fb      	adds	r3, r7, r3
20000bec:	701a      	strb	r2, [r3, #0]
    
    if(set){
20000bee:	687b      	ldr	r3, [r7, #4]
20000bf0:	2b00      	cmp	r3, #0
20000bf2:	d019      	beq.n	20000c28 <pixel+0x68>
        backBuffer[64+(y-1)][(x-1)/8] |= mask;
20000bf4:	68bb      	ldr	r3, [r7, #8]
20000bf6:	333f      	adds	r3, #63	; 0x3f
20000bf8:	001a      	movs	r2, r3
20000bfa:	68fb      	ldr	r3, [r7, #12]
20000bfc:	3b01      	subs	r3, #1
20000bfe:	2b00      	cmp	r3, #0
20000c00:	da00      	bge.n	20000c04 <pixel+0x44>
20000c02:	3307      	adds	r3, #7
20000c04:	10db      	asrs	r3, r3, #3
20000c06:	491a      	ldr	r1, [pc, #104]	; (20000c70 <pixel+0xb0>)
20000c08:	00d2      	lsls	r2, r2, #3
20000c0a:	188a      	adds	r2, r1, r2
20000c0c:	5cd0      	ldrb	r0, [r2, r3]
20000c0e:	68ba      	ldr	r2, [r7, #8]
20000c10:	323f      	adds	r2, #63	; 0x3f
20000c12:	2117      	movs	r1, #23
20000c14:	1879      	adds	r1, r7, r1
20000c16:	7809      	ldrb	r1, [r1, #0]
20000c18:	4301      	orrs	r1, r0
20000c1a:	b2c8      	uxtb	r0, r1
20000c1c:	4914      	ldr	r1, [pc, #80]	; (20000c70 <pixel+0xb0>)
20000c1e:	00d2      	lsls	r2, r2, #3
20000c20:	188a      	adds	r2, r1, r2
20000c22:	1c01      	adds	r1, r0, #0
20000c24:	54d1      	strb	r1, [r2, r3]
    }
    else{
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
    }
}
20000c26:	e01d      	b.n	20000c64 <pixel+0xa4>
        backBuffer[64+(y-1)][(x-1)/8] &= ~mask;
20000c28:	68bb      	ldr	r3, [r7, #8]
20000c2a:	333f      	adds	r3, #63	; 0x3f
20000c2c:	001a      	movs	r2, r3
20000c2e:	68fb      	ldr	r3, [r7, #12]
20000c30:	3b01      	subs	r3, #1
20000c32:	2b00      	cmp	r3, #0
20000c34:	da00      	bge.n	20000c38 <pixel+0x78>
20000c36:	3307      	adds	r3, #7
20000c38:	10db      	asrs	r3, r3, #3
20000c3a:	490d      	ldr	r1, [pc, #52]	; (20000c70 <pixel+0xb0>)
20000c3c:	00d2      	lsls	r2, r2, #3
20000c3e:	188a      	adds	r2, r1, r2
20000c40:	5cd2      	ldrb	r2, [r2, r3]
20000c42:	b252      	sxtb	r2, r2
20000c44:	2117      	movs	r1, #23
20000c46:	1879      	adds	r1, r7, r1
20000c48:	7809      	ldrb	r1, [r1, #0]
20000c4a:	b249      	sxtb	r1, r1
20000c4c:	43c9      	mvns	r1, r1
20000c4e:	b249      	sxtb	r1, r1
20000c50:	400a      	ands	r2, r1
20000c52:	b251      	sxtb	r1, r2
20000c54:	68ba      	ldr	r2, [r7, #8]
20000c56:	323f      	adds	r2, #63	; 0x3f
20000c58:	b2c8      	uxtb	r0, r1
20000c5a:	4905      	ldr	r1, [pc, #20]	; (20000c70 <pixel+0xb0>)
20000c5c:	00d2      	lsls	r2, r2, #3
20000c5e:	188a      	adds	r2, r1, r2
20000c60:	1c01      	adds	r1, r0, #0
20000c62:	54d1      	strb	r1, [r2, r3]
}
20000c64:	46c0      	nop			; (mov r8, r8)
20000c66:	46bd      	mov	sp, r7
20000c68:	b006      	add	sp, #24
20000c6a:	bd80      	pop	{r7, pc}
20000c6c:	80000007 	andhi	r0, r0, r7
20000c70:	200011ac 	andcs	r1, r0, ip, lsr #3

20000c74 <byteToBuffer>:

void byteToBuffer(int addr, int page, char c){
20000c74:	b580      	push	{r7, lr}
20000c76:	b084      	sub	sp, #16
20000c78:	af00      	add	r7, sp, #0
20000c7a:	60f8      	str	r0, [r7, #12]
20000c7c:	60b9      	str	r1, [r7, #8]
20000c7e:	1dfb      	adds	r3, r7, #7
20000c80:	701a      	strb	r2, [r3, #0]
	backBuffer[addr][page] = c;
20000c82:	4a06      	ldr	r2, [pc, #24]	; (20000c9c <byteToBuffer+0x28>)
20000c84:	68fb      	ldr	r3, [r7, #12]
20000c86:	00db      	lsls	r3, r3, #3
20000c88:	18d2      	adds	r2, r2, r3
20000c8a:	68bb      	ldr	r3, [r7, #8]
20000c8c:	18d3      	adds	r3, r2, r3
20000c8e:	1dfa      	adds	r2, r7, #7
20000c90:	7812      	ldrb	r2, [r2, #0]
20000c92:	701a      	strb	r2, [r3, #0]
}
20000c94:	46c0      	nop			; (mov r8, r8)
20000c96:	46bd      	mov	sp, r7
20000c98:	b004      	add	sp, #16
20000c9a:	bd80      	pop	{r7, pc}
20000c9c:	200011ac 	andcs	r1, r0, ip, lsr #3

20000ca0 <byteToScreenBuffer>:
void byteToScreenBuffer(int addr, int page, char c){
20000ca0:	b580      	push	{r7, lr}
20000ca2:	b084      	sub	sp, #16
20000ca4:	af00      	add	r7, sp, #0
20000ca6:	60f8      	str	r0, [r7, #12]
20000ca8:	60b9      	str	r1, [r7, #8]
20000caa:	1dfb      	adds	r3, r7, #7
20000cac:	701a      	strb	r2, [r3, #0]
	backBuffer[64+addr][page] = c;
20000cae:	68fb      	ldr	r3, [r7, #12]
20000cb0:	3340      	adds	r3, #64	; 0x40
20000cb2:	4a06      	ldr	r2, [pc, #24]	; (20000ccc <byteToScreenBuffer+0x2c>)
20000cb4:	00db      	lsls	r3, r3, #3
20000cb6:	18d2      	adds	r2, r2, r3
20000cb8:	68bb      	ldr	r3, [r7, #8]
20000cba:	18d3      	adds	r3, r2, r3
20000cbc:	1dfa      	adds	r2, r7, #7
20000cbe:	7812      	ldrb	r2, [r2, #0]
20000cc0:	701a      	strb	r2, [r3, #0]
}
20000cc2:	46c0      	nop			; (mov r8, r8)
20000cc4:	46bd      	mov	sp, r7
20000cc6:	b004      	add	sp, #16
20000cc8:	bd80      	pop	{r7, pc}
20000cca:	46c0      	nop			; (mov r8, r8)
20000ccc:	200011ac 	andcs	r1, r0, ip, lsr #3

20000cd0 <graphic_draw_screen>:

void graphic_draw_screen(void) {
20000cd0:	b590      	push	{r4, r7, lr}
20000cd2:	b085      	sub	sp, #20
20000cd4:	af00      	add	r7, sp, #0
    uint8_t i, j, controller, c;
    unsigned int k = 0;
20000cd6:	2300      	movs	r3, #0
20000cd8:	60bb      	str	r3, [r7, #8]
    for(c = 0; c < 2; c++) {
20000cda:	230d      	movs	r3, #13
20000cdc:	18fb      	adds	r3, r7, r3
20000cde:	2200      	movs	r2, #0
20000ce0:	701a      	strb	r2, [r3, #0]
20000ce2:	e05a      	b.n	20000d9a <graphic_draw_screen+0xca>
        controller = (c == 0) ? B_CS1 : B_CS2;
20000ce4:	230d      	movs	r3, #13
20000ce6:	18fb      	adds	r3, r7, r3
20000ce8:	781b      	ldrb	r3, [r3, #0]
20000cea:	2b00      	cmp	r3, #0
20000cec:	d101      	bne.n	20000cf2 <graphic_draw_screen+0x22>
20000cee:	2208      	movs	r2, #8
20000cf0:	e000      	b.n	20000cf4 <graphic_draw_screen+0x24>
20000cf2:	2210      	movs	r2, #16
20000cf4:	1dfb      	adds	r3, r7, #7
20000cf6:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < 8; j++) {
20000cf8:	230e      	movs	r3, #14
20000cfa:	18fb      	adds	r3, r7, r3
20000cfc:	2200      	movs	r2, #0
20000cfe:	701a      	strb	r2, [r3, #0]
20000d00:	e040      	b.n	20000d84 <graphic_draw_screen+0xb4>
            graphic_write_command(LCD_SET_PAGE | j, controller);
20000d02:	230e      	movs	r3, #14
20000d04:	18fb      	adds	r3, r7, r3
20000d06:	781b      	ldrb	r3, [r3, #0]
20000d08:	2248      	movs	r2, #72	; 0x48
20000d0a:	4252      	negs	r2, r2
20000d0c:	4313      	orrs	r3, r2
20000d0e:	b2da      	uxtb	r2, r3
20000d10:	1dfb      	adds	r3, r7, #7
20000d12:	781b      	ldrb	r3, [r3, #0]
20000d14:	0019      	movs	r1, r3
20000d16:	0010      	movs	r0, r2
20000d18:	f7ff fecc 	bl	20000ab4 <graphic_write_command>
            graphic_write_command(LCD_SET_ADD | 0, controller);
20000d1c:	1dfb      	adds	r3, r7, #7
20000d1e:	781b      	ldrb	r3, [r3, #0]
20000d20:	0019      	movs	r1, r3
20000d22:	2040      	movs	r0, #64	; 0x40
20000d24:	f7ff fec6 	bl	20000ab4 <graphic_write_command>
            for(i = 0; i <= 63; i++, k++) {
20000d28:	230f      	movs	r3, #15
20000d2a:	18fb      	adds	r3, r7, r3
20000d2c:	2200      	movs	r2, #0
20000d2e:	701a      	strb	r2, [r3, #0]
20000d30:	e01d      	b.n	20000d6e <graphic_draw_screen+0x9e>
                graphic_write_data(backBuffer[64+c*64 + i][j], controller);
20000d32:	230d      	movs	r3, #13
20000d34:	18fb      	adds	r3, r7, r3
20000d36:	781b      	ldrb	r3, [r3, #0]
20000d38:	3301      	adds	r3, #1
20000d3a:	019a      	lsls	r2, r3, #6
20000d3c:	240f      	movs	r4, #15
20000d3e:	193b      	adds	r3, r7, r4
20000d40:	781b      	ldrb	r3, [r3, #0]
20000d42:	18d2      	adds	r2, r2, r3
20000d44:	230e      	movs	r3, #14
20000d46:	18fb      	adds	r3, r7, r3
20000d48:	781b      	ldrb	r3, [r3, #0]
20000d4a:	4918      	ldr	r1, [pc, #96]	; (20000dac <graphic_draw_screen+0xdc>)
20000d4c:	00d2      	lsls	r2, r2, #3
20000d4e:	188a      	adds	r2, r1, r2
20000d50:	5cd2      	ldrb	r2, [r2, r3]
20000d52:	1dfb      	adds	r3, r7, #7
20000d54:	781b      	ldrb	r3, [r3, #0]
20000d56:	0019      	movs	r1, r3
20000d58:	0010      	movs	r0, r2
20000d5a:	f7ff fecb 	bl	20000af4 <graphic_write_data>
            for(i = 0; i <= 63; i++, k++) {
20000d5e:	193b      	adds	r3, r7, r4
20000d60:	781a      	ldrb	r2, [r3, #0]
20000d62:	193b      	adds	r3, r7, r4
20000d64:	3201      	adds	r2, #1
20000d66:	701a      	strb	r2, [r3, #0]
20000d68:	68bb      	ldr	r3, [r7, #8]
20000d6a:	3301      	adds	r3, #1
20000d6c:	60bb      	str	r3, [r7, #8]
20000d6e:	230f      	movs	r3, #15
20000d70:	18fb      	adds	r3, r7, r3
20000d72:	781b      	ldrb	r3, [r3, #0]
20000d74:	2b3f      	cmp	r3, #63	; 0x3f
20000d76:	d9dc      	bls.n	20000d32 <graphic_draw_screen+0x62>
        for(j = 0; j < 8; j++) {
20000d78:	210e      	movs	r1, #14
20000d7a:	187b      	adds	r3, r7, r1
20000d7c:	781a      	ldrb	r2, [r3, #0]
20000d7e:	187b      	adds	r3, r7, r1
20000d80:	3201      	adds	r2, #1
20000d82:	701a      	strb	r2, [r3, #0]
20000d84:	230e      	movs	r3, #14
20000d86:	18fb      	adds	r3, r7, r3
20000d88:	781b      	ldrb	r3, [r3, #0]
20000d8a:	2b07      	cmp	r3, #7
20000d8c:	d9b9      	bls.n	20000d02 <graphic_draw_screen+0x32>
    for(c = 0; c < 2; c++) {
20000d8e:	210d      	movs	r1, #13
20000d90:	187b      	adds	r3, r7, r1
20000d92:	781a      	ldrb	r2, [r3, #0]
20000d94:	187b      	adds	r3, r7, r1
20000d96:	3201      	adds	r2, #1
20000d98:	701a      	strb	r2, [r3, #0]
20000d9a:	230d      	movs	r3, #13
20000d9c:	18fb      	adds	r3, r7, r3
20000d9e:	781b      	ldrb	r3, [r3, #0]
20000da0:	2b01      	cmp	r3, #1
20000da2:	d99f      	bls.n	20000ce4 <graphic_draw_screen+0x14>
            }
        }
    }
}
20000da4:	46c0      	nop			; (mov r8, r8)
20000da6:	46bd      	mov	sp, r7
20000da8:	b005      	add	sp, #20
20000daa:	bd90      	pop	{r4, r7, pc}
20000dac:	200011ac 	andcs	r1, r0, ip, lsr #3

20000db0 <shiftRight>:


*/


void shiftRight(){
20000db0:	b580      	push	{r7, lr}
20000db2:	b084      	sub	sp, #16
20000db4:	af00      	add	r7, sp, #0
	for(int i = 255; i > 0; i--){
20000db6:	23ff      	movs	r3, #255	; 0xff
20000db8:	60fb      	str	r3, [r7, #12]
20000dba:	e01b      	b.n	20000df4 <shiftRight+0x44>
		for(int j = 0; j < 8; j++){
20000dbc:	2300      	movs	r3, #0
20000dbe:	60bb      	str	r3, [r7, #8]
20000dc0:	e012      	b.n	20000de8 <shiftRight+0x38>
			backBuffer[i][j] = backBuffer[i-1][j];
20000dc2:	68fb      	ldr	r3, [r7, #12]
20000dc4:	3b01      	subs	r3, #1
20000dc6:	4a16      	ldr	r2, [pc, #88]	; (20000e20 <shiftRight+0x70>)
20000dc8:	00db      	lsls	r3, r3, #3
20000dca:	18d2      	adds	r2, r2, r3
20000dcc:	68bb      	ldr	r3, [r7, #8]
20000dce:	18d3      	adds	r3, r2, r3
20000dd0:	7819      	ldrb	r1, [r3, #0]
20000dd2:	4a13      	ldr	r2, [pc, #76]	; (20000e20 <shiftRight+0x70>)
20000dd4:	68fb      	ldr	r3, [r7, #12]
20000dd6:	00db      	lsls	r3, r3, #3
20000dd8:	18d2      	adds	r2, r2, r3
20000dda:	68bb      	ldr	r3, [r7, #8]
20000ddc:	18d3      	adds	r3, r2, r3
20000dde:	1c0a      	adds	r2, r1, #0
20000de0:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20000de2:	68bb      	ldr	r3, [r7, #8]
20000de4:	3301      	adds	r3, #1
20000de6:	60bb      	str	r3, [r7, #8]
20000de8:	68bb      	ldr	r3, [r7, #8]
20000dea:	2b07      	cmp	r3, #7
20000dec:	dde9      	ble.n	20000dc2 <shiftRight+0x12>
	for(int i = 255; i > 0; i--){
20000dee:	68fb      	ldr	r3, [r7, #12]
20000df0:	3b01      	subs	r3, #1
20000df2:	60fb      	str	r3, [r7, #12]
20000df4:	68fb      	ldr	r3, [r7, #12]
20000df6:	2b00      	cmp	r3, #0
20000df8:	dce0      	bgt.n	20000dbc <shiftRight+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
20000dfa:	2300      	movs	r3, #0
20000dfc:	607b      	str	r3, [r7, #4]
20000dfe:	e007      	b.n	20000e10 <shiftRight+0x60>
        backBuffer[0][j] = 0; 
20000e00:	4a07      	ldr	r2, [pc, #28]	; (20000e20 <shiftRight+0x70>)
20000e02:	687b      	ldr	r3, [r7, #4]
20000e04:	18d3      	adds	r3, r2, r3
20000e06:	2200      	movs	r2, #0
20000e08:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20000e0a:	687b      	ldr	r3, [r7, #4]
20000e0c:	3301      	adds	r3, #1
20000e0e:	607b      	str	r3, [r7, #4]
20000e10:	687b      	ldr	r3, [r7, #4]
20000e12:	2b07      	cmp	r3, #7
20000e14:	ddf4      	ble.n	20000e00 <shiftRight+0x50>
    }
}
20000e16:	46c0      	nop			; (mov r8, r8)
20000e18:	46bd      	mov	sp, r7
20000e1a:	b004      	add	sp, #16
20000e1c:	bd80      	pop	{r7, pc}
20000e1e:	46c0      	nop			; (mov r8, r8)
20000e20:	200011ac 	andcs	r1, r0, ip, lsr #3

20000e24 <shiftLeft>:
void shiftLeft(){
20000e24:	b580      	push	{r7, lr}
20000e26:	b084      	sub	sp, #16
20000e28:	af00      	add	r7, sp, #0
	for(int i = 0; i < 255; i++){
20000e2a:	2300      	movs	r3, #0
20000e2c:	60fb      	str	r3, [r7, #12]
20000e2e:	e01b      	b.n	20000e68 <shiftLeft+0x44>
		for(int j = 0; j < 8; j++){
20000e30:	2300      	movs	r3, #0
20000e32:	60bb      	str	r3, [r7, #8]
20000e34:	e012      	b.n	20000e5c <shiftLeft+0x38>
			backBuffer[i][j] = backBuffer[i+1][j];
20000e36:	68fb      	ldr	r3, [r7, #12]
20000e38:	3301      	adds	r3, #1
20000e3a:	4a17      	ldr	r2, [pc, #92]	; (20000e98 <shiftLeft+0x74>)
20000e3c:	00db      	lsls	r3, r3, #3
20000e3e:	18d2      	adds	r2, r2, r3
20000e40:	68bb      	ldr	r3, [r7, #8]
20000e42:	18d3      	adds	r3, r2, r3
20000e44:	7819      	ldrb	r1, [r3, #0]
20000e46:	4a14      	ldr	r2, [pc, #80]	; (20000e98 <shiftLeft+0x74>)
20000e48:	68fb      	ldr	r3, [r7, #12]
20000e4a:	00db      	lsls	r3, r3, #3
20000e4c:	18d2      	adds	r2, r2, r3
20000e4e:	68bb      	ldr	r3, [r7, #8]
20000e50:	18d3      	adds	r3, r2, r3
20000e52:	1c0a      	adds	r2, r1, #0
20000e54:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 8; j++){
20000e56:	68bb      	ldr	r3, [r7, #8]
20000e58:	3301      	adds	r3, #1
20000e5a:	60bb      	str	r3, [r7, #8]
20000e5c:	68bb      	ldr	r3, [r7, #8]
20000e5e:	2b07      	cmp	r3, #7
20000e60:	dde9      	ble.n	20000e36 <shiftLeft+0x12>
	for(int i = 0; i < 255; i++){
20000e62:	68fb      	ldr	r3, [r7, #12]
20000e64:	3301      	adds	r3, #1
20000e66:	60fb      	str	r3, [r7, #12]
20000e68:	68fb      	ldr	r3, [r7, #12]
20000e6a:	2bfe      	cmp	r3, #254	; 0xfe
20000e6c:	dde0      	ble.n	20000e30 <shiftLeft+0xc>
		}
	}	
    for(int j = 0; j < 8; j++){
20000e6e:	2300      	movs	r3, #0
20000e70:	607b      	str	r3, [r7, #4]
20000e72:	e00a      	b.n	20000e8a <shiftLeft+0x66>
        backBuffer[255][j] = 0; 
20000e74:	4908      	ldr	r1, [pc, #32]	; (20000e98 <shiftLeft+0x74>)
20000e76:	23ff      	movs	r3, #255	; 0xff
20000e78:	00db      	lsls	r3, r3, #3
20000e7a:	687a      	ldr	r2, [r7, #4]
20000e7c:	188a      	adds	r2, r1, r2
20000e7e:	18d3      	adds	r3, r2, r3
20000e80:	2200      	movs	r2, #0
20000e82:	701a      	strb	r2, [r3, #0]
    for(int j = 0; j < 8; j++){
20000e84:	687b      	ldr	r3, [r7, #4]
20000e86:	3301      	adds	r3, #1
20000e88:	607b      	str	r3, [r7, #4]
20000e8a:	687b      	ldr	r3, [r7, #4]
20000e8c:	2b07      	cmp	r3, #7
20000e8e:	ddf1      	ble.n	20000e74 <shiftLeft+0x50>
    }
20000e90:	46c0      	nop			; (mov r8, r8)
20000e92:	46bd      	mov	sp, r7
20000e94:	b004      	add	sp, #16
20000e96:	bd80      	pop	{r7, pc}
20000e98:	200011ac 	andcs	r1, r0, ip, lsr #3

20000e9c <kbdActivate>:
#include "keyfuncs.h"
#include "gpio.h"

void kbdActivate(unsigned int row){
20000e9c:	b580      	push	{r7, lr}
20000e9e:	b082      	sub	sp, #8
20000ea0:	af00      	add	r7, sp, #0
20000ea2:	6078      	str	r0, [r7, #4]
    switch(row){
20000ea4:	687b      	ldr	r3, [r7, #4]
20000ea6:	2b02      	cmp	r3, #2
20000ea8:	d00c      	beq.n	20000ec4 <kbdActivate+0x28>
20000eaa:	d802      	bhi.n	20000eb2 <kbdActivate+0x16>
20000eac:	2b01      	cmp	r3, #1
20000eae:	d005      	beq.n	20000ebc <kbdActivate+0x20>
20000eb0:	e014      	b.n	20000edc <kbdActivate+0x40>
20000eb2:	2b03      	cmp	r3, #3
20000eb4:	d00a      	beq.n	20000ecc <kbdActivate+0x30>
20000eb6:	2b04      	cmp	r3, #4
20000eb8:	d00c      	beq.n	20000ed4 <kbdActivate+0x38>
20000eba:	e00f      	b.n	20000edc <kbdActivate+0x40>
        case 1: 
            GPIO_D->odrHigh = 0x10;
20000ebc:	4b0b      	ldr	r3, [pc, #44]	; (20000eec <kbdActivate+0x50>)
20000ebe:	2210      	movs	r2, #16
20000ec0:	755a      	strb	r2, [r3, #21]
            break;
20000ec2:	e00e      	b.n	20000ee2 <kbdActivate+0x46>
        case 2: 
            GPIO_D->odrHigh = 0x20;
20000ec4:	4b09      	ldr	r3, [pc, #36]	; (20000eec <kbdActivate+0x50>)
20000ec6:	2220      	movs	r2, #32
20000ec8:	755a      	strb	r2, [r3, #21]
            break;
20000eca:	e00a      	b.n	20000ee2 <kbdActivate+0x46>
        case 3: 
            GPIO_D->odrHigh = 0x40;
20000ecc:	4b07      	ldr	r3, [pc, #28]	; (20000eec <kbdActivate+0x50>)
20000ece:	2240      	movs	r2, #64	; 0x40
20000ed0:	755a      	strb	r2, [r3, #21]
            break;
20000ed2:	e006      	b.n	20000ee2 <kbdActivate+0x46>
        case 4: 
            GPIO_D->odrHigh = 0x80;
20000ed4:	4b05      	ldr	r3, [pc, #20]	; (20000eec <kbdActivate+0x50>)
20000ed6:	2280      	movs	r2, #128	; 0x80
20000ed8:	755a      	strb	r2, [r3, #21]
            break;
20000eda:	e002      	b.n	20000ee2 <kbdActivate+0x46>
        default: 
            GPIO_D->odrHigh = 0;
20000edc:	4b03      	ldr	r3, [pc, #12]	; (20000eec <kbdActivate+0x50>)
20000ede:	2200      	movs	r2, #0
20000ee0:	755a      	strb	r2, [r3, #21]
    }
}
20000ee2:	46c0      	nop			; (mov r8, r8)
20000ee4:	46bd      	mov	sp, r7
20000ee6:	b002      	add	sp, #8
20000ee8:	bd80      	pop	{r7, pc}
20000eea:	46c0      	nop			; (mov r8, r8)
20000eec:	40020c00 	andmi	r0, r2, r0, lsl #24

20000ef0 <kbdGetCol>:

int kbdGetCol(){                    
20000ef0:	b580      	push	{r7, lr}
20000ef2:	af00      	add	r7, sp, #0
    if(GPIO_D->idrHigh & 8) 
20000ef4:	4b13      	ldr	r3, [pc, #76]	; (20000f44 <kbdGetCol+0x54>)
20000ef6:	7c5b      	ldrb	r3, [r3, #17]
20000ef8:	b2db      	uxtb	r3, r3
20000efa:	001a      	movs	r2, r3
20000efc:	2308      	movs	r3, #8
20000efe:	4013      	ands	r3, r2
20000f00:	d001      	beq.n	20000f06 <kbdGetCol+0x16>
        return 4;
20000f02:	2304      	movs	r3, #4
20000f04:	e01b      	b.n	20000f3e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 4) 
20000f06:	4b0f      	ldr	r3, [pc, #60]	; (20000f44 <kbdGetCol+0x54>)
20000f08:	7c5b      	ldrb	r3, [r3, #17]
20000f0a:	b2db      	uxtb	r3, r3
20000f0c:	001a      	movs	r2, r3
20000f0e:	2304      	movs	r3, #4
20000f10:	4013      	ands	r3, r2
20000f12:	d001      	beq.n	20000f18 <kbdGetCol+0x28>
        return 3;
20000f14:	2303      	movs	r3, #3
20000f16:	e012      	b.n	20000f3e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 2) 
20000f18:	4b0a      	ldr	r3, [pc, #40]	; (20000f44 <kbdGetCol+0x54>)
20000f1a:	7c5b      	ldrb	r3, [r3, #17]
20000f1c:	b2db      	uxtb	r3, r3
20000f1e:	001a      	movs	r2, r3
20000f20:	2302      	movs	r3, #2
20000f22:	4013      	ands	r3, r2
20000f24:	d001      	beq.n	20000f2a <kbdGetCol+0x3a>
        return 2;
20000f26:	2302      	movs	r3, #2
20000f28:	e009      	b.n	20000f3e <kbdGetCol+0x4e>
    if(GPIO_D->idrHigh & 1) 
20000f2a:	4b06      	ldr	r3, [pc, #24]	; (20000f44 <kbdGetCol+0x54>)
20000f2c:	7c5b      	ldrb	r3, [r3, #17]
20000f2e:	b2db      	uxtb	r3, r3
20000f30:	001a      	movs	r2, r3
20000f32:	2301      	movs	r3, #1
20000f34:	4013      	ands	r3, r2
20000f36:	d001      	beq.n	20000f3c <kbdGetCol+0x4c>
        return 1;
20000f38:	2301      	movs	r3, #1
20000f3a:	e000      	b.n	20000f3e <kbdGetCol+0x4e>
    return 0;
20000f3c:	2300      	movs	r3, #0
}
20000f3e:	0018      	movs	r0, r3
20000f40:	46bd      	mov	sp, r7
20000f42:	bd80      	pop	{r7, pc}
20000f44:	40020c00 	andmi	r0, r2, r0, lsl #24

20000f48 <isUpKey>:


char isUpKey(){
20000f48:	b580      	push	{r7, lr}
20000f4a:	af00      	add	r7, sp, #0
	kbdActivate(3);	//row3
20000f4c:	2003      	movs	r0, #3
20000f4e:	f7ff ffa5 	bl	20000e9c <kbdActivate>
	kbdActivate(4);         //power off kbd-rows
20000f52:	2004      	movs	r0, #4
20000f54:	f7ff ffa2 	bl	20000e9c <kbdActivate>
	if(kbdGetCol() == 3){
20000f58:	f7ff ffca 	bl	20000ef0 <kbdGetCol>
20000f5c:	0003      	movs	r3, r0
20000f5e:	2b03      	cmp	r3, #3
20000f60:	d104      	bne.n	20000f6c <isUpKey+0x24>
		kbdActivate(0);         //power off kbd-rows
20000f62:	2000      	movs	r0, #0
20000f64:	f7ff ff9a 	bl	20000e9c <kbdActivate>
		return 1;
20000f68:	2301      	movs	r3, #1
20000f6a:	e000      	b.n	20000f6e <isUpKey+0x26>
	}
	return 0;
20000f6c:	2300      	movs	r3, #0
}
20000f6e:	0018      	movs	r0, r3
20000f70:	46bd      	mov	sp, r7
20000f72:	bd80      	pop	{r7, pc}

20000f74 <isRightKey>:
char isRightKey(){
20000f74:	b580      	push	{r7, lr}
20000f76:	af00      	add	r7, sp, #0
	kbdActivate(4);
20000f78:	2004      	movs	r0, #4
20000f7a:	f7ff ff8f 	bl	20000e9c <kbdActivate>
	if(kbdGetCol() == 4){
20000f7e:	f7ff ffb7 	bl	20000ef0 <kbdGetCol>
20000f82:	0003      	movs	r3, r0
20000f84:	2b04      	cmp	r3, #4
20000f86:	d104      	bne.n	20000f92 <isRightKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000f88:	2000      	movs	r0, #0
20000f8a:	f7ff ff87 	bl	20000e9c <kbdActivate>
		return 1;
20000f8e:	2301      	movs	r3, #1
20000f90:	e000      	b.n	20000f94 <isRightKey+0x20>
	}
return 0;
20000f92:	2300      	movs	r3, #0
	
}
20000f94:	0018      	movs	r0, r3
20000f96:	46bd      	mov	sp, r7
20000f98:	bd80      	pop	{r7, pc}

20000f9a <isLeftKey>:
char isLeftKey(){
20000f9a:	b580      	push	{r7, lr}
20000f9c:	af00      	add	r7, sp, #0
	kbdActivate(4);
20000f9e:	2004      	movs	r0, #4
20000fa0:	f7ff ff7c 	bl	20000e9c <kbdActivate>
	if(kbdGetCol() == 2){
20000fa4:	f7ff ffa4 	bl	20000ef0 <kbdGetCol>
20000fa8:	0003      	movs	r3, r0
20000faa:	2b02      	cmp	r3, #2
20000fac:	d104      	bne.n	20000fb8 <isLeftKey+0x1e>
		kbdActivate(0);         //power off kbd-rows
20000fae:	2000      	movs	r0, #0
20000fb0:	f7ff ff74 	bl	20000e9c <kbdActivate>
		return 1;
20000fb4:	2301      	movs	r3, #1
20000fb6:	e000      	b.n	20000fba <isLeftKey+0x20>
	}
	return 0;
20000fb8:	2300      	movs	r3, #0
	
}
20000fba:	0018      	movs	r0, r3
20000fbc:	46bd      	mov	sp, r7
20000fbe:	bd80      	pop	{r7, pc}

20000fc0 <__divsi3>:
20000fc0:	4603      	mov	r3, r0
20000fc2:	430b      	orrs	r3, r1
20000fc4:	d47f      	bmi.n	200010c6 <__divsi3+0x106>
20000fc6:	2200      	movs	r2, #0
20000fc8:	0843      	lsrs	r3, r0, #1
20000fca:	428b      	cmp	r3, r1
20000fcc:	d374      	bcc.n	200010b8 <__divsi3+0xf8>
20000fce:	0903      	lsrs	r3, r0, #4
20000fd0:	428b      	cmp	r3, r1
20000fd2:	d35f      	bcc.n	20001094 <__divsi3+0xd4>
20000fd4:	0a03      	lsrs	r3, r0, #8
20000fd6:	428b      	cmp	r3, r1
20000fd8:	d344      	bcc.n	20001064 <__divsi3+0xa4>
20000fda:	0b03      	lsrs	r3, r0, #12
20000fdc:	428b      	cmp	r3, r1
20000fde:	d328      	bcc.n	20001032 <__divsi3+0x72>
20000fe0:	0c03      	lsrs	r3, r0, #16
20000fe2:	428b      	cmp	r3, r1
20000fe4:	d30d      	bcc.n	20001002 <__divsi3+0x42>
20000fe6:	22ff      	movs	r2, #255	; 0xff
20000fe8:	0209      	lsls	r1, r1, #8
20000fea:	ba12      	rev	r2, r2
20000fec:	0c03      	lsrs	r3, r0, #16
20000fee:	428b      	cmp	r3, r1
20000ff0:	d302      	bcc.n	20000ff8 <__divsi3+0x38>
20000ff2:	1212      	asrs	r2, r2, #8
20000ff4:	0209      	lsls	r1, r1, #8
20000ff6:	d065      	beq.n	200010c4 <__divsi3+0x104>
20000ff8:	0b03      	lsrs	r3, r0, #12
20000ffa:	428b      	cmp	r3, r1
20000ffc:	d319      	bcc.n	20001032 <__divsi3+0x72>
20000ffe:	e000      	b.n	20001002 <__divsi3+0x42>
20001000:	0a09      	lsrs	r1, r1, #8
20001002:	0bc3      	lsrs	r3, r0, #15
20001004:	428b      	cmp	r3, r1
20001006:	d301      	bcc.n	2000100c <__divsi3+0x4c>
20001008:	03cb      	lsls	r3, r1, #15
2000100a:	1ac0      	subs	r0, r0, r3
2000100c:	4152      	adcs	r2, r2
2000100e:	0b83      	lsrs	r3, r0, #14
20001010:	428b      	cmp	r3, r1
20001012:	d301      	bcc.n	20001018 <__divsi3+0x58>
20001014:	038b      	lsls	r3, r1, #14
20001016:	1ac0      	subs	r0, r0, r3
20001018:	4152      	adcs	r2, r2
2000101a:	0b43      	lsrs	r3, r0, #13
2000101c:	428b      	cmp	r3, r1
2000101e:	d301      	bcc.n	20001024 <__divsi3+0x64>
20001020:	034b      	lsls	r3, r1, #13
20001022:	1ac0      	subs	r0, r0, r3
20001024:	4152      	adcs	r2, r2
20001026:	0b03      	lsrs	r3, r0, #12
20001028:	428b      	cmp	r3, r1
2000102a:	d301      	bcc.n	20001030 <__divsi3+0x70>
2000102c:	030b      	lsls	r3, r1, #12
2000102e:	1ac0      	subs	r0, r0, r3
20001030:	4152      	adcs	r2, r2
20001032:	0ac3      	lsrs	r3, r0, #11
20001034:	428b      	cmp	r3, r1
20001036:	d301      	bcc.n	2000103c <__divsi3+0x7c>
20001038:	02cb      	lsls	r3, r1, #11
2000103a:	1ac0      	subs	r0, r0, r3
2000103c:	4152      	adcs	r2, r2
2000103e:	0a83      	lsrs	r3, r0, #10
20001040:	428b      	cmp	r3, r1
20001042:	d301      	bcc.n	20001048 <__divsi3+0x88>
20001044:	028b      	lsls	r3, r1, #10
20001046:	1ac0      	subs	r0, r0, r3
20001048:	4152      	adcs	r2, r2
2000104a:	0a43      	lsrs	r3, r0, #9
2000104c:	428b      	cmp	r3, r1
2000104e:	d301      	bcc.n	20001054 <__divsi3+0x94>
20001050:	024b      	lsls	r3, r1, #9
20001052:	1ac0      	subs	r0, r0, r3
20001054:	4152      	adcs	r2, r2
20001056:	0a03      	lsrs	r3, r0, #8
20001058:	428b      	cmp	r3, r1
2000105a:	d301      	bcc.n	20001060 <__divsi3+0xa0>
2000105c:	020b      	lsls	r3, r1, #8
2000105e:	1ac0      	subs	r0, r0, r3
20001060:	4152      	adcs	r2, r2
20001062:	d2cd      	bcs.n	20001000 <__divsi3+0x40>
20001064:	09c3      	lsrs	r3, r0, #7
20001066:	428b      	cmp	r3, r1
20001068:	d301      	bcc.n	2000106e <__divsi3+0xae>
2000106a:	01cb      	lsls	r3, r1, #7
2000106c:	1ac0      	subs	r0, r0, r3
2000106e:	4152      	adcs	r2, r2
20001070:	0983      	lsrs	r3, r0, #6
20001072:	428b      	cmp	r3, r1
20001074:	d301      	bcc.n	2000107a <__divsi3+0xba>
20001076:	018b      	lsls	r3, r1, #6
20001078:	1ac0      	subs	r0, r0, r3
2000107a:	4152      	adcs	r2, r2
2000107c:	0943      	lsrs	r3, r0, #5
2000107e:	428b      	cmp	r3, r1
20001080:	d301      	bcc.n	20001086 <__divsi3+0xc6>
20001082:	014b      	lsls	r3, r1, #5
20001084:	1ac0      	subs	r0, r0, r3
20001086:	4152      	adcs	r2, r2
20001088:	0903      	lsrs	r3, r0, #4
2000108a:	428b      	cmp	r3, r1
2000108c:	d301      	bcc.n	20001092 <__divsi3+0xd2>
2000108e:	010b      	lsls	r3, r1, #4
20001090:	1ac0      	subs	r0, r0, r3
20001092:	4152      	adcs	r2, r2
20001094:	08c3      	lsrs	r3, r0, #3
20001096:	428b      	cmp	r3, r1
20001098:	d301      	bcc.n	2000109e <__divsi3+0xde>
2000109a:	00cb      	lsls	r3, r1, #3
2000109c:	1ac0      	subs	r0, r0, r3
2000109e:	4152      	adcs	r2, r2
200010a0:	0883      	lsrs	r3, r0, #2
200010a2:	428b      	cmp	r3, r1
200010a4:	d301      	bcc.n	200010aa <__divsi3+0xea>
200010a6:	008b      	lsls	r3, r1, #2
200010a8:	1ac0      	subs	r0, r0, r3
200010aa:	4152      	adcs	r2, r2
200010ac:	0843      	lsrs	r3, r0, #1
200010ae:	428b      	cmp	r3, r1
200010b0:	d301      	bcc.n	200010b6 <__divsi3+0xf6>
200010b2:	004b      	lsls	r3, r1, #1
200010b4:	1ac0      	subs	r0, r0, r3
200010b6:	4152      	adcs	r2, r2
200010b8:	1a41      	subs	r1, r0, r1
200010ba:	d200      	bcs.n	200010be <__divsi3+0xfe>
200010bc:	4601      	mov	r1, r0
200010be:	4152      	adcs	r2, r2
200010c0:	4610      	mov	r0, r2
200010c2:	4770      	bx	lr
200010c4:	e05d      	b.n	20001182 <__divsi3+0x1c2>
200010c6:	0fca      	lsrs	r2, r1, #31
200010c8:	d000      	beq.n	200010cc <__divsi3+0x10c>
200010ca:	4249      	negs	r1, r1
200010cc:	1003      	asrs	r3, r0, #32
200010ce:	d300      	bcc.n	200010d2 <__divsi3+0x112>
200010d0:	4240      	negs	r0, r0
200010d2:	4053      	eors	r3, r2
200010d4:	2200      	movs	r2, #0
200010d6:	469c      	mov	ip, r3
200010d8:	0903      	lsrs	r3, r0, #4
200010da:	428b      	cmp	r3, r1
200010dc:	d32d      	bcc.n	2000113a <__divsi3+0x17a>
200010de:	0a03      	lsrs	r3, r0, #8
200010e0:	428b      	cmp	r3, r1
200010e2:	d312      	bcc.n	2000110a <__divsi3+0x14a>
200010e4:	22fc      	movs	r2, #252	; 0xfc
200010e6:	0189      	lsls	r1, r1, #6
200010e8:	ba12      	rev	r2, r2
200010ea:	0a03      	lsrs	r3, r0, #8
200010ec:	428b      	cmp	r3, r1
200010ee:	d30c      	bcc.n	2000110a <__divsi3+0x14a>
200010f0:	0189      	lsls	r1, r1, #6
200010f2:	1192      	asrs	r2, r2, #6
200010f4:	428b      	cmp	r3, r1
200010f6:	d308      	bcc.n	2000110a <__divsi3+0x14a>
200010f8:	0189      	lsls	r1, r1, #6
200010fa:	1192      	asrs	r2, r2, #6
200010fc:	428b      	cmp	r3, r1
200010fe:	d304      	bcc.n	2000110a <__divsi3+0x14a>
20001100:	0189      	lsls	r1, r1, #6
20001102:	d03a      	beq.n	2000117a <__divsi3+0x1ba>
20001104:	1192      	asrs	r2, r2, #6
20001106:	e000      	b.n	2000110a <__divsi3+0x14a>
20001108:	0989      	lsrs	r1, r1, #6
2000110a:	09c3      	lsrs	r3, r0, #7
2000110c:	428b      	cmp	r3, r1
2000110e:	d301      	bcc.n	20001114 <__divsi3+0x154>
20001110:	01cb      	lsls	r3, r1, #7
20001112:	1ac0      	subs	r0, r0, r3
20001114:	4152      	adcs	r2, r2
20001116:	0983      	lsrs	r3, r0, #6
20001118:	428b      	cmp	r3, r1
2000111a:	d301      	bcc.n	20001120 <__divsi3+0x160>
2000111c:	018b      	lsls	r3, r1, #6
2000111e:	1ac0      	subs	r0, r0, r3
20001120:	4152      	adcs	r2, r2
20001122:	0943      	lsrs	r3, r0, #5
20001124:	428b      	cmp	r3, r1
20001126:	d301      	bcc.n	2000112c <__divsi3+0x16c>
20001128:	014b      	lsls	r3, r1, #5
2000112a:	1ac0      	subs	r0, r0, r3
2000112c:	4152      	adcs	r2, r2
2000112e:	0903      	lsrs	r3, r0, #4
20001130:	428b      	cmp	r3, r1
20001132:	d301      	bcc.n	20001138 <__divsi3+0x178>
20001134:	010b      	lsls	r3, r1, #4
20001136:	1ac0      	subs	r0, r0, r3
20001138:	4152      	adcs	r2, r2
2000113a:	08c3      	lsrs	r3, r0, #3
2000113c:	428b      	cmp	r3, r1
2000113e:	d301      	bcc.n	20001144 <__divsi3+0x184>
20001140:	00cb      	lsls	r3, r1, #3
20001142:	1ac0      	subs	r0, r0, r3
20001144:	4152      	adcs	r2, r2
20001146:	0883      	lsrs	r3, r0, #2
20001148:	428b      	cmp	r3, r1
2000114a:	d301      	bcc.n	20001150 <__divsi3+0x190>
2000114c:	008b      	lsls	r3, r1, #2
2000114e:	1ac0      	subs	r0, r0, r3
20001150:	4152      	adcs	r2, r2
20001152:	d2d9      	bcs.n	20001108 <__divsi3+0x148>
20001154:	0843      	lsrs	r3, r0, #1
20001156:	428b      	cmp	r3, r1
20001158:	d301      	bcc.n	2000115e <__divsi3+0x19e>
2000115a:	004b      	lsls	r3, r1, #1
2000115c:	1ac0      	subs	r0, r0, r3
2000115e:	4152      	adcs	r2, r2
20001160:	1a41      	subs	r1, r0, r1
20001162:	d200      	bcs.n	20001166 <__divsi3+0x1a6>
20001164:	4601      	mov	r1, r0
20001166:	4663      	mov	r3, ip
20001168:	4152      	adcs	r2, r2
2000116a:	105b      	asrs	r3, r3, #1
2000116c:	4610      	mov	r0, r2
2000116e:	d301      	bcc.n	20001174 <__divsi3+0x1b4>
20001170:	4240      	negs	r0, r0
20001172:	2b00      	cmp	r3, #0
20001174:	d500      	bpl.n	20001178 <__divsi3+0x1b8>
20001176:	4249      	negs	r1, r1
20001178:	4770      	bx	lr
2000117a:	4663      	mov	r3, ip
2000117c:	105b      	asrs	r3, r3, #1
2000117e:	d300      	bcc.n	20001182 <__divsi3+0x1c2>
20001180:	4240      	negs	r0, r0
20001182:	b501      	push	{r0, lr}
20001184:	2000      	movs	r0, #0
20001186:	f000 f805 	bl	20001194 <__aeabi_idiv0>
2000118a:	bd02      	pop	{r1, pc}

2000118c <__aeabi_idivmod>:
2000118c:	2900      	cmp	r1, #0
2000118e:	d0f8      	beq.n	20001182 <__divsi3+0x1c2>
20001190:	e716      	b.n	20000fc0 <__divsi3>
20001192:	4770      	bx	lr

20001194 <__aeabi_idiv0>:
20001194:	4770      	bx	lr
20001196:	46c0      	nop			; (mov r8, r8)

20001198 <memcpy>:
20001198:	2300      	movs	r3, #0
2000119a:	b510      	push	{r4, lr}
2000119c:	429a      	cmp	r2, r3
2000119e:	d100      	bne.n	200011a2 <memcpy+0xa>
200011a0:	bd10      	pop	{r4, pc}
200011a2:	5ccc      	ldrb	r4, [r1, r3]
200011a4:	54c4      	strb	r4, [r0, r3]
200011a6:	3301      	adds	r3, #1
200011a8:	e7f8      	b.n	2000119c <memcpy+0x4>
	...

200011ac <backBuffer>:
	...

200019ac <pedro_still>:
200019ac:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
200019b0:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
200019b4:	1f1f7fff 	svcne	0x001f7fff
200019b8:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
200019bc:	00806030 	addeq	r6, r0, r0, lsr r0
200019c0:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
200019c4:	01831f1f 	orreq	r1, r3, pc, lsl pc
200019c8:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
200019cc:	24000004 	strcs	r0, [r0], #-4
200019d0:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
200019d4:	03010000 	movweq	r0, #4096	; 0x1000
200019d8:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
200019dc:	148c8040 	strne	r8, [ip], #64	; 0x40
200019e0:	1a283828 	bne	20a0fa88 <Pedro+0xa0df9c>
200019e4:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
200019e8:	06000000 	streq	r0, [r0], -r0
200019ec:	a47b0609 	ldrbtge	r0, [fp], #-1545	; 0xfffff9f7
200019f0:	e53ed5a4 	ldr	sp, [lr, #-1444]!	; 0xfffffa5c
200019f4:	0ac6bea5 	beq	1f1b1490 <startup-0xe4eb70>
200019f8:	00000106 	andeq	r0, r0, r6, lsl #2

200019fc <pedro_jump>:
200019fc:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20001a00:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20001a04:	1f1f7fff 	svcne	0x001f7fff
20001a08:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20001a0c:	00806030 	addeq	r6, r0, r0, lsr r0
20001a10:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20001a14:	01831f1f 	orreq	r1, r3, pc, lsl pc
20001a18:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20001a1c:	24000004 	strcs	r0, [r0], #-4
20001a20:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20001a24:	03010000 	movweq	r0, #4096	; 0x1000
20001a28:	22314c86 	eorscs	r4, r1, #34304	; 0x8600
20001a2c:	148c8040 	strne	r8, [ip], #64	; 0x40
20001a30:	1a283828 	bne	20a0fad8 <Pedro+0xa0dfec>
20001a34:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20001a38:	76000000 	strvc	r0, [r0], -r0
20001a3c:	242b7e49 	strtcs	r7, [fp], #-3657	; 0xfffff1b7
20001a40:	150e1514 	strne	r1, [lr, #-1300]	; 0xfffffaec
20001a44:	3a2a2615 	bcc	20a8b2a0 <Pedro+0xa897b4>
20001a48:	00001d26 	andeq	r1, r0, r6, lsr #26

20001a4c <pedro_walk1>:
20001a4c:	f8f0e000 			; <UNDEFINED> instruction: 0xf8f0e000
20001a50:	fffefefc 			; <UNDEFINED> instruction: 0xfffefefc
20001a54:	1f1f7fff 	svcne	0x001f7fff
20001a58:	181c0e0f 	ldmdane	ip, {r0, r1, r2, r3, r9, sl, fp}
20001a5c:	00806030 	addeq	r6, r0, r0, lsr r0
20001a60:	c7ff7f1f 			; <UNDEFINED> instruction: 0xc7ff7f1f
20001a64:	01831f1f 	orreq	r1, r3, pc, lsl pc
20001a68:	3424040b 	strtcc	r0, [r4], #-1035	; 0xfffffbf5
20001a6c:	24000004 	strcs	r0, [r0], #-4
20001a70:	f8078272 			; <UNDEFINED> instruction: 0xf8078272
20001a74:	83010000 	movwhi	r0, #4096	; 0x1000
20001a78:	22b12c46 	adcscs	r2, r1, #17920	; 0x4600
20001a7c:	148c8040 	strne	r8, [ip], #64	; 0x40
20001a80:	1a283828 	bne	20a0fb28 <Pedro+0xa0e03c>
20001a84:	07f80102 	ldrbeq	r0, [r8, r2, lsl #2]!
20001a88:	07000000 	streq	r0, [r0, -r0]
20001a8c:	641b050a 	ldrvs	r0, [fp], #-1290	; 0xfffffaf6
20001a90:	a5deb5a4 	ldrbge	fp, [lr, #1444]	; 0x5a4
20001a94:	0a06ceb5 	beq	201b5570 <Pedro+0x1b3a84>
20001a98:	00000106 	andeq	r0, r0, r6, lsl #2

20001a9c <pedro_walk2>:
20001a9c:	f0e0c000 			; <UNDEFINED> instruction: 0xf0e0c000
20001aa0:	fefcfcf8 	mrc2	12, 7, pc, cr12, cr8, {7}
20001aa4:	3e3efefe 	mrccc	14, 1, APSR_nzcv, cr14, cr14, {7}
20001aa8:	30381c1e 	eorscc	r1, r8, lr, lsl ip
20001aac:	0000c060 	andeq	ip, r0, r0, rrx
20001ab0:	8fffff3e 	svchi	0x00ffff3e
20001ab4:	03073f3f 	movweq	r3, #32575	; 0x7f3f
20001ab8:	68480817 	stmdavs	r8, {r0, r1, r2, r4, fp}^
20001abc:	48000008 	stmdami	r0, {r3}
20001ac0:	f00f04e4 			; <UNDEFINED> instruction: 0xf00f04e4
20001ac4:	07030000 	streq	r0, [r3, -r0]
20001ac8:	44a338cc 	strtmi	r3, [r3], #2252	; 0x8cc
20001acc:	28180080 	ldmdacs	r8, {r7}
20001ad0:	34507050 	ldrbcc	r7, [r0], #-80	; 0xffffffb0
20001ad4:	0ff00304 	svceq	0x00f00304
20001ad8:	00000000 	andeq	r0, r0, r0
20001adc:	a5ae7300 	strge	r7, [lr, #768]!	; 0x300
20001ae0:	e61d0bd6 			; <UNDEFINED> instruction: 0xe61d0bd6
20001ae4:	04c4bca6 	strbeq	fp, [r4], #3238	; 0xca6
20001ae8:	00010204 	andeq	r0, r1, r4, lsl #4

20001aec <Pedro>:
20001aec:	00000020 	andeq	r0, r0, r0, lsr #32
20001af0:	00000014 	andeq	r0, r0, r4, lsl r0
20001af4:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20001b10:	200019ac 	andcs	r1, r0, ip, lsr #19
20001b14:	20000585 	andcs	r0, r0, r5, lsl #11
20001b18:	00000000 	andeq	r0, r0, r0
20001b1c:	1c0c07f8 	stcne	7, cr0, [ip], {248}	; 0xf8
20001b20:	e00c3004 	and	r3, ip, r4
20001b24:	d81c87e8 	ldmdale	ip, {r3, r5, r6, r7, r8, r9, sl, pc}
20001b28:	20076006 	andcs	r6, r7, r6
20001b2c:	600b200f 	andvs	r2, fp, pc
20001b30:	8fcdd039 	svchi	0x00cdd039
20001b34:	6004c004 	andvs	ip, r4, r4
20001b38:	1ff8300c 	svcne	0x00f8300c
20001b3c:	5f5f5f5f 	svcpl	0x005f5f5f
20001b40:	5f6f6f5f 	svcpl	0x006f6f5f
20001b44:	5f5f385f 	svcpl	0x005f385f
20001b48:	6f5f6f5f 	svcvs	0x005f6f5f
20001b4c:	6f5f5f6f 	svcvs	0x005f5f6f
20001b50:	5f5f6f5f 	svcpl	0x005f6f5f
20001b54:	5f385f5f 	svcpl	0x00385f5f
20001b58:	5f386f5f 	svcpl	0x00386f5f
20001b5c:	5f6f5f5f 	svcpl	0x006f5f5f
20001b60:	5f5f5f5f 	svcpl	0x005f5f5f
20001b64:	5f5f5f5f 	svcpl	0x005f5f5f
20001b68:	5f5f5f6f 	svcpl	0x005f5f6f
20001b6c:	6f5f5f5f 	svcvs	0x005f5f5f
20001b70:	5f6f5f6f 	svcpl	0x006f5f6f
20001b74:	5f6f385f 	svcpl	0x006f385f
20001b78:	5f5f6f5f 	svcpl	0x005f6f5f
20001b7c:	5f6f5f5f 	svcpl	0x006f5f5f
20001b80:	5f5f5f6f 	svcpl	0x005f5f6f
20001b84:	6f5f5f5f 	svcvs	0x005f5f5f
20001b88:	5f5f5f5f 	svcpl	0x005f5f5f

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000011d 	andeq	r0, r0, sp, lsl r1
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	00012a0c 	andeq	r2, r1, ip, lsl #20
      14:	0000c100 	andeq	ip, r0, r0, lsl #2
      18:	00001000 	andeq	r1, r0, r0
      1c:	0000a820 	andeq	sl, r0, r0, lsr #16
      20:	00000000 	andeq	r0, r0, r0
      24:	06010200 	streq	r0, [r1], -r0, lsl #4
      28:	0000009a 	muleq	r0, sl, r0
      2c:	98080102 	stmdals	r8, {r1, r8}
      30:	02000000 	andeq	r0, r0, #0
      34:	010e0502 	tsteq	lr, r2, lsl #10
      38:	02020000 	andeq	r0, r2, #0
      3c:	0000ae07 	andeq	sl, r0, r7, lsl #28
      40:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      44:	00000105 	andeq	r0, r0, r5, lsl #2
      48:	0000de03 	andeq	sp, r0, r3, lsl #28
      4c:	534f0200 	movtpl	r0, #61952	; 0xf200
      50:	02000000 	andeq	r0, r0, #0
      54:	00ee0704 	rsceq	r0, lr, r4, lsl #14
      58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
      5c:	00010005 	andeq	r0, r1, r5
      60:	07080200 	streq	r0, [r8, -r0, lsl #4]
      64:	000000e9 	andeq	r0, r0, r9, ror #1
      68:	69050404 	stmdbvs	r5, {r2, sl}
      6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
      70:	00f30704 	rscseq	r0, r3, r4, lsl #14
      74:	e0030000 	and	r0, r3, r0
      78:	03000000 	movweq	r0, #0
      7c:	00004830 	andeq	r4, r0, r0, lsr r8
      80:	01180300 	tsteq	r8, r0, lsl #6
      84:	07040000 	streq	r0, [r4, -r0]
      88:	00000076 	andeq	r0, r0, r6, ror r0
      8c:	00012205 	andeq	r2, r1, r5, lsl #4
      90:	810c0100 	mrshi	r0, (UNDEF: 28)
      94:	42000000 	andmi	r0, r0, #0
      98:	76200000 	strtvc	r0, [r0], -r0
      9c:	01000000 	mrseq	r0, (UNDEF: 0)
      a0:	0000d69c 	muleq	r0, ip, r6
      a4:	03ea0600 	mvneq	r0, #0, 12
      a8:	0c010000 	stceq	0, cr0, [r1], {-0}
      ac:	000000d6 	ldrdeq	r0, [r0], -r6
      b0:	076c9102 	strbeq	r9, [ip, -r2, lsl #2]!
      b4:	0e010078 	mcreq	0, 0, r0, cr1, cr8, {3}
      b8:	00000081 	andeq	r0, r0, r1, lsl #1
      bc:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
      c0:	20000080 	andcs	r0, r0, r0, lsl #1
      c4:	0000002a 	andeq	r0, r0, sl, lsr #32
      c8:	01006907 	tsteq	r0, r7, lsl #18
      cc:	0000680f 	andeq	r6, r0, pc, lsl #16
      d0:	70910200 	addsvc	r0, r1, r0, lsl #4
      d4:	04090000 	streq	r0, [r9], #-0
      d8:	00000081 	andeq	r0, r0, r1, lsl #1
      dc:	0000a60a 	andeq	sl, r0, sl, lsl #12
      e0:	10050100 	andne	r0, r5, r0, lsl #2
      e4:	32200000 	eorcc	r0, r0, #0
      e8:	01000000 	mrseq	r0, (UNDEF: 0)
      ec:	03ea069c 	mvneq	r0, #156, 12	; 0x9c00000
      f0:	05010000 	streq	r0, [r1, #-0]
      f4:	000000d6 	ldrdeq	r0, [r0], -r6
      f8:	066c9102 	strbteq	r9, [ip], -r2, lsl #2
      fc:	000004b6 			; <UNDEFINED> instruction: 0x000004b6
     100:	00760501 	rsbseq	r0, r6, r1, lsl #10
     104:	91020000 	mrsls	r0, (UNDEF: 2)
     108:	00200868 	eoreq	r0, r0, r8, ror #16
     10c:	001a2000 	andseq	r2, sl, r0
     110:	69070000 	stmdbvs	r7, {}	; <UNPREDICTABLE>
     114:	68070100 	stmdavs	r7, {r8}
     118:	02000000 	andeq	r0, r0, #0
     11c:	00007491 	muleq	r0, r1, r4
     120:	000bc700 	andeq	ip, fp, r0, lsl #14
     124:	9b000400 	blls	112c <startup-0x1fffeed4>
     128:	04000000 	streq	r0, [r0], #-0
     12c:	00000001 	andeq	r0, r0, r1
     130:	03700c00 	cmneq	r0, #0, 24
     134:	00c10000 	sbceq	r0, r1, r0
	...
     140:	01310000 	teqeq	r1, r0
     144:	01020000 	mrseq	r0, (UNDEF: 2)
     148:	00009a06 	andeq	r9, r0, r6, lsl #20
     14c:	08010200 	stmdaeq	r1, {r9}
     150:	00000098 	muleq	r0, r8, r0
     154:	0e050202 	cdpeq	2, 0, cr0, cr5, cr2, {0}
     158:	02000001 	andeq	r0, r0, #1
     15c:	00ae0702 	adceq	r0, lr, r2, lsl #14
     160:	04020000 	streq	r0, [r2], #-0
     164:	00010505 	andeq	r0, r1, r5, lsl #10
     168:	07040200 	streq	r0, [r4, -r0, lsl #4]
     16c:	000000ee 	andeq	r0, r0, lr, ror #1
     170:	00050802 	andeq	r0, r5, r2, lsl #16
     174:	02000001 	andeq	r0, r0, #1
     178:	00e90708 	rsceq	r0, r9, r8, lsl #14
     17c:	04030000 	streq	r0, [r3], #-0
     180:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     184:	07040200 	streq	r0, [r4, -r0, lsl #4]
     188:	000000f3 	strdeq	r0, [r0], -r3
     18c:	0c020204 	sfmeq	f0, 4, [r2], {4}
     190:	0000008c 	andeq	r0, r0, ip, lsl #1
     194:	00028205 	andeq	r8, r2, r5, lsl #4
     198:	2c0d0200 	sfmcs	f0, 4, [sp], {-0}
     19c:	00000000 	andeq	r0, r0, r0
     1a0:	00017d05 	andeq	r7, r1, r5, lsl #26
     1a4:	2c0e0200 	sfmcs	f0, 4, [lr], {-0}
     1a8:	01000000 	mrseq	r0, (UNDEF: 0)
     1ac:	02040600 	andeq	r0, r4, #0, 12
     1b0:	0000a50a 	andeq	sl, r0, sl, lsl #10
     1b4:	64690700 	strbtvs	r0, [r9], #-1792	; 0xfffff900
     1b8:	0b020072 	bleq	80388 <startup-0x1ff7fc78>
     1bc:	00000064 	andeq	r0, r0, r4, rrx
     1c0:	00006b08 	andeq	r6, r0, r8, lsl #22
     1c4:	02040000 	andeq	r0, r4, #0
     1c8:	00c61302 	sbceq	r1, r6, r2, lsl #6
     1cc:	db050000 	blle	1401d4 <startup-0x1febfe2c>
     1d0:	02000003 	andeq	r0, r0, #3
     1d4:	00002c14 	andeq	r2, r0, r4, lsl ip
     1d8:	ea050000 	b	1401e0 <startup-0x1febfe20>
     1dc:	02000001 	andeq	r0, r0, #1
     1e0:	00002c15 	andeq	r2, r0, r5, lsl ip
     1e4:	06000100 	streq	r0, [r0], -r0, lsl #2
     1e8:	df110204 	svcle	0x00110204
     1ec:	07000000 	streq	r0, [r0, -r0]
     1f0:	0072646f 	rsbseq	r6, r2, pc, ror #8
     1f4:	00641202 	rsbeq	r1, r4, r2, lsl #4
     1f8:	a5080000 	strge	r0, [r8, #-0]
     1fc:	00000000 	andeq	r0, r0, r0
     200:	0003d509 	andeq	sp, r3, r9, lsl #10
     204:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     208:	00000128 	andeq	r0, r0, r8, lsr #2
     20c:	00021605 	andeq	r1, r2, r5, lsl #12
     210:	64050200 	strvs	r0, [r5], #-512	; 0xfffffe00
     214:	00000000 	andeq	r0, r0, r0
     218:	00019005 	andeq	r9, r1, r5
     21c:	64060200 	strvs	r0, [r6], #-512	; 0xfffffe00
     220:	04000000 	streq	r0, [r0], #-0
     224:	0002fa05 	andeq	pc, r2, r5, lsl #20
     228:	64070200 	strvs	r0, [r7], #-512	; 0xfffffe00
     22c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     230:	0001ca05 	andeq	ip, r1, r5, lsl #20
     234:	64080200 	strvs	r0, [r8], #-512	; 0xfffffe00
     238:	0c000000 	stceq	0, cr0, [r0], {-0}
     23c:	00008c0a 	andeq	r8, r0, sl, lsl #24
     240:	c60a1000 	strgt	r1, [sl], -r0
     244:	14000000 	strne	r0, [r0], #-0
     248:	05e10b00 	strbeq	r0, [r1, #2816]!	; 0xb00
     24c:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
     250:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     254:	0139040c 	teqeq	r9, ip, lsl #8
     258:	01020000 	mrseq	r0, (UNDEF: 2)
     25c:	0000a108 	andeq	sl, r0, r8, lsl #2
     260:	01390d00 	teqeq	r9, r0, lsl #26
     264:	4a0b0000 	bmi	2c026c <startup-0x1fd3fd94>
     268:	03000003 	movweq	r0, #3
     26c:	00015022 	andeq	r5, r1, r2, lsr #32
     270:	56040c00 	strpl	r0, [r4], -r0, lsl #24
     274:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     278:	000004c3 	andeq	r0, r0, r3, asr #9
     27c:	0003b70b 	andeq	fp, r3, fp, lsl #14
     280:	412c0400 			; <UNDEFINED> instruction: 0x412c0400
     284:	0b000000 	bleq	28c <startup-0x1ffffd74>
     288:	000004d8 	ldrdeq	r0, [r0], -r8
     28c:	00417204 	subeq	r7, r1, r4, lsl #4
     290:	520f0000 	andpl	r0, pc, #0
     294:	05000003 	streq	r0, [r0, #-3]
     298:	00640165 	rsbeq	r0, r4, r5, ror #2
     29c:	04060000 	streq	r0, [r6], #-0
     2a0:	019ca604 	orrseq	sl, ip, r4, lsl #12
     2a4:	44100000 	ldrmi	r0, [r0], #-0
     2a8:	04000003 	streq	r0, [r0], #-3
     2ac:	000171a8 	andeq	r7, r1, r8, lsr #3
     2b0:	02cb1000 	sbceq	r1, fp, #0
     2b4:	a9040000 	stmdbge	r4, {}	; <UNPREDICTABLE>
     2b8:	0000019c 	muleq	r0, ip, r1
     2bc:	002c1100 	eoreq	r1, ip, r0, lsl #2
     2c0:	01ac0000 			; <UNDEFINED> instruction: 0x01ac0000
     2c4:	64120000 	ldrvs	r0, [r2], #-0
     2c8:	03000000 	movweq	r0, #0
     2cc:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
     2d0:	0001cda3 	andeq	ip, r1, r3, lsr #27
     2d4:	04bb0500 	ldrteq	r0, [fp], #1280	; 0x500
     2d8:	a5040000 	strge	r0, [r4, #-0]
     2dc:	0000005d 	andeq	r0, r0, sp, asr r0
     2e0:	04ca0500 	strbeq	r0, [sl], #1280	; 0x500
     2e4:	aa040000 	bge	1002ec <startup-0x1feffd14>
     2e8:	0000017d 	andeq	r0, r0, sp, ror r1
     2ec:	3d0b0004 	stccc	0, cr0, [fp, #-16]
     2f0:	04000004 	streq	r0, [r0], #-4
     2f4:	0001acab 	andeq	sl, r1, fp, lsr #25
     2f8:	02940b00 	addseq	r0, r4, #0, 22
     2fc:	af040000 	svcge	0x00040000
     300:	00000145 	andeq	r0, r0, r5, asr #2
     304:	390b0413 	stmdbcc	fp, {r0, r1, r4, sl}
     308:	06000005 	streq	r0, [r0], -r5
     30c:	00004816 	andeq	r4, r0, r6, lsl r8
     310:	02a50900 	adceq	r0, r5, #0, 18
     314:	06180000 	ldreq	r0, [r8], -r0
     318:	0002432f 	andeq	r4, r2, pc, lsr #6
     31c:	045e0500 	ldrbeq	r0, [lr], #-1280	; 0xfffffb00
     320:	31060000 	mrscc	r0, (UNDEF: 6)
     324:	00000243 	andeq	r0, r0, r3, asr #4
     328:	6b5f1400 	blvs	17c5330 <startup-0x1e83acd0>
     32c:	5d320600 	ldcpl	6, cr0, [r2, #-0]
     330:	04000000 	streq	r0, [r0], #-0
     334:	0004a605 	andeq	sl, r4, r5, lsl #12
     338:	5d320600 	ldcpl	6, cr0, [r2, #-0]
     33c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     340:	00028e05 	andeq	r8, r2, r5, lsl #28
     344:	5d320600 	ldcpl	6, cr0, [r2, #-0]
     348:	0c000000 	stceq	0, cr0, [r0], {-0}
     34c:	00056e05 	andeq	r6, r5, r5, lsl #28
     350:	5d320600 	ldcpl	6, cr0, [r2, #-0]
     354:	10000000 	andne	r0, r0, r0
     358:	00785f14 	rsbseq	r5, r8, r4, lsl pc
     35c:	02493306 	subeq	r3, r9, #402653184	; 0x18000000
     360:	00140000 	andseq	r0, r4, r0
     364:	01f0040c 	mvnseq	r0, ip, lsl #8
     368:	e5110000 	ldr	r0, [r1, #-0]
     36c:	59000001 	stmdbpl	r0, {r0}
     370:	12000002 	andne	r0, r0, #2
     374:	00000064 	andeq	r0, r0, r4, rrx
     378:	c6090000 	strgt	r0, [r9], -r0
     37c:	24000002 	strcs	r0, [r0], #-2
     380:	02d23706 	sbcseq	r3, r2, #1572864	; 0x180000
     384:	f2050000 	vhadd.s8	d0, d5, d0
     388:	06000001 	streq	r0, [r0], -r1
     38c:	00005d39 	andeq	r5, r0, r9, lsr sp
     390:	ee050000 	cdp	0, 0, cr0, cr5, cr0, {0}
     394:	06000004 	streq	r0, [r0], -r4
     398:	00005d3a 	andeq	r5, r0, sl, lsr sp
     39c:	07050400 	streq	r0, [r5, -r0, lsl #8]
     3a0:	06000002 	streq	r0, [r0], -r2
     3a4:	00005d3b 	andeq	r5, r0, fp, lsr sp
     3a8:	04050800 	streq	r0, [r5], #-2048	; 0xfffff800
     3ac:	06000006 	streq	r0, [r0], -r6
     3b0:	00005d3c 	andeq	r5, r0, ip, lsr sp
     3b4:	9b050c00 	blls	1433bc <startup-0x1febcc44>
     3b8:	06000003 	streq	r0, [r0], -r3
     3bc:	00005d3d 	andeq	r5, r0, sp, lsr sp
     3c0:	66051000 	strvs	r1, [r5], -r0
     3c4:	06000003 	streq	r0, [r0], -r3
     3c8:	00005d3e 	andeq	r5, r0, lr, lsr sp
     3cc:	73051400 	movwvc	r1, #21504	; 0x5400
     3d0:	06000005 	streq	r0, [r0], -r5
     3d4:	00005d3f 	andeq	r5, r0, pc, lsr sp
     3d8:	1f051800 	svcne	0x00051800
     3dc:	06000004 	streq	r0, [r0], -r4
     3e0:	00005d40 	andeq	r5, r0, r0, asr #26
     3e4:	ae051c00 	cdpge	12, 0, cr1, cr5, cr0, {0}
     3e8:	06000005 	streq	r0, [r0], -r5
     3ec:	00005d41 	andeq	r5, r0, r1, asr #26
     3f0:	15002000 	strne	r2, [r0, #-0]
     3f4:	000004e0 	andeq	r0, r0, r0, ror #9
     3f8:	4a060108 	bmi	180820 <startup-0x1fe7f7e0>
     3fc:	00000312 	andeq	r0, r0, r2, lsl r3
     400:	00027a05 	andeq	r7, r2, r5, lsl #20
     404:	124b0600 	subne	r0, fp, #0, 12
     408:	00000003 	andeq	r0, r0, r3
     40c:	00015305 	andeq	r5, r1, r5, lsl #6
     410:	124c0600 	subne	r0, ip, #0, 12
     414:	80000003 	andhi	r0, r0, r3
     418:	00052b16 	andeq	r2, r5, r6, lsl fp
     41c:	e54e0600 	strb	r0, [lr, #-1536]	; 0xfffffa00
     420:	00000001 	andeq	r0, r0, r1
     424:	02331601 	eorseq	r1, r3, #1048576	; 0x100000
     428:	51060000 	mrspl	r0, (UNDEF: 6)
     42c:	000001e5 	andeq	r0, r0, r5, ror #3
     430:	11000104 	tstne	r0, r4, lsl #2
     434:	000001e3 	andeq	r0, r0, r3, ror #3
     438:	00000322 	andeq	r0, r0, r2, lsr #6
     43c:	00006412 	andeq	r6, r0, r2, lsl r4
     440:	15001f00 	strne	r1, [r0, #-3840]	; 0xfffff100
     444:	000003a4 	andeq	r0, r0, r4, lsr #7
     448:	5d060190 	stfpls	f0, [r6, #-576]	; 0xfffffdc0
     44c:	00000360 	andeq	r0, r0, r0, ror #6
     450:	00045e05 	andeq	r5, r4, r5, lsl #28
     454:	605e0600 	subsvs	r0, lr, r0, lsl #12
     458:	00000003 	andeq	r0, r0, r3
     45c:	00047605 	andeq	r7, r4, r5, lsl #12
     460:	5d5f0600 	ldclpl	6, cr0, [pc, #-0]	; 468 <startup-0x1ffffb98>
     464:	04000000 	streq	r0, [r0], #-0
     468:	00028905 	andeq	r8, r2, r5, lsl #18
     46c:	66610600 	strbtvs	r0, [r1], -r0, lsl #12
     470:	08000003 	stmdaeq	r0, {r0, r1}
     474:	0004e005 	andeq	lr, r4, r5
     478:	d2620600 	rsble	r0, r2, #0, 12
     47c:	88000002 	stmdahi	r0, {r1}
     480:	22040c00 	andcs	r0, r4, #0, 24
     484:	11000003 	tstne	r0, r3
     488:	00000376 	andeq	r0, r0, r6, ror r3
     48c:	00000376 	andeq	r0, r0, r6, ror r3
     490:	00006412 	andeq	r6, r0, r2, lsl r4
     494:	0c001f00 	stceq	15, cr1, [r0], {-0}
     498:	00037c04 	andeq	r7, r3, r4, lsl #24
     49c:	29091700 	stmdbcs	r9, {r8, r9, sl, ip}
     4a0:	08000004 	stmdaeq	r0, {r2}
     4a4:	03a27506 			; <UNDEFINED> instruction: 0x03a27506
     4a8:	01050000 	mrseq	r0, (UNDEF: 5)
     4ac:	06000002 	streq	r0, [r0], -r2
     4b0:	0003a276 	andeq	sl, r3, r6, ror r2
     4b4:	5f050000 	svcpl	0x00050000
     4b8:	06000001 	streq	r0, [r0], -r1
     4bc:	00005d77 	andeq	r5, r0, r7, ror sp
     4c0:	0c000400 	cfstrseq	mvf0, [r0], {-0}
     4c4:	00002c04 	andeq	r2, r0, r4, lsl #24
     4c8:	04480900 	strbeq	r0, [r8], #-2304	; 0xfffff700
     4cc:	06680000 	strbteq	r0, [r8], -r0
     4d0:	0004d2b5 			; <UNDEFINED> instruction: 0x0004d2b5
     4d4:	705f1400 	subsvc	r1, pc, r0, lsl #8
     4d8:	a2b60600 	adcsge	r0, r6, #0, 12
     4dc:	00000003 	andeq	r0, r0, r3
     4e0:	00725f14 	rsbseq	r5, r2, r4, lsl pc
     4e4:	005db706 	subseq	fp, sp, r6, lsl #14
     4e8:	14040000 	strne	r0, [r4], #-0
     4ec:	0600775f 			; <UNDEFINED> instruction: 0x0600775f
     4f0:	00005db8 			; <UNDEFINED> instruction: 0x00005db8
     4f4:	2c050800 	stccs	8, cr0, [r5], {-0}
     4f8:	06000002 	streq	r0, [r0], -r2
     4fc:	000033b9 			; <UNDEFINED> instruction: 0x000033b9
     500:	ef050c00 	svc	0x00050c00
     504:	06000002 	streq	r0, [r0], -r2
     508:	000033ba 			; <UNDEFINED> instruction: 0x000033ba
     50c:	5f140e00 	svcpl	0x00140e00
     510:	06006662 	streq	r6, [r0], -r2, ror #12
     514:	00037dbb 			; <UNDEFINED> instruction: 0x00037dbb
     518:	bc051000 	stclt	0, cr1, [r5], {-0}
     51c:	06000001 	streq	r0, [r0], -r1
     520:	00005dbc 			; <UNDEFINED> instruction: 0x00005dbc
     524:	1c051800 	stcne	8, cr1, [r5], {-0}
     528:	06000002 	streq	r0, [r0], -r2
     52c:	0001e3c3 	andeq	lr, r1, r3, asr #7
     530:	d9051c00 	stmdble	r5, {sl, fp, ip}
     534:	06000007 	streq	r0, [r0], -r7
     538:	00062dc5 	andeq	r2, r6, r5, asr #27
     53c:	2c052000 	stccs	0, cr2, [r5], {-0}
     540:	06000008 	streq	r0, [r0], -r8
     544:	000657c7 	andeq	r5, r6, r7, asr #15
     548:	d2052400 	andle	r2, r5, #0, 8
     54c:	06000004 	streq	r0, [r0], -r4
     550:	00067bca 	andeq	r7, r6, sl, asr #23
     554:	c8052800 	stmdagt	r5, {fp, sp}
     558:	06000005 	streq	r0, [r0], -r5
     55c:	000695cb 	andeq	r9, r6, fp, asr #11
     560:	5f142c00 	svcpl	0x00142c00
     564:	06006275 			; <UNDEFINED> instruction: 0x06006275
     568:	00037dce 	andeq	r7, r3, lr, asr #27
     56c:	5f143000 	svcpl	0x00143000
     570:	06007075 			; <UNDEFINED> instruction: 0x06007075
     574:	0003a2cf 	andeq	sl, r3, pc, asr #5
     578:	5f143800 	svcpl	0x00143800
     57c:	06007275 			; <UNDEFINED> instruction: 0x06007275
     580:	00005dd0 	ldrdeq	r5, [r0], -r0
     584:	fb053c00 	blx	14f58e <startup-0x1feb0a72>
     588:	06000001 	streq	r0, [r0], -r1
     58c:	00069bd3 	ldrdeq	r9, [r6], -r3
     590:	a0054000 	andge	r4, r5, r0
     594:	06000005 	streq	r0, [r0], -r5
     598:	0006abd4 	ldrdeq	sl, [r6], -r4
     59c:	5f144300 	svcpl	0x00144300
     5a0:	0600626c 	streq	r6, [r0], -ip, ror #4
     5a4:	00037dd7 	ldrdeq	r7, [r3], -r7	; <UNPREDICTABLE>
     5a8:	42054400 	andmi	r4, r5, #0, 8
     5ac:	06000002 	streq	r0, [r0], -r2
     5b0:	00005dda 	ldrdeq	r5, [r0], -sl
     5b4:	53054c00 	movwpl	r4, #23552	; 0x5c00
     5b8:	06000002 	streq	r0, [r0], -r2
     5bc:	00015bdb 	ldrdeq	r5, [r1], -fp
     5c0:	eb055000 	bl	1545c8 <startup-0x1feaba38>
     5c4:	06000007 	streq	r0, [r0], -r7
     5c8:	0004f0de 	ldrdeq	pc, [r4], -lr
     5cc:	c4055400 	strgt	r5, [r5], #-1024	; 0xfffffc00
     5d0:	06000004 	streq	r0, [r0], -r4
     5d4:	0001d8e2 	andeq	sp, r1, r2, ror #17
     5d8:	50055800 	andpl	r5, r5, r0, lsl #16
     5dc:	06000004 	streq	r0, [r0], -r4
     5e0:	0001cde4 	andeq	ip, r1, r4, ror #27
     5e4:	59055c00 	stmdbpl	r5, {sl, fp, ip, lr}
     5e8:	06000003 	streq	r0, [r0], -r3
     5ec:	00005de5 	andeq	r5, r0, r5, ror #27
     5f0:	18006400 	stmdane	r0, {sl, sp, lr}
     5f4:	0000005d 	andeq	r0, r0, sp, asr r0
     5f8:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     5fc:	0004f019 	andeq	pc, r4, r9, lsl r0	; <UNPREDICTABLE>
     600:	01e31900 	mvneq	r1, r0, lsl #18
     604:	33190000 	tstcc	r9, #0
     608:	19000001 	stmdbne	r0, {r0}
     60c:	0000005d 	andeq	r0, r0, sp, asr r0
     610:	fb040c00 	blx	10361a <startup-0x1fefc9e6>
     614:	0d000004 	stceq	0, cr0, [r0, #-16]
     618:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     61c:	0004ae1a 	andeq	sl, r4, sl, lsl lr
     620:	06042800 	streq	r2, [r4], -r0, lsl #16
     624:	062d0239 			; <UNDEFINED> instruction: 0x062d0239
     628:	181b0000 	ldmdane	fp, {}	; <UNPREDICTABLE>
     62c:	06000004 	streq	r0, [r0], -r4
     630:	005d023b 	subseq	r0, sp, fp, lsr r2
     634:	1b000000 	blne	63c <startup-0x1ffff9c4>
     638:	0000023b 	andeq	r0, r0, fp, lsr r2
     63c:	02024006 	andeq	r4, r2, #6
     640:	04000007 	streq	r0, [r0], #-7
     644:	0002d21b 	andeq	sp, r2, fp, lsl r2
     648:	02400600 	subeq	r0, r0, #0, 12
     64c:	00000702 	andeq	r0, r0, r2, lsl #14
     650:	029d1b08 	addseq	r1, sp, #8, 22	; 0x2000
     654:	40060000 	andmi	r0, r6, r0
     658:	00070202 	andeq	r0, r7, r2, lsl #4
     65c:	711b0c00 	tstvc	fp, r0, lsl #24
     660:	06000004 	streq	r0, [r0], -r4
     664:	005d0242 	subseq	r0, sp, r2, asr #4
     668:	1b100000 	blne	400670 <startup-0x1fbff990>
     66c:	00000185 	andeq	r0, r0, r5, lsl #3
     670:	e4024306 	str	r4, [r2], #-774	; 0xfffffcfa
     674:	14000008 	strne	r0, [r0], #-8
     678:	00048d1b 	andeq	r8, r4, fp, lsl sp
     67c:	02460600 	subeq	r0, r6, #0, 12
     680:	0000005d 	andeq	r0, r0, sp, asr r0
     684:	047b1b30 	ldrbteq	r1, [fp], #-2864	; 0xfffff4d0
     688:	47060000 	strmi	r0, [r6, -r0]
     68c:	0008f902 	andeq	pc, r8, r2, lsl #18
     690:	ac1b3400 	cfldrsge	mvf3, [fp], {-0}
     694:	06000003 	streq	r0, [r0], -r3
     698:	005d0249 	subseq	r0, sp, r9, asr #4
     69c:	1b380000 	blne	e006a4 <startup-0x1f1ff95c>
     6a0:	00000483 	andeq	r0, r0, r3, lsl #9
     6a4:	0a024b06 	beq	932c4 <startup-0x1ff6cd3c>
     6a8:	3c000009 	stccc	0, cr0, [r0], {9}
     6ac:	00033c1b 	andeq	r3, r3, fp, lsl ip
     6b0:	024e0600 	subeq	r0, lr, #0, 12
     6b4:	00000243 	andeq	r0, r0, r3, asr #4
     6b8:	02bc1b40 	adcseq	r1, ip, #64, 22	; 0x10000
     6bc:	4f060000 	svcmi	0x00060000
     6c0:	00005d02 	andeq	r5, r0, r2, lsl #26
     6c4:	fa1b4400 	blx	6d16cc <startup-0x1f92e934>
     6c8:	06000005 	streq	r0, [r0], -r5
     6cc:	02430250 	subeq	r0, r3, #80, 4
     6d0:	1b480000 	blne	12006d8 <startup-0x1edff928>
     6d4:	000003cb 	andeq	r0, r0, fp, asr #7
     6d8:	10025106 	andne	r5, r2, r6, lsl #2
     6dc:	4c000009 	stcmi	0, cr0, [r0], {9}
     6e0:	0002df1b 	andeq	sp, r2, fp, lsl pc
     6e4:	02540600 	subseq	r0, r4, #0, 12
     6e8:	0000005d 	andeq	r0, r0, sp, asr r0
     6ec:	024b1b50 	subeq	r1, fp, #80, 22	; 0x14000
     6f0:	55060000 	strpl	r0, [r6, #-0]
     6f4:	00013302 	andeq	r3, r1, r2, lsl #6
     6f8:	111b5400 	tstne	fp, r0, lsl #8
     6fc:	06000004 	streq	r0, [r0], -r4
     700:	08c20278 	stmiaeq	r2, {r3, r4, r5, r6, r9}^
     704:	1c580000 	mrane	r0, r8, acc0
     708:	000003a4 	andeq	r0, r0, r4, lsr #7
     70c:	60027c06 	andvs	r7, r2, r6, lsl #24
     710:	48000003 	stmdami	r0, {r0, r1}
     714:	03141c01 	tsteq	r4, #256	; 0x100
     718:	7d060000 	stcvc	0, cr0, [r6, #-0]
     71c:	00032202 	andeq	r2, r3, r2, lsl #4
     720:	1c014c00 	stcne	12, cr4, [r1], {-0}
     724:	00000596 	muleq	r0, r6, r5
     728:	21028106 	tstcs	r2, r6, lsl #2
     72c:	dc000009 	stcle	0, cr0, [r0], {9}
     730:	02241c02 	eoreq	r1, r4, #512	; 0x200
     734:	86060000 	strhi	r0, [r6], -r0
     738:	0006c702 	andeq	ip, r6, r2, lsl #14
     73c:	1c02e000 	stcne	0, cr14, [r2], {-0}
     740:	00000211 	andeq	r0, r0, r1, lsl r2
     744:	2d028806 	stccs	8, cr8, [r2, #-24]	; 0xffffffe8
     748:	ec000009 	stc	0, cr0, [r0], {9}
     74c:	040c0002 	streq	r0, [ip], #-2
     750:	000004d2 	ldrdeq	r0, [r0], -r2
     754:	00005d18 	andeq	r5, r0, r8, lsl sp
     758:	00065100 	andeq	r5, r6, r0, lsl #2
     75c:	04f01900 	ldrbteq	r1, [r0], #2304	; 0x900
     760:	e3190000 	tst	r9, #0
     764:	19000001 	stmdbne	r0, {r0}
     768:	00000651 	andeq	r0, r0, r1, asr r6
     76c:	00005d19 	andeq	r5, r0, r9, lsl sp
     770:	040c0000 	streq	r0, [ip], #-0
     774:	00000140 	andeq	r0, r0, r0, asr #2
     778:	0633040c 	ldrteq	r0, [r3], -ip, lsl #8
     77c:	66180000 	ldrvs	r0, [r8], -r0
     780:	7b000001 	blvc	78c <startup-0x1ffff874>
     784:	19000006 	stmdbne	r0, {r1, r2}
     788:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     78c:	0001e319 	andeq	lr, r1, r9, lsl r3
     790:	01661900 	cmneq	r6, r0, lsl #18
     794:	5d190000 	ldcpl	0, cr0, [r9, #-0]
     798:	00000000 	andeq	r0, r0, r0
     79c:	065d040c 	ldrbeq	r0, [sp], -ip, lsl #8
     7a0:	5d180000 	ldcpl	0, cr0, [r8, #-0]
     7a4:	95000000 	strls	r0, [r0, #-0]
     7a8:	19000006 	stmdbne	r0, {r1, r2}
     7ac:	000004f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     7b0:	0001e319 	andeq	lr, r1, r9, lsl r3
     7b4:	040c0000 	streq	r0, [ip], #-0
     7b8:	00000681 	andeq	r0, r0, r1, lsl #13
     7bc:	00002c11 	andeq	r2, r0, r1, lsl ip
     7c0:	0006ab00 	andeq	sl, r6, r0, lsl #22
     7c4:	00641200 	rsbeq	r1, r4, r0, lsl #4
     7c8:	00020000 	andeq	r0, r2, r0
     7cc:	00002c11 	andeq	r2, r0, r1, lsl ip
     7d0:	0006bb00 	andeq	fp, r6, r0, lsl #22
     7d4:	00641200 	rsbeq	r1, r4, r0, lsl #4
     7d8:	00000000 	andeq	r0, r0, r0
     7dc:	0004360f 	andeq	r3, r4, pc, lsl #12
     7e0:	011f0600 	tsteq	pc, r0, lsl #12
     7e4:	000003a8 	andeq	r0, r0, r8, lsr #7
     7e8:	00057d1d 	andeq	r7, r5, sp, lsl sp
     7ec:	23060c00 	movwcs	r0, #27648	; 0x6c00
     7f0:	0006fc01 	andeq	pc, r6, r1, lsl #24
     7f4:	045e1b00 	ldrbeq	r1, [lr], #-2816	; 0xfffff500
     7f8:	25060000 	strcs	r0, [r6, #-0]
     7fc:	0006fc01 	andeq	pc, r6, r1, lsl #24
     800:	021b0000 	andseq	r0, fp, #0
     804:	06000003 	streq	r0, [r0], -r3
     808:	005d0126 	subseq	r0, sp, r6, lsr #2
     80c:	1b040000 	blne	100814 <startup-0x1feff7ec>
     810:	00000430 	andeq	r0, r0, r0, lsr r4
     814:	02012706 	andeq	r2, r1, #1572864	; 0x180000
     818:	08000007 	stmdaeq	r0, {r0, r1, r2}
     81c:	c7040c00 	strgt	r0, [r4, -r0, lsl #24]
     820:	0c000006 	stceq	0, cr0, [r0], {6}
     824:	0006bb04 	andeq	fp, r6, r4, lsl #22
     828:	01751d00 	cmneq	r5, r0, lsl #26
     82c:	060e0000 	streq	r0, [lr], -r0
     830:	073d013f 			; <UNDEFINED> instruction: 0x073d013f
     834:	b51b0000 	ldrlt	r0, [fp, #-0]
     838:	06000004 	streq	r0, [r0], -r4
     83c:	073d0140 	ldreq	r0, [sp, -r0, asr #2]!
     840:	1b000000 	blne	848 <startup-0x1ffff7b8>
     844:	000004ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     848:	3d014106 	stfccs	f4, [r1, #-24]	; 0xffffffe8
     84c:	06000007 	streq	r0, [r0], -r7
     850:	0005341b 	andeq	r3, r5, fp, lsl r4
     854:	01420600 	cmpeq	r2, r0, lsl #12
     858:	0000003a 	andeq	r0, r0, sl, lsr r0
     85c:	3a11000c 	bcc	440894 <startup-0x1fbbf76c>
     860:	4d000000 	stcmi	0, cr0, [r0, #-0]
     864:	12000007 	andne	r0, r0, #7
     868:	00000064 	andeq	r0, r0, r4, rrx
     86c:	d01e0002 	andsle	r0, lr, r2
     870:	4e025906 	vmlami.f16	s10, s4, s12	; <UNPREDICTABLE>
     874:	1b000008 	blne	89c <startup-0x1ffff764>
     878:	00000561 	andeq	r0, r0, r1, ror #10
     87c:	64025b06 	strvs	r5, [r2], #-2822	; 0xfffff4fa
     880:	00000000 	andeq	r0, r0, r0
     884:	00051e1b 	andeq	r1, r5, fp, lsl lr
     888:	025c0600 	subseq	r0, ip, #0, 12
     88c:	00000133 	andeq	r0, r0, r3, lsr r1
     890:	03291b04 			; <UNDEFINED> instruction: 0x03291b04
     894:	5d060000 	stcpl	0, cr0, [r6, #-0]
     898:	00084e02 	andeq	r4, r8, r2, lsl #28
     89c:	b91b0800 	ldmdblt	fp, {fp}
     8a0:	06000005 	streq	r0, [r0], -r5
     8a4:	0259025e 	subseq	r0, r9, #-536870907	; 0xe0000005
     8a8:	1b240000 	blne	9008b0 <startup-0x1f6ff750>
     8ac:	000002ad 	andeq	r0, r0, sp, lsr #5
     8b0:	5d025f06 	stcpl	15, cr5, [r2, #-24]	; 0xffffffe8
     8b4:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     8b8:	0004591b 	andeq	r5, r4, fp, lsl r9
     8bc:	02600600 	rsbeq	r0, r0, #0, 12
     8c0:	00000056 	andeq	r0, r0, r6, asr r0
     8c4:	05dc1b50 	ldrbeq	r1, [ip, #2896]	; 0xb50
     8c8:	61060000 	mrsvs	r0, (UNDEF: 6)
     8cc:	00070802 	andeq	r0, r7, r2, lsl #16
     8d0:	641b5800 	ldrvs	r5, [fp], #-2048	; 0xfffff800
     8d4:	06000004 	streq	r0, [r0], -r4
     8d8:	01cd0262 	biceq	r0, sp, r2, ror #4
     8dc:	1b680000 	blne	1a008e4 <startup-0x1e5ff71c>
     8e0:	000005ec 	andeq	r0, r0, ip, ror #11
     8e4:	cd026306 	stcgt	3, cr6, [r2, #-24]	; 0xffffffe8
     8e8:	70000001 	andvc	r0, r0, r1
     8ec:	0003e21b 	andeq	lr, r3, fp, lsl r2
     8f0:	02640600 	rsbeq	r0, r4, #0, 12
     8f4:	000001cd 	andeq	r0, r0, sp, asr #3
     8f8:	058c1b78 	streq	r1, [ip, #2936]	; 0xb78
     8fc:	65060000 	strvs	r0, [r6, #-0]
     900:	00085e02 	andeq	r5, r8, r2, lsl #28
     904:	1d1b8000 	ldcne	0, cr8, [fp, #-0]
     908:	06000003 	streq	r0, [r0], -r3
     90c:	086e0266 	stmdaeq	lr!, {r1, r2, r5, r6, r9}^
     910:	1b880000 	blne	fe200918 <Pedro+0xde1fee2c>
     914:	00000541 	andeq	r0, r0, r1, asr #10
     918:	5d026706 	stcpl	7, cr6, [r2, #-24]	; 0xffffffe8
     91c:	a0000000 	andge	r0, r0, r0
     920:	00026c1b 	andeq	r6, r2, fp, lsl ip
     924:	02680600 	rsbeq	r0, r8, #0, 12
     928:	000001cd 	andeq	r0, r0, sp, asr #3
     92c:	01db1ba4 	bicseq	r1, fp, r4, lsr #23
     930:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
     934:	0001cd02 	andeq	ip, r1, r2, lsl #26
     938:	5b1bac00 	blpl	6eb940 <startup-0x1f9146c0>
     93c:	06000002 	streq	r0, [r0], -r2
     940:	01cd026a 	biceq	r0, sp, sl, ror #4
     944:	1bb40000 	blne	fed0094c <Pedro+0xdecfee60>
     948:	0000019c 	muleq	r0, ip, r1
     94c:	cd026b06 	vstrgt	d6, [r2, #-24]	; 0xffffffe8
     950:	bc000001 	stclt	0, cr0, [r0], {1}
     954:	0001ab1b 	andeq	sl, r1, fp, lsl fp
     958:	026c0600 	rsbeq	r0, ip, #0, 12
     95c:	000001cd 	andeq	r0, r0, sp, asr #3
     960:	04161bc4 	ldreq	r1, [r6], #-3012	; 0xfffff43c
     964:	6d060000 	stcvs	0, cr0, [r6, #-0]
     968:	00005d02 	andeq	r5, r0, r2, lsl #26
     96c:	1100cc00 	tstne	r0, r0, lsl #24
     970:	00000139 	andeq	r0, r0, r9, lsr r1
     974:	0000085e 	andeq	r0, r0, lr, asr r8
     978:	00006412 	andeq	r6, r0, r2, lsl r4
     97c:	11001900 	tstne	r0, r0, lsl #18
     980:	00000139 	andeq	r0, r0, r9, lsr r1
     984:	0000086e 	andeq	r0, r0, lr, ror #16
     988:	00006412 	andeq	r6, r0, r2, lsl r4
     98c:	11000700 	tstne	r0, r0, lsl #14
     990:	00000139 	andeq	r0, r0, r9, lsr r1
     994:	0000087e 	andeq	r0, r0, lr, ror r8
     998:	00006412 	andeq	r6, r0, r2, lsl r4
     99c:	1e001700 	cdpne	7, 0, cr1, cr0, cr0, {0}
     9a0:	027206f0 	rsbseq	r0, r2, #240, 12	; 0xf000000
     9a4:	000008a2 	andeq	r0, r0, r2, lsr #17
     9a8:	0003941b 	andeq	r9, r3, fp, lsl r4
     9ac:	02750600 	rsbseq	r0, r5, #0, 12
     9b0:	000008a2 	andeq	r0, r0, r2, lsr #17
     9b4:	05831b00 	streq	r1, [r3, #2816]	; 0xb00
     9b8:	76060000 	strvc	r0, [r6], -r0
     9bc:	0008b202 	andeq	fp, r8, r2, lsl #4
     9c0:	11007800 	tstne	r0, r0, lsl #16
     9c4:	000003a2 	andeq	r0, r0, r2, lsr #7
     9c8:	000008b2 			; <UNDEFINED> instruction: 0x000008b2
     9cc:	00006412 	andeq	r6, r0, r2, lsl r4
     9d0:	11001d00 	tstne	r0, r0, lsl #26
     9d4:	00000064 	andeq	r0, r0, r4, rrx
     9d8:	000008c2 	andeq	r0, r0, r2, asr #17
     9dc:	00006412 	andeq	r6, r0, r2, lsl r4
     9e0:	1f001d00 	svcne	0x00001d00
     9e4:	025706f0 	subseq	r0, r7, #240, 12	; 0xf000000
     9e8:	000008e4 	andeq	r0, r0, r4, ror #17
     9ec:	0004ae20 	andeq	sl, r4, r0, lsr #28
     9f0:	026e0600 	rsbeq	r0, lr, #0, 12
     9f4:	0000074d 	andeq	r0, r0, sp, asr #14
     9f8:	0005a620 	andeq	sl, r5, r0, lsr #12
     9fc:	02770600 	rsbseq	r0, r7, #0, 12
     a00:	0000087e 	andeq	r0, r0, lr, ror r8
     a04:	01391100 	teqeq	r9, r0, lsl #2
     a08:	08f40000 	ldmeq	r4!, {}^	; <UNPREDICTABLE>
     a0c:	64120000 	ldrvs	r0, [r2], #-0
     a10:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
     a14:	01d00e00 	bicseq	r0, r0, r0, lsl #28
     a18:	040c0000 	streq	r0, [ip], #-0
     a1c:	000008f4 	strdeq	r0, [r0], -r4
     a20:	00090a21 	andeq	r0, r9, r1, lsr #20
     a24:	04f01900 	ldrbteq	r1, [r0], #2304	; 0x900
     a28:	0c000000 	stceq	0, cr0, [r0], {-0}
     a2c:	0008ff04 	andeq	pc, r8, r4, lsl #30
     a30:	43040c00 	movwmi	r0, #19456	; 0x4c00
     a34:	21000002 	tstcs	r0, r2
     a38:	00000921 	andeq	r0, r0, r1, lsr #18
     a3c:	00005d19 	andeq	r5, r0, r9, lsl sp
     a40:	040c0000 	streq	r0, [ip], #-0
     a44:	00000927 	andeq	r0, r0, r7, lsr #18
     a48:	0916040c 	ldmdbeq	r6, {r2, r3, sl}
     a4c:	bb110000 	bllt	440a54 <startup-0x1fbbf5ac>
     a50:	3d000006 	stccc	0, cr0, [r0, #-24]	; 0xffffffe8
     a54:	12000009 	andne	r0, r0, #9
     a58:	00000064 	andeq	r0, r0, r4, rrx
     a5c:	55220002 	strpl	r0, [r2, #-2]!
     a60:	06000005 	streq	r0, [r0], -r5
     a64:	04f00307 	ldrbteq	r0, [r0], #775	; 0x307
     a68:	4e220000 	cdpmi	0, 2, cr0, cr2, cr0, {0}
     a6c:	06000005 	streq	r0, [r0], -r5
     a70:	04f60308 	ldrbteq	r0, [r6], #776	; 0x308
     a74:	39110000 	ldmdbcc	r1, {}	; <UNPREDICTABLE>
     a78:	6b000001 	blvs	a84 <startup-0x1ffff57c>
     a7c:	12000009 	andne	r0, r0, #9
     a80:	00000064 	andeq	r0, r0, r4, rrx
     a84:	006412ff 	strdeq	r1, [r4], #-47	; 0xffffffd1	; <UNPREDICTABLE>
     a88:	00070000 	andeq	r0, r7, r0
     a8c:	0008de23 	andeq	sp, r8, r3, lsr #28
     a90:	55390100 	ldrpl	r0, [r9, #-256]!	; 0xffffff00
     a94:	24000009 	strcs	r0, [r0], #-9
     a98:	000005ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     a9c:	031ef601 	tsteq	lr, #1048576	; 0x100000	; <UNPREDICTABLE>
     aa0:	000e2000 	andeq	r2, lr, r0
     aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
     aa8:	00033625 	andeq	r3, r3, r5, lsr #12
     aac:	14db0100 	ldrbne	r0, [fp], #256	; 0x100
     ab0:	0a200003 	beq	800ac4 <startup-0x1f7ff53c>
     ab4:	01000000 	mrseq	r0, (UNDEF: 0)
     ab8:	0309269c 	movweq	r2, #38556	; 0x969c
     abc:	d2010000 	andle	r0, r1, #0
     ac0:	200002c0 	andcs	r0, r0, r0, asr #5
     ac4:	00000054 	andeq	r0, r0, r4, asr r0
     ac8:	09d59c01 	ldmibeq	r5, {r0, sl, fp, ip, pc}^
     acc:	61270000 			; <UNDEFINED> instruction: 0x61270000
     ad0:	01000003 	tsteq	r0, r3
     ad4:	00005dd2 	ldrdeq	r5, [r0], -r2
     ad8:	6c910200 	lfmvs	f0, 4, [r1], {0}
     adc:	006f7428 	rsbeq	r7, pc, r8, lsr #8
     ae0:	005dd201 	subseq	sp, sp, r1, lsl #4
     ae4:	91020000 	mrsls	r0, (UNDEF: 2)
     ae8:	00632968 	rsbeq	r2, r3, r8, ror #18
     aec:	0139d301 	teqeq	r9, r1, lsl #6
     af0:	91020000 	mrsls	r0, (UNDEF: 2)
     af4:	e72a0077 			; <UNDEFINED> instruction: 0xe72a0077
     af8:	01000002 	tsteq	r0, r2
     afc:	00025cc4 	andeq	r5, r2, r4, asr #25
     b00:	00006420 	andeq	r6, r0, r0, lsr #8
     b04:	309c0100 	addscc	r0, ip, r0, lsl #2
     b08:	2700000a 	strcs	r0, [r0, -sl]
     b0c:	000005e6 	andeq	r0, r0, r6, ror #11
     b10:	005dc401 	subseq	ip, sp, r1, lsl #8
     b14:	91030000 	mrsls	r0, (UNDEF: 3)
     b18:	be2b7f9c 	mcrlt	15, 1, r7, cr11, cr12, {4}
     b1c:	01000003 	tsteq	r0, r3
     b20:	000a30c7 	andeq	r3, sl, r7, asr #1
     b24:	a4910300 	ldrge	r0, [r1], #768	; 0x300
     b28:	03092c7f 	movweq	r2, #40063	; 0x9c7f
     b2c:	6c010000 	stcvs	0, cr0, [r1], {-0}
     b30:	0000005d 	andeq	r0, r0, sp, asr r0
     b34:	00000a19 	andeq	r0, r0, r9, lsl sl
     b38:	762e002d 	strtvc	r0, [lr], -sp, lsr #32
     b3c:	2c200002 	stccs	0, cr0, [r0], #-8
     b40:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     b44:	ca010069 	bgt	40cf0 <startup-0x1ffbf310>
     b48:	0000005d 	andeq	r0, r0, sp, asr r0
     b4c:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b50:	01391100 	teqeq	r9, r0, lsl #2
     b54:	0a460000 	beq	1180b5c <startup-0x1ee7f4a4>
     b58:	64120000 	ldrvs	r0, [r2], #-0
     b5c:	13000000 	movwne	r0, #0
     b60:	00006412 	andeq	r6, r0, r2, lsl r4
     b64:	2a000300 	bcs	176c <startup-0x1fffe894>
     b68:	00000165 	andeq	r0, r0, r5, ror #2
     b6c:	0210b301 	andseq	fp, r0, #67108864	; 0x4000000
     b70:	004c2000 	subeq	r2, ip, r0
     b74:	9c010000 	stcls	0, cr0, [r1], {-0}
     b78:	00000a78 	andeq	r0, r0, r8, ror sl
     b7c:	0005e627 	andeq	lr, r5, r7, lsr #12
     b80:	5db30100 	ldfpls	f0, [r3]
     b84:	02000000 	andeq	r0, r0, #0
     b88:	97277491 			; <UNDEFINED> instruction: 0x97277491
     b8c:	01000001 	tsteq	r0, r1
     b90:	000139b3 			; <UNDEFINED> instruction: 0x000139b3
     b94:	73910200 	orrsvc	r0, r1, #0, 4
     b98:	05cf2a00 	strbeq	r2, [pc, #2560]	; 15a0 <startup-0x1fffea60>
     b9c:	95010000 	strls	r0, [r1, #-0]
     ba0:	200001a0 	andcs	r0, r0, r0, lsr #3
     ba4:	00000070 	andeq	r0, r0, r0, ror r0
     ba8:	0ae29c01 	beq	ff8a7bb4 <Pedro+0xdf8a60c8>
     bac:	c5270000 	strgt	r0, [r7, #-0]!
     bb0:	01000001 	tsteq	r0, r1
     bb4:	00005d95 	muleq	r0, r5, sp
     bb8:	44910200 	ldrmi	r0, [r1], #512	; 0x200
     bbc:	0002f527 	andeq	pc, r2, r7, lsr #10
     bc0:	5d950100 	ldfpls	f0, [r5]
     bc4:	02000000 	andeq	r0, r0, #0
     bc8:	62294091 	eorvs	r4, r9, #145	; 0x91
     bcc:	e2960100 	adds	r0, r6, #0, 2
     bd0:	0200000a 	andeq	r0, r0, #10
     bd4:	bc2e4891 	stclt	8, cr4, [lr], #-580	; 0xfffffdbc
     bd8:	46200001 	strtmi	r0, [r0], -r1
     bdc:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
     be0:	aa01006a 	bge	40d90 <startup-0x1ffbf270>
     be4:	0000005d 	andeq	r0, r0, sp, asr r0
     be8:	2e6c9102 	lgncse	f1, f2
     bec:	200001c2 	andcs	r0, r0, r2, asr #3
     bf0:	00000034 	andeq	r0, r0, r4, lsr r0
     bf4:	01006929 	tsteq	r0, r9, lsr #18
     bf8:	00005dab 	andeq	r5, r0, fp, lsr #27
     bfc:	68910200 	ldmvs	r1, {r9}
     c00:	11000000 	mrsne	r0, (UNDEF: 0)
     c04:	00000139 	andeq	r0, r0, r9, lsr r1
     c08:	00000af8 	strdeq	r0, [r0], -r8
     c0c:	00006412 	andeq	r6, r0, r2, lsl r4
     c10:	64120f00 	ldrvs	r0, [r2], #-3840	; 0xfffff100
     c14:	01000000 	mrseq	r0, (UNDEF: 0)
     c18:	05052f00 	streq	r2, [r5, #-3840]	; 0xfffff100
     c1c:	8f010000 	svchi	0x00010000
     c20:	20000190 	mulcs	r0, r0, r1
     c24:	00000010 	andeq	r0, r0, r0, lsl r0
     c28:	0b1b9c01 	bleq	6e7c34 <startup-0x1f9183cc>
     c2c:	e7300000 	ldr	r0, [r0, -r0]!
     c30:	01000002 	tsteq	r0, r2
     c34:	00005d8c 	andeq	r5, r0, ip, lsl #27
     c38:	00002d00 	andeq	r2, r0, r0, lsl #26
     c3c:	0003f02f 	andeq	pc, r3, pc, lsr #32
     c40:	808b0100 	addhi	r0, fp, r0, lsl #2
     c44:	10200001 	eorne	r0, r0, r1
     c48:	01000000 	mrseq	r0, (UNDEF: 0)
     c4c:	000b3e9c 	muleq	fp, ip, lr
     c50:	02e73000 	rsceq	r3, r7, #0
     c54:	8c010000 	stchi	0, cr0, [r1], {-0}
     c58:	0000005d 	andeq	r0, r0, sp, asr r0
     c5c:	2f00002d 	svccs	0x0000002d
     c60:	000002da 	ldrdeq	r0, [r0], -sl
     c64:	01326801 	teqeq	r2, r1, lsl #16
     c68:	004e2000 	subeq	r2, lr, r0
     c6c:	9c010000 	stcls	0, cr0, [r1], {-0}
     c70:	00000b97 	muleq	r0, r7, fp
     c74:	0003092c 	andeq	r0, r3, ip, lsr #18
     c78:	5d6c0100 	stfple	f0, [ip, #-0]
     c7c:	64000000 	strvs	r0, [r0], #-0
     c80:	2d00000b 	stccs	0, cr0, [r0, #-44]	; 0xffffffd4
     c84:	01483100 	mrseq	r3, (UNDEF: 88)
     c88:	00042000 	andeq	r2, r4, r0
     c8c:	0b7f0000 	bleq	1fc0c94 <startup-0x1e03f36c>
     c90:	f0300000 			; <UNDEFINED> instruction: 0xf0300000
     c94:	01000003 	tsteq	r0, r3
     c98:	00005d72 	andeq	r5, r0, r2, ror sp
     c9c:	00002d00 	andeq	r2, r0, r0, lsl #26
     ca0:	0001562e 	andeq	r5, r1, lr, lsr #12
     ca4:	00000420 	andeq	r0, r0, r0, lsr #8
     ca8:	05053000 	streq	r3, [r5, #-0]
     cac:	75010000 	strvc	r0, [r1, #-0]
     cb0:	0000005d 	andeq	r0, r0, sp, asr r0
     cb4:	0000002d 	andeq	r0, r0, sp, lsr #32
     cb8:	0003b232 	andeq	fp, r3, r2, lsr r2
     cbc:	184d0100 	stmdane	sp, {r8}^
     cc0:	1a200001 	bne	800ccc <startup-0x1f7ff334>
     cc4:	01000000 	mrseq	r0, (UNDEF: 0)
     cc8:	0408259c 	streq	r2, [r8], #-1436	; 0xfffffa64
     ccc:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     cd0:	200000b8 	strhcs	r0, [r0], -r8
     cd4:	00000060 	andeq	r0, r0, r0, rrx
     cd8:	f7339c01 			; <UNDEFINED> instruction: 0xf7339c01
     cdc:	01000004 	tsteq	r0, r4
     ce0:	0000002d 	andeq	r0, r0, sp, lsr #32
     ce4:	00000c20 	andeq	r0, r0, r0, lsr #24
     ce8:	009c0100 	addseq	r0, ip, r0, lsl #2
     cec:	000000a9 	andeq	r0, r0, r9, lsr #1
     cf0:	03680004 	cmneq	r8, #4
     cf4:	01040000 	mrseq	r0, (UNDEF: 4)
     cf8:	00000000 	andeq	r0, r0, r0
     cfc:	0006260c 	andeq	r2, r6, ip, lsl #12
     d00:	0000c100 	andeq	ip, r0, r0, lsl #2
     d04:	00032c00 	andeq	r2, r3, r0, lsl #24
     d08:	0000ca20 	andeq	ip, r0, r0, lsr #20
     d0c:	0002dd00 	andeq	sp, r2, r0, lsl #26
     d10:	064c0200 	strbeq	r0, [ip], -r0, lsl #4
     d14:	1f010000 	svcne	0x00010000
     d18:	200003de 	ldrdcs	r0, [r0], -lr
     d1c:	00000018 	andeq	r0, r0, r8, lsl r0
     d20:	00499c01 	subeq	r9, r9, r1, lsl #24
     d24:	51030000 	mrspl	r0, (UNDEF: 3)
     d28:	01000006 	tsteq	r0, r6
     d2c:	0000491f 	andeq	r4, r0, pc, lsl r9
     d30:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d34:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
     d38:	00746e69 	rsbseq	r6, r4, r9, ror #28
     d3c:	00061a02 	andeq	r1, r6, r2, lsl #20
     d40:	b4150100 	ldrlt	r0, [r5], #-256	; 0xffffff00
     d44:	2a200003 	bcs	800d58 <startup-0x1f7ff2a8>
     d48:	01000000 	mrseq	r0, (UNDEF: 0)
     d4c:	00008a9c 	muleq	r0, ip, sl
     d50:	061f0300 	ldreq	r0, [pc], -r0, lsl #6
     d54:	15010000 	strne	r0, [r1, #-0]
     d58:	00000049 	andeq	r0, r0, r9, asr #32
     d5c:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
     d60:	200003bc 			; <UNDEFINED> instruction: 0x200003bc
     d64:	0000001a 	andeq	r0, r0, sl, lsl r0
     d68:	01006906 	tsteq	r0, r6, lsl #18
     d6c:	00004919 	andeq	r4, r0, r9, lsl r9
     d70:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     d74:	0e070000 	cdpeq	0, 0, cr0, cr7, cr0, {0}
     d78:	01000006 	tsteq	r0, r6
     d7c:	0003700c 	andeq	r7, r3, ip
     d80:	00004420 	andeq	r4, r0, r0, lsr #8
     d84:	079c0100 	ldreq	r0, [ip, r0, lsl #2]
     d88:	00000658 	andeq	r0, r0, r8, asr r6
     d8c:	032c0301 			; <UNDEFINED> instruction: 0x032c0301
     d90:	00442000 	subeq	r2, r4, r0
     d94:	9c010000 	stcls	0, cr0, [r1], {-0}
     d98:	00038800 	andeq	r8, r3, r0, lsl #16
     d9c:	de000400 	cfcpysle	mvf0, mvf0
     da0:	04000003 	streq	r0, [r0], #-3
     da4:	00000001 	andeq	r0, r0, r1
     da8:	06940c00 	ldreq	r0, [r4], r0, lsl #24
     dac:	00c10000 	sbceq	r0, r1, r0
     db0:	03f80000 	mvnseq	r0, #0
     db4:	03d02000 	bicseq	r2, r0, #0
     db8:	03640000 	cmneq	r4, #0
     dbc:	22020000 	andcs	r0, r2, #0
     dc0:	30000007 	andcc	r0, r0, r7
     dc4:	00c20b02 	sbceq	r0, r2, r2, lsl #22
     dc8:	0b030000 	bleq	c0dd0 <startup-0x1ff3f230>
     dcc:	02000007 	andeq	r0, r0, #7
     dd0:	0000c20c 	andeq	ip, r0, ip, lsl #4
     dd4:	d5030000 	strle	r0, [r3, #-0]
     dd8:	02000006 	andeq	r0, r0, #6
     ddc:	0000c20d 	andeq	ip, r0, sp, lsl #4
     de0:	64030400 	strvs	r0, [r3], #-1024	; 0xfffffc00
     de4:	02000006 	andeq	r0, r0, #6
     de8:	0000c20e 	andeq	ip, r0, lr, lsl #4
     dec:	69030800 	stmdbvs	r3, {fp}
     df0:	02000006 	andeq	r0, r0, #6
     df4:	0000c20e 	andeq	ip, r0, lr, lsl #4
     df8:	e1030c00 	tst	r3, r0, lsl #24
     dfc:	02000006 	andeq	r0, r0, #6
     e00:	0000c20f 	andeq	ip, r0, pc, lsl #4
     e04:	e6031000 	str	r1, [r3], -r0
     e08:	02000006 	andeq	r0, r0, #6
     e0c:	0000c20f 	andeq	ip, r0, pc, lsl #4
     e10:	b9031400 	stmdblt	r3, {sl, ip}
     e14:	02000006 	andeq	r0, r0, #6
     e18:	0000c210 	andeq	ip, r0, r0, lsl r2
     e1c:	be031800 	cdplt	8, 0, cr1, cr3, cr0, {0}
     e20:	02000006 	andeq	r0, r0, #6
     e24:	0000c210 	andeq	ip, r0, r0, lsl r2
     e28:	19031c00 	stmdbne	r3, {sl, fp, ip}
     e2c:	02000007 	andeq	r0, r0, #7
     e30:	0000c211 	andeq	ip, r0, r1, lsl r2
     e34:	12032000 	andne	r2, r3, #0
     e38:	02000007 	andeq	r0, r0, #7
     e3c:	0000c912 	andeq	ip, r0, r2, lsl r9
     e40:	3a032400 	bcc	c9e48 <startup-0x1ff361b8>
     e44:	02000007 	andeq	r0, r0, #7
     e48:	0000e713 	andeq	lr, r0, r3, lsl r7
     e4c:	7e032800 	cdpvc	8, 0, cr2, cr3, cr0, {0}
     e50:	02000006 	andeq	r0, r0, #6
     e54:	0000e714 	andeq	lr, r0, r4, lsl r7
     e58:	04002c00 	streq	r2, [r0], #-3072	; 0xfffff400
     e5c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     e60:	04050074 	streq	r0, [r5], #-116	; 0xffffff8c
     e64:	000000cf 	andeq	r0, r0, pc, asr #1
     e68:	a1080106 	tstge	r8, r6, lsl #2
     e6c:	07000000 	streq	r0, [r0, -r0]
     e70:	000000e1 	andeq	r0, r0, r1, ror #1
     e74:	0000e108 	andeq	lr, r0, r8, lsl #2
     e78:	04050000 	streq	r0, [r5], #-0
     e7c:	00000025 	andeq	r0, r0, r5, lsr #32
     e80:	00d60405 	sbcseq	r0, r6, r5, lsl #8
     e84:	54090000 	strpl	r0, [r9], #-0
     e88:	02000007 	andeq	r0, r0, #7
     e8c:	00002515 	andeq	r2, r0, r5, lsl r5
     e90:	07530900 	ldrbeq	r0, [r3, -r0, lsl #18]
     e94:	15020000 	strne	r0, [r2, #-0]
     e98:	000000e1 	andeq	r0, r0, r1, ror #1
     e9c:	9a060106 	bls	1812bc <startup-0x1fe7ed44>
     ea0:	06000000 	streq	r0, [r0], -r0
     ea4:	00980801 	addseq	r0, r8, r1, lsl #16
     ea8:	0a0a0000 	beq	280eb0 <startup-0x1fd7f150>
     eac:	06000001 	streq	r0, [r0], -r1
     eb0:	010e0502 	tsteq	lr, r2, lsl #10
     eb4:	02060000 	andeq	r0, r6, #0
     eb8:	0000ae07 	andeq	sl, r0, r7, lsl #28
     ebc:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
     ec0:	00000105 	andeq	r0, r0, r5, lsl #2
     ec4:	ee070406 	cdp	4, 0, cr0, cr7, cr6, {0}
     ec8:	06000000 	streq	r0, [r0], -r0
     ecc:	01000508 	tsteq	r0, r8, lsl #10
     ed0:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
     ed4:	0000e907 	andeq	lr, r0, r7, lsl #18
     ed8:	07040600 	streq	r0, [r4, -r0, lsl #12]
     edc:	000000f3 	strdeq	r0, [r0], -r3
     ee0:	0000cf0b 	andeq	ip, r0, fp, lsl #30
     ee4:	00015d00 	andeq	r5, r1, r0, lsl #26
     ee8:	01400c00 	cmpeq	r0, r0, lsl #24
     eec:	0cff0000 	ldcleq	0, cr0, [pc]	; ef4 <startup-0x1ffff10c>
     ef0:	00000140 	andeq	r0, r0, r0, asr #2
     ef4:	de0d0007 	cdple	0, 0, cr0, cr13, cr7, {0}
     ef8:	01000008 	tsteq	r0, r8
     efc:	00014705 	andeq	r4, r1, r5, lsl #14
     f00:	01110b00 	tsteq	r1, r0, lsl #22
     f04:	017e0000 	cmneq	lr, r0
     f08:	400c0000 	andmi	r0, ip, r0
     f0c:	03000001 	movweq	r0, #1
     f10:	0001400c 	andeq	r4, r1, ip
     f14:	0a001300 	beq	5b1c <startup-0x1fffa4e4>
     f18:	00000168 	andeq	r0, r0, r8, ror #2
     f1c:	00072e0e 	andeq	r2, r7, lr, lsl #28
     f20:	7e080100 	adfvce	f0, f0, f0
     f24:	05000001 	streq	r0, [r0, #-1]
     f28:	0019ac03 	andseq	sl, r9, r3, lsl #24
     f2c:	06780e20 	ldrbteq	r0, [r8], -r0, lsr #28
     f30:	0c010000 	stceq	0, cr0, [r1], {-0}
     f34:	0000017e 	andeq	r0, r0, lr, ror r1
     f38:	19fc0305 	ldmibne	ip!, {r0, r2, r8, r9}^
     f3c:	6b0e2000 	blvs	388f44 <startup-0x1fc770bc>
     f40:	01000007 	tsteq	r0, r7
     f44:	00017e10 	andeq	r7, r1, r0, lsl lr
     f48:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
     f4c:	0e20001a 	miaeq	acc0, sl, r0
     f50:	00000777 	andeq	r0, r0, r7, ror r7
     f54:	017e1401 	cmneq	lr, r1, lsl #8
     f58:	03050000 	movweq	r0, #20480	; 0x5000
     f5c:	20001a9c 	mulcs	r0, ip, sl
     f60:	0000d80e 	andeq	sp, r0, lr, lsl #16
     f64:	ed1b0100 	ldfs	f0, [fp, #-0]
     f68:	05000000 	streq	r0, [r0, #-0]
     f6c:	001aec03 	andseq	lr, sl, r3, lsl #24
     f70:	07470f20 	strbeq	r0, [r7, -r0, lsr #30]
     f74:	a4010000 	strge	r0, [r1], #-0
     f78:	000000c2 	andeq	r0, r0, r2, asr #1
     f7c:	200007b4 			; <UNDEFINED> instruction: 0x200007b4
     f80:	00000014 	andeq	r0, r0, r4, lsl r0
     f84:	fd0f9c01 	stc2	12, cr9, [pc, #-4]	; f88 <startup-0x1ffff078>
     f88:	01000006 	tsteq	r0, r6
     f8c:	0000cf9e 	muleq	r0, lr, pc	; <UNPREDICTABLE>
     f90:	0007a800 	andeq	sl, r7, r0, lsl #16
     f94:	00000c20 	andeq	r0, r0, r0, lsr #24
     f98:	109c0100 	addsne	r0, ip, r0, lsl #2
     f9c:	0000073a 	andeq	r0, r0, sl, lsr r7
     fa0:	05847d01 	streq	r7, [r4, #3329]	; 0xd01
     fa4:	02242000 	eoreq	r2, r4, #0
     fa8:	9c010000 	stcls	0, cr0, [r1], {-0}
     fac:	000002c2 	andeq	r0, r0, r2, asr #5
     fb0:	00068311 	andeq	r8, r6, r1, lsl r3
     fb4:	f87d0100 			; <UNDEFINED> instruction: 0xf87d0100
     fb8:	02000000 	andeq	r0, r0, #0
     fbc:	69125491 	ldmdbvs	r2, {r0, r4, r7, sl, ip, lr}
     fc0:	0a7e0100 	beq	1f813c8 <startup-0x1e07ec38>
     fc4:	02000001 	andeq	r0, r0, #1
     fc8:	6a127791 	bvs	49ee14 <startup-0x1fb611ec>
     fcc:	0a7e0100 	beq	1f813d4 <startup-0x1e07ec2c>
     fd0:	02000001 	andeq	r0, r0, #1
     fd4:	6d127691 	ldcvs	6, cr7, [r2, #-580]	; 0xfffffdbc
     fd8:	01006e61 	tsteq	r0, r1, ror #28
     fdc:	0002c27f 	andeq	ip, r2, pc, ror r2
     fe0:	70910200 	addsvc	r0, r1, r0, lsl #4
     fe4:	0006db0e 	andeq	sp, r6, lr, lsl #22
     fe8:	c2800100 	addgt	r0, r0, #0, 2
     fec:	02000000 	andeq	r0, r0, #0
     ff0:	38136c91 	ldmdacc	r3, {r0, r4, r7, sl, fp, sp, lr}
     ff4:	42200006 	eormi	r0, r0, #6
     ff8:	83000000 	movwhi	r0, #0
     ffc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    1000:	00000727 	andeq	r0, r0, r7, lsr #14
    1004:	02c28701 	sbceq	r8, r2, #262144	; 0x40000
    1008:	91020000 	mrsls	r0, (UNDEF: 2)
    100c:	06f80e60 	ldrbteq	r0, [r8], r0, ror #28
    1010:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    1014:	0000010a 	andeq	r0, r0, sl, lsl #2
    1018:	005f9102 	subseq	r9, pc, r2, lsl #2
    101c:	00067c14 	andeq	r7, r6, r4, lsl ip
    1020:	0000d820 	andeq	sp, r0, r0, lsr #16
    1024:	07270e00 	streq	r0, [r7, -r0, lsl #28]!
    1028:	8d010000 	stchi	0, cr0, [r1, #-0]
    102c:	000002c2 	andeq	r0, r0, r2, asr #5
    1030:	0e689102 	lgneqe	f1, f2
    1034:	000006f8 	strdeq	r0, [r0], -r8
    1038:	010a8e01 	tsteq	sl, r1, lsl #28
    103c:	91020000 	mrsls	r0, (UNDEF: 2)
    1040:	06c41475 	uxtab16eq	r1, r4, r5, ror #8
    1044:	00502000 	subseq	r2, r0, r0
    1048:	c30e0000 	movwgt	r0, #57344	; 0xe000
    104c:	01000006 	tsteq	r0, r6
    1050:	00010a91 	muleq	r1, r1, sl
    1054:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1058:	05000000 	streq	r0, [r0, #-0]
    105c:	00010a04 	andeq	r0, r1, r4, lsl #20
    1060:	068a0f00 	streq	r0, [sl], r0, lsl #30
    1064:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    1068:	000000cf 	andeq	r0, r0, pc, asr #1
    106c:	2000056c 	andcs	r0, r0, ip, ror #10
    1070:	00000018 	andeq	r0, r0, r8, lsl r0
    1074:	eb159c01 	bl	568080 <startup-0x1fa97f80>
    1078:	01000006 	tsteq	r0, r6
    107c:	0005346f 	andeq	r3, r5, pc, ror #8
    1080:	00003820 	andeq	r3, r0, r0, lsr #16
    1084:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    1088:	0000066e 	andeq	r0, r0, lr, ror #12
    108c:	04744401 	ldrbteq	r4, [r4], #-1025	; 0xfffffbff
    1090:	00c02000 	sbceq	r2, r0, r0
    1094:	9c010000 	stcls	0, cr0, [r1], {-0}
    1098:	00000347 	andeq	r0, r0, r7, asr #6
    109c:	00047813 	andeq	r7, r4, r3, lsl r8
    10a0:	00007c20 	andeq	r7, r0, r0, lsr #24
    10a4:	00032f00 	andeq	r2, r3, r0, lsl #30
    10a8:	075b1700 	ldrbeq	r1, [fp, -r0, lsl #14]
    10ac:	45010000 	strmi	r0, [r1, #-0]
    10b0:	000000c2 	andeq	r0, r0, r2, asr #1
    10b4:	00000321 	andeq	r0, r0, r1, lsr #6
    10b8:	cb190018 	blgt	641120 <startup-0x1f9beee0>
    10bc:	01000006 	tsteq	r0, r6
    10c0:	0000c245 	andeq	ip, r0, r5, asr #4
    10c4:	00001800 	andeq	r1, r0, r0, lsl #16
    10c8:	00050a14 	andeq	r0, r5, r4, lsl sl
    10cc:	00001a20 	andeq	r1, r0, r0, lsr #20
    10d0:	073f1900 	ldreq	r1, [pc, -r0, lsl #18]!
    10d4:	66010000 	strvs	r0, [r1], -r0
    10d8:	000000c2 	andeq	r0, r0, r2, asr #1
    10dc:	00000018 	andeq	r0, r0, r8, lsl r0
    10e0:	0007661a 	andeq	r6, r7, sl, lsl r6
    10e4:	f82d0100 			; <UNDEFINED> instruction: 0xf82d0100
    10e8:	7c200003 	stcvc	0, cr0, [r0], #-12
    10ec:	01000000 	mrseq	r0, (UNDEF: 0)
    10f0:	040c139c 	streq	r1, [ip], #-924	; 0xfffffc64
    10f4:	00222000 	eoreq	r2, r2, r0
    10f8:	03730000 	cmneq	r3, #0
    10fc:	4c190000 	ldcmi	0, cr0, [r9], {-0}
    1100:	01000006 	tsteq	r0, r6
    1104:	0000c235 	andeq	ip, r0, r5, lsr r2
    1108:	00001800 	andeq	r1, r0, r0, lsl #16
    110c:	00043814 	andeq	r3, r4, r4, lsl r8
    1110:	00002420 	andeq	r2, r0, r0, lsr #8
    1114:	064c1900 	strbeq	r1, [ip], -r0, lsl #18
    1118:	35010000 	strcc	r0, [r1, #-0]
    111c:	000000c2 	andeq	r0, r0, r2, asr #1
    1120:	00000018 	andeq	r0, r0, r8, lsl r0
    1124:	0005b500 	andeq	fp, r5, r0, lsl #10
    1128:	56000400 	strpl	r0, [r0], -r0, lsl #8
    112c:	04000005 	streq	r0, [r0], #-5
    1130:	00000001 	andeq	r0, r0, r1
    1134:	08a30c00 	stmiaeq	r3!, {sl, fp}
    1138:	00c10000 	sbceq	r0, r1, r0
    113c:	07c80000 	strbeq	r0, [r8, r0]
    1140:	06d42000 	ldrbeq	r2, [r4], r0
    1144:	044a0000 	strbeq	r0, [sl], #-0
    1148:	01020000 	mrseq	r0, (UNDEF: 2)
    114c:	00009a06 	andeq	r9, r0, r6, lsl #20
    1150:	07f10300 	ldrbeq	r0, [r1, r0, lsl #6]!
    1154:	2b020000 	blcs	8115c <startup-0x1ff7eea4>
    1158:	00000037 	andeq	r0, r0, r7, lsr r0
    115c:	98080102 	stmdals	r8, {r1, r8}
    1160:	02000000 	andeq	r0, r0, #0
    1164:	010e0502 	tsteq	lr, r2, lsl #10
    1168:	02020000 	andeq	r0, r2, #0
    116c:	0000ae07 	andeq	sl, r0, r7, lsl #28
    1170:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    1174:	00000105 	andeq	r0, r0, r5, lsl #2
    1178:	ee070402 	cdp	4, 0, cr0, cr7, cr2, {0}
    117c:	02000000 	andeq	r0, r0, #0
    1180:	01000508 	tsteq	r0, r8, lsl #10
    1184:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    1188:	0000e907 	andeq	lr, r0, r7, lsl #18
    118c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    1190:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1194:	f3070402 	vshl.u8	d0, d2, d7
    1198:	03000000 	movweq	r0, #0
    119c:	000007f3 	strdeq	r0, [r0], -r3
    11a0:	002c1803 	eoreq	r1, ip, r3, lsl #16
    11a4:	02050000 	andeq	r0, r5, #0
    11a8:	00a20c04 	adceq	r0, r2, r4, lsl #24
    11ac:	82060000 	andhi	r0, r6, #0
    11b0:	04000002 	streq	r0, [r0], #-2
    11b4:	0000370d 	andeq	r3, r0, sp, lsl #14
    11b8:	7d060000 	stcvc	0, cr0, [r6, #-0]
    11bc:	04000001 	streq	r0, [r0], #-1
    11c0:	0000370e 	andeq	r3, r0, lr, lsl #14
    11c4:	07000100 	streq	r0, [r0, -r0, lsl #2]
    11c8:	bb0a0404 	bllt	2821e0 <startup-0x1fd7de20>
    11cc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    11d0:	00726469 	rsbseq	r6, r2, r9, ror #8
    11d4:	006f0b04 	rsbeq	r0, pc, r4, lsl #22
    11d8:	81090000 	mrshi	r0, (UNDEF: 9)
    11dc:	00000000 	andeq	r0, r0, r0
    11e0:	13040205 	movwne	r0, #16901	; 0x4205
    11e4:	000000dc 	ldrdeq	r0, [r0], -ip
    11e8:	0003db06 	andeq	sp, r3, r6, lsl #22
    11ec:	37140400 	ldrcc	r0, [r4, -r0, lsl #8]
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	0001ea06 	andeq	lr, r1, r6, lsl #20
    11f8:	37150400 	ldrcc	r0, [r5, -r0, lsl #8]
    11fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1200:	04040700 	streq	r0, [r4], #-1792	; 0xfffff900
    1204:	0000f511 	andeq	pc, r0, r1, lsl r5	; <UNPREDICTABLE>
    1208:	646f0800 	strbtvs	r0, [pc], #-2048	; 1210 <startup-0x1fffedf0>
    120c:	12040072 	andne	r0, r4, #114	; 0x72
    1210:	0000006f 	andeq	r0, r0, pc, rrx
    1214:	0000bb09 	andeq	fp, r0, r9, lsl #22
    1218:	d50a0000 	strle	r0, [sl, #-0]
    121c:	18000003 	stmdane	r0, {r0, r1}
    1220:	013e0404 	teqeq	lr, r4, lsl #8
    1224:	16060000 	strne	r0, [r6], -r0
    1228:	04000002 	streq	r0, [r0], #-2
    122c:	00006f05 	andeq	r6, r0, r5, lsl #30
    1230:	90060000 	andls	r0, r6, r0
    1234:	04000001 	streq	r0, [r0], #-1
    1238:	00006f06 	andeq	r6, r0, r6, lsl #30
    123c:	fa060400 	blx	182244 <startup-0x1fe7ddbc>
    1240:	04000002 	streq	r0, [r0], #-2
    1244:	00006f07 	andeq	r6, r0, r7, lsl #30
    1248:	ca060800 	bgt	183250 <startup-0x1fe7cdb0>
    124c:	04000001 	streq	r0, [r0], #-1
    1250:	00006f08 	andeq	r6, r0, r8, lsl #30
    1254:	a20b0c00 	andge	r0, fp, #0, 24
    1258:	10000000 	andne	r0, r0, r0
    125c:	0000dc0b 	andeq	sp, r0, fp, lsl #24
    1260:	03001400 	movweq	r1, #1024	; 0x400
    1264:	000005e1 	andeq	r0, r0, r1, ror #11
    1268:	00f51804 	rscseq	r1, r5, r4, lsl #16
    126c:	760c0000 	strvc	r0, [ip], -r0
    1270:	5f000000 	svcpl	0x00000000
    1274:	0d000001 	stceq	0, cr0, [r0, #-4]
    1278:	0000006f 	andeq	r0, r0, pc, rrx
    127c:	006f0dff 	strdeq	r0, [pc], #-223	; <UNPREDICTABLE>
    1280:	00070000 	andeq	r0, r7, r0
    1284:	0008de0e 	andeq	sp, r8, lr, lsl #28
    1288:	49060100 	stmdbmi	r6, {r8}
    128c:	05000001 	streq	r0, [r0, #-1]
    1290:	0011ac03 	andseq	sl, r1, r3, lsl #24
    1294:	07890f20 	streq	r0, [r9, r0, lsr #30]
    1298:	ea010000 	b	412a0 <startup-0x1ffbed60>
    129c:	20000e24 	andcs	r0, r0, r4, lsr #28
    12a0:	00000078 	andeq	r0, r0, r8, ror r0
    12a4:	01cc9c01 	biceq	r9, ip, r1, lsl #24
    12a8:	2a100000 	bcs	4012b0 <startup-0x1fbfed50>
    12ac:	4420000e 	strtmi	r0, [r0], #-14
    12b0:	b5000000 	strlt	r0, [r0, #-0]
    12b4:	11000001 	tstne	r0, r1
    12b8:	eb010069 	bl	41464 <startup-0x1ffbeb9c>
    12bc:	00000068 	andeq	r0, r0, r8, rrx
    12c0:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    12c4:	20000e30 	andcs	r0, r0, r0, lsr lr
    12c8:	00000032 	andeq	r0, r0, r2, lsr r0
    12cc:	01006a11 	tsteq	r0, r1, lsl sl
    12d0:	000068ec 	andeq	r6, r0, ip, ror #17
    12d4:	70910200 	addsvc	r0, r1, r0, lsl #4
    12d8:	6e120000 	cdpvs	0, 1, cr0, cr2, cr0, {0}
    12dc:	2220000e 	eorcs	r0, r0, #14
    12e0:	11000000 	mrsne	r0, (UNDEF: 0)
    12e4:	f001006a 			; <UNDEFINED> instruction: 0xf001006a
    12e8:	00000068 	andeq	r0, r0, r8, rrx
    12ec:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    12f0:	08460f00 	stmdaeq	r6, {r8, r9, sl, fp}^
    12f4:	e0010000 	and	r0, r1, r0
    12f8:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
    12fc:	00000074 	andeq	r0, r0, r4, ror r0
    1300:	02289c01 	eoreq	r9, r8, #256	; 0x100
    1304:	b6100000 	ldrlt	r0, [r0], -r0
    1308:	4420000d 	strtmi	r0, [r0], #-13
    130c:	11000000 	mrsne	r0, (UNDEF: 0)
    1310:	11000002 	tstne	r0, r2
    1314:	e1010069 	tst	r1, r9, rrx
    1318:	00000068 	andeq	r0, r0, r8, rrx
    131c:	12749102 	rsbsne	r9, r4, #-2147483648	; 0x80000000
    1320:	20000dbc 			; <UNDEFINED> instruction: 0x20000dbc
    1324:	00000032 	andeq	r0, r0, r2, lsr r0
    1328:	01006a11 	tsteq	r0, r1, lsl sl
    132c:	000068e2 	andeq	r6, r0, r2, ror #17
    1330:	70910200 	addsvc	r0, r1, r0, lsl #4
    1334:	fa120000 	blx	48133c <startup-0x1fb7ecc4>
    1338:	1c20000d 	stcne	0, cr0, [r0], #-52	; 0xffffffcc
    133c:	11000000 	mrsne	r0, (UNDEF: 0)
    1340:	e601006a 	str	r0, [r1], -sl, rrx
    1344:	00000068 	andeq	r0, r0, r8, rrx
    1348:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    134c:	07931300 	ldreq	r1, [r3, r0, lsl #6]
    1350:	b0010000 	andlt	r0, r1, r0
    1354:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
    1358:	000000e0 	andeq	r0, r0, r0, ror #1
    135c:	027c9c01 	rsbseq	r9, ip, #256	; 0x100
    1360:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    1364:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    1368:	02000000 	andeq	r0, r0, #0
    136c:	6a116f91 	bvs	45d1b8 <startup-0x1fba2e48>
    1370:	76b10100 	ldrtvc	r0, [r1], r0, lsl #2
    1374:	02000000 	andeq	r0, r0, #0
    1378:	85146e91 	ldrhi	r6, [r4, #-3729]	; 0xfffff16f
    137c:	01000008 	tsteq	r0, r8
    1380:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    1384:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    1388:	01006311 	tsteq	r0, r1, lsl r3
    138c:	000076b1 			; <UNDEFINED> instruction: 0x000076b1
    1390:	6d910200 	lfmvs	f0, 4, [r1]
    1394:	01006b11 	tsteq	r0, r1, lsl fp
    1398:	00006fb2 			; <UNDEFINED> instruction: 0x00006fb2
    139c:	68910200 	ldmvs	r1, {r9}
    13a0:	08331500 	ldmdaeq	r3!, {r8, sl, ip}
    13a4:	ac010000 	stcge	0, cr0, [r1], {-0}
    13a8:	20000ca0 	andcs	r0, r0, r0, lsr #25
    13ac:	00000030 	andeq	r0, r0, r0, lsr r0
    13b0:	02ba9c01 	adcseq	r9, sl, #256	; 0x100
    13b4:	c5160000 	ldrgt	r0, [r6, #-0]
    13b8:	01000001 	tsteq	r0, r1
    13bc:	000068ac 	andeq	r6, r0, ip, lsr #17
    13c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    13c4:	0002f516 	andeq	pc, r2, r6, lsl r5	; <UNPREDICTABLE>
    13c8:	68ac0100 	stmiavs	ip!, {r8}
    13cc:	02000000 	andeq	r0, r0, #0
    13d0:	63177091 	tstvs	r7, #145	; 0x91
    13d4:	baac0100 	blt	feb017dc <Pedro+0xdeaffcf0>
    13d8:	02000002 	andeq	r0, r0, #2
    13dc:	02006f91 	andeq	r6, r0, #580	; 0x244
    13e0:	00a10801 	adceq	r0, r1, r1, lsl #16
    13e4:	cb150000 	blgt	5413ec <startup-0x1fabec14>
    13e8:	01000008 	tsteq	r0, r8
    13ec:	000c74a9 	andeq	r7, ip, r9, lsr #9
    13f0:	00002c20 	andeq	r2, r0, r0, lsr #24
    13f4:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    13f8:	16000002 	strne	r0, [r0], -r2
    13fc:	000001c5 	andeq	r0, r0, r5, asr #3
    1400:	0068a901 	rsbeq	sl, r8, r1, lsl #18
    1404:	91020000 	mrsls	r0, (UNDEF: 2)
    1408:	02f51674 	rscseq	r1, r5, #116, 12	; 0x7400000
    140c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1410:	00000068 	andeq	r0, r0, r8, rrx
    1414:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
    1418:	a9010063 	stmdbge	r1, {r0, r1, r5, r6}
    141c:	000002ba 			; <UNDEFINED> instruction: 0x000002ba
    1420:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    1424:	00078315 	andeq	r8, r7, r5, lsl r3
    1428:	c09d0100 	addsgt	r0, sp, r0, lsl #2
    142c:	b420000b 	strtlt	r0, [r0], #-11
    1430:	01000000 	mrseq	r0, (UNDEF: 0)
    1434:	0003499c 	muleq	r3, ip, r9
    1438:	00781700 	rsbseq	r1, r8, r0, lsl #14
    143c:	00689d01 	rsbeq	r9, r8, r1, lsl #26
    1440:	91020000 	mrsls	r0, (UNDEF: 2)
    1444:	0079176c 	rsbseq	r1, r9, ip, ror #14
    1448:	00689d01 	rsbeq	r9, r8, r1, lsl #26
    144c:	91020000 	mrsls	r0, (UNDEF: 2)
    1450:	65731768 	ldrbvs	r1, [r3, #-1896]!	; 0xfffff898
    1454:	9d010074 	stcls	0, cr0, [r1, #-464]	; 0xfffffe30
    1458:	00000068 	andeq	r0, r0, r8, rrx
    145c:	14649102 	strbtne	r9, [r4], #-258	; 0xfffffefe
    1460:	00000879 	andeq	r0, r0, r9, ror r8
    1464:	00769f01 	rsbseq	r9, r6, r1, lsl #30
    1468:	91020000 	mrsls	r0, (UNDEF: 2)
    146c:	d80f0077 	stmdale	pc, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
    1470:	01000008 	tsteq	r0, r8
    1474:	000b7896 	muleq	fp, r6, r8
    1478:	00004820 	andeq	r4, r0, r0, lsr #16
    147c:	8b9c0100 	blhi	fe701884 <Pedro+0xde6ffd98>
    1480:	12000003 	andne	r0, r0, #3
    1484:	20000b7e 	andcs	r0, r0, lr, ror fp
    1488:	00000034 	andeq	r0, r0, r4, lsr r0
    148c:	01006911 	tsteq	r0, r1, lsl r9
    1490:	00006897 	muleq	r0, r7, r8
    1494:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1498:	000b8412 	andeq	r8, fp, r2, lsl r4
    149c:	00002220 	andeq	r2, r0, r0, lsr #4
    14a0:	006a1100 	rsbeq	r1, sl, r0, lsl #2
    14a4:	00689801 	rsbeq	r9, r8, r1, lsl #16
    14a8:	91020000 	mrsls	r0, (UNDEF: 2)
    14ac:	00000070 	andeq	r0, r0, r0, ror r0
    14b0:	0007bd13 	andeq	fp, r7, r3, lsl sp
    14b4:	3a8d0100 	bcc	fe3418bc <Pedro+0xde33fdd0>
    14b8:	3e20000b 	cdpcc	0, 2, cr0, cr0, cr11, {0}
    14bc:	01000000 	mrseq	r0, (UNDEF: 0)
    14c0:	0003cd9c 	muleq	r3, ip, sp
    14c4:	0b401200 	bleq	1005ccc <startup-0x1effa334>
    14c8:	00302000 	eorseq	r2, r0, r0
    14cc:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
    14d0:	688e0100 	stmvs	lr, {r8}
    14d4:	02000000 	andeq	r0, r0, #0
    14d8:	46127491 			; <UNDEFINED> instruction: 0x46127491
    14dc:	1e20000b 	cdpne	0, 2, cr0, cr0, cr11, {0}
    14e0:	11000000 	mrsne	r0, (UNDEF: 0)
    14e4:	8f01006a 	svchi	0x0001006a
    14e8:	00000068 	andeq	r0, r0, r8, rrx
    14ec:	00709102 	rsbseq	r9, r0, r2, lsl #2
    14f0:	fb130000 	blx	4c14fa <startup-0x1fb3eb06>
    14f4:	01000007 	tsteq	r0, r7
    14f8:	000af486 	andeq	pc, sl, r6, lsl #9
    14fc:	00004620 	andeq	r4, r0, r0, lsr #12
    1500:	ff9c0100 			; <UNDEFINED> instruction: 0xff9c0100
    1504:	16000003 	strne	r0, [r0], -r3
    1508:	000007ec 	andeq	r0, r0, ip, ror #15
    150c:	00768601 	rsbseq	r8, r6, r1, lsl #12
    1510:	91020000 	mrsls	r0, (UNDEF: 2)
    1514:	08851677 	stmeq	r5, {r0, r1, r2, r4, r5, r6, r9, sl, ip}
    1518:	86010000 	strhi	r0, [r1], -r0
    151c:	00000076 	andeq	r0, r0, r6, ror r0
    1520:	00769102 	rsbseq	r9, r6, r2, lsl #2
    1524:	0007a713 	andeq	sl, r7, r3, lsl r7
    1528:	b4800100 	strlt	r0, [r0], #256	; 0x100
    152c:	4020000a 	eormi	r0, r0, sl
    1530:	01000000 	mrseq	r0, (UNDEF: 0)
    1534:	0004319c 	muleq	r4, ip, r1
    1538:	07b51600 	ldreq	r1, [r5, r0, lsl #12]!
    153c:	80010000 	andhi	r0, r1, r0
    1540:	00000076 	andeq	r0, r0, r6, ror r0
    1544:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
    1548:	00000885 	andeq	r0, r0, r5, lsl #17
    154c:	00768001 	rsbseq	r8, r6, r1
    1550:	91020000 	mrsls	r0, (UNDEF: 2)
    1554:	25130076 	ldrcs	r0, [r3, #-118]	; 0xffffff8a
    1558:	01000008 	tsteq	r0, r8
    155c:	000a3e6b 	andeq	r3, sl, fp, ror #28
    1560:	00007620 	andeq	r7, r0, r0, lsr #12
    1564:	709c0100 	addsvc	r0, ip, r0, lsl #2
    1568:	16000004 	strne	r0, [r0], -r4
    156c:	000004cc 	andeq	r0, r0, ip, asr #9
    1570:	00766b01 	rsbseq	r6, r6, r1, lsl #22
    1574:	91020000 	mrsls	r0, (UNDEF: 2)
    1578:	08851677 	stmeq	r5, {r0, r1, r2, r4, r5, r6, r9, sl, ip}
    157c:	6b010000 	blvs	41584 <startup-0x1ffbea7c>
    1580:	00000076 	andeq	r0, r0, r6, ror r0
    1584:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
    1588:	0000060e 	andeq	r0, r0, lr, lsl #12
    158c:	00684201 	rsbeq	r4, r8, r1, lsl #4
    1590:	00190000 	andseq	r0, r9, r0
    1594:	07df1a00 	ldrbeq	r1, [pc, r0, lsl #20]
    1598:	66010000 	strvs	r0, [r1], -r0
    159c:	00000076 	andeq	r0, r0, r6, ror r0
    15a0:	20000a14 	andcs	r0, r0, r4, lsl sl
    15a4:	0000002a 	andeq	r0, r0, sl, lsr #32
    15a8:	04989c01 	ldreq	r9, [r8], #3073	; 0xc01
    15ac:	85160000 	ldrhi	r0, [r6, #-0]
    15b0:	01000008 	tsteq	r0, r8
    15b4:	00007666 	andeq	r7, r0, r6, ror #12
    15b8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    15bc:	07d21a00 	ldrbeq	r1, [r2, r0, lsl #20]
    15c0:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
    15c4:	00000076 	andeq	r0, r0, r6, ror r0
    15c8:	20000984 	andcs	r0, r0, r4, lsl #19
    15cc:	00000090 	muleq	r0, r0, r0
    15d0:	04d99c01 	ldrbeq	r9, [r9], #3073	; 0xc01
    15d4:	85160000 	ldrhi	r0, [r6, #-0]
    15d8:	01000008 	tsteq	r0, r8
    15dc:	0000764e 	andeq	r7, r0, lr, asr #12
    15e0:	6f910200 	svcvs	0x00910200
    15e4:	01006311 	tsteq	r0, r1, lsl r3
    15e8:	0000764f 	andeq	r7, r0, pc, asr #12
    15ec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    15f0:	00060e18 	andeq	r0, r6, r8, lsl lr
    15f4:	68420100 	stmdavs	r2, {r8}^
    15f8:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
    15fc:	661b0000 	ldrvs	r0, [fp], -r0
    1600:	01000008 	tsteq	r0, r8
    1604:	00091a3c 	andeq	r1, r9, ip, lsr sl
    1608:	00006a20 	andeq	r6, r0, r0, lsr #20
    160c:	089c0100 	ldmeq	ip, {r8}
    1610:	11000005 	tstne	r0, r5
    1614:	3d010063 	stccc	0, cr0, [r1, #-396]	; 0xfffffe74
    1618:	00000076 	andeq	r0, r0, r6, ror r0
    161c:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
    1620:	0000060e 	andeq	r0, r0, lr, lsl #12
    1624:	00684201 	rsbeq	r4, r8, r1, lsl #4
    1628:	00190000 	andseq	r0, r9, r0
    162c:	08901300 	ldmeq	r0, {r8, r9, ip}
    1630:	2c010000 	stccs	0, cr0, [r1], {-0}
    1634:	200008b6 			; <UNDEFINED> instruction: 0x200008b6
    1638:	00000064 	andeq	r0, r0, r4, rrx
    163c:	053c9c01 	ldreq	r9, [ip, #-3073]!	; 0xfffff3ff
    1640:	1a1c0000 	bne	701648 <startup-0x1f8fe9b8>
    1644:	01000006 	tsteq	r0, r6
    1648:	0000682e 	andeq	r6, r0, lr, lsr #16
    164c:	00052e00 	andeq	r2, r5, r0, lsl #28
    1650:	18001900 	stmdane	r0, {r8, fp, ip}
    1654:	0000064c 	andeq	r0, r0, ip, asr #12
    1658:	00683001 	rsbeq	r3, r8, r1
    165c:	00190000 	andseq	r0, r9, r0
    1660:	087e1b00 	ldmdaeq	lr!, {r8, r9, fp, ip}^
    1664:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    1668:	2000085c 	andcs	r0, r0, ip, asr r8
    166c:	0000005a 	andeq	r0, r0, sl, asr r0
    1670:	05609c01 	strbeq	r9, [r0, #-3073]!	; 0xfffff3ff
    1674:	85160000 	ldrhi	r0, [r6, #-0]
    1678:	01000008 	tsteq	r0, r8
    167c:	00007619 	andeq	r7, r0, r9, lsl r6
    1680:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    1684:	080e1d00 	stmdaeq	lr, {r8, sl, fp, ip}
    1688:	11010000 	mrsne	r0, (UNDEF: 1)
    168c:	2000080c 	andcs	r0, r0, ip, lsl #16
    1690:	00000050 	andeq	r0, r0, r0, asr r0
    1694:	058e9c01 	streq	r9, [lr, #3073]	; 0xc01
    1698:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
    169c:	37110100 	ldrcc	r0, [r1, -r0, lsl #2]
    16a0:	02000000 	andeq	r0, r0, #0
    16a4:	63116f91 	tstvs	r1, #580	; 0x244
    16a8:	ba120100 	blt	481ab0 <startup-0x1fb7e550>
    16ac:	02000002 	andeq	r0, r0, #2
    16b0:	1e007791 	mcrne	7, 0, r7, cr0, cr1, {4}
    16b4:	00000851 	andeq	r0, r0, r1, asr r8
    16b8:	07c80901 	strbeq	r0, [r8, r1, lsl #18]
    16bc:	00442000 	subeq	r2, r4, r0
    16c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    16c4:	01007817 	tsteq	r0, r7, lsl r8
    16c8:	00003709 	andeq	r3, r0, r9, lsl #14
    16cc:	6f910200 	svcvs	0x00910200
    16d0:	01006311 	tsteq	r0, r1, lsl r3
    16d4:	0002ba0a 	andeq	fp, r2, sl, lsl #20
    16d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    16dc:	017a0000 	cmneq	sl, r0
    16e0:	00040000 	andeq	r0, r4, r0
    16e4:	0000072a 	andeq	r0, r0, sl, lsr #14
    16e8:	00000104 	andeq	r0, r0, r4, lsl #2
    16ec:	e90c0000 	stmdb	ip, {}	; <UNPREDICTABLE>
    16f0:	c1000008 	tstgt	r0, r8
    16f4:	9c000000 	stcls	0, cr0, [r0], {-0}
    16f8:	2420000e 	strtcs	r0, [r0], #-14
    16fc:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
    1700:	02000006 	andeq	r0, r0, #6
    1704:	460c0202 	strmi	r0, [ip], -r2, lsl #4
    1708:	03000000 	movweq	r0, #0
    170c:	00000282 	andeq	r0, r0, r2, lsl #5
    1710:	00460d02 	subeq	r0, r6, r2, lsl #26
    1714:	03000000 	movweq	r0, #0
    1718:	0000017d 	andeq	r0, r0, sp, ror r1
    171c:	00460e02 	subeq	r0, r6, r2, lsl #28
    1720:	00010000 	andeq	r0, r1, r0
    1724:	98080104 	stmdals	r8, {r2, r8}
    1728:	05000000 	streq	r0, [r0, #-0]
    172c:	660a0204 	strvs	r0, [sl], -r4, lsl #4
    1730:	06000000 	streq	r0, [r0], -r0
    1734:	00726469 	rsbseq	r6, r2, r9, ror #8
    1738:	00660b02 	rsbeq	r0, r6, r2, lsl #22
    173c:	25070000 	strcs	r0, [r7, #-0]
    1740:	00000000 	andeq	r0, r0, r0
    1744:	f3070404 	vshl.u8	d0, d4, d7
    1748:	02000000 	andeq	r0, r0, #0
    174c:	8e130202 	cdphi	2, 1, cr0, cr3, cr2, {0}
    1750:	03000000 	movweq	r0, #0
    1754:	000003db 	ldrdeq	r0, [r0], -fp
    1758:	00461402 	subeq	r1, r6, r2, lsl #8
    175c:	03000000 	movweq	r0, #0
    1760:	000001ea 	andeq	r0, r0, sl, ror #3
    1764:	00461502 	subeq	r1, r6, r2, lsl #10
    1768:	00010000 	andeq	r0, r1, r0
    176c:	11020405 	tstne	r2, r5, lsl #8
    1770:	000000a7 	andeq	r0, r0, r7, lsr #1
    1774:	72646f06 	rsbvc	r6, r4, #6, 30
    1778:	66120200 	ldrvs	r0, [r2], -r0, lsl #4
    177c:	07000000 	streq	r0, [r0, -r0]
    1780:	0000006d 	andeq	r0, r0, sp, rrx
    1784:	03d50800 	bicseq	r0, r5, #0, 16
    1788:	02180000 	andseq	r0, r8, #0
    178c:	0000f004 	andeq	pc, r0, r4
    1790:	02160300 	andseq	r0, r6, #0, 6
    1794:	05020000 	streq	r0, [r2, #-0]
    1798:	00000066 	andeq	r0, r0, r6, rrx
    179c:	01900300 	orrseq	r0, r0, r0, lsl #6
    17a0:	06020000 	streq	r0, [r2], -r0
    17a4:	00000066 	andeq	r0, r0, r6, rrx
    17a8:	02fa0304 	rscseq	r0, sl, #4, 6	; 0x10000000
    17ac:	07020000 	streq	r0, [r2, -r0]
    17b0:	00000066 	andeq	r0, r0, r6, rrx
    17b4:	01ca0308 	biceq	r0, sl, r8, lsl #6
    17b8:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    17bc:	00000066 	andeq	r0, r0, r6, rrx
    17c0:	004d090c 	subeq	r0, sp, ip, lsl #18
    17c4:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    17c8:	0000008e 	andeq	r0, r0, lr, lsl #1
    17cc:	e10a0014 	tst	sl, r4, lsl r0
    17d0:	02000005 	andeq	r0, r0, #5
    17d4:	0000a718 	andeq	sl, r0, r8, lsl r7
    17d8:	06cb0b00 	strbeq	r0, [fp], r0, lsl #22
    17dc:	36010000 	strcc	r0, [r1], -r0
    17e0:	00000110 	andeq	r0, r0, r0, lsl r1
    17e4:	20000f9a 	mulcs	r0, sl, pc	; <UNPREDICTABLE>
    17e8:	00000026 	andeq	r0, r0, r6, lsr #32
    17ec:	01049c01 	tsteq	r4, r1, lsl #24
    17f0:	0000a108 	andeq	sl, r0, r8, lsl #2
    17f4:	075b0b00 	ldrbeq	r0, [fp, -r0, lsl #22]
    17f8:	2d010000 	stccs	0, cr0, [r1, #-0]
    17fc:	00000110 	andeq	r0, r0, r0, lsl r1
    1800:	20000f74 	andcs	r0, r0, r4, ror pc
    1804:	00000026 	andeq	r0, r0, r6, lsr #32
    1808:	3f0b9c01 	svccc	0x000b9c01
    180c:	01000007 	tsteq	r0, r7
    1810:	00011024 	andeq	r1, r1, r4, lsr #32
    1814:	000f4800 	andeq	r4, pc, r0, lsl #16
    1818:	00002c20 	andeq	r2, r0, r0, lsr #24
    181c:	0c9c0100 	ldfeqs	f0, [ip], {0}
    1820:	00000911 	andeq	r0, r0, r1, lsl r9
    1824:	01561701 	cmpeq	r6, r1, lsl #14
    1828:	0ef00000 	cdpeq	0, 15, cr0, cr0, cr0, {0}
    182c:	00582000 	subseq	r2, r8, r0
    1830:	9c010000 	stcls	0, cr0, [r1], {-0}
    1834:	6905040d 	stmdbvs	r5, {r0, r2, r3, sl}
    1838:	0e00746e 	cdpeq	4, 0, cr7, cr0, cr14, {3}
    183c:	0000091b 	andeq	r0, r0, fp, lsl r9
    1840:	0e9c0401 	cdpeq	4, 9, cr0, cr12, cr1, {0}
    1844:	00542000 	subseq	r2, r4, r0
    1848:	9c010000 	stcls	0, cr0, [r1], {-0}
    184c:	776f720f 	strbvc	r7, [pc, -pc, lsl #4]!
    1850:	66040100 	strvs	r0, [r4], -r0, lsl #2
    1854:	02000000 	andeq	r0, r0, #0
    1858:	00007491 	muleq	r0, r1, r4

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
  38:	03193f01 	tsteq	r9, #1, 30
  3c:	3b0b3a0e 	blcc	2ce87c <startup-0x1fd31784>
  40:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
  44:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
  48:	97184006 	ldrls	r4, [r8, -r6]
  4c:	13011942 	movwne	r1, #6466	; 0x1942
  50:	05060000 	streq	r0, [r6, #-0]
  54:	3a0e0300 	bcc	380c5c <startup-0x1fc7f3a4>
  58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  5c:	00180213 	andseq	r0, r8, r3, lsl r2
  60:	00340700 	eorseq	r0, r4, r0, lsl #14
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  6c:	00001802 	andeq	r1, r0, r2, lsl #16
  70:	11010b08 	tstne	r1, r8, lsl #22
  74:	00061201 	andeq	r1, r6, r1, lsl #4
  78:	000f0900 	andeq	r0, pc, r0, lsl #18
  7c:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  80:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
  84:	03193f01 	tsteq	r9, #1, 30
  88:	3b0b3a0e 	blcc	2ce8c8 <startup-0x1fd31738>
  8c:	1119270b 	tstne	r9, fp, lsl #14
  90:	40061201 	andmi	r1, r6, r1, lsl #4
  94:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  98:	01000000 	mrseq	r0, (UNDEF: 0)
  9c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
  a0:	0e030b13 	vmoveq.32	d3[0], r0
  a4:	17550e1b 	smmlane	r5, fp, lr, r0
  a8:	17100111 			; <UNDEFINED> instruction: 0x17100111
  ac:	24020000 	strcs	r0, [r2], #-0
  b0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  b4:	000e030b 	andeq	r0, lr, fp, lsl #6
  b8:	00240300 	eoreq	r0, r4, r0, lsl #6
  bc:	0b3e0b0b 	bleq	f82cf0 <startup-0x1f07d310>
  c0:	00000803 	andeq	r0, r0, r3, lsl #16
  c4:	0b011304 	bleq	44cdc <startup-0x1ffbb324>
  c8:	3b0b3a0b 	blcc	2ce8fc <startup-0x1fd31704>
  cc:	0013010b 	andseq	r0, r3, fp, lsl #2
  d0:	000d0500 	andeq	r0, sp, r0, lsl #10
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  dc:	00000b38 	andeq	r0, r0, r8, lsr fp
  e0:	0b011706 	bleq	45d00 <startup-0x1ffba300>
  e4:	3b0b3a0b 	blcc	2ce918 <startup-0x1fd316e8>
  e8:	0013010b 	andseq	r0, r3, fp, lsl #2
  ec:	000d0700 	andeq	r0, sp, r0, lsl #14
  f0:	0b3a0803 	bleq	e82104 <startup-0x1f17defc>
  f4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  f8:	0d080000 	stceq	0, cr0, [r8, #-0]
  fc:	00134900 	andseq	r4, r3, r0, lsl #18
 100:	01130900 	tsteq	r3, r0, lsl #18
 104:	0b0b0e03 	bleq	2c3918 <startup-0x1fd3c6e8>
 108:	0b3b0b3a 	bleq	ec2df8 <startup-0x1f13d208>
 10c:	00001301 	andeq	r1, r0, r1, lsl #6
 110:	49000d0a 	stmdbmi	r0, {r1, r3, r8, sl, fp}
 114:	000b3813 	andeq	r3, fp, r3, lsl r8
 118:	00160b00 	andseq	r0, r6, r0, lsl #22
 11c:	0b3a0e03 	bleq	e83930 <startup-0x1f17c6d0>
 120:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 124:	0f0c0000 	svceq	0x000c0000
 128:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 12c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
 130:	13490026 	movtne	r0, #36902	; 0x9026
 134:	130e0000 	movwne	r0, #57344	; 0xe000
 138:	3c0e0300 	stccc	3, cr0, [lr], {-0}
 13c:	0f000019 	svceq	0x00000019
 140:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 148:	00001349 	andeq	r1, r0, r9, asr #6
 14c:	03000d10 	movweq	r0, #3344	; 0xd10
 150:	3b0b3a0e 	blcc	2ce990 <startup-0x1fd31670>
 154:	0013490b 	andseq	r4, r3, fp, lsl #18
 158:	01011100 	mrseq	r1, (UNDEF: 17)
 15c:	13011349 	movwne	r1, #4937	; 0x1349
 160:	21120000 	tstcs	r2, r0
 164:	2f134900 	svccs	0x00134900
 168:	1300000b 	movwne	r0, #11
 16c:	0b0b000f 	bleq	2c01b0 <startup-0x1fd3fe50>
 170:	0d140000 	ldceq	0, cr0, [r4, #-0]
 174:	3a080300 	bcc	200d7c <startup-0x1fdff284>
 178:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 17c:	000b3813 	andeq	r3, fp, r3, lsl r8
 180:	01131500 	tsteq	r3, r0, lsl #10
 184:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
 188:	0b3b0b3a 	bleq	ec2e78 <startup-0x1f13d188>
 18c:	00001301 	andeq	r1, r0, r1, lsl #6
 190:	03000d16 	movweq	r0, #3350	; 0xd16
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 19c:	17000005 	strne	r0, [r0, -r5]
 1a0:	19270015 	stmdbne	r7!, {r0, r2, r4}
 1a4:	15180000 	ldrne	r0, [r8, #-0]
 1a8:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
 1ac:	00130113 	andseq	r0, r3, r3, lsl r1
 1b0:	00051900 	andeq	r1, r5, r0, lsl #18
 1b4:	00001349 	andeq	r1, r0, r9, asr #6
 1b8:	0301131a 	movweq	r1, #4890	; 0x131a
 1bc:	3a050b0e 	bcc	142dfc <startup-0x1febd204>
 1c0:	01053b0b 	tsteq	r5, fp, lsl #22
 1c4:	1b000013 	blne	218 <startup-0x1ffffde8>
 1c8:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 1cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1d0:	0b381349 	bleq	e04efc <startup-0x1f1fb104>
 1d4:	0d1c0000 	ldceq	0, cr0, [ip, #-0]
 1d8:	3a0e0300 	bcc	380de0 <startup-0x1fc7f220>
 1dc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	00053813 	andeq	r3, r5, r3, lsl r8
 1e4:	01131d00 	tsteq	r3, r0, lsl #26
 1e8:	0b0b0e03 	bleq	2c39fc <startup-0x1fd3c604>
 1ec:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f0:	00001301 	andeq	r1, r0, r1, lsl #6
 1f4:	0b01131e 	bleq	44e74 <startup-0x1ffbb18c>
 1f8:	3b0b3a0b 	blcc	2cea2c <startup-0x1fd315d4>
 1fc:	00130105 	andseq	r0, r3, r5, lsl #2
 200:	01171f00 	tsteq	r7, r0, lsl #30
 204:	0b3a0b0b 	bleq	e82e38 <startup-0x1f17d1c8>
 208:	1301053b 	movwne	r0, #5435	; 0x153b
 20c:	0d200000 	stceq	0, cr0, [r0, #-0]
 210:	3a0e0300 	bcc	380e18 <startup-0x1fc7f1e8>
 214:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 218:	21000013 	tstcs	r0, r3, lsl r0
 21c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 220:	00001301 	andeq	r1, r0, r1, lsl #6
 224:	03003422 	movweq	r3, #1058	; 0x422
 228:	3b0b3a0e 	blcc	2cea68 <startup-0x1fd31598>
 22c:	3f134905 	svccc	0x00134905
 230:	00193c19 	andseq	r3, r9, r9, lsl ip
 234:	00342300 	eorseq	r2, r4, r0, lsl #6
 238:	0b3a0e03 	bleq	e83a4c <startup-0x1f17c5b4>
 23c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 240:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 244:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 248:	03193f00 	tsteq	r9, #0, 30
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	1119270b 	tstne	r9, fp, lsl #14
 254:	40061201 	andmi	r1, r6, r1, lsl #4
 258:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 25c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
 260:	03193f00 	tsteq	r9, #0, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 26c:	97184006 	ldrls	r4, [r8, -r6]
 270:	00001942 	andeq	r1, r0, r2, asr #18
 274:	3f012e26 	svccc	0x00012e26
 278:	3a0e0319 	bcc	380ee4 <startup-0x1fc7f11c>
 27c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 280:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 284:	97184006 	ldrls	r4, [r8, -r6]
 288:	13011942 	movwne	r1, #6466	; 0x1942
 28c:	05270000 	streq	r0, [r7, #-0]!
 290:	3a0e0300 	bcc	380e98 <startup-0x1fc7f168>
 294:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 298:	00180213 	andseq	r0, r8, r3, lsl r2
 29c:	00052800 	andeq	r2, r5, r0, lsl #16
 2a0:	0b3a0803 	bleq	e822b4 <startup-0x1f17dd4c>
 2a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2a8:	00001802 	andeq	r1, r0, r2, lsl #16
 2ac:	03003429 	movweq	r3, #1065	; 0x429
 2b0:	3b0b3a08 	blcc	2cead8 <startup-0x1fd31528>
 2b4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2b8:	2a000018 	bcs	320 <startup-0x1ffffce0>
 2bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2c0:	0b3a0e03 	bleq	e83ad4 <startup-0x1f17c52c>
 2c4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2c8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2cc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2d0:	00130119 	andseq	r0, r3, r9, lsl r1
 2d4:	00342b00 	eorseq	r2, r4, r0, lsl #22
 2d8:	0b3a0e03 	bleq	e83aec <startup-0x1f17c514>
 2dc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2e0:	00001802 	andeq	r1, r0, r2, lsl #16
 2e4:	3f012e2c 	svccc	0x00012e2c
 2e8:	3a0e0319 	bcc	380f54 <startup-0x1fc7f0ac>
 2ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2f0:	01193c13 	tsteq	r9, r3, lsl ip
 2f4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
 2f8:	00000018 	andeq	r0, r0, r8, lsl r0
 2fc:	11010b2e 	tstne	r1, lr, lsr #22
 300:	00061201 	andeq	r1, r6, r1, lsl #4
 304:	012e2f00 			; <UNDEFINED> instruction: 0x012e2f00
 308:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 30c:	0b3b0b3a 	bleq	ec2ffc <startup-0x1f13d004>
 310:	06120111 			; <UNDEFINED> instruction: 0x06120111
 314:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 318:	00130119 	andseq	r0, r3, r9, lsl r1
 31c:	012e3000 			; <UNDEFINED> instruction: 0x012e3000
 320:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 324:	0b3b0b3a 	bleq	ec3014 <startup-0x1f13cfec>
 328:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 32c:	0b310000 	bleq	c40334 <startup-0x1f3bfccc>
 330:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 334:	00130106 	andseq	r0, r3, r6, lsl #2
 338:	002e3200 	eoreq	r3, lr, r0, lsl #4
 33c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 340:	0b3b0b3a 	bleq	ec3030 <startup-0x1f13cfd0>
 344:	06120111 			; <UNDEFINED> instruction: 0x06120111
 348:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 34c:	33000019 	movwcc	r0, #25
 350:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 354:	0b3a0e03 	bleq	e83b68 <startup-0x1f17c498>
 358:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 35c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 360:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 364:	00000019 	andeq	r0, r0, r9, lsl r0
 368:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 36c:	030b130e 	movweq	r1, #45838	; 0xb30e
 370:	110e1b0e 	tstne	lr, lr, lsl #22
 374:	10061201 	andne	r1, r6, r1, lsl #4
 378:	02000017 	andeq	r0, r0, #23
 37c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 380:	0b3a0e03 	bleq	e83b94 <startup-0x1f17c46c>
 384:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 388:	06120111 			; <UNDEFINED> instruction: 0x06120111
 38c:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 390:	00130119 	andseq	r0, r3, r9, lsl r1
 394:	00050300 	andeq	r0, r5, r0, lsl #6
 398:	0b3a0e03 	bleq	e83bac <startup-0x1f17c454>
 39c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3a0:	00001802 	andeq	r1, r0, r2, lsl #16
 3a4:	0b002404 	bleq	93bc <startup-0x1fff6c44>
 3a8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3ac:	05000008 	streq	r0, [r0, #-8]
 3b0:	0111010b 	tsteq	r1, fp, lsl #2
 3b4:	00000612 	andeq	r0, r0, r2, lsl r6
 3b8:	03003406 	movweq	r3, #1030	; 0x406
 3bc:	3b0b3a08 	blcc	2cebe4 <startup-0x1fd3141c>
 3c0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3c4:	07000018 	smladeq	r0, r8, r0, r0
 3c8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 3cc:	0b3a0e03 	bleq	e83be0 <startup-0x1f17c420>
 3d0:	01110b3b 	tsteq	r1, fp, lsr fp
 3d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 3d8:	00194297 	mulseq	r9, r7, r2
 3dc:	11010000 	mrsne	r0, (UNDEF: 1)
 3e0:	130e2501 	movwne	r2, #58625	; 0xe501
 3e4:	1b0e030b 	blne	381018 <startup-0x1fc7efe8>
 3e8:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 3ec:	00171006 	andseq	r1, r7, r6
 3f0:	01130200 	tsteq	r3, r0, lsl #4
 3f4:	0b0b0e03 	bleq	2c3c08 <startup-0x1fd3c3f8>
 3f8:	0b3b0b3a 	bleq	ec30e8 <startup-0x1f13cf18>
 3fc:	00001301 	andeq	r1, r0, r1, lsl #6
 400:	03000d03 	movweq	r0, #3331	; 0xd03
 404:	3b0b3a0e 	blcc	2cec44 <startup-0x1fd313bc>
 408:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 40c:	0400000b 	streq	r0, [r0], #-11
 410:	0b0b0024 	bleq	2c04a8 <startup-0x1fd3fb58>
 414:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 418:	0f050000 	svceq	0x00050000
 41c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
 420:	06000013 			; <UNDEFINED> instruction: 0x06000013
 424:	0b0b0024 	bleq	2c04bc <startup-0x1fd3fb44>
 428:	0e030b3e 	vmoveq.16	d3[0], r0
 42c:	15070000 	strne	r0, [r7, #-0]
 430:	01192701 	tsteq	r9, r1, lsl #14
 434:	08000013 	stmdaeq	r0, {r0, r1, r4}
 438:	13490005 	movtne	r0, #36869	; 0x9005
 43c:	16090000 	strne	r0, [r9], -r0
 440:	3a0e0300 	bcc	381048 <startup-0x1fc7efb8>
 444:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 448:	0a000013 	beq	49c <startup-0x1ffffb64>
 44c:	13490035 	movtne	r0, #36917	; 0x9035
 450:	010b0000 	mrseq	r0, (UNDEF: 11)
 454:	01134901 	tsteq	r3, r1, lsl #18
 458:	0c000013 	stceq	0, cr0, [r0], {19}
 45c:	13490021 	movtne	r0, #36897	; 0x9021
 460:	00000b2f 	andeq	r0, r0, pc, lsr #22
 464:	0300340d 	movweq	r3, #1037	; 0x40d
 468:	3b0b3a0e 	blcc	2ceca8 <startup-0x1fd31358>
 46c:	3f13490b 	svccc	0x0013490b
 470:	00193c19 	andseq	r3, r9, r9, lsl ip
 474:	00340e00 	eorseq	r0, r4, r0, lsl #28
 478:	0b3a0e03 	bleq	e83c8c <startup-0x1f17c374>
 47c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 480:	00001802 	andeq	r1, r0, r2, lsl #16
 484:	3f002e0f 	svccc	0x00002e0f
 488:	3a0e0319 	bcc	3810f4 <startup-0x1fc7ef0c>
 48c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 490:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 494:	97184006 	ldrls	r4, [r8, -r6]
 498:	00001942 	andeq	r1, r0, r2, asr #18
 49c:	3f012e10 	svccc	0x00012e10
 4a0:	3a0e0319 	bcc	38110c <startup-0x1fc7eef4>
 4a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 4a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 4ac:	96184006 	ldrls	r4, [r8], -r6
 4b0:	13011942 	movwne	r1, #6466	; 0x1942
 4b4:	05110000 	ldreq	r0, [r1, #-0]
 4b8:	3a0e0300 	bcc	3810c0 <startup-0x1fc7ef40>
 4bc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 4c0:	00180213 	andseq	r0, r8, r3, lsl r2
 4c4:	00341200 	eorseq	r1, r4, r0, lsl #4
 4c8:	0b3a0803 	bleq	e824dc <startup-0x1f17db24>
 4cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 4d0:	00001802 	andeq	r1, r0, r2, lsl #16
 4d4:	11010b13 	tstne	r1, r3, lsl fp
 4d8:	01061201 	tsteq	r6, r1, lsl #4
 4dc:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
 4e0:	0111010b 	tsteq	r1, fp, lsl #2
 4e4:	00000612 	andeq	r0, r0, r2, lsl r6
 4e8:	3f002e15 	svccc	0x00002e15
 4ec:	3a0e0319 	bcc	381158 <startup-0x1fc7eea8>
 4f0:	110b3b0b 	tstne	fp, fp, lsl #22
 4f4:	40061201 	andmi	r1, r6, r1, lsl #4
 4f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 4fc:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 500:	03193f01 	tsteq	r9, #1, 30
 504:	3b0b3a0e 	blcc	2ced44 <startup-0x1fd312bc>
 508:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 50c:	96184006 	ldrls	r4, [r8], -r6
 510:	13011942 	movwne	r1, #6466	; 0x1942
 514:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 518:	03193f01 	tsteq	r9, #1, 30
 51c:	3b0b3a0e 	blcc	2ced5c <startup-0x1fd312a4>
 520:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 524:	00130119 	andseq	r0, r3, r9, lsl r1
 528:	00181800 	andseq	r1, r8, r0, lsl #16
 52c:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 530:	03193f01 	tsteq	r9, #1, 30
 534:	3b0b3a0e 	blcc	2ced74 <startup-0x1fd3128c>
 538:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 53c:	1a000019 	bne	5a8 <startup-0x1ffffa58>
 540:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 544:	0b3a0e03 	bleq	e83d58 <startup-0x1f17c2a8>
 548:	01110b3b 	tsteq	r1, fp, lsr fp
 54c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 550:	00194296 	mulseq	r9, r6, r2
 554:	11010000 	mrsne	r0, (UNDEF: 1)
 558:	130e2501 	movwne	r2, #58625	; 0xe501
 55c:	1b0e030b 	blne	381190 <startup-0x1fc7ee70>
 560:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 564:	00171006 	andseq	r1, r7, r6
 568:	00240200 	eoreq	r0, r4, r0, lsl #4
 56c:	0b3e0b0b 	bleq	f831a0 <startup-0x1f07ce60>
 570:	00000e03 	andeq	r0, r0, r3, lsl #28
 574:	03001603 	movweq	r1, #1539	; 0x603
 578:	3b0b3a0e 	blcc	2cedb8 <startup-0x1fd31248>
 57c:	0013490b 	andseq	r4, r3, fp, lsl #18
 580:	00240400 	eoreq	r0, r4, r0, lsl #8
 584:	0b3e0b0b 	bleq	f831b8 <startup-0x1f07ce48>
 588:	00000803 	andeq	r0, r0, r3, lsl #16
 58c:	0b011305 	bleq	451a8 <startup-0x1ffbae58>
 590:	3b0b3a0b 	blcc	2cedc4 <startup-0x1fd3123c>
 594:	0013010b 	andseq	r0, r3, fp, lsl #2
 598:	000d0600 	andeq	r0, sp, r0, lsl #12
 59c:	0b3a0e03 	bleq	e83db0 <startup-0x1f17c250>
 5a0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5a4:	00000b38 	andeq	r0, r0, r8, lsr fp
 5a8:	0b011707 	bleq	461cc <startup-0x1ffb9e34>
 5ac:	3b0b3a0b 	blcc	2cede0 <startup-0x1fd31220>
 5b0:	0013010b 	andseq	r0, r3, fp, lsl #2
 5b4:	000d0800 	andeq	r0, sp, r0, lsl #16
 5b8:	0b3a0803 	bleq	e825cc <startup-0x1f17da34>
 5bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 5c0:	0d090000 	stceq	0, cr0, [r9, #-0]
 5c4:	00134900 	andseq	r4, r3, r0, lsl #18
 5c8:	01130a00 	tsteq	r3, r0, lsl #20
 5cc:	0b0b0e03 	bleq	2c3de0 <startup-0x1fd3c220>
 5d0:	0b3b0b3a 	bleq	ec32c0 <startup-0x1f13cd40>
 5d4:	00001301 	andeq	r1, r0, r1, lsl #6
 5d8:	49000d0b 	stmdbmi	r0, {r0, r1, r3, r8, sl, fp}
 5dc:	000b3813 	andeq	r3, fp, r3, lsl r8
 5e0:	01010c00 	tsteq	r1, r0, lsl #24
 5e4:	13011349 	movwne	r1, #4937	; 0x1349
 5e8:	210d0000 	mrscs	r0, (UNDEF: 13)
 5ec:	2f134900 	svccs	0x00134900
 5f0:	0e00000b 	cdpeq	0, 0, cr0, cr0, cr11, {0}
 5f4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 5f8:	0b3b0b3a 	bleq	ec32e8 <startup-0x1f13cd18>
 5fc:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 600:	00001802 	andeq	r1, r0, r2, lsl #16
 604:	3f012e0f 	svccc	0x00012e0f
 608:	3a0e0319 	bcc	381274 <startup-0x1fc7ed8c>
 60c:	110b3b0b 	tstne	fp, fp, lsl #22
 610:	40061201 	andmi	r1, r6, r1, lsl #4
 614:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 618:	00001301 	andeq	r1, r0, r1, lsl #6
 61c:	11010b10 	tstne	r1, r0, lsl fp
 620:	01061201 	tsteq	r6, r1, lsl #4
 624:	11000013 	tstne	r0, r3, lsl r0
 628:	08030034 	stmdaeq	r3, {r2, r4, r5}
 62c:	0b3b0b3a 	bleq	ec331c <startup-0x1f13cce4>
 630:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 634:	0b120000 	bleq	48063c <startup-0x1fb7f9c4>
 638:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 63c:	13000006 	movwne	r0, #6
 640:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 644:	0b3a0e03 	bleq	e83e58 <startup-0x1f17c1a8>
 648:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 64c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 650:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 654:	00130119 	andseq	r0, r3, r9, lsl r1
 658:	00341400 	eorseq	r1, r4, r0, lsl #8
 65c:	0b3a0e03 	bleq	e83e70 <startup-0x1f17c190>
 660:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 664:	00001802 	andeq	r1, r0, r2, lsl #16
 668:	3f012e15 	svccc	0x00012e15
 66c:	3a0e0319 	bcc	3812d8 <startup-0x1fc7ed28>
 670:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 674:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 678:	97184006 	ldrls	r4, [r8, -r6]
 67c:	13011942 	movwne	r1, #6466	; 0x1942
 680:	05160000 	ldreq	r0, [r6, #-0]
 684:	3a0e0300 	bcc	38128c <startup-0x1fc7ed74>
 688:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 68c:	00180213 	andseq	r0, r8, r3, lsl r2
 690:	00051700 	andeq	r1, r5, r0, lsl #14
 694:	0b3a0803 	bleq	e826a8 <startup-0x1f17d958>
 698:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 69c:	00001802 	andeq	r1, r0, r2, lsl #16
 6a0:	3f012e18 	svccc	0x00012e18
 6a4:	3a0e0319 	bcc	381310 <startup-0x1fc7ecf0>
 6a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6ac:	00193c13 	andseq	r3, r9, r3, lsl ip
 6b0:	00181900 	andseq	r1, r8, r0, lsl #18
 6b4:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 6b8:	3a0e0301 	bcc	3812c4 <startup-0x1fc7ed3c>
 6bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 6c0:	11134919 	tstne	r3, r9, lsl r9
 6c4:	40061201 	andmi	r1, r6, r1, lsl #4
 6c8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6cc:	00001301 	andeq	r1, r0, r1, lsl #6
 6d0:	03012e1b 	movweq	r2, #7707	; 0x1e1b
 6d4:	3b0b3a0e 	blcc	2cef14 <startup-0x1fd310ec>
 6d8:	1119270b 	tstne	r9, fp, lsl #14
 6dc:	40061201 	andmi	r1, r6, r1, lsl #4
 6e0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 6e4:	00001301 	andeq	r1, r0, r1, lsl #6
 6e8:	3f012e1c 	svccc	0x00012e1c
 6ec:	3a0e0319 	bcc	381358 <startup-0x1fc7eca8>
 6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 6f4:	01193c13 	tsteq	r9, r3, lsl ip
 6f8:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
 6fc:	0e03012e 	adfeqsp	f0, f3, #0.5
 700:	0b3b0b3a 	bleq	ec33f0 <startup-0x1f13cc10>
 704:	01111927 	tsteq	r1, r7, lsr #18
 708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 70c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 710:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 714:	0e03012e 	adfeqsp	f0, f3, #0.5
 718:	0b3b0b3a 	bleq	ec3408 <startup-0x1f13cbf8>
 71c:	01111927 	tsteq	r1, r7, lsr #18
 720:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 724:	00194297 	mulseq	r9, r7, r2
 728:	11010000 	mrsne	r0, (UNDEF: 1)
 72c:	130e2501 	movwne	r2, #58625	; 0xe501
 730:	1b0e030b 	blne	381364 <startup-0x1fc7ec9c>
 734:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 738:	00171006 	andseq	r1, r7, r6
 73c:	01130200 	tsteq	r3, r0, lsl #4
 740:	0b3a0b0b 	bleq	e83374 <startup-0x1f17cc8c>
 744:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 748:	0d030000 	stceq	0, cr0, [r3, #-0]
 74c:	3a0e0300 	bcc	381354 <startup-0x1fc7ecac>
 750:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 754:	000b3813 	andeq	r3, fp, r3, lsl r8
 758:	00240400 	eoreq	r0, r4, r0, lsl #8
 75c:	0b3e0b0b 	bleq	f83390 <startup-0x1f07cc70>
 760:	00000e03 	andeq	r0, r0, r3, lsl #28
 764:	0b011705 	bleq	46380 <startup-0x1ffb9c80>
 768:	3b0b3a0b 	blcc	2cef9c <startup-0x1fd31064>
 76c:	0013010b 	andseq	r0, r3, fp, lsl #2
 770:	000d0600 	andeq	r0, sp, r0, lsl #12
 774:	0b3a0803 	bleq	e82788 <startup-0x1f17d878>
 778:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 77c:	0d070000 	stceq	0, cr0, [r7, #-0]
 780:	00134900 	andseq	r4, r3, r0, lsl #18
 784:	01130800 	tsteq	r3, r0, lsl #16
 788:	0b0b0e03 	bleq	2c3f9c <startup-0x1fd3c064>
 78c:	0b3b0b3a 	bleq	ec347c <startup-0x1f13cb84>
 790:	00001301 	andeq	r1, r0, r1, lsl #6
 794:	49000d09 	stmdbmi	r0, {r0, r3, r8, sl, fp}
 798:	000b3813 	andeq	r3, fp, r3, lsl r8
 79c:	00160a00 	andseq	r0, r6, r0, lsl #20
 7a0:	0b3a0e03 	bleq	e83fb4 <startup-0x1f17c04c>
 7a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 7a8:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 7ac:	03193f00 	tsteq	r9, #0, 30
 7b0:	3b0b3a0e 	blcc	2ceff0 <startup-0x1fd31010>
 7b4:	1113490b 	tstne	r3, fp, lsl #18
 7b8:	40061201 	andmi	r1, r6, r1, lsl #4
 7bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 7c0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
 7c4:	03193f00 	tsteq	r9, #0, 30
 7c8:	3b0b3a0e 	blcc	2cf008 <startup-0x1fd30ff8>
 7cc:	1113490b 	tstne	r3, fp, lsl #18
 7d0:	40061201 	andmi	r1, r6, r1, lsl #4
 7d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 7d8:	240d0000 	strcs	r0, [sp], #-0
 7dc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 7e0:	0008030b 	andeq	r0, r8, fp, lsl #6
 7e4:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
 7e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 7ec:	0b3b0b3a 	bleq	ec34dc <startup-0x1f13cb24>
 7f0:	01111927 	tsteq	r1, r7, lsr #18
 7f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 7f8:	00194297 	mulseq	r9, r7, r2
 7fc:	00050f00 	andeq	r0, r5, r0, lsl #30
 800:	0b3a0803 	bleq	e82814 <startup-0x1f17d7ec>
 804:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 808:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000a8 	andeq	r0, r0, r8, lsr #1
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	01210002 			; <UNDEFINED> instruction: 0x01210002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200000b8 	strhcs	r0, [r0], -r8
  34:	00000274 	andeq	r0, r0, r4, ror r2
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	0cec0002 	stcleq	0, cr0, [ip], #8
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	2000032c 	andcs	r0, r0, ip, lsr #6
  5c:	000000ca 	andeq	r0, r0, sl, asr #1
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	0d990002 	ldceq	0, cr0, [r9, #8]
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200003f8 	strdcs	r0, [r0], -r8
  7c:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	11250002 			; <UNDEFINED> instruction: 0x11250002
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200007c8 	andcs	r0, r0, r8, asr #15
  9c:	000006d4 	ldrdeq	r0, [r0], -r4
	...
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	16de0002 	ldrbne	r0, [lr], r2
  b0:	00040000 	andeq	r0, r4, r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000e9c 	mulcs	r0, ip, lr
  bc:	00000124 	andeq	r0, r0, r4, lsr #2
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000012d 	andeq	r0, r0, sp, lsr #2
   4:	00e90002 	rsceq	r0, r9, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	4f4d2f3a 	svcmi	0x004d2f3a
  20:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
  24:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  28:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  2c:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
  30:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
  34:	006f7264 	rsbeq	r7, pc, r4, ror #4
  38:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  3c:	70616573 	rsbvc	r6, r1, r3, ror r5
  40:	6f635c70 	svcvs	0x00635c70
  44:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  48:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  4c:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  50:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  54:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  58:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  5c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  60:	61652d65 	cmnvs	r5, r5, ror #26
  64:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  68:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  6c:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
  70:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
  74:	6300656e 	movwvs	r6, #1390	; 0x56e
  78:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  7c:	70706165 	rsbsvc	r6, r0, r5, ror #2
  80:	646f635c 	strbtvs	r6, [pc], #-860	; 88 <startup-0x1fffff78>
  84:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  88:	6f745c65 	svcvs	0x00745c65
  8c:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  90:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  94:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  98:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  9c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  a0:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  a4:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  a8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  ac:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
  b0:	72000073 	andvc	r0, r0, #115	; 0x73
  b4:	6f646e61 	svcvs	0x00646e61
  b8:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
  bc:	0100632e 	tsteq	r0, lr, lsr #6
  c0:	645f0000 	ldrbvs	r0, [pc], #-0	; c8 <startup-0x1fffff38>
  c4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  c8:	745f746c 	ldrbvc	r7, [pc], #-1132	; d0 <startup-0x1fffff30>
  cc:	73657079 	cmnvc	r5, #121	; 0x79
  d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  d4:	735f0000 	cmpvc	pc, #0
  d8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  dc:	00682e74 	rsbeq	r2, r8, r4, ror lr
  e0:	72000003 	andvc	r0, r0, #3
  e4:	6f646e61 	svcvs	0x00646e61
  e8:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
  ec:	0100682e 	tsteq	r0, lr, lsr #16
  f0:	00000000 	andeq	r0, r0, r0
  f4:	00100205 	andseq	r0, r0, r5, lsl #4
  f8:	59162000 	ldmdbpl	r6, {sp}
  fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 100:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 104:	00490304 	subeq	r0, r9, r4, lsl #6
 108:	06010402 	streq	r0, [r1], -r2, lsl #8
 10c:	4c3f063c 	ldcmi	6, cr0, [pc], #-240	; 24 <startup-0x1fffffdc>
 110:	3d75084b 	ldclcc	8, cr0, [r5, #-300]!	; 0xfffffed4
 114:	03040200 	movweq	r0, #16896	; 0x4200
 118:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 11c:	02008303 	andeq	r8, r0, #201326592	; 0xc000000
 120:	00480304 	subeq	r0, r8, r4, lsl #6
 124:	06010402 	streq	r0, [r1], -r2, lsl #8
 128:	2140063c 	cmpcs	r0, ip, lsr r6
 12c:	01000602 	tsteq	r0, r2, lsl #12
 130:	0001a801 	andeq	sl, r1, r1, lsl #16
 134:	f1000200 			; <UNDEFINED> instruction: 0xf1000200
 138:	02000000 	andeq	r0, r0, #0
 13c:	0d0efb01 	vstreq	d15, [lr, #-4]
 140:	01010100 	mrseq	r0, (UNDEF: 17)
 144:	00000001 	andeq	r0, r0, r1
 148:	01000001 	tsteq	r0, r1
 14c:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 150:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 154:	646f632d 	strbtvs	r6, [pc], #-813	; 15c <startup-0x1ffffea4>
 158:	6f6d2f65 	svcvs	0x006d2f65
 15c:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 160:	50726570 	rsbspl	r6, r2, r0, ror r5
 164:	6f726465 	svcvs	0x00726465
 168:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 16c:	61657363 	cmnvs	r5, r3, ror #6
 170:	635c7070 	cmpvs	ip, #112	; 0x70
 174:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 178:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 17c:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffffb4 <Pedro+0xdfffe4c8>
 180:	63675c73 	cmnvs	r7, #29440	; 0x7300
 184:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 188:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 18c:	6f6e2d6d 	svcvs	0x006e2d6d
 190:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 194:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 198:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 19c:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 1a0:	00737973 	rsbseq	r7, r3, r3, ror r9
 1a4:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 1a8:	70616573 	rsbvc	r6, r1, r3, ror r5
 1ac:	6f635c70 	svcvs	0x00635c70
 1b0:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 1b4:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 1b8:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 1bc:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 1c0:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 1c4:	62696c5c 	rsbvs	r6, r9, #92, 24	; 0x5c00
 1c8:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 1cc:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 1d0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 1d4:	61652d65 	cmnvs	r5, r5, ror #26
 1d8:	375c6962 	ldrbcc	r6, [ip, -r2, ror #18]
 1dc:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
 1e0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 1e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 1e8:	616d0000 	cmnvs	sp, r0
 1ec:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 1f0:	00000100 	andeq	r0, r0, r0, lsl #2
 1f4:	6f697067 	svcvs	0x00697067
 1f8:	0100682e 	tsteq	r0, lr, lsr #16
 1fc:	6f6c0000 	svcvs	0x006c0000
 200:	682e6b63 	stmdavs	lr!, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
 204:	00000200 	andeq	r0, r0, r0, lsl #4
 208:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 20c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 210:	00000200 	andeq	r0, r0, r0, lsl #4
 214:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
 218:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
 21c:	00000300 	andeq	r0, r0, r0, lsl #6
 220:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 224:	00682e74 	rsbeq	r2, r8, r4, ror lr
 228:	00000002 	andeq	r0, r0, r2
 22c:	00020500 	andeq	r0, r2, r0, lsl #10
 230:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 234:	5e13012d 	mufplsp	f0, f3, #5.0
 238:	01000302 	tsteq	r0, r2, lsl #6
 23c:	02050001 	andeq	r0, r5, #1
 240:	200000b8 	strhcs	r0, [r0], -r8
 244:	30013d03 	andcc	r3, r1, r3, lsl #26
 248:	76673e3d 			; <UNDEFINED> instruction: 0x76673e3d
 24c:	33e86867 	mvncc	r6, #6750208	; 0x670000
 250:	302f3330 	eorcc	r3, pc, r0, lsr r3	; <UNPREDICTABLE>
 254:	323c0c03 	eorscc	r0, ip, #768	; 0x300
 258:	5930594f 	ldmdbpl	r0!, {r0, r1, r2, r3, r6, r8, fp, ip, lr}
 25c:	72033531 	andvc	r3, r3, #205520896	; 0xc400000
 260:	200f0358 	andcs	r0, pc, r8, asr r3	; <UNPREDICTABLE>
 264:	3d2fa227 	sfmcc	f2, 1, [pc, #-156]!	; 1d0 <startup-0x1ffffe30>
 268:	403d2f3e 	eorsmi	r2, sp, lr, lsr pc
 26c:	90140359 	andsls	r0, r4, r9, asr r3
 270:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 274:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 278:	00ff0304 	rscseq	r0, pc, r4, lsl #6
 27c:	06010402 	streq	r0, [r1], -r2, lsl #8
 280:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 284:	003b0602 	eorseq	r0, fp, r2, lsl #12
 288:	06010402 	streq	r0, [r1], -r2, lsl #8
 28c:	7841063c 	stmdavc	r1, {r2, r3, r4, r5, r9, sl}^
 290:	820c0376 	andhi	r0, ip, #-671088639	; 0xd8000001
 294:	59207803 	stmdbpl	r0!, {r0, r1, fp, ip, sp, lr}
 298:	03595922 	cmpeq	r9, #557056	; 0x88000
 29c:	0a032079 	beq	c8488 <startup-0x1ff37b78>
 2a0:	934d4d20 	movtls	r4, #56608	; 0xdd20
 2a4:	03040200 	movweq	r0, #16896	; 0x4200
 2a8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2ac:	0200c703 	andeq	ip, r0, #786432	; 0xc0000
 2b0:	3c060104 	stfccs	f0, [r6], {4}
 2b4:	77843f06 	strvc	r3, [r4, r6, lsl #30]
 2b8:	02004b59 	andeq	r4, r0, #91136	; 0x16400
 2bc:	00210204 	eoreq	r0, r1, r4, lsl #4
 2c0:	08020402 	stmdaeq	r2, {r1, sl}
 2c4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
 2c8:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2cc:	0330784d 	teqeq	r0, #5046272	; 0x4d0000
 2d0:	002f3c19 	eoreq	r3, pc, r9, lsl ip	; <UNPREDICTABLE>
 2d4:	30010402 	andcc	r0, r1, r2, lsl #8
 2d8:	01000302 	tsteq	r0, r2, lsl #6
 2dc:	00008301 	andeq	r8, r0, r1, lsl #6
 2e0:	3c000200 	sfmcc	f0, 4, [r0], {-0}
 2e4:	02000000 	andeq	r0, r0, #0
 2e8:	0d0efb01 	vstreq	d15, [lr, #-4]
 2ec:	01010100 	mrseq	r0, (UNDEF: 17)
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	01000001 	tsteq	r0, r1
 2f8:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 2fc:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 300:	646f632d 	strbtvs	r6, [pc], #-813	; 308 <startup-0x1ffffcf8>
 304:	6f6d2f65 	svcvs	0x006d2f65
 308:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 30c:	50726570 	rsbspl	r6, r2, r0, ror r5
 310:	6f726465 	svcvs	0x00726465
 314:	65640000 	strbvs	r0, [r4, #-0]!
 318:	7379616c 	cmnvc	r9, #108, 2
 31c:	0100632e 	tsteq	r0, lr, lsr #6
 320:	00000000 	andeq	r0, r0, r0
 324:	032c0205 			; <UNDEFINED> instruction: 0x032c0205
 328:	2f142000 	svccs	0x00142000
 32c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 330:	01040200 	mrseq	r0, R12_usr
 334:	67062006 	strvs	r2, [r6, -r6]
 338:	3d2fa03d 	stccc	0, cr10, [pc, #-244]!	; 24c <startup-0x1ffffdb4>
 33c:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 340:	06010402 	streq	r0, [r1], -r2, lsl #8
 344:	3d670620 	stclcc	6, cr0, [r7, #-128]!	; 0xffffff80
 348:	02004ea0 	andeq	r4, r0, #160, 28	; 0xa00
 34c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 350:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 354:	01040200 	mrseq	r0, R12_usr
 358:	5b063c06 	blpl	18f378 <startup-0x1fe70c88>
 35c:	024b4b4d 	subeq	r4, fp, #78848	; 0x13400
 360:	01010004 	tsteq	r1, r4
 364:	000000e2 	andeq	r0, r0, r2, ror #1
 368:	00460002 	subeq	r0, r6, r2
 36c:	01020000 	mrseq	r0, (UNDEF: 2)
 370:	000d0efb 	strdeq	r0, [sp], -fp
 374:	01010101 	tsteq	r1, r1, lsl #2
 378:	01000000 	mrseq	r0, (UNDEF: 0)
 37c:	5a010000 	bpl	40384 <startup-0x1ffbfc7c>
 380:	4f4d2f3a 	svcmi	0x004d2f3a
 384:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 388:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 38c:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 390:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 394:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 398:	006f7264 	rsbeq	r7, pc, r4, ror #4
 39c:	64655000 	strbtvs	r5, [r5], #-0
 3a0:	632e6f72 			; <UNDEFINED> instruction: 0x632e6f72
 3a4:	00000100 	andeq	r0, r0, r0, lsl #2
 3a8:	72646570 	rsbvc	r6, r4, #112, 10	; 0x1c000000
 3ac:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
 3b8:	03200003 			; <UNDEFINED> instruction: 0x03200003
 3bc:	3030012c 	eorscc	r0, r0, ip, lsr #2
 3c0:	9f2f4b30 	svcls	0x002f4b30
 3c4:	ad2f4b68 	vstmdbge	pc!, {d4-<overflow reg d55>}
 3c8:	694c2f5b 	stmdbvs	ip, {r0, r1, r3, r4, r6, r8, r9, sl, fp, sp}^
 3cc:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 3d0:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 3d4:	243b4b4b 	ldrtcs	r4, [fp], #-2891	; 0xfffff4b5
 3d8:	02002738 	andeq	r2, r0, #56, 14	; 0xe00000
 3dc:	4a060104 	bmi	1807f4 <startup-0x1fe7f80c>
 3e0:	494b4c06 	stmdbmi	fp, {r1, r2, sl, fp, lr}^
 3e4:	09033824 	stmdbeq	r3, {r2, r5, fp, ip, sp}
 3e8:	5a4b3d20 	bpl	12cf870 <startup-0x1ed30790>
 3ec:	034b5c4b 	movteq	r5, #48203	; 0xbc4b
 3f0:	78033c0b 	stmdavc	r3, {r0, r1, r3, sl, fp, ip, sp}
 3f4:	3d4b3d20 	stclcc	13, cr3, [fp, #-128]	; 0xffffff80
 3f8:	3084403d 	addcc	r4, r4, sp, lsr r0
 3fc:	5a767576 	bpl	1d9d9dc <startup-0x1e262624>
 400:	4c694b2f 			; <UNDEFINED> instruction: 0x4c694b2f
 404:	0059ad3d 	subseq	sl, r9, sp, lsr sp
 408:	06010402 	streq	r0, [r1], -r2, lsl #8
 40c:	08c90674 	stmiaeq	r9, {r2, r4, r5, r6, r9, sl}^
 410:	5959ad91 	ldmdbpl	r9, {r0, r4, r7, r8, sl, fp, sp, pc}^
 414:	778359d7 			; <UNDEFINED> instruction: 0x778359d7
 418:	9f6759e5 	svcls	0x006759e5
 41c:	8483e591 	strhi	lr, [r3], #1425	; 0x591
 420:	02009108 	andeq	r9, r0, #8, 2
 424:	6e030204 	cdpvs	2, 0, cr0, cr3, cr4, {0}
 428:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 42c:	00660601 	rsbeq	r0, r6, r1, lsl #12
 430:	06020402 	streq	r0, [r2], -r2, lsl #8
 434:	0402007e 	streq	r0, [r2], #-126	; 0xffffff82
 438:	06660601 	strbteq	r0, [r6], -r1, lsl #12
 43c:	92c81b03 	sbcls	r1, r8, #3072	; 0xc00
 440:	2f3e2131 	svccs	0x003e2131
 444:	0006022f 	andeq	r0, r6, pc, lsr #4
 448:	02700101 	rsbseq	r0, r0, #1073741824	; 0x40000000
 44c:	00020000 	andeq	r0, r2, r0
 450:	000000e3 	andeq	r0, r0, r3, ror #1
 454:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 458:	0101000d 	tsteq	r1, sp
 45c:	00000101 	andeq	r0, r0, r1, lsl #2
 460:	00000100 	andeq	r0, r0, r0, lsl #2
 464:	2f3a5a01 	svccs	0x003a5a01
 468:	2f504f4d 	svccs	0x00504f4d
 46c:	6f632d63 	svcvs	0x00632d63
 470:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 2e8 <startup-0x1ffffd18>
 474:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 478:	72657075 	rsbvc	r7, r5, #117	; 0x75
 47c:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 480:	3a63006f 	bcc	18c0644 <startup-0x1e73f9bc>
 484:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 488:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 48c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 490:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 494:	6f6f745c 	svcvs	0x006f745c
 498:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 49c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 4a0:	615c6d72 	cmpvs	ip, r2, ror sp
 4a4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 4a8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 4ac:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 4b0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 4b4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 4b8:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 4bc:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 4c0:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 4c4:	61657363 	cmnvs	r5, r3, ror #6
 4c8:	635c7070 	cmpvs	ip, #112	; 0x70
 4cc:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 4d0:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 4d4:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; 30c <startup-0x1ffffcf4>
 4d8:	63675c73 	cmnvs	r7, #29440	; 0x7300
 4dc:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 4e0:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 4e4:	6f6e2d6d 	svcvs	0x006e2d6d
 4e8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 4ec:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 4f0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 4f4:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 4f8:	00737973 	rsbseq	r7, r3, r3, ror r9
 4fc:	64634c00 	strbtvs	r4, [r3], #-3072	; 0xfffff400
 500:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 504:	00632e69 	rsbeq	r2, r3, r9, ror #28
 508:	5f000001 	svcpl	0x00000001
 50c:	61666564 	cmnvs	r6, r4, ror #10
 510:	5f746c75 	svcpl	0x00746c75
 514:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 518:	00682e73 	rsbeq	r2, r8, r3, ror lr
 51c:	5f000002 	svcpl	0x00000002
 520:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 524:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 528:	00000300 	andeq	r0, r0, r0, lsl #6
 52c:	6f697067 	svcvs	0x00697067
 530:	0100682e 	tsteq	r0, lr, lsr #16
 534:	00000000 	andeq	r0, r0, r0
 538:	07c80205 	strbeq	r0, [r8, r5, lsl #4]
 53c:	681a2000 	ldmdavs	sl, {sp}
 540:	4b677559 	blmi	19ddaac <startup-0x1e622554>
 544:	bb596868 	bllt	165a6ec <startup-0x1e9a5914>
 548:	67684b75 			; <UNDEFINED> instruction: 0x67684b75
 54c:	03741003 	cmneq	r4, #3
 550:	10032070 	andne	r2, r3, r0, ror r0
 554:	2072034a 	rsbscs	r0, r2, sl, asr #6
 558:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 55c:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 560:	2f4c223d 	svccs	0x004c223d
 564:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 568:	4b4b3d3d 	blmi	12cfa64 <startup-0x1ed3059c>
 56c:	4b4b4b4b 	blmi	12d32a0 <startup-0x1ed2cd60>
 570:	3d3e3e3d 	ldccc	14, cr3, [lr, #-244]!	; 0xffffff0c
 574:	303d3d3d 	eorscc	r3, sp, sp, lsr sp
 578:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 57c:	2225452f 	eorcs	r4, r5, #197132288	; 0xbc00000
 580:	3d68a03d 	stclcc	0, cr10, [r8, #-244]!	; 0xffffff0c
 584:	2f593d3d 	svccs	0x00593d3d
 588:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 58c:	303d593e 	eorscc	r5, sp, lr, lsr r9
 590:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 594:	675967ae 	ldrbvs	r6, [r9, -lr, lsr #15]
 598:	2f4b914c 	svccs	0x004b914c
 59c:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 5a0:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 5a4:	3e3d3d31 	mrccc	13, 1, r3, cr13, cr1, {1}
 5a8:	593d9175 	ldmdbpl	sp!, {r0, r2, r4, r5, r6, r8, ip, pc}
 5ac:	914b833d 	cmpls	fp, sp, lsr r3
 5b0:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 5b4:	3d3d4b83 	fldmdbxcc	sp!, {d4-d68}	;@ Deprecated
 5b8:	03040200 	movweq	r0, #16896	; 0x4200
 5bc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 5c0:	02006503 	andeq	r6, r0, #12582912	; 0xc00000
 5c4:	3c060104 	stfccs	f0, [r6], {4}
 5c8:	02040200 	andeq	r0, r4, #0, 4
 5cc:	02003b06 	andeq	r3, r0, #6144	; 0x1800
 5d0:	3c060104 	stfccs	f0, [r6], {4}
 5d4:	3d4d4106 	stfcce	f4, [sp, #-24]	; 0xffffffe8
 5d8:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 5dc:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 5e0:	00810304 	addeq	r0, r1, r4, lsl #6
 5e4:	06010402 	streq	r0, [r1], -r2, lsl #8
 5e8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 5ec:	003b0602 	eorseq	r0, fp, r2, lsl #12
 5f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 5f4:	7640063c 			; <UNDEFINED> instruction: 0x7640063c
 5f8:	3d140868 	ldccc	8, cr0, [r4, #-416]	; 0xfffffe60
 5fc:	081e8708 	ldmdaeq	lr, {r3, r8, r9, sl, pc}
 600:	917584ca 	cmnls	r5, sl, asr #9
 604:	769f7567 	ldrvc	r7, [pc], r7, ror #10
 608:	00592f3e 	subseq	r2, r9, lr, lsr pc
 60c:	06010402 	streq	r0, [r1], -r2, lsl #8
 610:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 614:	02002e02 	andeq	r2, r0, #2, 28
 618:	00200404 	eoreq	r0, r0, r4, lsl #8
 61c:	06040402 	streq	r0, [r4], -r2, lsl #8
 620:	67c9592f 	strbvs	r5, [r9, pc, lsr #18]
 624:	03040200 	movweq	r0, #16896	; 0x4200
 628:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 62c:	00570803 	subseq	r0, r7, r3, lsl #16
 630:	06010402 	streq	r0, [r1], -r2, lsl #8
 634:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 638:	00550602 	subseq	r0, r5, r2, lsl #12
 63c:	06010402 	streq	r0, [r1], -r2, lsl #8
 640:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 644:	00560602 	subseq	r0, r6, r2, lsl #12
 648:	06010402 	streq	r0, [r1], -r2, lsl #8
 64c:	0a030666 	beq	c1fec <startup-0x1ff3e014>
 650:	66230358 			; <UNDEFINED> instruction: 0x66230358
 654:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 658:	003d0304 	eorseq	r0, sp, r4, lsl #6
 65c:	f1030402 			; <UNDEFINED> instruction: 0xf1030402
 660:	01040200 	mrseq	r0, R12_usr
 664:	02003c06 	andeq	r3, r0, #1536	; 0x600
 668:	3b060204 	blcc	180e80 <startup-0x1fe7f180>
 66c:	01040200 	mrseq	r0, R12_usr
 670:	41063c06 	tstmi	r6, r6, lsl #24
 674:	03040200 	movweq	r0, #16896	; 0x4200
 678:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 67c:	02005703 	andeq	r5, r0, #786432	; 0xc0000
 680:	3c060104 	stfccs	f0, [r6], {4}
 684:	3d753f06 	ldclcc	15, cr3, [r5, #-24]!	; 0xffffffe8
 688:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 68c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 690:	00f10304 	rscseq	r0, r1, r4, lsl #6
 694:	06010402 	streq	r0, [r1], -r2, lsl #8
 698:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 69c:	003b0602 	eorseq	r0, fp, r2, lsl #12
 6a0:	06010402 	streq	r0, [r1], -r2, lsl #8
 6a4:	0041063c 	subeq	r0, r1, ip, lsr r6
 6a8:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 6ac:	03040200 	movweq	r0, #16896	; 0x4200
 6b0:	04020081 	streq	r0, [r2], #-129	; 0xffffff7f
 6b4:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 6b8:	0006023f 	andeq	r0, r6, pc, lsr r2
 6bc:	00870101 	addeq	r0, r7, r1, lsl #2
 6c0:	00020000 	andeq	r0, r2, r0
 6c4:	00000048 	andeq	r0, r0, r8, asr #32
 6c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 6cc:	0101000d 	tsteq	r1, sp
 6d0:	00000101 	andeq	r0, r0, r1, lsl #2
 6d4:	00000100 	andeq	r0, r0, r0, lsl #2
 6d8:	2f3a5a01 	svccs	0x003a5a01
 6dc:	2f504f4d 	svccs	0x00504f4d
 6e0:	6f632d63 	svcvs	0x00632d63
 6e4:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 55c <startup-0x1ffffaa4>
 6e8:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 6ec:	72657075 	rsbvc	r7, r5, #117	; 0x75
 6f0:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 6f4:	6b00006f 	blvs	8b8 <startup-0x1ffff748>
 6f8:	75467965 	strbvc	r7, [r6, #-2405]	; 0xfffff69b
 6fc:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
 700:	00010063 	andeq	r0, r1, r3, rrx
 704:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 708:	00682e6f 	rsbeq	r2, r8, pc, ror #28
 70c:	00000001 	andeq	r0, r0, r1
 710:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
 714:	1520000e 	strne	r0, [r0, #-14]!
 718:	223dbc4b 	eorscs	fp, sp, #19200	; 0x4b00
 71c:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 720:	763e223d 			; <UNDEFINED> instruction: 0x763e223d
 724:	752f752f 	strvc	r7, [pc, #-1327]!	; 1fd <startup-0x1ffffe03>
 728:	752f752f 	strvc	r7, [pc, #-1327]!	; 201 <startup-0x1ffffdff>
 72c:	2f5b212f 	svccs	0x005b212f
 730:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 734:	2f3d2130 	svccs	0x003d2130
 738:	303d593d 	eorscc	r5, sp, sp, lsr r9
 73c:	3d2f3d22 	stccc	13, cr3, [pc, #-136]!	; 6bc <startup-0x1ffff944>
 740:	22303d59 	eorscs	r3, r0, #5696	; 0x1640
 744:	01000302 	tsteq	r0, r2, lsl #6
 748:	Address 0x00000748 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	20554e47 	subscs	r4, r5, r7, asr #28
   4:	20393943 	eorscs	r3, r9, r3, asr #18
   8:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
   c:	30322031 	eorscc	r2, r2, r1, lsr r0
  10:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  14:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  18:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  1c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  24:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  28:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  2c:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  30:	6172622d 	cmnvs	r2, sp, lsr #4
  34:	2068636e 	rsbcs	r6, r8, lr, ror #6
  38:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  3c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  40:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  44:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  48:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  4c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  50:	616d2d20 	cmnvs	sp, r0, lsr #26
  54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  5c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  60:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  64:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  68:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  6c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  70:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  74:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  78:	616d2d20 	cmnvs	sp, r0, lsr #26
  7c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  80:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  84:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  88:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  8c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  90:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  94:	00393963 	eorseq	r3, r9, r3, ror #18
  98:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  9c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  a0:	61686320 	cmnvs	r8, r0, lsr #6
  a4:	65730072 	ldrbvs	r0, [r3, #-114]!	; 0xffffff8e
  a8:	6e526465 	cdpvs	4, 5, cr6, cr2, cr5, {3}
  ac:	68730067 	ldmdavs	r3!, {r0, r1, r2, r5, r6}^
  b0:	2074726f 	rsbscs	r7, r4, pc, ror #4
  b4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  b8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  bc:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  c0:	5c3a5a00 			; <UNDEFINED> instruction: 0x5c3a5a00
  c4:	5c504f4d 	mrrcpl	15, 4, r4, r0, cr13
  c8:	6f632d63 	svcvs	0x00632d63
  cc:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
  d0:	535c706f 	cmppl	ip, #111	; 0x6f
  d4:	72657075 	rsbvc	r7, r5, #117	; 0x75
  d8:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
  dc:	5f5f006f 	svcpl	0x005f006f
  e0:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  e4:	745f3233 	ldrbvc	r3, [pc], #-563	; ec <startup-0x1fffff14>
  e8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  ec:	6f6c2067 	svcvs	0x006c2067
  f0:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
  f4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  f8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  fc:	00746e69 	rsbseq	r6, r4, r9, ror #28
 100:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 104:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 108:	6e692067 	cdpvs	0, 6, cr2, cr9, cr7, {3}
 10c:	68730074 	ldmdavs	r3!, {r2, r4, r5, r6}^
 110:	2074726f 	rsbscs	r7, r4, pc, ror #4
 114:	00746e69 	rsbseq	r6, r4, r9, ror #28
 118:	77676e72 			; <UNDEFINED> instruction: 0x77676e72
 11c:	5f64726f 	svcpl	0x0064726f
 120:	656e0074 	strbvs	r0, [lr, #-116]!	; 0xffffff8c
 124:	6e527478 	mrcvs	4, 2, r7, cr2, cr8, {3}
 128:	3a5a0064 	bcc	16802c0 <startup-0x1e97fd40>
 12c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 130:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 134:	2f65646f 	svccs	0x0065646f
 138:	2f706f6d 	svccs	0x00706f6d
 13c:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 140:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 144:	722f6f72 	eorvc	r6, pc, #456	; 0x1c8
 148:	6f646e61 	svcvs	0x00646e61
 14c:	6d754e6d 	ldclvs	14, cr4, [r5, #-436]!	; 0xfffffe4c
 150:	5f00632e 	svcpl	0x0000632e
 154:	5f6f7364 	svcpl	0x006f7364
 158:	646e6168 	strbtvs	r6, [lr], #-360	; 0xfffffe98
 15c:	5f00656c 	svcpl	0x0000656c
 160:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 164:	616f6c00 	cmnvs	pc, r0, lsl #24
 168:	70655064 	rsbvc	r5, r5, r4, rrx
 16c:	53726570 	cmnpl	r2, #112, 10	; 0x1c000000
 170:	70697274 	rsbvc	r7, r9, r4, ror r2
 174:	61725f00 	cmnvs	r2, r0, lsl #30
 178:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
 17c:	72646900 	rsbvc	r6, r4, #0, 18
 180:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 184:	6d655f00 	stclvs	15, cr5, [r5, #-0]
 188:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
 18c:	0079636e 	rsbseq	r6, r9, lr, ror #6
 190:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 194:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 198:	00657079 	rsbeq	r7, r5, r9, ror r0
 19c:	7263775f 	rsbvc	r7, r3, #24903680	; 0x17c0000
 1a0:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 1a4:	6174735f 	cmnvs	r4, pc, asr r3
 1a8:	5f006574 	svcpl	0x00006574
 1ac:	72736377 	rsbsvc	r6, r3, #-603979775	; 0xdc000001
 1b0:	626d6f74 	rsbvs	r6, sp, #116, 30	; 0x1d0
 1b4:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 1b8:	00657461 	rsbeq	r7, r5, r1, ror #8
 1bc:	66626c5f 			; <UNDEFINED> instruction: 0x66626c5f
 1c0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1c4:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 1c8:	75700072 	ldrbvc	r0, [r0, #-114]!	; 0xffffff8e
 1cc:	00726470 	rsbseq	r6, r2, r0, ror r4
 1d0:	6f6c5f5f 	svcvs	0x006c5f5f
 1d4:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 1d8:	5f00745f 	svcpl	0x0000745f
 1dc:	7472626d 	ldrbtvc	r6, [r2], #-621	; 0xfffffd93
 1e0:	5f63776f 	svcpl	0x0063776f
 1e4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 1e8:	646f0065 	strbtvs	r0, [pc], #-101	; 1f0 <startup-0x1ffffe10>
 1ec:	67694872 			; <UNDEFINED> instruction: 0x67694872
 1f0:	5f5f0068 	svcpl	0x005f0068
 1f4:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
 1f8:	5f006365 	svcpl	0x00006365
 1fc:	66756275 			; <UNDEFINED> instruction: 0x66756275
 200:	61625f00 	cmnvs	r2, r0, lsl #30
 204:	5f006573 	svcpl	0x00006573
 208:	5f6d745f 	svcpl	0x006d745f
 20c:	72756f68 	rsbsvc	r6, r5, #104, 30	; 0x1a0
 210:	735f5f00 	cmpvc	pc, #0, 30
 214:	6f6d0066 	svcvs	0x006d0066
 218:	00726564 	rsbseq	r6, r2, r4, ror #10
 21c:	6f6f635f 	svcvs	0x006f635f
 220:	0065696b 	rsbeq	r6, r5, fp, ror #18
 224:	67735f5f 			; <UNDEFINED> instruction: 0x67735f5f
 228:	0065756c 	rsbeq	r7, r5, ip, ror #10
 22c:	616c665f 	cmnvs	ip, pc, asr r6
 230:	5f007367 	svcpl	0x00007367
 234:	635f7369 	cmpvs	pc, #-1543503871	; 0xa4000001
 238:	5f006178 	svcpl	0x00006178
 23c:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 240:	625f006e 	subsvs	r0, pc, #110	; 0x6e
 244:	69736b6c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, r9, fp, sp, lr}^
 248:	5f00657a 	svcpl	0x0000657a
 24c:	62747663 	rsbsvs	r7, r4, #103809024	; 0x6300000
 250:	5f006675 	svcpl	0x00006675
 254:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 258:	5f007465 	svcpl	0x00007465
 25c:	7273626d 	rsbsvc	r6, r3, #-805306362	; 0xd0000006
 260:	63776f74 	cmnvs	r7, #116, 30	; 0x1d0
 264:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 268:	00657461 	rsbeq	r7, r5, r1, ror #8
 26c:	72626d5f 	rsbvc	r6, r2, #6080	; 0x17c0
 270:	5f6e656c 	svcpl	0x006e656c
 274:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 278:	665f0065 	ldrbvs	r0, [pc], -r5, rrx
 27c:	6772616e 	ldrbvs	r6, [r2, -lr, ror #2]!
 280:	64690073 	strbtvs	r0, [r9], #-115	; 0xffffff8d
 284:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 288:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 28c:	735f0073 	cmpvc	pc, #115	; 0x73
 290:	006e6769 	rsbeq	r6, lr, r9, ror #14
 294:	6f6c665f 	svcvs	0x006c665f
 298:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 2a0 <startup-0x1ffffd60>
 29c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 2a0:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
 2a4:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
 2a8:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
 2ac:	61675f00 	cmnvs	r7, r0, lsl #30
 2b0:	5f616d6d 	svcpl	0x00616d6d
 2b4:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2b8:	006d6167 	rsbeq	r6, sp, r7, ror #2
 2bc:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 2c0:	5f746c75 	svcpl	0x00746c75
 2c4:	5f5f006b 	svcpl	0x005f006b
 2c8:	5f006d74 	svcpl	0x00006d74
 2cc:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2d0:	735f0062 	cmpvc	pc, #98	; 0x62
 2d4:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffe68 <Pedro+0xdfffe37c>
 2d8:	6f6c0074 	svcvs	0x006c0074
 2dc:	5f00706f 	svcpl	0x0000706f
 2e0:	6c747663 	ldclvs	6, cr7, [r4], #-396	; 0xfffffe74
 2e4:	6c006e65 	stcvs	14, cr6, [r0], {101}	; 0x65
 2e8:	4c64616f 	stfmie	f6, [r4], #-444	; 0xfffffe44
 2ec:	5f006c76 	svcpl	0x00006c76
 2f0:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 2f4:	67617000 	strbvs	r7, [r1, -r0]!
 2f8:	736f0065 	cmnvc	pc, #101	; 0x65
 2fc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 300:	6e5f0072 	mrcvs	0, 2, r0, cr15, cr2, {3}
 304:	73626f69 	cmnvc	r2, #420	; 0x1a4
 308:	61726400 	cmnvs	r2, r0, lsl #8
 30c:	6f724777 	svcvs	0x00724777
 310:	00646e75 	rsbeq	r6, r4, r5, ror lr
 314:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 318:	30746978 	rsbscc	r6, r4, r8, ror r9
 31c:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 320:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
 324:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 328:	73615f00 	cmnvc	r1, #0, 30
 32c:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
 330:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 334:	6e6f0066 	cdpvs	0, 6, cr0, cr15, cr6, {3}
 338:	006e6957 	rsbeq	r6, lr, r7, asr r9
 33c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 340:	00746c75 	rsbseq	r6, r4, r5, ror ip
 344:	63775f5f 	cmnvs	r7, #380	; 0x17c
 348:	4c5f0068 	mrrcmi	0, 6, r0, pc, cr8	; <UNPREDICTABLE>
 34c:	5f4b434f 	svcpl	0x004b434f
 350:	69770054 	ldmdbvs	r7!, {r2, r4, r6}^
 354:	745f746e 	ldrbvc	r7, [pc], #-1134	; 35c <startup-0x1ffffca4>
 358:	6c665f00 	stclvs	15, cr5, [r6], #-0
 35c:	32736761 	rsbscc	r6, r3, #25427968	; 0x1840000
 360:	6f726600 	svcvs	0x00726600
 364:	5f5f006d 	svcpl	0x005f006d
 368:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 36c:	00726165 	rsbseq	r6, r2, r5, ror #2
 370:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 374:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 378:	646f632d 	strbtvs	r6, [pc], #-813	; 380 <startup-0x1ffffc80>
 37c:	6f6d2f65 	svcvs	0x006d2f65
 380:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 384:	50726570 	rsbspl	r6, r2, r0, ror r5
 388:	6f726465 	svcvs	0x00726465
 38c:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
 390:	00632e6e 	rsbeq	r2, r3, lr, ror #28
 394:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 398:	5f006674 	svcpl	0x00006674
 39c:	5f6d745f 	svcpl	0x006d745f
 3a0:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
 3a4:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 3a8:	00746978 	rsbseq	r6, r4, r8, ror r9
 3ac:	64735f5f 	ldrbtvs	r5, [r3], #-3935	; 0xfffff0a1
 3b0:	6e696469 	cdpvs	4, 6, cr6, cr9, cr9, {3}
 3b4:	5f007469 	svcpl	0x00007469
 3b8:	5f66666f 	svcpl	0x0066666f
 3bc:	65500074 	ldrbvs	r0, [r0, #-116]	; 0xffffff8c
 3c0:	72657070 	rsbvc	r7, r5, #112	; 0x70
 3c4:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
 3c8:	5f007370 	svcpl	0x00007370
 3cc:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
 3d0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 3d4:	70675f00 	rsbvc	r5, r7, r0, lsl #30
 3d8:	6f006f69 	svcvs	0x00006f69
 3dc:	6f4c7264 	svcvs	0x004c7264
 3e0:	775f0077 			; <UNDEFINED> instruction: 0x775f0077
 3e4:	6d6f7463 	cfstrdvs	mvd7, [pc, #-396]!	; 260 <startup-0x1ffffda0>
 3e8:	74735f62 	ldrbtvc	r5, [r3], #-3938	; 0xfffff09e
 3ec:	00657461 	rsbeq	r7, r5, r1, ror #8
 3f0:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 3f4:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
 3f8:	6c657665 	stclvs	6, cr7, [r5], #-404	; 0xfffffe6c
 3fc:	6d676553 	cfstr64vs	mvdx6, [r7, #-332]!	; 0xfffffeb4
 400:	4c746e65 	ldclmi	14, cr6, [r4], #-404	; 0xfffffe6c
 404:	00746665 	rsbseq	r6, r4, r5, ror #12
 408:	6f697067 	svcvs	0x00697067
 40c:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
 410:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 414:	685f0077 	ldmdavs	pc, {r0, r1, r2, r4, r5, r6}^	; <UNPREDICTABLE>
 418:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 41c:	5f006f6e 	svcpl	0x00006f6e
 420:	5f6d745f 	svcpl	0x006d745f
 424:	79616479 	stmdbvc	r1!, {r0, r3, r4, r5, r6, sl, sp, lr}^
 428:	735f5f00 	cmpvc	pc, #0, 30
 42c:	00667562 	rsbeq	r7, r6, r2, ror #10
 430:	626f695f 	rsbvs	r6, pc, #1556480	; 0x17c000
 434:	5f5f0073 	svcpl	0x005f0073
 438:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
 43c:	626d5f00 	rsbvs	r5, sp, #0, 30
 440:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 444:	00745f65 	rsbseq	r5, r4, r5, ror #30
 448:	46735f5f 	uhsaxmi	r5, r3, pc	; <UNPREDICTABLE>
 44c:	00454c49 	subeq	r4, r5, r9, asr #24
 450:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 454:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 458:	61725f00 	cmnvs	r2, r0, lsl #30
 45c:	6e5f646e 	cdpvs	4, 5, cr6, cr15, cr14, {3}
 460:	00747865 	rsbseq	r7, r4, r5, ror #16
 464:	6c626d5f 	stclvs	13, cr6, [r2], #-380	; 0xfffffe84
 468:	735f6e65 	cmpvc	pc, #1616	; 0x650
 46c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 470:	6e695f00 	cdpvs	15, 6, cr5, cr9, cr0, {0}
 474:	695f0063 	ldmdbvs	pc, {r0, r1, r5, r6}^	; <UNPREDICTABLE>
 478:	5f00646e 	svcpl	0x0000646e
 47c:	61636f6c 	cmnvs	r3, ip, ror #30
 480:	5f00656c 	svcpl	0x0000656c
 484:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 488:	70756e61 	rsbsvc	r6, r5, r1, ror #28
 48c:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 490:	63657073 	cmnvs	r5, #115	; 0x73
 494:	65696669 	strbvs	r6, [r9, #-1641]!	; 0xfffff997
 498:	6f6c5f64 	svcvs	0x006c5f64
 49c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 4a0:	666e695f 			; <UNDEFINED> instruction: 0x666e695f
 4a4:	6d5f006f 	ldclvs	0, cr0, [pc, #-444]	; 2f0 <startup-0x1ffffd10>
 4a8:	64777861 	ldrbtvs	r7, [r7], #-2145	; 0xfffff79f
 4ac:	725f0073 	subsvc	r0, pc, #115	; 0x73
 4b0:	746e6565 	strbtvc	r6, [lr], #-1381	; 0xfffffa9b
 4b4:	65735f00 	ldrbvs	r5, [r3, #-3840]!	; 0xfffff100
 4b8:	5f006465 	svcpl	0x00006465
 4bc:	756f635f 	strbvc	r6, [pc, #-863]!	; 165 <startup-0x1ffffe9b>
 4c0:	5f00746e 	svcpl	0x0000746e
 4c4:	636f6c5f 	cmnvs	pc, #24320	; 0x5f00
 4c8:	5f5f006b 	svcpl	0x005f006b
 4cc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 4d0:	735f0065 	cmpvc	pc, #101	; 0x65
 4d4:	006b6565 	rsbeq	r6, fp, r5, ror #10
 4d8:	6f70665f 	svcvs	0x0070665f
 4dc:	00745f73 	rsbseq	r5, r4, r3, ror pc
 4e0:	5f6e6f5f 	svcpl	0x006e6f5f
 4e4:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 4e8:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 4ec:	5f5f0073 	svcpl	0x005f0073
 4f0:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 328 <startup-0x1ffffcd8>
 4f4:	73006e69 	movwvc	r6, #3689	; 0xe69
 4f8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 4fc:	5f007075 	svcpl	0x00007075
 500:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 504:	616f6c00 	cmnvs	pc, r0, lsl #24
 508:	77654e64 	strbvc	r4, [r5, -r4, ror #28]!
 50c:	6576654c 	ldrbvs	r6, [r6, #-1356]!	; 0xfffffab4
 510:	6765536c 	strbvs	r5, [r5, -ip, ror #6]!
 514:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 518:	68676952 	stmdavs	r7!, {r1, r4, r6, r8, fp, sp, lr}^
 51c:	735f0074 	cmpvc	pc, #116	; 0x74
 520:	6f747274 	svcvs	0x00747274
 524:	616c5f6b 	cmnvs	ip, fp, ror #30
 528:	5f007473 	svcpl	0x00007473
 52c:	79746e66 	ldmdbvc	r4!, {r1, r2, r5, r6, r9, sl, fp, sp, lr}^
 530:	00736570 	rsbseq	r6, r3, r0, ror r5
 534:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
 538:	555f5f00 	ldrbpl	r5, [pc, #-3840]	; fffff640 <Pedro+0xdfffdb54>
 53c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 540:	65675f00 	strbvs	r5, [r7, #-3840]!	; 0xfffff100
 544:	74616474 	strbtvc	r6, [r1], #-1140	; 0xfffffb8c
 548:	72655f65 	rsbvc	r5, r5, #404	; 0x194
 54c:	675f0072 			; <UNDEFINED> instruction: 0x675f0072
 550:	61626f6c 	cmnvs	r2, ip, ror #30
 554:	6d695f6c 	stclvs	15, cr5, [r9, #-432]!	; 0xfffffe50
 558:	65727570 	ldrbvs	r7, [r2, #-1392]!	; 0xfffffa90
 55c:	7274705f 	rsbsvc	r7, r4, #95	; 0x5f
 560:	6e755f00 	cdpvs	15, 7, cr5, cr5, cr0, {0}
 564:	64657375 	strbtvs	r7, [r5], #-885	; 0xfffffc8b
 568:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 56c:	775f0064 	ldrbvc	r0, [pc, -r4, rrx]
 570:	5f007364 	svcpl	0x00007364
 574:	5f6d745f 	svcpl	0x006d745f
 578:	79616477 	stmdbvc	r1!, {r0, r1, r2, r4, r5, r6, sl, sp, lr}^
 57c:	6c675f00 	stclvs	15, cr5, [r7], #-0
 580:	5f006575 	svcpl	0x00006575
 584:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 588:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 58c:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 590:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 594:	735f0066 	cmpvc	pc, #102	; 0x66
 598:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 59c:	00636e75 	rsbeq	r6, r3, r5, ror lr
 5a0:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
 5a4:	755f0066 	ldrbvc	r0, [pc, #-102]	; 546 <startup-0x1ffffaba>
 5a8:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 5ac:	5f5f0064 	svcpl	0x005f0064
 5b0:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 5b4:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 5b8:	6f6c5f00 	svcvs	0x006c5f00
 5bc:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 5c0:	5f656d69 	svcpl	0x00656d69
 5c4:	00667562 	rsbeq	r7, r6, r2, ror #10
 5c8:	6f6c635f 	svcvs	0x006c635f
 5cc:	6c006573 	cfstr32vs	mvfx6, [r0], {115}	; 0x73
 5d0:	5064616f 	rsbpl	r6, r4, pc, ror #2
 5d4:	65707065 	ldrbvs	r7, [r0, #-101]!	; 0xffffff9b
 5d8:	00744172 	rsbseq	r4, r4, r2, ror r1
 5dc:	3834725f 	ldmdacc	r4!, {r0, r1, r2, r3, r4, r6, r9, ip, sp, lr}
 5e0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 5e4:	7473004f 	ldrbtvc	r0, [r3], #-79	; 0xffffffb1
 5e8:	00747261 	rsbseq	r7, r4, r1, ror #4
 5ec:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
 5f0:	5f63776f 	svcpl	0x0063776f
 5f4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 5f8:	705f0065 	subsvc	r0, pc, r5, rrx
 5fc:	6d007335 	stcvs	3, cr7, [r0, #-212]	; 0xffffff2c
 600:	006e6961 	rsbeq	r6, lr, r1, ror #18
 604:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 608:	61646d5f 	cmnvs	r4, pc, asr sp
 60c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 610:	5f79616c 	svcpl	0x0079616c
 614:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 618:	65640073 	strbvs	r0, [r4, #-115]!	; 0xffffff8d
 61c:	6d79616c 	ldfvse	f6, [r9, #-432]!	; 0xfffffe50
 620:	6f726369 	svcvs	0x00726369
 624:	3a5a0073 	bcc	16807f8 <startup-0x1e97f808>
 628:	504f4d2f 	subpl	r4, pc, pc, lsr #26
 62c:	632d632f 			; <UNDEFINED> instruction: 0x632d632f
 630:	2f65646f 	svccs	0x0065646f
 634:	2f706f6d 	svccs	0x00706f6d
 638:	65707553 	ldrbvs	r7, [r0, #-1363]!	; 0xfffffaad
 63c:	64655072 	strbtvs	r5, [r5], #-114	; 0xffffff8e
 640:	642f6f72 	strtvs	r6, [pc], #-3954	; 648 <startup-0x1ffff9b8>
 644:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 648:	00632e73 	rsbeq	r2, r3, r3, ror lr
 64c:	616c6564 	cmnvs	ip, r4, ror #10
 650:	6c696d79 	stclvs	13, cr6, [r9], #-484	; 0xfffffe1c
 654:	0073696c 	rsbseq	r6, r3, ip, ror #18
 658:	616c6564 	cmnvs	ip, r4, ror #10
 65c:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 660:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 664:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 668:	736f7000 	cmnvc	pc, #0
 66c:	68630079 	stmdavs	r3!, {r0, r3, r4, r5, r6}^
 670:	4b6b6365 	blmi	1ad940c <startup-0x1e526bf4>
 674:	00737965 	rsbseq	r7, r3, r5, ror #18
 678:	72646570 	rsbvc	r6, r4, #112, 10	; 0x1c000000
 67c:	756a5f6f 	strbvc	r5, [sl, #-3951]!	; 0xfffff091
 680:	6f00706d 	svcvs	0x0000706d
 684:	63656a62 	cmnvs	r5, #401408	; 0x62000
 688:	73690074 	cmnvc	r9, #116	; 0x74
 68c:	706d754a 	rsbvc	r7, sp, sl, asr #10
 690:	00676e69 	rsbeq	r6, r7, r9, ror #28
 694:	4d2f3a5a 	vstmdbmi	pc!, {s6-s95}
 698:	632f504f 			; <UNDEFINED> instruction: 0x632f504f
 69c:	646f632d 	strbtvs	r6, [pc], #-813	; 6a4 <startup-0x1ffff95c>
 6a0:	6f6d2f65 	svcvs	0x006d2f65
 6a4:	75532f70 	ldrbvc	r2, [r3, #-3952]	; 0xfffff090
 6a8:	50726570 	rsbspl	r6, r2, r0, ror r5
 6ac:	6f726465 	svcvs	0x00726465
 6b0:	6465502f 	strbtvs	r5, [r5], #-47	; 0xffffffd1
 6b4:	632e6f72 			; <UNDEFINED> instruction: 0x632e6f72
 6b8:	63636100 	cmnvs	r3, #0, 2
 6bc:	63610078 	cmnvs	r1, #120	; 0x78
 6c0:	74007963 	strvc	r7, [r0], #-2403	; 0xfffff69d
 6c4:	616c6c69 	cmnvs	ip, r9, ror #24
 6c8:	69006767 	stmdbvs	r0, {r0, r1, r2, r5, r6, r8, r9, sl, sp, lr}
 6cc:	66654c73 			; <UNDEFINED> instruction: 0x66654c73
 6d0:	79654b74 	stmdbvc	r5!, {r2, r4, r5, r6, r8, r9, fp, lr}^
 6d4:	64697700 	strbtvs	r7, [r9], #-1792	; 0xfffff900
 6d8:	73006874 	movwvc	r6, #2164	; 0x874
 6dc:	74666968 	strbtvc	r6, [r6], #-2408	; 0xfffff698
 6e0:	6c657600 	stclvs	6, cr7, [r5], #-0
 6e4:	65760078 	ldrbvs	r0, [r6, #-120]!	; 0xffffff88
 6e8:	6100796c 	tstvs	r0, ip, ror #18
 6ec:	796c7070 	stmdbvc	ip!, {r4, r5, r6, ip, sp, lr}^
 6f0:	73796850 	cmnvc	r9, #80, 16	; 0x500000
 6f4:	00736369 	rsbseq	r6, r3, r9, ror #6
 6f8:	65747962 	ldrbvs	r7, [r4, #-2402]!	; 0xfffff69e
 6fc:	756f7400 	strbvc	r7, [pc, #-1024]!	; 304 <startup-0x1ffffcfc>
 700:	73656863 	cmnvc	r5, #6488064	; 0x630000
 704:	70706550 	rsbsvc	r6, r0, r0, asr r5
 708:	68007265 	stmdavs	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
 70c:	68676965 	stmdavs	r7!, {r0, r2, r5, r6, r8, fp, sp, lr}^
 710:	70730074 	rsbsvc	r0, r3, r4, ror r0
 714:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 718:	73696400 	cmnvc	r9, #0, 8
 71c:	636e6174 	cmnvs	lr, #116, 2
 720:	4f740065 	svcmi	0x00740065
 724:	61006a62 	tstvs	r0, r2, ror #20
 728:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 72c:	65700073 	ldrbvs	r0, [r0, #-115]!	; 0xffffff8d
 730:	5f6f7264 	svcpl	0x006f7264
 734:	6c697473 	cfstrdvs	mvd7, [r9], #-460	; 0xfffffe34
 738:	7264006c 	rsbvc	r0, r4, #108	; 0x6c
 73c:	69007761 	stmdbvs	r0, {r0, r5, r6, r8, r9, sl, ip, sp, lr}
 740:	4b705573 	blmi	1c15d14 <startup-0x1e3ea2ec>
 744:	67007965 	strvs	r7, [r0, -r5, ror #18]
 748:	69447465 	stmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
 74c:	6e617473 	mcrvs	4, 3, r7, cr1, cr3, {3}
 750:	50006563 	andpl	r6, r0, r3, ror #10
 754:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 758:	69005443 	stmdbvs	r0, {r0, r1, r6, sl, ip, lr}
 75c:	67695273 			; <UNDEFINED> instruction: 0x67695273
 760:	654b7468 	strbvs	r7, [fp, #-1128]	; 0xfffffb98
 764:	6f6d0079 	svcvs	0x006d0079
 768:	70006576 	andvc	r6, r0, r6, ror r5
 76c:	6f726465 	svcvs	0x00726465
 770:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
 774:	7000316b 	andvc	r3, r0, fp, ror #2
 778:	6f726465 	svcvs	0x00726465
 77c:	6c61775f 	stclvs	7, cr7, [r1], #-380	; 0xfffffe84
 780:	7000326b 	andvc	r3, r0, fp, ror #4
 784:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 788:	69687300 	stmdbvs	r8!, {r8, r9, ip, sp, lr}^
 78c:	654c7466 	strbvs	r7, [ip, #-1126]	; 0xfffffb9a
 790:	67007466 	strvs	r7, [r0, -r6, ror #8]
 794:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 798:	645f6369 	ldrbvs	r6, [pc], #-873	; 7a0 <startup-0x1ffff860>
 79c:	5f776172 	svcpl	0x00776172
 7a0:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 7a4:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 7a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 7ac:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 7b0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 7b4:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 640 <startup-0x1ffff9c0>
 7b8:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 7bc:	61726700 	cmnvs	r2, r0, lsl #14
 7c0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 7c4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 7c8:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 7cc:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 7d0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 7d4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 7d8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 7dc:	67006461 	strvs	r6, [r0, -r1, ror #8]
 7e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 7e4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 7e8:	5f646165 	svcpl	0x00646165
 7ec:	61746164 	cmnvs	r4, r4, ror #2
 7f0:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff8f8 <Pedro+0xdfffde0c>
 7f4:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 7f8:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 7fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 800:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 804:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 808:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 80c:	72670061 	rsbvc	r0, r7, #97	; 0x61
 810:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 814:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 818:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 81c:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 820:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 824:	61726700 	cmnvs	r2, r0, lsl #14
 828:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 82c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 830:	62006574 	andvs	r6, r0, #116, 10	; 0x1d000000
 834:	54657479 	strbtpl	r7, [r5], #-1145	; 0xfffffb87
 838:	7263536f 	rsbvc	r5, r3, #-1140850687	; 0xbc000001
 83c:	426e6565 	rsbmi	r6, lr, #423624704	; 0x19400000
 840:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 844:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
 848:	52746669 	rsbspl	r6, r4, #110100480	; 0x6900000
 84c:	74686769 	strbtvc	r6, [r8], #-1897	; 0xfffff897
 850:	61726700 	cmnvs	r2, r0, lsl #14
 854:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 858:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 85c:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 860:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 864:	72670074 	rsbvc	r0, r7, #116	; 0x74
 868:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 86c:	61775f63 	cmnvs	r7, r3, ror #30
 870:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 874:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 878:	73616d00 	cmnvc	r1, #0, 26
 87c:	6573006b 	ldrbvs	r0, [r3, #-107]!	; 0xffffff95
 880:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 884:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 888:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 6c0 <startup-0x1ffff940>
 88c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 890:	70617267 	rsbvc	r7, r1, r7, ror #4
 894:	5f636968 	svcpl	0x00636968
 898:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 89c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8a0:	5a00657a 	bpl	19e90 <startup-0x1ffe6170>
 8a4:	4f4d2f3a 	svcmi	0x004d2f3a
 8a8:	2d632f50 	stclcs	15, cr2, [r3, #-320]!	; 0xfffffec0
 8ac:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 8b0:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
 8b4:	7075532f 	rsbsvc	r5, r5, pc, lsr #6
 8b8:	65507265 	ldrbvs	r7, [r0, #-613]	; 0xfffffd9b
 8bc:	2f6f7264 	svccs	0x006f7264
 8c0:	4164634c 	cmnmi	r4, ip, asr #6
 8c4:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 8c8:	6200632e 	andvs	r6, r0, #-1207959552	; 0xb8000000
 8cc:	54657479 	strbtpl	r7, [r5], #-1145	; 0xfffffb87
 8d0:	6675426f 	ldrbtvs	r4, [r5], -pc, ror #4
 8d4:	00726566 	rsbseq	r6, r2, r6, ror #10
 8d8:	61656c63 	cmnvs	r5, r3, ror #24
 8dc:	61625f72 	smcvs	9714	; 0x25f2
 8e0:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
 8e4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
 8e8:	2f3a5a00 	svccs	0x003a5a00
 8ec:	2f504f4d 	svccs	0x00504f4d
 8f0:	6f632d63 	svcvs	0x00632d63
 8f4:	6d2f6564 	cfstr32vs	mvfx6, [pc, #-400]!	; 76c <startup-0x1ffff894>
 8f8:	532f706f 			; <UNDEFINED> instruction: 0x532f706f
 8fc:	72657075 	rsbvc	r7, r5, #117	; 0x75
 900:	72646550 	rsbvc	r6, r4, #80, 10	; 0x14000000
 904:	656b2f6f 	strbvs	r2, [fp, #-3951]!	; 0xfffff091
 908:	6e754679 	mrcvs	6, 3, r4, cr5, cr9, {3}
 90c:	632e7363 			; <UNDEFINED> instruction: 0x632e7363
 910:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 914:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
 918:	6b006c6f 	blvs	1badc <startup-0x1ffe4524>
 91c:	63416462 	movtvs	r6, #5218	; 0x1462
 920:	61766974 	cmnvs	r6, r4, ror r9
 924:	Address 0x00000924 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Pedro+0xdfffd822>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000032 	andeq	r0, r0, r2, lsr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000042 	andcs	r0, r0, r2, asr #32
  3c:	00000076 	andeq	r0, r0, r6, ror r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000000c 	andeq	r0, r0, ip
  54:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  58:	7c020001 	stcvc	0, cr0, [r2], {1}
  5c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000050 	andeq	r0, r0, r0, asr r0
  68:	20000000 	andcs	r0, r0, r0
  6c:	0000000c 	andeq	r0, r0, ip
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	200000b8 	strhcs	r0, [r0], -r8
  7c:	00000060 	andeq	r0, r0, r0, rrx
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	00000018 	andeq	r0, r0, r8, lsl r0
  90:	00000050 	andeq	r0, r0, r0, asr r0
  94:	20000118 	andcs	r0, r0, r8, lsl r1
  98:	0000001a 	andeq	r0, r0, sl, lsl r0
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a8:	00000018 	andeq	r0, r0, r8, lsl r0
  ac:	00000050 	andeq	r0, r0, r0, asr r0
  b0:	20000132 	andcs	r0, r0, r2, lsr r1
  b4:	0000004e 	andeq	r0, r0, lr, asr #32
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  c4:	00000018 	andeq	r0, r0, r8, lsl r0
  c8:	00000050 	andeq	r0, r0, r0, asr r0
  cc:	20000180 	andcs	r0, r0, r0, lsl #3
  d0:	00000010 	andeq	r0, r0, r0, lsl r0
  d4:	40080e41 	andmi	r0, r8, r1, asr #28
  d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  dc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000050 	andeq	r0, r0, r0, asr r0
  e8:	20000190 	mulcs	r0, r0, r1
  ec:	00000010 	andeq	r0, r0, r0, lsl r0
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  fc:	00000020 	andeq	r0, r0, r0, lsr #32
 100:	00000050 	andeq	r0, r0, r0, asr r0
 104:	200001a0 	andcs	r0, r0, r0, lsr #3
 108:	00000070 	andeq	r0, r0, r0, ror r0
 10c:	400c0e41 	andmi	r0, ip, r1, asr #28
 110:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 114:	018e4002 	orreq	r4, lr, r2
 118:	41400e41 	cmpmi	r0, r1, asr #28
 11c:	0000070d 	andeq	r0, r0, sp, lsl #14
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000050 	andeq	r0, r0, r0, asr r0
 128:	20000210 	andcs	r0, r0, r0, lsl r2
 12c:	0000004c 	andeq	r0, r0, ip, asr #32
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	100e4101 	andne	r4, lr, r1, lsl #2
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000050 	andeq	r0, r0, r0, asr r0
 148:	2000025c 	andcs	r0, r0, ip, asr r2
 14c:	00000064 	andeq	r0, r0, r4, rrx
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	680e4101 	stmdavs	lr, {r0, r8, lr}
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000050 	andeq	r0, r0, r0, asr r0
 168:	200002c0 	andcs	r0, r0, r0, asr #5
 16c:	00000054 	andeq	r0, r0, r4, asr r0
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	180e4101 	stmdane	lr, {r0, r8, lr}
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	00000018 	andeq	r0, r0, r8, lsl r0
 184:	00000050 	andeq	r0, r0, r0, asr r0
 188:	20000314 	andcs	r0, r0, r4, lsl r3
 18c:	0000000a 	andeq	r0, r0, sl
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000050 	andeq	r0, r0, r0, asr r0
 1a4:	2000031e 	andcs	r0, r0, lr, lsl r3
 1a8:	0000000e 	andeq	r0, r0, lr
 1ac:	40080e41 	andmi	r0, r8, r1, asr #28
 1b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1b8:	0000000c 	andeq	r0, r0, ip
 1bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1c0:	7c020001 	stcvc	0, cr0, [r2], {1}
 1c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1d0:	2000032c 	andcs	r0, r0, ip, lsr #6
 1d4:	00000044 	andeq	r0, r0, r4, asr #32
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1e4:	00000018 	andeq	r0, r0, r8, lsl r0
 1e8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 1ec:	20000370 	andcs	r0, r0, r0, ror r3
 1f0:	00000044 	andeq	r0, r0, r4, asr #32
 1f4:	40080e41 	andmi	r0, r8, r1, asr #28
 1f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1fc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 200:	0000001c 	andeq	r0, r0, ip, lsl r0
 204:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 208:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 20c:	0000002a 	andeq	r0, r0, sl, lsr #32
 210:	40080e41 	andmi	r0, r8, r1, asr #28
 214:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 218:	180e4101 	stmdane	lr, {r0, r8, lr}
 21c:	00070d41 	andeq	r0, r7, r1, asr #26
 220:	0000001c 	andeq	r0, r0, ip, lsl r0
 224:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
 228:	200003de 	ldrdcs	r0, [r0], -lr
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	40080e41 	andmi	r0, r8, r1, asr #28
 234:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 238:	100e4101 	andne	r4, lr, r1, lsl #2
 23c:	00070d41 	andeq	r0, r7, r1, asr #26
 240:	0000000c 	andeq	r0, r0, ip
 244:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 248:	7c020001 	stcvc	0, cr0, [r2], {1}
 24c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 250:	00000018 	andeq	r0, r0, r8, lsl r0
 254:	00000240 	andeq	r0, r0, r0, asr #4
 258:	200003f8 	strdcs	r0, [r0], -r8
 25c:	0000007c 	andeq	r0, r0, ip, ror r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 26c:	00000018 	andeq	r0, r0, r8, lsl r0
 270:	00000240 	andeq	r0, r0, r0, asr #4
 274:	20000474 	andcs	r0, r0, r4, ror r4
 278:	000000c0 	andeq	r0, r0, r0, asr #1
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 288:	00000018 	andeq	r0, r0, r8, lsl r0
 28c:	00000240 	andeq	r0, r0, r0, asr #4
 290:	20000534 	andcs	r0, r0, r4, lsr r5
 294:	00000038 	andeq	r0, r0, r8, lsr r0
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	00000240 	andeq	r0, r0, r0, asr #4
 2ac:	2000056c 	andcs	r0, r0, ip, ror #10
 2b0:	00000018 	andeq	r0, r0, r8, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000240 	andeq	r0, r0, r0, asr #4
 2c8:	20000584 	andcs	r0, r0, r4, lsl #11
 2cc:	00000224 	andeq	r0, r0, r4, lsr #4
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	300e4101 	andcc	r4, lr, r1, lsl #2
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	00000018 	andeq	r0, r0, r8, lsl r0
 2e4:	00000240 	andeq	r0, r0, r0, asr #4
 2e8:	200007a8 	andcs	r0, r0, r8, lsr #15
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2fc:	00000018 	andeq	r0, r0, r8, lsl r0
 300:	00000240 	andeq	r0, r0, r0, asr #4
 304:	200007b4 			; <UNDEFINED> instruction: 0x200007b4
 308:	00000014 	andeq	r0, r0, r4, lsl r0
 30c:	40080e41 	andmi	r0, r8, r1, asr #28
 310:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 314:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 318:	0000000c 	andeq	r0, r0, ip
 31c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 320:	7c020001 	stcvc	0, cr0, [r2], {1}
 324:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 328:	0000001c 	andeq	r0, r0, ip, lsl r0
 32c:	00000318 	andeq	r0, r0, r8, lsl r3
 330:	200007c8 	andcs	r0, r0, r8, asr #15
 334:	00000044 	andeq	r0, r0, r4, asr #32
 338:	40080e41 	andmi	r0, r8, r1, asr #28
 33c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 340:	180e4101 	stmdane	lr, {r0, r8, lr}
 344:	00070d41 	andeq	r0, r7, r1, asr #26
 348:	0000001c 	andeq	r0, r0, ip, lsl r0
 34c:	00000318 	andeq	r0, r0, r8, lsl r3
 350:	2000080c 	andcs	r0, r0, ip, lsl #16
 354:	00000050 	andeq	r0, r0, r0, asr r0
 358:	40080e41 	andmi	r0, r8, r1, asr #28
 35c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 360:	180e4101 	stmdane	lr, {r0, r8, lr}
 364:	00070d41 	andeq	r0, r7, r1, asr #26
 368:	0000001c 	andeq	r0, r0, ip, lsl r0
 36c:	00000318 	andeq	r0, r0, r8, lsl r3
 370:	2000085c 	andcs	r0, r0, ip, asr r8
 374:	0000005a 	andeq	r0, r0, sl, asr r0
 378:	40080e41 	andmi	r0, r8, r1, asr #28
 37c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 380:	100e4101 	andne	r4, lr, r1, lsl #2
 384:	00070d41 	andeq	r0, r7, r1, asr #26
 388:	00000018 	andeq	r0, r0, r8, lsl r0
 38c:	00000318 	andeq	r0, r0, r8, lsl r3
 390:	200008b6 			; <UNDEFINED> instruction: 0x200008b6
 394:	00000064 	andeq	r0, r0, r4, rrx
 398:	40080e41 	andmi	r0, r8, r1, asr #28
 39c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 3a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a8:	00000318 	andeq	r0, r0, r8, lsl r3
 3ac:	2000091a 	andcs	r0, r0, sl, lsl r9
 3b0:	0000006a 	andeq	r0, r0, sl, rrx
 3b4:	40080e41 	andmi	r0, r8, r1, asr #28
 3b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3bc:	100e4101 	andne	r4, lr, r1, lsl #2
 3c0:	00070d41 	andeq	r0, r7, r1, asr #26
 3c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c8:	00000318 	andeq	r0, r0, r8, lsl r3
 3cc:	20000984 	andcs	r0, r0, r4, lsl #19
 3d0:	00000090 	muleq	r0, r0, r0
 3d4:	40080e41 	andmi	r0, r8, r1, asr #28
 3d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 3e0:	00070d41 	andeq	r0, r7, r1, asr #26
 3e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e8:	00000318 	andeq	r0, r0, r8, lsl r3
 3ec:	20000a14 	andcs	r0, r0, r4, lsl sl
 3f0:	0000002a 	andeq	r0, r0, sl, lsr #32
 3f4:	40080e41 	andmi	r0, r8, r1, asr #28
 3f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3fc:	100e4101 	andne	r4, lr, r1, lsl #2
 400:	00070d41 	andeq	r0, r7, r1, asr #26
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	00000318 	andeq	r0, r0, r8, lsl r3
 40c:	20000a3e 	andcs	r0, r0, lr, lsr sl
 410:	00000076 	andeq	r0, r0, r6, ror r0
 414:	40080e41 	andmi	r0, r8, r1, asr #28
 418:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 41c:	100e4101 	andne	r4, lr, r1, lsl #2
 420:	00070d41 	andeq	r0, r7, r1, asr #26
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	00000318 	andeq	r0, r0, r8, lsl r3
 42c:	20000ab4 			; <UNDEFINED> instruction: 0x20000ab4
 430:	00000040 	andeq	r0, r0, r0, asr #32
 434:	40080e41 	andmi	r0, r8, r1, asr #28
 438:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 43c:	100e4101 	andne	r4, lr, r1, lsl #2
 440:	00070d41 	andeq	r0, r7, r1, asr #26
 444:	0000001c 	andeq	r0, r0, ip, lsl r0
 448:	00000318 	andeq	r0, r0, r8, lsl r3
 44c:	20000af4 	strdcs	r0, [r0], -r4
 450:	00000046 	andeq	r0, r0, r6, asr #32
 454:	40080e41 	andmi	r0, r8, r1, asr #28
 458:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 45c:	100e4101 	andne	r4, lr, r1, lsl #2
 460:	00070d41 	andeq	r0, r7, r1, asr #26
 464:	0000001c 	andeq	r0, r0, ip, lsl r0
 468:	00000318 	andeq	r0, r0, r8, lsl r3
 46c:	20000b3a 	andcs	r0, r0, sl, lsr fp
 470:	0000003e 	andeq	r0, r0, lr, lsr r0
 474:	40080e41 	andmi	r0, r8, r1, asr #28
 478:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 47c:	100e4101 	andne	r4, lr, r1, lsl #2
 480:	00070d41 	andeq	r0, r7, r1, asr #26
 484:	0000001c 	andeq	r0, r0, ip, lsl r0
 488:	00000318 	andeq	r0, r0, r8, lsl r3
 48c:	20000b78 	andcs	r0, r0, r8, ror fp
 490:	00000048 	andeq	r0, r0, r8, asr #32
 494:	40080e41 	andmi	r0, r8, r1, asr #28
 498:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 49c:	100e4101 	andne	r4, lr, r1, lsl #2
 4a0:	00070d41 	andeq	r0, r7, r1, asr #26
 4a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a8:	00000318 	andeq	r0, r0, r8, lsl r3
 4ac:	20000bc0 	andcs	r0, r0, r0, asr #23
 4b0:	000000b4 	strheq	r0, [r0], -r4
 4b4:	40080e41 	andmi	r0, r8, r1, asr #28
 4b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4bc:	200e4101 	andcs	r4, lr, r1, lsl #2
 4c0:	00070d41 	andeq	r0, r7, r1, asr #26
 4c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c8:	00000318 	andeq	r0, r0, r8, lsl r3
 4cc:	20000c74 	andcs	r0, r0, r4, ror ip
 4d0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4d4:	40080e41 	andmi	r0, r8, r1, asr #28
 4d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4dc:	180e4101 	stmdane	lr, {r0, r8, lr}
 4e0:	00070d41 	andeq	r0, r7, r1, asr #26
 4e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e8:	00000318 	andeq	r0, r0, r8, lsl r3
 4ec:	20000ca0 	andcs	r0, r0, r0, lsr #25
 4f0:	00000030 	andeq	r0, r0, r0, lsr r0
 4f4:	40080e41 	andmi	r0, r8, r1, asr #28
 4f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4fc:	180e4101 	stmdane	lr, {r0, r8, lr}
 500:	00070d41 	andeq	r0, r7, r1, asr #26
 504:	00000020 	andeq	r0, r0, r0, lsr #32
 508:	00000318 	andeq	r0, r0, r8, lsl r3
 50c:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 510:	000000e0 	andeq	r0, r0, r0, ror #1
 514:	400c0e41 	andmi	r0, ip, r1, asr #28
 518:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 51c:	018e4002 	orreq	r4, lr, r2
 520:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
 524:	0000070d 	andeq	r0, r0, sp, lsl #14
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	00000318 	andeq	r0, r0, r8, lsl r3
 530:	20000db0 			; <UNDEFINED> instruction: 0x20000db0
 534:	00000074 	andeq	r0, r0, r4, ror r0
 538:	40080e41 	andmi	r0, r8, r1, asr #28
 53c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 540:	180e4101 	stmdane	lr, {r0, r8, lr}
 544:	00070d41 	andeq	r0, r7, r1, asr #26
 548:	0000001c 	andeq	r0, r0, ip, lsl r0
 54c:	00000318 	andeq	r0, r0, r8, lsl r3
 550:	20000e24 	andcs	r0, r0, r4, lsr #28
 554:	00000078 	andeq	r0, r0, r8, ror r0
 558:	40080e41 	andmi	r0, r8, r1, asr #28
 55c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 560:	180e4101 	stmdane	lr, {r0, r8, lr}
 564:	00070d41 	andeq	r0, r7, r1, asr #26
 568:	0000000c 	andeq	r0, r0, ip
 56c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 570:	7c020001 	stcvc	0, cr0, [r2], {1}
 574:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 578:	0000001c 	andeq	r0, r0, ip, lsl r0
 57c:	00000568 	andeq	r0, r0, r8, ror #10
 580:	20000e9c 	mulcs	r0, ip, lr
 584:	00000054 	andeq	r0, r0, r4, asr r0
 588:	40080e41 	andmi	r0, r8, r1, asr #28
 58c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 590:	100e4101 	andne	r4, lr, r1, lsl #2
 594:	00070d41 	andeq	r0, r7, r1, asr #26
 598:	00000018 	andeq	r0, r0, r8, lsl r0
 59c:	00000568 	andeq	r0, r0, r8, ror #10
 5a0:	20000ef0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5a4:	00000058 	andeq	r0, r0, r8, asr r0
 5a8:	40080e41 	andmi	r0, r8, r1, asr #28
 5ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5b0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5b4:	00000018 	andeq	r0, r0, r8, lsl r0
 5b8:	00000568 	andeq	r0, r0, r8, ror #10
 5bc:	20000f48 	andcs	r0, r0, r8, asr #30
 5c0:	0000002c 	andeq	r0, r0, ip, lsr #32
 5c4:	40080e41 	andmi	r0, r8, r1, asr #28
 5c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5d0:	00000018 	andeq	r0, r0, r8, lsl r0
 5d4:	00000568 	andeq	r0, r0, r8, ror #10
 5d8:	20000f74 	andcs	r0, r0, r4, ror pc
 5dc:	00000026 	andeq	r0, r0, r6, lsr #32
 5e0:	40080e41 	andmi	r0, r8, r1, asr #28
 5e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 5e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 5ec:	00000018 	andeq	r0, r0, r8, lsl r0
 5f0:	00000568 	andeq	r0, r0, r8, ror #10
 5f4:	20000f9a 	mulcs	r0, sl, pc	; <UNPREDICTABLE>
 5f8:	00000026 	andeq	r0, r0, r6, lsr #32
 5fc:	40080e41 	andmi	r0, r8, r1, asr #28
 600:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 604:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 608:	0000000c 	andeq	r0, r0, ip
 60c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 610:	7c010001 	stcvc	0, cr0, [r1], {1}
 614:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 618:	0000000c 	andeq	r0, r0, ip
 61c:	00000608 	andeq	r0, r0, r8, lsl #12
 620:	20000fc1 	andcs	r0, r0, r1, asr #31
 624:	000001cc 	andeq	r0, r0, ip, asr #3
 628:	0000000c 	andeq	r0, r0, ip
 62c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 630:	7c020001 	stcvc	0, cr0, [r2], {1}
 634:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 638:	00000014 	andeq	r0, r0, r4, lsl r0
 63c:	00000628 	andeq	r0, r0, r8, lsr #12
 640:	20001198 	mulcs	r0, r8, r1
 644:	00000012 	andeq	r0, r0, r2, lsl r0
 648:	84080e42 	strhi	r0, [r8], #-3650	; 0xfffff1be
 64c:	00018e02 	andeq	r8, r1, r2, lsl #28

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	200000b8 	strhcs	r0, [r0], -r8
   4:	2000032c 	andcs	r0, r0, ip, lsr #6
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
